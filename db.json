{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/icon/favicon.ico","path":"icon/favicon.ico","modified":0,"renderable":0},{"_id":"themes/cypress/source/css/cypress.scss","path":"css/cypress.scss","modified":0,"renderable":1},{"_id":"themes/cypress/source/js/mobile_nav.js","path":"js/mobile_nav.js","modified":0,"renderable":1},{"_id":"themes/cypress/source/js/lang_select.js","path":"js/lang_select.js","modified":0,"renderable":1},{"_id":"themes/cypress/source/js/scrollingelement.js","path":"js/scrollingelement.js","modified":0,"renderable":1},{"_id":"themes/cypress/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"089b88b81552f2b15fde3086c7518b4c9d316c1f","modified":1492536236000},{"_id":"source/api/index.md","hash":"e18ff536b80e57b72613c0b1d655bef0c5fa1151","modified":1492542919000},{"_id":"source/_data/languages.yml","hash":"74e55635eb66bb12833e42f0d1057b03beb65bcf","modified":1492524399000},{"_id":"source/_data/sidebar.yml","hash":"7c48eacd1da0eb0761f2ca0b4ec3e55b4e8c85e6","modified":1492632730000},{"_id":"source/_data/menu.yml","hash":"45c7aad555a97c740b36d5747e52da6df21e7c88","modified":1492626236000},{"_id":"source/docs/index.md","hash":"2f4907fbe41c2d91130d9012794c65ae1eb17500","modified":1492542946000},{"_id":"source/icon/favicon.ico","hash":"255f48036900e36c2e7c8cdd4ddd4e42da2bf8ca","modified":1492536191000},{"_id":"themes/cypress/languages/en.yml","hash":"4812e0d4069d636b8424785974e776c19038c14a","modified":1492632631000},{"_id":"themes/cypress/layout/layout.swig","hash":"ef28a5f5fc3258622e72ee3a836ff8cf415fb790","modified":1492448027000},{"_id":"themes/cypress/layout/page.swig","hash":"c0cb147f6b970acf4209cb77f2c9ebb84aeccd65","modified":1492632905000},{"_id":"themes/cypress/layout/index.swig","hash":"edc799cf0993bf2db9544c5c69f7f38b3a58006f","modified":1492535098000},{"_id":"themes/cypress/layout/post.swig","hash":"0478deebea5fd2dc6c2357edcac1cce4b105f712","modified":1492448027000},{"_id":"themes/cypress/layout/partial/after_footer.swig","hash":"67c579b0d6d6cac787fc40d680ee9c947868da8d","modified":1492627156000},{"_id":"themes/cypress/layout/partial/comment.swig","hash":"6f5494c97586584884ca8d93b9184d4eadbd8e86","modified":1492448027000},{"_id":"themes/cypress/layout/partial/footer.swig","hash":"c2651f176625f08478ed386f1e57c42f72fdea7a","modified":1492543753000},{"_id":"themes/cypress/layout/partial/google_analytics.swig","hash":"44869c53540e7dfc6dfde2550e3bb94e0693c8a6","modified":1492448027000},{"_id":"themes/cypress/layout/partial/head.swig","hash":"1c43aff7433887c8931ef703d678c9890a1c8d3c","modified":1492536476000},{"_id":"themes/cypress/layout/partial/header.swig","hash":"8e16d22e3795897bfb308598b6d4f58971964922","modified":1492535921000},{"_id":"themes/cypress/layout/partial/mobile_nav.swig","hash":"70c4929a40f3d32f55ea23ee306c1c6e74c3606e","modified":1492541217000},{"_id":"themes/cypress/layout/partial/plugin.swig","hash":"17b6c6945e4b1b41dbb10d851f85ca10100c28ea","modified":1492448027000},{"_id":"themes/cypress/layout/partial/post.swig","hash":"e75df7f513ec321d2a95b8f689470adbab955760","modified":1492448027000},{"_id":"themes/cypress/layout/partial/share.swig","hash":"104907100503e27e742cd32b77613f685772c9cb","modified":1492448027000},{"_id":"themes/cypress/layout/partial/sidebar.swig","hash":"52ddc48f6c53bf8bd155f94e1fd5b9dbcc19d0a5","modified":1492448027000},{"_id":"themes/cypress/layout/partial/theme.swig","hash":"5a279ad8f6c6b7c104cce495faa563d8b7a7c74a","modified":1492448027000},{"_id":"themes/cypress/source/css/_variables.scss","hash":"c5304ce271cfcb795015be9513893ef8f134f901","modified":1492543507000},{"_id":"themes/cypress/source/css/cypress.scss","hash":"358d5f29b3b492344ae2f83802c1786b861affde","modified":1492528045000},{"_id":"themes/cypress/source/js/mobile_nav.js","hash":"503a422e1322a458a311330e0345b3a49a8f8f05","modified":1492448027000},{"_id":"themes/cypress/source/js/lang_select.js","hash":"8bb0cd0b464357f8e2b794e64b89e4dbe2a836e3","modified":1492448027000},{"_id":"themes/cypress/source/js/scrollingelement.js","hash":"e9e8687099c29ab7680856b43bad188f0d357251","modified":1492448027000},{"_id":"themes/cypress/source/js/toc.js","hash":"aa7fac47916dc93a3b8542e2cc36187870b69246","modified":1492448027000},{"_id":"themes/cypress/source/css/_partial/header.scss","hash":"63911e0814b3fdd076de3cfd21849f6df553ea30","modified":1492543430000},{"_id":"themes/cypress/source/css/_partial/base.scss","hash":"593f34a88fe9da125c18c601aa837610305d771a","modified":1492543523000},{"_id":"themes/cypress/source/css/_partial/footer.scss","hash":"e5f2998380d0acd1b1ba3beb7daffc61c5172d1a","modified":1492543315000},{"_id":"themes/cypress/source/css/_partial/highlight.scss","hash":"aa57369786b053f443ee9ab9e454d9d38bcbd471","modified":1492534830000},{"_id":"themes/cypress/source/css/_partial/index.scss","hash":"bc254ece2655d2d21b4d1d8ffffbde83e74bb1aa","modified":1492543523000},{"_id":"themes/cypress/source/css/_partial/mobile_nav.scss","hash":"bcb37ed45d50df562e496f19db6487c6cfd2aaaa","modified":1492543314000},{"_id":"themes/cypress/source/css/_partial/page.scss","hash":"c9322447037ff7b81e7992d8dab6c2f6bf6bd40f","modified":1492630950000},{"_id":"themes/cypress/source/css/_partial/sidebar.scss","hash":"3a762a5b584af30207b0884aeeba11e2dfa69cc4","modified":1492543686000},{"_id":"source/docs/foo/bar.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492545793000},{"_id":"source/api/commands/server.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492624639000},{"_id":"source/api/cypress-api/commands.md","hash":"bd0e91b22f11fc399a7e433cbbc9a6d2e9dbf721","modified":1492627365000},{"_id":"source/api/cypress-api/cookies.md","hash":"338c8daeb8ce07a3f1a135cfcdb9a35667f4c014","modified":1492627365000},{"_id":"source/api/cypress-api/config.md","hash":"5929b0503299fe9baa83df53f75d201ecb8eebec","modified":1492627365000},{"_id":"source/api/cypress-api/dom.md","hash":"08efa34f952114e8785785c8c39f6c80e8ea1c39","modified":1492627365000},{"_id":"source/api/cypress-api/env.md","hash":"de7486f674f0c42dd49b08d6c27616910a44410e","modified":1492627365000},{"_id":"source/api/cypress-api/server.md","hash":"a7fc51f0b4ef88f255aa73f4ccb46783ea57ab2f","modified":1492627365000},{"_id":"source/api/commands/and.md","hash":"39520d3268e253d02b3235395e904b1700f17cdc","modified":1492627365000},{"_id":"source/api/commands/as.md","hash":"f0365718d30aba400650b642582979b08e44050c","modified":1492627365000},{"_id":"source/api/commands/blur.md","hash":"f740a95e433d8fd411f953462ee1267f230b92b0","modified":1492627365000},{"_id":"source/api/commands/check.md","hash":"d0101cde6cc3c358898635ffdbfad91630ebe180","modified":1492627365000},{"_id":"source/api/commands/children.md","hash":"19f58669018e5e92ec9a7c5e9518f009476c334d","modified":1492627365000},{"_id":"source/api/commands/clear.md","hash":"6bcfc8dcbd090306d119b09bc457d0683bb7531e","modified":1492627365000},{"_id":"source/api/commands/clearcookie.md","hash":"8a15bf1cb4dc6ab3d07210b3c86b0763db850a11","modified":1492627365000},{"_id":"source/api/commands/clearlocalstorage.md","hash":"66e3a3b33b78fd7c16f4c5a15ce77d4a8941edfa","modified":1492627365000},{"_id":"source/api/commands/clearcookies.md","hash":"4f195e9bd972f4b57c2cf56870b62acc2d07efe3","modified":1492627365000},{"_id":"source/api/commands/click.md","hash":"620f54b297226c4b8c96857f6e2c19d693216c70","modified":1492627365000},{"_id":"source/api/commands/clock.md","hash":"fbbcd82ba2d51f821f24c7544595be48f7d46903","modified":1492627365000},{"_id":"source/api/commands/closest.md","hash":"c141e5b516e1409c73bec526e7ca756690d4c23d","modified":1492627365000},{"_id":"source/api/commands/contains.md","hash":"510a6a1be23a3a592defa4856a1c3c43adbc0888","modified":1492627365000},{"_id":"source/api/commands/dblclick.md","hash":"4333b82aef8aa934c8e207502b5b0fd7d7b7627e","modified":1492627365000},{"_id":"source/api/commands/debug.md","hash":"06ad677e8d881904eb3f686240d6c71bd258a0a0","modified":1492627365000},{"_id":"source/api/commands/document.md","hash":"395e046a6cb6b1ff4d06bf8235661568bddd4b24","modified":1492627365000},{"_id":"source/api/commands/each.md","hash":"cb4b5a59f72e630a67feab784bf05a22129fa961","modified":1492627365000},{"_id":"source/api/commands/end.md","hash":"c9b9bfa0ded204d21f6c29e4e5cc8a9122ff2db2","modified":1492627365000},{"_id":"source/api/commands/eq.md","hash":"94bd7f48949a4d04180abdf287eeb70657b4a04a","modified":1492627365000},{"_id":"source/api/commands/exec.md","hash":"237bd77f0512b5978d8409a12fdc09c99de52c3b","modified":1492627365000},{"_id":"source/api/commands/filter.md","hash":"dd745502552d6d72db6cd29c11a1209d60b820f4","modified":1492627365000},{"_id":"source/api/commands/find.md","hash":"bd1c37fafc96709aca2896a0c029218352a4c48e","modified":1492627365000},{"_id":"source/api/commands/first.md","hash":"4a47f0f92840b4c10dd4916dc2d80ba51feec455","modified":1492627365000},{"_id":"source/api/commands/fixture.md","hash":"2f2721af06c772cd65f373575f9ac3f5c7642e80","modified":1492627365000},{"_id":"source/api/commands/focus.md","hash":"d827efa94c7018a574c86e5be63df67c4dd3f163","modified":1492627365000},{"_id":"source/api/commands/focused.md","hash":"ecee0ab5e1da88bb8724811a85eb9dc1bbd5ad8a","modified":1492627365000},{"_id":"source/api/commands/get.md","hash":"a39520dcf753d82a1d1ae31cde88c01f36f50b20","modified":1492627365000},{"_id":"source/api/commands/getcookies.md","hash":"408f31b3546b881d4119800be6104e1a68ec4650","modified":1492627365000},{"_id":"source/api/commands/getcookie.md","hash":"caa191e8db0dd85fd930fd829c9194d07ecf5459","modified":1492627365000},{"_id":"source/api/commands/go.md","hash":"17fc0e7a93dbe876a770817fe2834b9fa8e1c420","modified":1492627365000},{"_id":"source/api/commands/hash.md","hash":"ad29ac414160f323435ee28521730aa8a0eb9846","modified":1492627365000},{"_id":"source/api/commands/hover.md","hash":"922026f55b8aaef020fab1ec59b53d8bd3da4810","modified":1492627365000},{"_id":"source/api/commands/invoke.md","hash":"8f2566906130a8e627f5ca24faa49e3df2039326","modified":1492627365000},{"_id":"source/api/commands/its.md","hash":"41da002d3cb6972f8135eadda19b3942727a2e27","modified":1492627365000},{"_id":"source/api/commands/last.md","hash":"cd7365618dc24a178b1825f4a933566f0e9e8024","modified":1492627365000},{"_id":"source/api/commands/location.md","hash":"643d1b1d4d20f00575a0f5cf649d29d19d916846","modified":1492627365000},{"_id":"source/api/commands/log.md","hash":"7156cd4ea6b15700e36b42bb6797f23b50a32d9d","modified":1492627365000},{"_id":"source/api/commands/next.md","hash":"ee9a224bdc367103bf7481ec5f13eaa553264a8a","modified":1492627365000},{"_id":"source/api/commands/nextall.md","hash":"255dcf450a622c32143f112f516e1c1032fdaf5b","modified":1492627365000},{"_id":"source/api/commands/nextuntil.md","hash":"48d65f8d47b62bbd8329921d64f41261c833b929","modified":1492627365000},{"_id":"source/api/commands/not.md","hash":"ab2a52a26302e86ad9a302c9bb125b16756d03de","modified":1492627365000},{"_id":"source/api/commands/parent.md","hash":"6922decc105697ab492be60a0cc600a6f1eb6eee","modified":1492627365000},{"_id":"source/api/commands/parents.md","hash":"400f95a637042e8cf13a82ac16399c0a7bf27a6d","modified":1492627365000},{"_id":"source/api/commands/parentsuntil.md","hash":"c290425adadcacebcfedc904a4b5dc8ce8578f90","modified":1492627365000},{"_id":"source/api/commands/pause.md","hash":"a0f4cefdaa042e73ae18836ccc9b5827aed6e591","modified":1492627365000},{"_id":"source/api/commands/prev.md","hash":"f1bc6f8e1d97346210ddbad58c1cc5e6f12c0100","modified":1492627365000},{"_id":"source/api/commands/prevall.md","hash":"cdd4020260d0528518bde83b2aee77c2bb6aa061","modified":1492627365000},{"_id":"source/api/commands/prevuntil.md","hash":"37394928b999946e3a5a5b5c28f98bc6f2c3499c","modified":1492627365000},{"_id":"source/api/commands/readfile.md","hash":"963d978c764d233ac1a59ba8ef2097cdd2f0f89d","modified":1492627365000},{"_id":"source/api/commands/reload.md","hash":"82d56bc48b4453cacd3df7239a55ebd901c94150","modified":1492627365000},{"_id":"source/api/commands/request.md","hash":"117c572f8959eed314ebaf373db7683f5d7afea7","modified":1492627365000},{"_id":"source/api/commands/root.md","hash":"93817be89daffcfb8a303e5904cf2bb37166360b","modified":1492627365000},{"_id":"source/api/commands/route.md","hash":"470cc310bc29d452d05396ac6c6036cc268e3146","modified":1492627365000},{"_id":"source/api/commands/screenshot.md","hash":"ff10cf111a7fdab95fa7083e1d9e0db6eb6b357c","modified":1492627365000},{"_id":"source/api/commands/select.md","hash":"9ead32bbe3808b5bf2b777ed32a7f0c1285a8736","modified":1492627365000},{"_id":"source/api/commands/setcookie.md","hash":"cebd5d3cef3c04c31c07e0635a4a5d36c1732226","modified":1492627365000},{"_id":"source/api/commands/should.md","hash":"1d290114cfe82dd1e3802c4d6a3814525e852dec","modified":1492627365000},{"_id":"source/api/commands/siblings.md","hash":"2300b2ba4afbb89cbac2108d21d0b2469cd0aa0d","modified":1492627365000},{"_id":"source/api/commands/spread.md","hash":"e1d281f4e0f28a3b8e6ba82cdc07e12184b03737","modified":1492627365000},{"_id":"source/api/commands/spy.md","hash":"fda43add8512f1398bcd44c2226d2c04e8d691d5","modified":1492627365000},{"_id":"source/api/commands/stub.md","hash":"243d802d4cb341dbf62663e714f76c160dc6d078","modified":1492627365000},{"_id":"source/api/commands/submit.md","hash":"8999762a8c40c6239dc56bcd709cbe2b775bebd5","modified":1492627365000},{"_id":"source/api/commands/then.md","hash":"2afe03a626d92910faf883fde091a3186a51cda7","modified":1492627365000},{"_id":"source/api/commands/tick.md","hash":"02b6e45492e69819446072aeb053b151a98f4d96","modified":1492627365000},{"_id":"source/api/commands/title.md","hash":"5d824d641a73a271de62c578bf593e8e1d7da24b","modified":1492627365000},{"_id":"source/api/commands/uncheck.md","hash":"494f701869481bd95ccfac4b1fc4fba3c54c5947","modified":1492627365000},{"_id":"source/api/commands/type.md","hash":"f12ed1dac6d1b4069bb7b387e37be8498e83457d","modified":1492631516000},{"_id":"source/api/commands/url.md","hash":"e0ce630129cd099dfcecbbdcdf7a22c88d4b1273","modified":1492627365000},{"_id":"source/api/commands/viewport.md","hash":"3abfe1d93a424aa05b852040294d0946d3ea8f0a","modified":1492627365000},{"_id":"source/api/commands/visit.md","hash":"e9a1efcadb05558fb43f14a5a0b03c4556ec48ab","modified":1492627365000},{"_id":"source/api/commands/wait.md","hash":"33472ce6607e8ffc9257f296923be5e6f51cbe1b","modified":1492627365000},{"_id":"source/api/commands/window.md","hash":"a58bbcfdb7b10241aee37a7832c0379647f12633","modified":1492627365000},{"_id":"source/api/commands/within.md","hash":"048a4c5f2b35add1563c3bd56c6f7b5761a6d8bf","modified":1492627365000},{"_id":"source/api/commands/wrap.md","hash":"bf552d27b008ea9738fc1ded2332f1b401206410","modified":1492627365000},{"_id":"source/api/commands/writefile.md","hash":"419fb271c35eb7968f7681c1990ec054a7e8be63","modified":1492627365000},{"_id":"source/api/utilities/$.md","hash":"0d9c551aae55bfb10151a396b7bda9e55369fdc3","modified":1492627365000},{"_id":"source/api/utilities/-.md","hash":"1259f729f3f71e84ecff550b4b60836d95f528e2","modified":1492627365000},{"_id":"source/api/utilities/blob.md","hash":"fcf9ce77d9d96fad5da5ff9c370fe818422087eb","modified":1492627365000},{"_id":"source/api/utilities/minimatch.md","hash":"c5924c040aad092ecc90ed99e5f3a3a719b0103c","modified":1492627365000},{"_id":"source/api/utilities/moment.md","hash":"74f9d0981f65a42aab7cecdd3096e8b1b46f83ec","modified":1492627365000},{"_id":"source/api/utilities/promise.md","hash":"ac476606bc52adea956ab3e6f7f87d5bfa328e16","modified":1492627365000},{"_id":"source/api/welcome/api.md","hash":"884ec753040a9d0f2f0ec6d5a3870e9ea1f6170e","modified":1492627365000},{"_id":"source/guides/dashboard/features.md","hash":"31753e1189b5ac9e7cc95d2600647065b381a39d","modified":1492627365000},{"_id":"source/guides/dashboard/projects.md","hash":"68ce8160a53f8bafd7f5e2fae8fd0c41fc3a630e","modified":1492627365000},{"_id":"source/guides/dashboard/organizations.md","hash":"ce14c942bd34c73129837a710d2a93a2b88e0a4c","modified":1492627365000},{"_id":"source/guides/dashboard/recorded-runs.md","hash":"5dc93e34143727cba4642c331a7db3a13c42dfa5","modified":1492627365000},{"_id":"source/guides/getting-started/installing-and-running.md","hash":"91c9f85999dbb70b9426a3e56a154ac65c637606","modified":1492627365000},{"_id":"source/guides/getting-started/using-the-cypress-runner.md","hash":"b40e864b0c95874910bf478420cec2359b1b8506","modified":1492627365000},{"_id":"source/guides/getting-started/writing-your-first-test.md","hash":"c6fbf60514b5e18148dde213d992ec74e6c08eff","modified":1492627365000},{"_id":"source/guides/examples/list-of-example-apps.md","hash":"336566218b0806fb070334a2b589fa338eb783c3","modified":1492627365000},{"_id":"source/guides/guides/configuration.md","hash":"fe414f46e3323ed45efc484cb352010be03c17ad","modified":1492627365000},{"_id":"source/guides/guides/bundled-tools.md","hash":"ad4e66bc8afb1089fcae1265a80c2af9a535f50c","modified":1492627365000},{"_id":"source/guides/guides/continuous-integration.md","hash":"aa7abc5bf015e1ffc4f584cdbc9cc55784dbfcd2","modified":1492627365000},{"_id":"source/guides/guides/environment-variables.md","hash":"6799503160e1045a1c4a4d205313a2c3dec399d4","modified":1492627365000},{"_id":"source/guides/guides/creating-fixtures.md","hash":"e1898e4d99f616a753f92e6bb33cd78c56c88d4c","modified":1492627365000},{"_id":"source/guides/guides/finding-elements.md","hash":"bdabdcec77b6e2d66b6c521bf0d7ebbb8a3da4e9","modified":1492627365000},{"_id":"source/guides/guides/issuing-commands.md","hash":"d2b3d86094bfc0ce0dd789d56ad52f001c2a8e33","modified":1492627365000},{"_id":"source/guides/guides/network-requests.md","hash":"effffaea8b6417b595325449c2b3155ec28b3605","modified":1492627365000},{"_id":"source/guides/guides/making-assertions.md","hash":"17e0120106f59f603da97e8795c5597d13788b1e","modified":1492627365000},{"_id":"source/guides/guides/reporters.md","hash":"cfebd780b00a1ec58a6a70db422889ec79e5977a","modified":1492627365000},{"_id":"source/guides/guides/screenshots-and-videos.md","hash":"1b270cb5c4f5f3f4a7d76b4243b85331ebe610ec","modified":1492627365000},{"_id":"source/guides/guides/stubs-spies-and-clocks.md","hash":"3fc2e0349a7ad87583bdd41411ecf13a1408787b","modified":1492627365000},{"_id":"source/guides/guides/using-aliases.md","hash":"8ad4a2a58fab2a6ee04d90ffa4e4b1a2e43c6d8f","modified":1492627365000},{"_id":"source/guides/references/anti-patterns.md","hash":"f5b9db8de2cf2c9f5203eb23484ef111984c104c","modified":1492627365000},{"_id":"source/guides/references/browser-management.md","hash":"1fdcd1d77a92db8d1e9545e21cc02e35ef7ae2c3","modified":1492627365000},{"_id":"source/guides/references/cli-tool.md","hash":"a76be503b200404a245afde5f95ae096ef3972fe","modified":1492627365000},{"_id":"source/guides/references/error-messages.md","hash":"365dd4d3c92d67c90503316c7abfbb6f4a237444","modified":1492627365000},{"_id":"source/guides/references/known-issues.md","hash":"fb8afcb939759f7b3ba93094f159b37ac4a29b79","modified":1492627365000},{"_id":"source/guides/references/userland-extensions.md","hash":"3340da47d68a65a8b350b3932a5fc05aa993c016","modified":1492627365000},{"_id":"source/guides/references/web-security.md","hash":"f63c41a9c9e9fd1974ea9a5124fdc1fa17d58681","modified":1492627365000},{"_id":"source/guides/welcome/our-goals.md","hash":"24d39998193e588c18ada2f1f7eee6b379427cab","modified":1492627365000},{"_id":"source/guides/welcome/guides.md","hash":"9e11a448823dfb1c67402cbb53bd8bf4cc483356","modified":1492631444000},{"_id":"source/incomplete/4-Guides/Debugging Tools.md","hash":"664defeedfff54ee6904c05f2e3b186550d5cec3","modified":1492624639000},{"_id":"source/incomplete/4-Guides/Running Tests.md","hash":"6c4882c60bde586fc1b273c6ba72e400b8190e48","modified":1492624639000},{"_id":"source/incomplete/4-Guides/Websocket Handling.md","hash":"7f977be9aaa92f22b7e02ef53d454617d4857377","modified":1492624639000},{"_id":"source/incomplete/4-Guides/Writing Tests.md","hash":"6f724d475e27353ed526b7f2791f715d50f46679","modified":1492624639000},{"_id":"source/incomplete/5-References/Common Assertions.md","hash":"26d7ba0f548bc89715c6e2fd982584d287dcfd79","modified":1492624639000},{"_id":"source/incomplete/5-References/Deprecations.md","hash":"9f457a32b9e25317896237191fe5fc1bfa25e805","modified":1492624639000},{"_id":"source/incomplete/5-References/FAQ.md","hash":"3ca3d1a033efe0186df33d1649beff8a87726f17","modified":1492624639000},{"_id":"source/index.html","hash":"b14f96519adaa3bbe4bb0ed933d746b6974a0486","modified":1492628315000},{"_id":"source/guides/welcome/index.md","hash":"9e11a448823dfb1c67402cbb53bd8bf4cc483356","modified":1492627967000}],"Category":[],"Data":[{"_id":"languages","data":{"en":"English"}},{"_id":"sidebar","data":{"guides":{"welcome":{"intro":"guides.html","our-goals":"our-goals.html"},"getting-started":{"installing-and-running":"installing-and-running.html","writing-your-first-test":"writing-your-first-test.html","using-the-cypress-runner":"using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"list-of-example-apps.html","list-of-example-recipes":"list-of-example-recipes.html"},"dashboard":{"features":"features.html","projects":"projects.html","runs":"runs.html","organizations":"organizations.html"},"guides":{"configuration":"configuration.html","issuing-commands":"issuing-commands.html","finding-elements":"finding-elements.html","making-assertions":"making-assertions.html","network-requests":"network-requests.html","continuous-integration":"continuous-integration.html","environment-variables":"environment-variables.html","stubs-spies-and-clocks":"stubs-spies-and-clocks.html","using-aliases":"using-aliases.html","creating-fixtures":"creating-fixtures.html","screenshots-and-videos":"screenshots-and-videos.html","bundled-tools":"bundled-tools.html","reporters":"reporters.html"},"references":{"cli-tool":"cli-tool.html","error-messages":"error-messages.html","anti-patterns":"anti-patterns.html","known-issues":"known-issues.html","web-security":"web-security.html","browser-management":"browser-management.html","userland-extensions":"userland-extensions.html"}},"api":{"welcome":{"api":"index.html"},"commands":{"and":"commands/and.html","as":"as.html","blur":"blur.html","check":"check.html","children":"children.html","clear":"clear.html","clear-cookie":"clear-cookie.html","clear-cookies":"clear-cookies.html","clear-local-storage":"clear-local-storage.html","click":"click.html","clock":"clock.html","closest":"closest.html","contains":"contains.html","dblclick":"dblclick.html","debug":"debug.html","document":"document.html","each":"each.html","end":"end.html","eq":"eq.html","exec":"exec.html","filter":"filter.html","find":"find.html","first":"first.html","fixture":"fixture.html","focus":"focus.html","focused":"focused.html","get":"get.html","get-cookie":"get-cookie.html","get-cookies":"get-cookies.html","go":"go.html","hash":"hash.html","hover":"hover.html","invoke":"invoke.html","its":"its.html","last":"last.html","location":"location.html","log":"log.html","next":"next.html","next-all":"next-all.html","next-until":"next-until.html","not":"not.html","parent":"parent.html","parents":"parents.html","parents-until":"parents-until.html","read-file":"read-file.html","reload":"reload.html","request":"request.html","root":"root.html","route":"route.html","screenshot":"screenshot.html","select":"select.html","server":"server.html","set-cookie":"set-cookie.html","should":"should.html","siblings":"siblings.html","spread":"spread.html","spy":"spy.html","stub":"stub.html","submit":"submit.html","then":"then.html","tick":"tick.html","title":"title.html","type":"type.html","uncheck":"uncheck.html","url":"url.html","viewport":"viewport.html","visit":"visit.html","wait":"wait.html","window":"window.html","within":"within.html","wrap":"wrap.html","write-file":"write-file.html"},"utilities":{"-":"-.html","$":"$.html","minimatch":"minimatch.html","blob":"blob.html","promise":"promise.html"},"cypress-api":{"config":"config.html","env":"env.html","cypress-commands":"commands.html","cookies":"cookies.html","dom":"dom.html","cypress-server":"server.html"}}}},{"_id":"menu","data":{"guides":"/guides/","api":"/api/"}}],"Page":[{"title":"dashboard-features","_content":"\n# What is the Dashboard?\n\n![Dashboard Screenshot](https://cloud.githubusercontent.com/assets/1271364/22800284/d4dbe1d8-eed6-11e6-87ce-32474ea1000c.png)\n\n[The Dashboard](https://on.cypress.io/dashboard) is a Cypress service that gives you access to tests you've recorded - typically when running Cypress tests from your CI provider. The Dashboard provides you insight into what happened during your run.\n\n**The Dashboard allows you to:**\n\n- See the number of failed, pending and passing tests\n- Get the entire stack trace of failed tests\n- View screenshots taken when tests fail and when using [`cy.screenshot`](https://on.cypress.io/api/screenshot)\n- Watch a video of your entire test run or a clip at the point of test failure.\n- Manage who has access to your run data\n\nAdditionally we've integrated the dashboard into the Cypress [Desktop Application](https://on.cypress.io/guides/installing-and-running). This means you'll see the test runs in the Tunes tab from within every project.\n\n![Runs List](https://cloud.githubusercontent.com/assets/1271364/22800330/ff6c9474-eed6-11e6-9a32-8360d64b1071.png)\n\n***\n\n## Example Projects\n\nOnce you're logged into the [Dashboard](https://on.cypress.io/dashboard) you can view any [public project](https://on.cypress.io/what-is-project-access).\n\nHere are some of our own public projects you can look at:\n\n- [cypress-core-desktop-gui](https://dashboard.cypress.io/#/projects/fas5qd)\n- [cypress-example-recipes](https://dashboard.cypress.io/#/projects/6p53jw)\n- [cypress-example-kitchensink](https://dashboard.cypress.io/#/projects/4b7344)\n- [cypress-example-todomvc](https://dashboard.cypress.io/#/projects/245obj)\n- [cypress-example-piechopper](https://dashboard.cypress.io/#/projects/fuduzp)\n\n***\n\n# Frequently Asked Questions\n\n## How do I record my tests?\n\n1. First [setup your project to record](https://on.cypress.io/recording-project-runs).\n2. Then [record your runs](https://on.cypress.io/how-do-i-record-runs).\n\nAfter recording your tests, you will see them in the Dashboard and in the Desktop Application.\n\n***\n\n## How is this different than CI?\n\nCypress is **complimentary** to your CI provider, and plays a completely different role.\n\nIt doesn't replace nor change anything related to CI. You will simply run Cypress tests in your CI provider.\n\nThe difference is that your CI provider has no idea what is going on inside of the Cypress process. It's simply programmed to know whether or not a process failed - based on whether it had an exit code greater than `0`.\n\nOur dashboard provides you with the low level details of *what* happened during your run. Using both your CI provider + Cypress together gives the insight required to debug your test runs.\n\nWhen a run happens and a test fails - instead of going and inspecting your CI provider's `stdout` output, you can log into the [Dashboard](https://on.cypress.io/dashboard) and see all of the test run results. It should be instantly clear what the problem was.\n\n***\n\n## How much does this cost?\n\nEverything is free while we are in Beta.\n\nIn the future, we will charge per month for private projects.\n\nPublic projects will be free but will likely have a monthly usage cap on them.\n\nWe will offer similar pricing models of other Developer Tools you are familiar with using.\n\nPlans will likely start around the $99/month level.\n***\n\n## Can I host this myself?\n\nNo, although we are looking to build an on-premise version of the Dashboard for use in private clouds. If you're interested in our on-premise version, [let us know](mailto:hello@cypress.io)!\n\n***\n\n## Can I choose not to use it?\n\nOf course. The dashboard is a separate service from the Desktop Application and will always remain optional. We hope you'll find a tremendous amount of value out of it, but it is not coupled to being able to run your tests.\n\nYou can simply always run your tests in CI using `cypress run` without the `--record` flag which does not communicate with our external servers and will not record any test results.\n","source":"guides/dashboard/features.md","raw":"title: dashboard-features\n---\n\n# What is the Dashboard?\n\n![Dashboard Screenshot](https://cloud.githubusercontent.com/assets/1271364/22800284/d4dbe1d8-eed6-11e6-87ce-32474ea1000c.png)\n\n[The Dashboard](https://on.cypress.io/dashboard) is a Cypress service that gives you access to tests you've recorded - typically when running Cypress tests from your CI provider. The Dashboard provides you insight into what happened during your run.\n\n**The Dashboard allows you to:**\n\n- See the number of failed, pending and passing tests\n- Get the entire stack trace of failed tests\n- View screenshots taken when tests fail and when using [`cy.screenshot`](https://on.cypress.io/api/screenshot)\n- Watch a video of your entire test run or a clip at the point of test failure.\n- Manage who has access to your run data\n\nAdditionally we've integrated the dashboard into the Cypress [Desktop Application](https://on.cypress.io/guides/installing-and-running). This means you'll see the test runs in the Tunes tab from within every project.\n\n![Runs List](https://cloud.githubusercontent.com/assets/1271364/22800330/ff6c9474-eed6-11e6-9a32-8360d64b1071.png)\n\n***\n\n## Example Projects\n\nOnce you're logged into the [Dashboard](https://on.cypress.io/dashboard) you can view any [public project](https://on.cypress.io/what-is-project-access).\n\nHere are some of our own public projects you can look at:\n\n- [cypress-core-desktop-gui](https://dashboard.cypress.io/#/projects/fas5qd)\n- [cypress-example-recipes](https://dashboard.cypress.io/#/projects/6p53jw)\n- [cypress-example-kitchensink](https://dashboard.cypress.io/#/projects/4b7344)\n- [cypress-example-todomvc](https://dashboard.cypress.io/#/projects/245obj)\n- [cypress-example-piechopper](https://dashboard.cypress.io/#/projects/fuduzp)\n\n***\n\n# Frequently Asked Questions\n\n## How do I record my tests?\n\n1. First [setup your project to record](https://on.cypress.io/recording-project-runs).\n2. Then [record your runs](https://on.cypress.io/how-do-i-record-runs).\n\nAfter recording your tests, you will see them in the Dashboard and in the Desktop Application.\n\n***\n\n## How is this different than CI?\n\nCypress is **complimentary** to your CI provider, and plays a completely different role.\n\nIt doesn't replace nor change anything related to CI. You will simply run Cypress tests in your CI provider.\n\nThe difference is that your CI provider has no idea what is going on inside of the Cypress process. It's simply programmed to know whether or not a process failed - based on whether it had an exit code greater than `0`.\n\nOur dashboard provides you with the low level details of *what* happened during your run. Using both your CI provider + Cypress together gives the insight required to debug your test runs.\n\nWhen a run happens and a test fails - instead of going and inspecting your CI provider's `stdout` output, you can log into the [Dashboard](https://on.cypress.io/dashboard) and see all of the test run results. It should be instantly clear what the problem was.\n\n***\n\n## How much does this cost?\n\nEverything is free while we are in Beta.\n\nIn the future, we will charge per month for private projects.\n\nPublic projects will be free but will likely have a monthly usage cap on them.\n\nWe will offer similar pricing models of other Developer Tools you are familiar with using.\n\nPlans will likely start around the $99/month level.\n***\n\n## Can I host this myself?\n\nNo, although we are looking to build an on-premise version of the Dashboard for use in private clouds. If you're interested in our on-premise version, [let us know](mailto:hello@cypress.io)!\n\n***\n\n## Can I choose not to use it?\n\nOf course. The dashboard is a separate service from the Desktop Application and will always remain optional. We hope you'll find a tremendous amount of value out of it, but it is not coupled to being able to run your tests.\n\nYou can simply always run your tests in CI using `cypress run` without the `--record` flag which does not communicate with our external servers and will not record any test results.\n","date":"2017-04-19T18:46:47.000Z","updated":"2017-04-19T18:46:47.000Z","path":"guides/dashboard/features.html","comments":1,"layout":"page","_id":"cj1pby1kk002h68g8hlvfjtup","content":"<h1 id=\"What-is-the-Dashboard\"><a href=\"#What-is-the-Dashboard\" class=\"headerlink\" title=\"What is the Dashboard?\"></a>What is the Dashboard?</h1><p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22800284/d4dbe1d8-eed6-11e6-87ce-32474ea1000c.png\" alt=\"Dashboard Screenshot\"></p>\n<p><a href=\"https://on.cypress.io/dashboard\" target=\"_blank\" rel=\"external\">The Dashboard</a> is a Cypress service that gives you access to tests you’ve recorded - typically when running Cypress tests from your CI provider. The Dashboard provides you insight into what happened during your run.</p>\n<p><strong>The Dashboard allows you to:</strong></p>\n<ul>\n<li>See the number of failed, pending and passing tests</li>\n<li>Get the entire stack trace of failed tests</li>\n<li>View screenshots taken when tests fail and when using <a href=\"https://on.cypress.io/api/screenshot\" target=\"_blank\" rel=\"external\"><code>cy.screenshot</code></a></li>\n<li>Watch a video of your entire test run or a clip at the point of test failure.</li>\n<li>Manage who has access to your run data</li>\n</ul>\n<p>Additionally we’ve integrated the dashboard into the Cypress <a href=\"https://on.cypress.io/guides/installing-and-running\" target=\"_blank\" rel=\"external\">Desktop Application</a>. This means you’ll see the test runs in the Tunes tab from within every project.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22800330/ff6c9474-eed6-11e6-9a32-8360d64b1071.png\" alt=\"Runs List\"></p>\n<hr>\n<h2 id=\"Example-Projects\"><a href=\"#Example-Projects\" class=\"headerlink\" title=\"Example Projects\"></a>Example Projects</h2><p>Once you’re logged into the <a href=\"https://on.cypress.io/dashboard\" target=\"_blank\" rel=\"external\">Dashboard</a> you can view any <a href=\"https://on.cypress.io/what-is-project-access\" target=\"_blank\" rel=\"external\">public project</a>.</p>\n<p>Here are some of our own public projects you can look at:</p>\n<ul>\n<li><a href=\"https://dashboard.cypress.io/#/projects/fas5qd\" target=\"_blank\" rel=\"external\">cypress-core-desktop-gui</a></li>\n<li><a href=\"https://dashboard.cypress.io/#/projects/6p53jw\" target=\"_blank\" rel=\"external\">cypress-example-recipes</a></li>\n<li><a href=\"https://dashboard.cypress.io/#/projects/4b7344\" target=\"_blank\" rel=\"external\">cypress-example-kitchensink</a></li>\n<li><a href=\"https://dashboard.cypress.io/#/projects/245obj\" target=\"_blank\" rel=\"external\">cypress-example-todomvc</a></li>\n<li><a href=\"https://dashboard.cypress.io/#/projects/fuduzp\" target=\"_blank\" rel=\"external\">cypress-example-piechopper</a></li>\n</ul>\n<hr>\n<h1 id=\"Frequently-Asked-Questions\"><a href=\"#Frequently-Asked-Questions\" class=\"headerlink\" title=\"Frequently Asked Questions\"></a>Frequently Asked Questions</h1><h2 id=\"How-do-I-record-my-tests\"><a href=\"#How-do-I-record-my-tests\" class=\"headerlink\" title=\"How do I record my tests?\"></a>How do I record my tests?</h2><ol>\n<li>First <a href=\"https://on.cypress.io/recording-project-runs\" target=\"_blank\" rel=\"external\">setup your project to record</a>.</li>\n<li>Then <a href=\"https://on.cypress.io/how-do-i-record-runs\" target=\"_blank\" rel=\"external\">record your runs</a>.</li>\n</ol>\n<p>After recording your tests, you will see them in the Dashboard and in the Desktop Application.</p>\n<hr>\n<h2 id=\"How-is-this-different-than-CI\"><a href=\"#How-is-this-different-than-CI\" class=\"headerlink\" title=\"How is this different than CI?\"></a>How is this different than CI?</h2><p>Cypress is <strong>complimentary</strong> to your CI provider, and plays a completely different role.</p>\n<p>It doesn’t replace nor change anything related to CI. You will simply run Cypress tests in your CI provider.</p>\n<p>The difference is that your CI provider has no idea what is going on inside of the Cypress process. It’s simply programmed to know whether or not a process failed - based on whether it had an exit code greater than <code>0</code>.</p>\n<p>Our dashboard provides you with the low level details of <em>what</em> happened during your run. Using both your CI provider + Cypress together gives the insight required to debug your test runs.</p>\n<p>When a run happens and a test fails - instead of going and inspecting your CI provider’s <code>stdout</code> output, you can log into the <a href=\"https://on.cypress.io/dashboard\" target=\"_blank\" rel=\"external\">Dashboard</a> and see all of the test run results. It should be instantly clear what the problem was.</p>\n<hr>\n<h2 id=\"How-much-does-this-cost\"><a href=\"#How-much-does-this-cost\" class=\"headerlink\" title=\"How much does this cost?\"></a>How much does this cost?</h2><p>Everything is free while we are in Beta.</p>\n<p>In the future, we will charge per month for private projects.</p>\n<p>Public projects will be free but will likely have a monthly usage cap on them.</p>\n<p>We will offer similar pricing models of other Developer Tools you are familiar with using.</p>\n<p>Plans will likely start around the $99/month level.</p>\n<hr>\n<h2 id=\"Can-I-host-this-myself\"><a href=\"#Can-I-host-this-myself\" class=\"headerlink\" title=\"Can I host this myself?\"></a>Can I host this myself?</h2><p>No, although we are looking to build an on-premise version of the Dashboard for use in private clouds. If you’re interested in our on-premise version, <a href=\"mailto:hello@cypress.io\" target=\"_blank\" rel=\"external\">let us know</a>!</p>\n<hr>\n<h2 id=\"Can-I-choose-not-to-use-it\"><a href=\"#Can-I-choose-not-to-use-it\" class=\"headerlink\" title=\"Can I choose not to use it?\"></a>Can I choose not to use it?</h2><p>Of course. The dashboard is a separate service from the Desktop Application and will always remain optional. We hope you’ll find a tremendous amount of value out of it, but it is not coupled to being able to run your tests.</p>\n<p>You can simply always run your tests in CI using <code>cypress run</code> without the <code>--record</code> flag which does not communicate with our external servers and will not record any test results.</p>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<h1 id=\"What-is-the-Dashboard\"><a href=\"#What-is-the-Dashboard\" class=\"headerlink\" title=\"What is the Dashboard?\"></a>What is the Dashboard?</h1><p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22800284/d4dbe1d8-eed6-11e6-87ce-32474ea1000c.png\" alt=\"Dashboard Screenshot\"></p>\n<p><a href=\"https://on.cypress.io/dashboard\">The Dashboard</a> is a Cypress service that gives you access to tests you’ve recorded - typically when running Cypress tests from your CI provider. The Dashboard provides you insight into what happened during your run.</p>\n<p><strong>The Dashboard allows you to:</strong></p>\n<ul>\n<li>See the number of failed, pending and passing tests</li>\n<li>Get the entire stack trace of failed tests</li>\n<li>View screenshots taken when tests fail and when using <a href=\"https://on.cypress.io/api/screenshot\"><code>cy.screenshot</code></a></li>\n<li>Watch a video of your entire test run or a clip at the point of test failure.</li>\n<li>Manage who has access to your run data</li>\n</ul>\n<p>Additionally we’ve integrated the dashboard into the Cypress <a href=\"https://on.cypress.io/guides/installing-and-running\">Desktop Application</a>. This means you’ll see the test runs in the Tunes tab from within every project.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22800330/ff6c9474-eed6-11e6-9a32-8360d64b1071.png\" alt=\"Runs List\"></p>\n<hr>\n<h2 id=\"Example-Projects\"><a href=\"#Example-Projects\" class=\"headerlink\" title=\"Example Projects\"></a>Example Projects</h2><p>Once you’re logged into the <a href=\"https://on.cypress.io/dashboard\">Dashboard</a> you can view any <a href=\"https://on.cypress.io/what-is-project-access\">public project</a>.</p>\n<p>Here are some of our own public projects you can look at:</p>\n<ul>\n<li><a href=\"https://dashboard.cypress.io/#/projects/fas5qd\">cypress-core-desktop-gui</a></li>\n<li><a href=\"https://dashboard.cypress.io/#/projects/6p53jw\">cypress-example-recipes</a></li>\n<li><a href=\"https://dashboard.cypress.io/#/projects/4b7344\">cypress-example-kitchensink</a></li>\n<li><a href=\"https://dashboard.cypress.io/#/projects/245obj\">cypress-example-todomvc</a></li>\n<li><a href=\"https://dashboard.cypress.io/#/projects/fuduzp\">cypress-example-piechopper</a></li>\n</ul>\n<hr>\n<h1 id=\"Frequently-Asked-Questions\"><a href=\"#Frequently-Asked-Questions\" class=\"headerlink\" title=\"Frequently Asked Questions\"></a>Frequently Asked Questions</h1><h2 id=\"How-do-I-record-my-tests\"><a href=\"#How-do-I-record-my-tests\" class=\"headerlink\" title=\"How do I record my tests?\"></a>How do I record my tests?</h2><ol>\n<li>First <a href=\"https://on.cypress.io/recording-project-runs\">setup your project to record</a>.</li>\n<li>Then <a href=\"https://on.cypress.io/how-do-i-record-runs\">record your runs</a>.</li>\n</ol>\n<p>After recording your tests, you will see them in the Dashboard and in the Desktop Application.</p>\n<hr>\n<h2 id=\"How-is-this-different-than-CI\"><a href=\"#How-is-this-different-than-CI\" class=\"headerlink\" title=\"How is this different than CI?\"></a>How is this different than CI?</h2><p>Cypress is <strong>complimentary</strong> to your CI provider, and plays a completely different role.</p>\n<p>It doesn’t replace nor change anything related to CI. You will simply run Cypress tests in your CI provider.</p>\n<p>The difference is that your CI provider has no idea what is going on inside of the Cypress process. It’s simply programmed to know whether or not a process failed - based on whether it had an exit code greater than <code>0</code>.</p>\n<p>Our dashboard provides you with the low level details of <em>what</em> happened during your run. Using both your CI provider + Cypress together gives the insight required to debug your test runs.</p>\n<p>When a run happens and a test fails - instead of going and inspecting your CI provider’s <code>stdout</code> output, you can log into the <a href=\"https://on.cypress.io/dashboard\">Dashboard</a> and see all of the test run results. It should be instantly clear what the problem was.</p>\n<hr>\n<h2 id=\"How-much-does-this-cost\"><a href=\"#How-much-does-this-cost\" class=\"headerlink\" title=\"How much does this cost?\"></a>How much does this cost?</h2><p>Everything is free while we are in Beta.</p>\n<p>In the future, we will charge per month for private projects.</p>\n<p>Public projects will be free but will likely have a monthly usage cap on them.</p>\n<p>We will offer similar pricing models of other Developer Tools you are familiar with using.</p>\n<p>Plans will likely start around the $99/month level.</p>\n<hr>\n<h2 id=\"Can-I-host-this-myself\"><a href=\"#Can-I-host-this-myself\" class=\"headerlink\" title=\"Can I host this myself?\"></a>Can I host this myself?</h2><p>No, although we are looking to build an on-premise version of the Dashboard for use in private clouds. If you’re interested in our on-premise version, <a href=\"mailto:hello@cypress.io\">let us know</a>!</p>\n<hr>\n<h2 id=\"Can-I-choose-not-to-use-it\"><a href=\"#Can-I-choose-not-to-use-it\" class=\"headerlink\" title=\"Can I choose not to use it?\"></a>Can I choose not to use it?</h2><p>Of course. The dashboard is a separate service from the Desktop Application and will always remain optional. We hope you’ll find a tremendous amount of value out of it, but it is not coupled to being able to run your tests.</p>\n<p>You can simply always run your tests in CI using <code>cypress run</code> without the <code>--record</code> flag which does not communicate with our external servers and will not record any test results.</p>\n"},{"title":"organizations","_content":"\n# What are Organizations?\n\nOrganizations are used to group projects and to manage permissions for who can access those projects.\n\n![Organizations](https://cloud.githubusercontent.com/assets/1271364/22709686/a81ed568-ed48-11e6-8ebd-55c014682815.png)\n\nWith organizations you can:\n\n- Create projects\n- Invite users\n\nOnce out of beta, organizations will also handle billing.\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Cypress Organizations are meant to work similar to GitHub Organizations.\"\n}\n[/block]\n\n***\n\n## Personal Organization\n\nBy default, every user of Cypress is given a personal organization - named after you.\n\nYou cannot delete or edit the name of this organization.\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"All existing Cypress projects prior to version 0.19.0 were automatically added to your personal organization.\"\n}\n[/block]\n\n***\n\n# Creating an Organization\n\n![Add Organization dialog](https://cloud.githubusercontent.com/assets/1271364/22709492/f1d3e7e4-ed47-11e6-8f35-64fed633862b.png)\n\n***\n\n## Inviting Users\n\nYou can invite users to Cypress from our [Dashboard](https://on.cypress.io/dashboard). Invited users will see the projects and runs for your organization.\n\nEven though we are in a **private beta**, any user you invite will automatically be whitelisted to use Cypress. This means you can freely invite your team members without needing to talk to us!\n\n*To invite a user to an organization:*\n\n1. Click the :fa-cog: beside the Projects you want to give the user access to.\n2. Click 'Invite User'. Note: you must have the role of 'owner' or 'admin' to invite users.\n3. Fill in the email and select the role for the user and click 'Invite User' Note: only 'owner's can give other user's 'owner' access.\n4. The user will recieve an invite email with a link to accept the invitation.\n\n![Invite User dialog](https://cloud.githubusercontent.com/assets/1271364/22709421/baf79a54-ed47-11e6-9796-79ba2008d2d2.png)\n\n***\n\n## User Roles\n\nUser's can be assigned roles that affect their access to certain features.\n\n- **Member:** Can see the projects, runs, and keys.\n- **Admin:** Can also invite, edit and delete users.\n- **Owner:** Can also transfer or delete projects. Can delete and edit the organization.\n\n***\n\n## User Requests\n\nWe have also built Cypress with the ability for users to \"Request\" access to a given organization. This makes for a very natural flow.\n\nIf a developer on your team has access to Cypress and your project's source code - they can request to be given access to your Organization.\n\nThis means instead of you having to invite team members up front, they can simply request access and you can choose to accept or deny them.\n\n![User requesting access](https://cloud.githubusercontent.com/assets/1271364/22709877/61ca46be-ed49-11e6-80cc-d54299634053.png)\n\n***\n\n## Transferring Projects\n\nYou can transfer projects that you own to another organization or another user.\n\nThis functionality only exists in our [Dashboard](https://on.cypress.io/dashboard).\n\n![Transfer Project dialog](https://cloud.githubusercontent.com/assets/1271364/22708695/440f4e5c-ed45-11e6-9a98-8f91b67871a3.png)\n\n***\n\n# Deleting an Organization\n\nYou can delete organizations that you own as long as they don't have any projects. You must first transfer ownership of your projects to another organization before you can delete them.\n\n![Delete Organization](https://cloud.githubusercontent.com/assets/1271364/22709764/f9c63e9c-ed48-11e6-885d-ced14d91c3a8.png)\n","source":"guides/dashboard/organizations.md","raw":"title: organizations\n---\n\n# What are Organizations?\n\nOrganizations are used to group projects and to manage permissions for who can access those projects.\n\n![Organizations](https://cloud.githubusercontent.com/assets/1271364/22709686/a81ed568-ed48-11e6-8ebd-55c014682815.png)\n\nWith organizations you can:\n\n- Create projects\n- Invite users\n\nOnce out of beta, organizations will also handle billing.\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Cypress Organizations are meant to work similar to GitHub Organizations.\"\n}\n[/block]\n\n***\n\n## Personal Organization\n\nBy default, every user of Cypress is given a personal organization - named after you.\n\nYou cannot delete or edit the name of this organization.\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"All existing Cypress projects prior to version 0.19.0 were automatically added to your personal organization.\"\n}\n[/block]\n\n***\n\n# Creating an Organization\n\n![Add Organization dialog](https://cloud.githubusercontent.com/assets/1271364/22709492/f1d3e7e4-ed47-11e6-8f35-64fed633862b.png)\n\n***\n\n## Inviting Users\n\nYou can invite users to Cypress from our [Dashboard](https://on.cypress.io/dashboard). Invited users will see the projects and runs for your organization.\n\nEven though we are in a **private beta**, any user you invite will automatically be whitelisted to use Cypress. This means you can freely invite your team members without needing to talk to us!\n\n*To invite a user to an organization:*\n\n1. Click the :fa-cog: beside the Projects you want to give the user access to.\n2. Click 'Invite User'. Note: you must have the role of 'owner' or 'admin' to invite users.\n3. Fill in the email and select the role for the user and click 'Invite User' Note: only 'owner's can give other user's 'owner' access.\n4. The user will recieve an invite email with a link to accept the invitation.\n\n![Invite User dialog](https://cloud.githubusercontent.com/assets/1271364/22709421/baf79a54-ed47-11e6-9796-79ba2008d2d2.png)\n\n***\n\n## User Roles\n\nUser's can be assigned roles that affect their access to certain features.\n\n- **Member:** Can see the projects, runs, and keys.\n- **Admin:** Can also invite, edit and delete users.\n- **Owner:** Can also transfer or delete projects. Can delete and edit the organization.\n\n***\n\n## User Requests\n\nWe have also built Cypress with the ability for users to \"Request\" access to a given organization. This makes for a very natural flow.\n\nIf a developer on your team has access to Cypress and your project's source code - they can request to be given access to your Organization.\n\nThis means instead of you having to invite team members up front, they can simply request access and you can choose to accept or deny them.\n\n![User requesting access](https://cloud.githubusercontent.com/assets/1271364/22709877/61ca46be-ed49-11e6-80cc-d54299634053.png)\n\n***\n\n## Transferring Projects\n\nYou can transfer projects that you own to another organization or another user.\n\nThis functionality only exists in our [Dashboard](https://on.cypress.io/dashboard).\n\n![Transfer Project dialog](https://cloud.githubusercontent.com/assets/1271364/22708695/440f4e5c-ed45-11e6-9a98-8f91b67871a3.png)\n\n***\n\n# Deleting an Organization\n\nYou can delete organizations that you own as long as they don't have any projects. You must first transfer ownership of your projects to another organization before you can delete them.\n\n![Delete Organization](https://cloud.githubusercontent.com/assets/1271364/22709764/f9c63e9c-ed48-11e6-885d-ced14d91c3a8.png)\n","date":"2017-04-19T18:46:47.000Z","updated":"2017-04-19T18:46:47.000Z","path":"guides/dashboard/organizations.html","comments":1,"layout":"page","_id":"cj1pby1kk002i68g852oogktd","content":"<h1 id=\"What-are-Organizations\"><a href=\"#What-are-Organizations\" class=\"headerlink\" title=\"What are Organizations?\"></a>What are Organizations?</h1><p>Organizations are used to group projects and to manage permissions for who can access those projects.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22709686/a81ed568-ed48-11e6-8ebd-55c014682815.png\" alt=\"Organizations\"></p>\n<p>With organizations you can:</p>\n<ul>\n<li>Create projects</li>\n<li>Invite users</li>\n</ul>\n<p>Once out of beta, organizations will also handle billing.</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “Cypress Organizations are meant to work similar to GitHub Organizations.”<br>}<br>[/block]</p>\n<hr>\n<h2 id=\"Personal-Organization\"><a href=\"#Personal-Organization\" class=\"headerlink\" title=\"Personal Organization\"></a>Personal Organization</h2><p>By default, every user of Cypress is given a personal organization - named after you.</p>\n<p>You cannot delete or edit the name of this organization.</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “All existing Cypress projects prior to version 0.19.0 were automatically added to your personal organization.”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Creating-an-Organization\"><a href=\"#Creating-an-Organization\" class=\"headerlink\" title=\"Creating an Organization\"></a>Creating an Organization</h1><p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22709492/f1d3e7e4-ed47-11e6-8f35-64fed633862b.png\" alt=\"Add Organization dialog\"></p>\n<hr>\n<h2 id=\"Inviting-Users\"><a href=\"#Inviting-Users\" class=\"headerlink\" title=\"Inviting Users\"></a>Inviting Users</h2><p>You can invite users to Cypress from our <a href=\"https://on.cypress.io/dashboard\" target=\"_blank\" rel=\"external\">Dashboard</a>. Invited users will see the projects and runs for your organization.</p>\n<p>Even though we are in a <strong>private beta</strong>, any user you invite will automatically be whitelisted to use Cypress. This means you can freely invite your team members without needing to talk to us!</p>\n<p><em>To invite a user to an organization:</em></p>\n<ol>\n<li>Click the :fa-cog: beside the Projects you want to give the user access to.</li>\n<li>Click ‘Invite User’. Note: you must have the role of ‘owner’ or ‘admin’ to invite users.</li>\n<li>Fill in the email and select the role for the user and click ‘Invite User’ Note: only ‘owner’s can give other user’s ‘owner’ access.</li>\n<li>The user will recieve an invite email with a link to accept the invitation.</li>\n</ol>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22709421/baf79a54-ed47-11e6-9796-79ba2008d2d2.png\" alt=\"Invite User dialog\"></p>\n<hr>\n<h2 id=\"User-Roles\"><a href=\"#User-Roles\" class=\"headerlink\" title=\"User Roles\"></a>User Roles</h2><p>User’s can be assigned roles that affect their access to certain features.</p>\n<ul>\n<li><strong>Member:</strong> Can see the projects, runs, and keys.</li>\n<li><strong>Admin:</strong> Can also invite, edit and delete users.</li>\n<li><strong>Owner:</strong> Can also transfer or delete projects. Can delete and edit the organization.</li>\n</ul>\n<hr>\n<h2 id=\"User-Requests\"><a href=\"#User-Requests\" class=\"headerlink\" title=\"User Requests\"></a>User Requests</h2><p>We have also built Cypress with the ability for users to “Request” access to a given organization. This makes for a very natural flow.</p>\n<p>If a developer on your team has access to Cypress and your project’s source code - they can request to be given access to your Organization.</p>\n<p>This means instead of you having to invite team members up front, they can simply request access and you can choose to accept or deny them.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22709877/61ca46be-ed49-11e6-80cc-d54299634053.png\" alt=\"User requesting access\"></p>\n<hr>\n<h2 id=\"Transferring-Projects\"><a href=\"#Transferring-Projects\" class=\"headerlink\" title=\"Transferring Projects\"></a>Transferring Projects</h2><p>You can transfer projects that you own to another organization or another user.</p>\n<p>This functionality only exists in our <a href=\"https://on.cypress.io/dashboard\" target=\"_blank\" rel=\"external\">Dashboard</a>.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22708695/440f4e5c-ed45-11e6-9a98-8f91b67871a3.png\" alt=\"Transfer Project dialog\"></p>\n<hr>\n<h1 id=\"Deleting-an-Organization\"><a href=\"#Deleting-an-Organization\" class=\"headerlink\" title=\"Deleting an Organization\"></a>Deleting an Organization</h1><p>You can delete organizations that you own as long as they don’t have any projects. You must first transfer ownership of your projects to another organization before you can delete them.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22709764/f9c63e9c-ed48-11e6-885d-ced14d91c3a8.png\" alt=\"Delete Organization\"></p>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<h1 id=\"What-are-Organizations\"><a href=\"#What-are-Organizations\" class=\"headerlink\" title=\"What are Organizations?\"></a>What are Organizations?</h1><p>Organizations are used to group projects and to manage permissions for who can access those projects.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22709686/a81ed568-ed48-11e6-8ebd-55c014682815.png\" alt=\"Organizations\"></p>\n<p>With organizations you can:</p>\n<ul>\n<li>Create projects</li>\n<li>Invite users</li>\n</ul>\n<p>Once out of beta, organizations will also handle billing.</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “Cypress Organizations are meant to work similar to GitHub Organizations.”<br>}<br>[/block]</p>\n<hr>\n<h2 id=\"Personal-Organization\"><a href=\"#Personal-Organization\" class=\"headerlink\" title=\"Personal Organization\"></a>Personal Organization</h2><p>By default, every user of Cypress is given a personal organization - named after you.</p>\n<p>You cannot delete or edit the name of this organization.</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “All existing Cypress projects prior to version 0.19.0 were automatically added to your personal organization.”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Creating-an-Organization\"><a href=\"#Creating-an-Organization\" class=\"headerlink\" title=\"Creating an Organization\"></a>Creating an Organization</h1><p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22709492/f1d3e7e4-ed47-11e6-8f35-64fed633862b.png\" alt=\"Add Organization dialog\"></p>\n<hr>\n<h2 id=\"Inviting-Users\"><a href=\"#Inviting-Users\" class=\"headerlink\" title=\"Inviting Users\"></a>Inviting Users</h2><p>You can invite users to Cypress from our <a href=\"https://on.cypress.io/dashboard\">Dashboard</a>. Invited users will see the projects and runs for your organization.</p>\n<p>Even though we are in a <strong>private beta</strong>, any user you invite will automatically be whitelisted to use Cypress. This means you can freely invite your team members without needing to talk to us!</p>\n<p><em>To invite a user to an organization:</em></p>\n<ol>\n<li>Click the :fa-cog: beside the Projects you want to give the user access to.</li>\n<li>Click ‘Invite User’. Note: you must have the role of ‘owner’ or ‘admin’ to invite users.</li>\n<li>Fill in the email and select the role for the user and click ‘Invite User’ Note: only ‘owner’s can give other user’s ‘owner’ access.</li>\n<li>The user will recieve an invite email with a link to accept the invitation.</li>\n</ol>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22709421/baf79a54-ed47-11e6-9796-79ba2008d2d2.png\" alt=\"Invite User dialog\"></p>\n<hr>\n<h2 id=\"User-Roles\"><a href=\"#User-Roles\" class=\"headerlink\" title=\"User Roles\"></a>User Roles</h2><p>User’s can be assigned roles that affect their access to certain features.</p>\n<ul>\n<li><strong>Member:</strong> Can see the projects, runs, and keys.</li>\n<li><strong>Admin:</strong> Can also invite, edit and delete users.</li>\n<li><strong>Owner:</strong> Can also transfer or delete projects. Can delete and edit the organization.</li>\n</ul>\n<hr>\n<h2 id=\"User-Requests\"><a href=\"#User-Requests\" class=\"headerlink\" title=\"User Requests\"></a>User Requests</h2><p>We have also built Cypress with the ability for users to “Request” access to a given organization. This makes for a very natural flow.</p>\n<p>If a developer on your team has access to Cypress and your project’s source code - they can request to be given access to your Organization.</p>\n<p>This means instead of you having to invite team members up front, they can simply request access and you can choose to accept or deny them.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22709877/61ca46be-ed49-11e6-80cc-d54299634053.png\" alt=\"User requesting access\"></p>\n<hr>\n<h2 id=\"Transferring-Projects\"><a href=\"#Transferring-Projects\" class=\"headerlink\" title=\"Transferring Projects\"></a>Transferring Projects</h2><p>You can transfer projects that you own to another organization or another user.</p>\n<p>This functionality only exists in our <a href=\"https://on.cypress.io/dashboard\">Dashboard</a>.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22708695/440f4e5c-ed45-11e6-9a98-8f91b67871a3.png\" alt=\"Transfer Project dialog\"></p>\n<hr>\n<h1 id=\"Deleting-an-Organization\"><a href=\"#Deleting-an-Organization\" class=\"headerlink\" title=\"Deleting an Organization\"></a>Deleting an Organization</h1><p>You can delete organizations that you own as long as they don’t have any projects. You must first transfer ownership of your projects to another organization before you can delete them.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22709764/f9c63e9c-ed48-11e6-885d-ced14d91c3a8.png\" alt=\"Delete Organization\"></p>\n"},{"title":"runs","_content":"\n# What are Recorded Runs?\n\nRecorded runs are the results and artifacts captured from your test runs.\n\nTo record your runs:\n\n1. First [setup your project to record](https://on.cypress.io/recording-project-runs)\n2. Then [run the command](https://on.cypress.io/how-do-i-record-runs) `cypress run --record --key <record_key>`\n\n***\n\n# What is recorded during a run?\n\nWe capture the following:\n\n- [Standard Output](#section-standard-output)\n- [Test Failures](#section-test-failures)\n- [Screenshots](#section-screenshots)\n- [Video](#section-video)\n\nWe have already begun the implementation for capturing even more things from your run such as:\n\n- Commands\n- Network Traffic\n- Browser Console Logs\n\nThese will be added in subsequent releases.\n\n***\n\n## Standard Output\n\nStandard output includes details and summaries of your tests based on the [reporter](https://on.cypress.io/guides/reporters) you have set. By default it is the `spec` reporter.\n\n![output](https://cloud.githubusercontent.com/assets/1271364/22707798/f5e5608e-ed41-11e6-8832-d66e5a68094b.png)\n\nYou will also see a summary at the bottom indicating the files we've recorded.\n\n***\n\n## Test Failures\n\nAny tests that fail during a run can be found under the **Failures** tab. Each failure is listed under it's nested test title.\n\n**Each failure displays the failure's:**\n\n- **Error:** The stack trace of the error.\n- **Video:** The recorded video scrubbed to the point of failure during the test.\n- **Screenshot:** Any screenshots taken during the test.\n\n![failures](https://cloud.githubusercontent.com/assets/1271364/22707770/dce3664e-ed41-11e6-84de-03acdc499daa.png)\n\n***\n\n## Screenshots\n\nAll screenshots taken during the entire run can be found under the **Screenshots** tab. Both screenshots taken during failures and screenshots taken using the [`cy.screenshot`](https://on.cypress.io/api/screenshot) command are located here. Each screenshot displays the application as well as the Cypress Command Log.\n\nEach screenshot will display under the test title it was taken in.\n\n![Screenshots](https://cloud.githubusercontent.com/assets/1271364/22707241/28bf50de-ed40-11e6-93a1-4e09c2767605.png)\n\n***\n\n## Videos\n\nAny videos taken during the run can be found under the **Videos** tab. You can also download the video of a run.\n\n![Video of tests](https://cloud.githubusercontent.com/assets/1271364/22706030/c3a442f8-ed3b-11e6-812e-a12980057e39.png)\n","source":"guides/dashboard/recorded-runs.md","raw":"title: runs\n---\n\n# What are Recorded Runs?\n\nRecorded runs are the results and artifacts captured from your test runs.\n\nTo record your runs:\n\n1. First [setup your project to record](https://on.cypress.io/recording-project-runs)\n2. Then [run the command](https://on.cypress.io/how-do-i-record-runs) `cypress run --record --key <record_key>`\n\n***\n\n# What is recorded during a run?\n\nWe capture the following:\n\n- [Standard Output](#section-standard-output)\n- [Test Failures](#section-test-failures)\n- [Screenshots](#section-screenshots)\n- [Video](#section-video)\n\nWe have already begun the implementation for capturing even more things from your run such as:\n\n- Commands\n- Network Traffic\n- Browser Console Logs\n\nThese will be added in subsequent releases.\n\n***\n\n## Standard Output\n\nStandard output includes details and summaries of your tests based on the [reporter](https://on.cypress.io/guides/reporters) you have set. By default it is the `spec` reporter.\n\n![output](https://cloud.githubusercontent.com/assets/1271364/22707798/f5e5608e-ed41-11e6-8832-d66e5a68094b.png)\n\nYou will also see a summary at the bottom indicating the files we've recorded.\n\n***\n\n## Test Failures\n\nAny tests that fail during a run can be found under the **Failures** tab. Each failure is listed under it's nested test title.\n\n**Each failure displays the failure's:**\n\n- **Error:** The stack trace of the error.\n- **Video:** The recorded video scrubbed to the point of failure during the test.\n- **Screenshot:** Any screenshots taken during the test.\n\n![failures](https://cloud.githubusercontent.com/assets/1271364/22707770/dce3664e-ed41-11e6-84de-03acdc499daa.png)\n\n***\n\n## Screenshots\n\nAll screenshots taken during the entire run can be found under the **Screenshots** tab. Both screenshots taken during failures and screenshots taken using the [`cy.screenshot`](https://on.cypress.io/api/screenshot) command are located here. Each screenshot displays the application as well as the Cypress Command Log.\n\nEach screenshot will display under the test title it was taken in.\n\n![Screenshots](https://cloud.githubusercontent.com/assets/1271364/22707241/28bf50de-ed40-11e6-93a1-4e09c2767605.png)\n\n***\n\n## Videos\n\nAny videos taken during the run can be found under the **Videos** tab. You can also download the video of a run.\n\n![Video of tests](https://cloud.githubusercontent.com/assets/1271364/22706030/c3a442f8-ed3b-11e6-812e-a12980057e39.png)\n","date":"2017-04-19T18:46:47.000Z","updated":"2017-04-19T18:46:47.000Z","path":"guides/dashboard/recorded-runs.html","comments":1,"layout":"page","_id":"cj1pby1kl002j68g8ydn85m82","content":"<h1 id=\"What-are-Recorded-Runs\"><a href=\"#What-are-Recorded-Runs\" class=\"headerlink\" title=\"What are Recorded Runs?\"></a>What are Recorded Runs?</h1><p>Recorded runs are the results and artifacts captured from your test runs.</p>\n<p>To record your runs:</p>\n<ol>\n<li>First <a href=\"https://on.cypress.io/recording-project-runs\" target=\"_blank\" rel=\"external\">setup your project to record</a></li>\n<li>Then <a href=\"https://on.cypress.io/how-do-i-record-runs\" target=\"_blank\" rel=\"external\">run the command</a> <code>cypress run --record --key &lt;record_key&gt;</code></li>\n</ol>\n<hr>\n<h1 id=\"What-is-recorded-during-a-run\"><a href=\"#What-is-recorded-during-a-run\" class=\"headerlink\" title=\"What is recorded during a run?\"></a>What is recorded during a run?</h1><p>We capture the following:</p>\n<ul>\n<li><a href=\"#section-standard-output\">Standard Output</a></li>\n<li><a href=\"#section-test-failures\">Test Failures</a></li>\n<li><a href=\"#section-screenshots\">Screenshots</a></li>\n<li><a href=\"#section-video\">Video</a></li>\n</ul>\n<p>We have already begun the implementation for capturing even more things from your run such as:</p>\n<ul>\n<li>Commands</li>\n<li>Network Traffic</li>\n<li>Browser Console Logs</li>\n</ul>\n<p>These will be added in subsequent releases.</p>\n<hr>\n<h2 id=\"Standard-Output\"><a href=\"#Standard-Output\" class=\"headerlink\" title=\"Standard Output\"></a>Standard Output</h2><p>Standard output includes details and summaries of your tests based on the <a href=\"https://on.cypress.io/guides/reporters\" target=\"_blank\" rel=\"external\">reporter</a> you have set. By default it is the <code>spec</code> reporter.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22707798/f5e5608e-ed41-11e6-8832-d66e5a68094b.png\" alt=\"output\"></p>\n<p>You will also see a summary at the bottom indicating the files we’ve recorded.</p>\n<hr>\n<h2 id=\"Test-Failures\"><a href=\"#Test-Failures\" class=\"headerlink\" title=\"Test Failures\"></a>Test Failures</h2><p>Any tests that fail during a run can be found under the <strong>Failures</strong> tab. Each failure is listed under it’s nested test title.</p>\n<p><strong>Each failure displays the failure’s:</strong></p>\n<ul>\n<li><strong>Error:</strong> The stack trace of the error.</li>\n<li><strong>Video:</strong> The recorded video scrubbed to the point of failure during the test.</li>\n<li><strong>Screenshot:</strong> Any screenshots taken during the test.</li>\n</ul>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22707770/dce3664e-ed41-11e6-84de-03acdc499daa.png\" alt=\"failures\"></p>\n<hr>\n<h2 id=\"Screenshots\"><a href=\"#Screenshots\" class=\"headerlink\" title=\"Screenshots\"></a>Screenshots</h2><p>All screenshots taken during the entire run can be found under the <strong>Screenshots</strong> tab. Both screenshots taken during failures and screenshots taken using the <a href=\"https://on.cypress.io/api/screenshot\" target=\"_blank\" rel=\"external\"><code>cy.screenshot</code></a> command are located here. Each screenshot displays the application as well as the Cypress Command Log.</p>\n<p>Each screenshot will display under the test title it was taken in.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22707241/28bf50de-ed40-11e6-93a1-4e09c2767605.png\" alt=\"Screenshots\"></p>\n<hr>\n<h2 id=\"Videos\"><a href=\"#Videos\" class=\"headerlink\" title=\"Videos\"></a>Videos</h2><p>Any videos taken during the run can be found under the <strong>Videos</strong> tab. You can also download the video of a run.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22706030/c3a442f8-ed3b-11e6-812e-a12980057e39.png\" alt=\"Video of tests\"></p>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<h1 id=\"What-are-Recorded-Runs\"><a href=\"#What-are-Recorded-Runs\" class=\"headerlink\" title=\"What are Recorded Runs?\"></a>What are Recorded Runs?</h1><p>Recorded runs are the results and artifacts captured from your test runs.</p>\n<p>To record your runs:</p>\n<ol>\n<li>First <a href=\"https://on.cypress.io/recording-project-runs\">setup your project to record</a></li>\n<li>Then <a href=\"https://on.cypress.io/how-do-i-record-runs\">run the command</a> <code>cypress run --record --key &lt;record_key&gt;</code></li>\n</ol>\n<hr>\n<h1 id=\"What-is-recorded-during-a-run\"><a href=\"#What-is-recorded-during-a-run\" class=\"headerlink\" title=\"What is recorded during a run?\"></a>What is recorded during a run?</h1><p>We capture the following:</p>\n<ul>\n<li><a href=\"#section-standard-output\">Standard Output</a></li>\n<li><a href=\"#section-test-failures\">Test Failures</a></li>\n<li><a href=\"#section-screenshots\">Screenshots</a></li>\n<li><a href=\"#section-video\">Video</a></li>\n</ul>\n<p>We have already begun the implementation for capturing even more things from your run such as:</p>\n<ul>\n<li>Commands</li>\n<li>Network Traffic</li>\n<li>Browser Console Logs</li>\n</ul>\n<p>These will be added in subsequent releases.</p>\n<hr>\n<h2 id=\"Standard-Output\"><a href=\"#Standard-Output\" class=\"headerlink\" title=\"Standard Output\"></a>Standard Output</h2><p>Standard output includes details and summaries of your tests based on the <a href=\"https://on.cypress.io/guides/reporters\">reporter</a> you have set. By default it is the <code>spec</code> reporter.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22707798/f5e5608e-ed41-11e6-8832-d66e5a68094b.png\" alt=\"output\"></p>\n<p>You will also see a summary at the bottom indicating the files we’ve recorded.</p>\n<hr>\n<h2 id=\"Test-Failures\"><a href=\"#Test-Failures\" class=\"headerlink\" title=\"Test Failures\"></a>Test Failures</h2><p>Any tests that fail during a run can be found under the <strong>Failures</strong> tab. Each failure is listed under it’s nested test title.</p>\n<p><strong>Each failure displays the failure’s:</strong></p>\n<ul>\n<li><strong>Error:</strong> The stack trace of the error.</li>\n<li><strong>Video:</strong> The recorded video scrubbed to the point of failure during the test.</li>\n<li><strong>Screenshot:</strong> Any screenshots taken during the test.</li>\n</ul>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22707770/dce3664e-ed41-11e6-84de-03acdc499daa.png\" alt=\"failures\"></p>\n<hr>\n<h2 id=\"Screenshots\"><a href=\"#Screenshots\" class=\"headerlink\" title=\"Screenshots\"></a>Screenshots</h2><p>All screenshots taken during the entire run can be found under the <strong>Screenshots</strong> tab. Both screenshots taken during failures and screenshots taken using the <a href=\"https://on.cypress.io/api/screenshot\"><code>cy.screenshot</code></a> command are located here. Each screenshot displays the application as well as the Cypress Command Log.</p>\n<p>Each screenshot will display under the test title it was taken in.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22707241/28bf50de-ed40-11e6-93a1-4e09c2767605.png\" alt=\"Screenshots\"></p>\n<hr>\n<h2 id=\"Videos\"><a href=\"#Videos\" class=\"headerlink\" title=\"Videos\"></a>Videos</h2><p>Any videos taken during the run can be found under the <strong>Videos</strong> tab. You can also download the video of a run.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22706030/c3a442f8-ed3b-11e6-812e-a12980057e39.png\" alt=\"Video of tests\"></p>\n"},{"title":"all-example-apps","_content":"\nName | JS | Server | CI\n--- | --- | --- |\n[Kitchen Sink](https://github.com/cypress-io/cypress-example-kitchensink) | jQuery | Node | TravisCI, CircleCI, Codeship\n[TodoMVC](https://github.com/cypress-io/cypress-example-todomvc) | React | Node | TravisCI, CircleCI\n[PieChopper](https://github.com/cypress-io/cypress-example-piechopper) | Angular | Node | TravisCI, CircleCI\n\n***\n\n# [Kitchen Sink](https://github.com/cypress-io/cypress-example-kitchensink)\n\nThis is an example app is used to showcase every command available in Cypress. The [tests](https://github.com/cypress-io/examples-kitchen-sink/blob/master/cypress/integration/example_spec.js) cover all of the following features:\n\n![kitchensink](https://cloud.githubusercontent.com/assets/1268976/14084252/e309e370-f4e7-11e5-9562-24f516563ac9.gif)\n\n**Features:**\n\n- Querying\n- Traversal\n- Actions\n- Viewport\n- Navigation\n- Aliasing\n- Waiting\n- Network Requests\n- Fixtures\n- Local Storage\n- Cookies\n\n***\n\n# [TodoMVC](https://github.com/cypress-io/cypress-example-todomvc)\n\nThis repo compares [Cypress Tests](https://github.com/cypress-io/cypress-example-todomvc/blob/master/cypress/integration/app_spec.js) to [official TodoMVC Tests](https://github.com/tastejs/todomvc/blob/master/tests/test.js). This gives you a good comparison of writing and running tests in Cypress versus vanilla Selenium.\n\n![todomvc-gif](https://cloud.githubusercontent.com/assets/1268976/12985445/ad168098-d0c0-11e5-94e7-2f2e619bae93.gif)\n\n**Features:**\n\n- Querying\n- Custom Commands\n- Aliasing\n- Navigation\n\n***\n\n# [PieChopper](https://github.com/cypress-io/cypress-example-piechopper)\n\nThis is a single page application with a decent amount of features. The [tests](https://github.com/cypress-io/cypress-example-piechopper/blob/master/cypress/integration/app_spec.js) involve a lot of form submissions.\n\n![piechopper-gif](https://cloud.githubusercontent.com/assets/1268976/12985444/ad14159c-d0c0-11e5-8e50-2b64a1d389ac.gif)\n\n**Features:**\n\n- Querying\n- Forms\n- Scroll Tests\n- Network Requests\n- XHR Stubbing\n- Dialogs\n- Responsive Tests","source":"guides/examples/list-of-example-apps.md","raw":"title: all-example-apps\n---\n\nName | JS | Server | CI\n--- | --- | --- |\n[Kitchen Sink](https://github.com/cypress-io/cypress-example-kitchensink) | jQuery | Node | TravisCI, CircleCI, Codeship\n[TodoMVC](https://github.com/cypress-io/cypress-example-todomvc) | React | Node | TravisCI, CircleCI\n[PieChopper](https://github.com/cypress-io/cypress-example-piechopper) | Angular | Node | TravisCI, CircleCI\n\n***\n\n# [Kitchen Sink](https://github.com/cypress-io/cypress-example-kitchensink)\n\nThis is an example app is used to showcase every command available in Cypress. The [tests](https://github.com/cypress-io/examples-kitchen-sink/blob/master/cypress/integration/example_spec.js) cover all of the following features:\n\n![kitchensink](https://cloud.githubusercontent.com/assets/1268976/14084252/e309e370-f4e7-11e5-9562-24f516563ac9.gif)\n\n**Features:**\n\n- Querying\n- Traversal\n- Actions\n- Viewport\n- Navigation\n- Aliasing\n- Waiting\n- Network Requests\n- Fixtures\n- Local Storage\n- Cookies\n\n***\n\n# [TodoMVC](https://github.com/cypress-io/cypress-example-todomvc)\n\nThis repo compares [Cypress Tests](https://github.com/cypress-io/cypress-example-todomvc/blob/master/cypress/integration/app_spec.js) to [official TodoMVC Tests](https://github.com/tastejs/todomvc/blob/master/tests/test.js). This gives you a good comparison of writing and running tests in Cypress versus vanilla Selenium.\n\n![todomvc-gif](https://cloud.githubusercontent.com/assets/1268976/12985445/ad168098-d0c0-11e5-94e7-2f2e619bae93.gif)\n\n**Features:**\n\n- Querying\n- Custom Commands\n- Aliasing\n- Navigation\n\n***\n\n# [PieChopper](https://github.com/cypress-io/cypress-example-piechopper)\n\nThis is a single page application with a decent amount of features. The [tests](https://github.com/cypress-io/cypress-example-piechopper/blob/master/cypress/integration/app_spec.js) involve a lot of form submissions.\n\n![piechopper-gif](https://cloud.githubusercontent.com/assets/1268976/12985444/ad14159c-d0c0-11e5-8e50-2b64a1d389ac.gif)\n\n**Features:**\n\n- Querying\n- Forms\n- Scroll Tests\n- Network Requests\n- XHR Stubbing\n- Dialogs\n- Responsive Tests","date":"2017-04-19T18:46:47.000Z","updated":"2017-04-19T18:46:47.000Z","path":"guides/examples/list-of-example-apps.html","comments":1,"layout":"page","_id":"cj1pby1kl002k68g8yky585xv","content":"<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>JS</th>\n<th>Server</th>\n<th>CI</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/cypress-io/cypress-example-kitchensink\" target=\"_blank\" rel=\"external\">Kitchen Sink</a></td>\n<td>jQuery</td>\n<td>Node</td>\n<td>TravisCI, CircleCI, Codeship</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/cypress-io/cypress-example-todomvc\" target=\"_blank\" rel=\"external\">TodoMVC</a></td>\n<td>React</td>\n<td>Node</td>\n<td>TravisCI, CircleCI</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/cypress-io/cypress-example-piechopper\" target=\"_blank\" rel=\"external\">PieChopper</a></td>\n<td>Angular</td>\n<td>Node</td>\n<td>TravisCI, CircleCI</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Kitchen-Sink\"><a href=\"#Kitchen-Sink\" class=\"headerlink\" title=\"Kitchen Sink\"></a><a href=\"https://github.com/cypress-io/cypress-example-kitchensink\" target=\"_blank\" rel=\"external\">Kitchen Sink</a></h1><p>This is an example app is used to showcase every command available in Cypress. The <a href=\"https://github.com/cypress-io/examples-kitchen-sink/blob/master/cypress/integration/example_spec.js\" target=\"_blank\" rel=\"external\">tests</a> cover all of the following features:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/14084252/e309e370-f4e7-11e5-9562-24f516563ac9.gif\" alt=\"kitchensink\"></p>\n<p><strong>Features:</strong></p>\n<ul>\n<li>Querying</li>\n<li>Traversal</li>\n<li>Actions</li>\n<li>Viewport</li>\n<li>Navigation</li>\n<li>Aliasing</li>\n<li>Waiting</li>\n<li>Network Requests</li>\n<li>Fixtures</li>\n<li>Local Storage</li>\n<li>Cookies</li>\n</ul>\n<hr>\n<h1 id=\"TodoMVC\"><a href=\"#TodoMVC\" class=\"headerlink\" title=\"TodoMVC\"></a><a href=\"https://github.com/cypress-io/cypress-example-todomvc\" target=\"_blank\" rel=\"external\">TodoMVC</a></h1><p>This repo compares <a href=\"https://github.com/cypress-io/cypress-example-todomvc/blob/master/cypress/integration/app_spec.js\" target=\"_blank\" rel=\"external\">Cypress Tests</a> to <a href=\"https://github.com/tastejs/todomvc/blob/master/tests/test.js\" target=\"_blank\" rel=\"external\">official TodoMVC Tests</a>. This gives you a good comparison of writing and running tests in Cypress versus vanilla Selenium.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/12985445/ad168098-d0c0-11e5-94e7-2f2e619bae93.gif\" alt=\"todomvc-gif\"></p>\n<p><strong>Features:</strong></p>\n<ul>\n<li>Querying</li>\n<li>Custom Commands</li>\n<li>Aliasing</li>\n<li>Navigation</li>\n</ul>\n<hr>\n<h1 id=\"PieChopper\"><a href=\"#PieChopper\" class=\"headerlink\" title=\"PieChopper\"></a><a href=\"https://github.com/cypress-io/cypress-example-piechopper\" target=\"_blank\" rel=\"external\">PieChopper</a></h1><p>This is a single page application with a decent amount of features. The <a href=\"https://github.com/cypress-io/cypress-example-piechopper/blob/master/cypress/integration/app_spec.js\" target=\"_blank\" rel=\"external\">tests</a> involve a lot of form submissions.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/12985444/ad14159c-d0c0-11e5-8e50-2b64a1d389ac.gif\" alt=\"piechopper-gif\"></p>\n<p><strong>Features:</strong></p>\n<ul>\n<li>Querying</li>\n<li>Forms</li>\n<li>Scroll Tests</li>\n<li>Network Requests</li>\n<li>XHR Stubbing</li>\n<li>Dialogs</li>\n<li>Responsive Tests</li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>JS</th>\n<th>Server</th>\n<th>CI</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/cypress-io/cypress-example-kitchensink\">Kitchen Sink</a></td>\n<td>jQuery</td>\n<td>Node</td>\n<td>TravisCI, CircleCI, Codeship</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/cypress-io/cypress-example-todomvc\">TodoMVC</a></td>\n<td>React</td>\n<td>Node</td>\n<td>TravisCI, CircleCI</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/cypress-io/cypress-example-piechopper\">PieChopper</a></td>\n<td>Angular</td>\n<td>Node</td>\n<td>TravisCI, CircleCI</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Kitchen-Sink\"><a href=\"#Kitchen-Sink\" class=\"headerlink\" title=\"Kitchen Sink\"></a><a href=\"https://github.com/cypress-io/cypress-example-kitchensink\">Kitchen Sink</a></h1><p>This is an example app is used to showcase every command available in Cypress. The <a href=\"https://github.com/cypress-io/examples-kitchen-sink/blob/master/cypress/integration/example_spec.js\">tests</a> cover all of the following features:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/14084252/e309e370-f4e7-11e5-9562-24f516563ac9.gif\" alt=\"kitchensink\"></p>\n<p><strong>Features:</strong></p>\n<ul>\n<li>Querying</li>\n<li>Traversal</li>\n<li>Actions</li>\n<li>Viewport</li>\n<li>Navigation</li>\n<li>Aliasing</li>\n<li>Waiting</li>\n<li>Network Requests</li>\n<li>Fixtures</li>\n<li>Local Storage</li>\n<li>Cookies</li>\n</ul>\n<hr>\n<h1 id=\"TodoMVC\"><a href=\"#TodoMVC\" class=\"headerlink\" title=\"TodoMVC\"></a><a href=\"https://github.com/cypress-io/cypress-example-todomvc\">TodoMVC</a></h1><p>This repo compares <a href=\"https://github.com/cypress-io/cypress-example-todomvc/blob/master/cypress/integration/app_spec.js\">Cypress Tests</a> to <a href=\"https://github.com/tastejs/todomvc/blob/master/tests/test.js\">official TodoMVC Tests</a>. This gives you a good comparison of writing and running tests in Cypress versus vanilla Selenium.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/12985445/ad168098-d0c0-11e5-94e7-2f2e619bae93.gif\" alt=\"todomvc-gif\"></p>\n<p><strong>Features:</strong></p>\n<ul>\n<li>Querying</li>\n<li>Custom Commands</li>\n<li>Aliasing</li>\n<li>Navigation</li>\n</ul>\n<hr>\n<h1 id=\"PieChopper\"><a href=\"#PieChopper\" class=\"headerlink\" title=\"PieChopper\"></a><a href=\"https://github.com/cypress-io/cypress-example-piechopper\">PieChopper</a></h1><p>This is a single page application with a decent amount of features. The <a href=\"https://github.com/cypress-io/cypress-example-piechopper/blob/master/cypress/integration/app_spec.js\">tests</a> involve a lot of form submissions.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/12985444/ad14159c-d0c0-11e5-8e50-2b64a1d389ac.gif\" alt=\"piechopper-gif\"></p>\n<p><strong>Features:</strong></p>\n<ul>\n<li>Querying</li>\n<li>Forms</li>\n<li>Scroll Tests</li>\n<li>Network Requests</li>\n<li>XHR Stubbing</li>\n<li>Dialogs</li>\n<li>Responsive Tests</li>\n</ul>\n"},{"title":"projects","_content":"\n# What are Projects?\n\nA Cypress project represents the directory of files and folders that make up your tests.\n\nThis is often the same repository as your code, but can also be a subfolder or a separate repository altogether.\n\n***\n\n# Adding a new Project\n\nProjects can **only** be added to Cypress through our [Desktop Application](https://on.cypress.io/guides/installing-and-running).\n\n1. Click :fa-plus: Add Project.\n\n![Add Project in LeftHand Corner](https://cloud.githubusercontent.com/assets/1271364/22699969/fe44c2e4-ed26-11e6-83d0-9baa0f51b15e.png)\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Projects added in our Desktop Application are strictly local to your computer. They are not tracked in any way by Cypress servers and do not communicate with us until they are [setup to be recorded](#section-recording-runs).\"\n}\n[/block]\n\n***\n\n# Setting up a Project to Record\n\nYou can also setup your project to have its test runs recorded and displayed in both the Desktop Application and the Dashboard.\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Not sure what the Dashboard is? [Its our service which displays all of your recorded runs](https://on.cypress.io/guides/dashboard-features).\"\n}\n[/block]\n\nDuring a run we record all failing tests, logs, screenshots, and videos.\n\n**To setup a project:**\n\n1. Click on the \"Runs\" tab of your project, then click \"Setup Project to Record\".\n\n![Setup Project Screen](https://cloud.githubusercontent.com/assets/1271364/22803739/2d66f42a-eee4-11e6-9b84-bd2e73a523d0.png)\n\n2. Fill in the name of your project (this is only for display purposes and can be changed later).\n\n![Project Name in Setup Project](https://cloud.githubusercontent.com/assets/1271364/22700406/9b3bc416-ed28-11e6-995b-297350420cce.png)\n\n3. Choose who owns the project. You can personally own it or select an organization you've created. Organizations work just like they do in Github. They enable you to seperate your personal and work projects. [Read more about Organizations.](https://on.cypress.io/guides/organizations)\n\n![Chosen Organization to Own](https://cloud.githubusercontent.com/assets/1271364/22700579/26353ba6-ed29-11e6-9510-5b7bf4a1cdd2.png)\n\n4. Choose whether this project is Public or Private.\n\n  **A public project** can have its recordings and runs seen by *anyone*. Typically these are open source projects.\n\n  **A private project** restricts its access to *only users you invite* to see your Organization or your own projects.\n\n![Privacy of Project](https://cloud.githubusercontent.com/assets/1271364/22803847/95870626-eee4-11e6-9627-7c00e8b77519.png)\n\n5. Click \"Setup Project\".\n\n![screen shot 2017-02-12 at 3 46 30 pm](https://cloud.githubusercontent.com/assets/1268976/22866093/64a9fb4c-f13e-11e6-9ebe-980ec078ba4e.png)\n\nYou are now ready to record your runs. Typically you would record your runs when running in [Continuous Integration](https://on.cypress.io/guides/continuous-integration) but you can also record your runs from your local computer.\n\n***\n\n## How do I record runs?\n\nNow that your project is setup, Cypress has inserted your unique [projectId](#section-what-is-a-projectid-) into `cypress.json`.\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Be sure to check your `cypress.json` into source control.\"\n}\n[/block]\n\nIn order to record we also require you provide us your [Record Key](#section-what-is-a-record-key-). The record key along with your projectId uniquely identifies your project.\n\nYou can provide the Record Key when running this command:\n\n```shell\ncypress run --record --key <record_key>\n```\n\nOr you can also set an environment variable and we will automatically look for that.\n\n```shell\n## you'd typically set this in your CI provider\nexport CYPRESS_RECORD_KEY=abc-key-123\n\n## we will automatically search and apply the key\ncypress run --record\n```\n\nOnce tests run, you will see them show up in the [Dashboard](https://on.cypress.io/dashboard) and in the Desktop Application.\n\n![Runs List](https://cloud.githubusercontent.com/assets/1271364/22800330/ff6c9474-eed6-11e6-9a32-8360d64b1071.png)\n\n![Dashboard Screenshot](https://cloud.githubusercontent.com/assets/1271364/22800284/d4dbe1d8-eed6-11e6-87ce-32474ea1000c.png)\n\n***\n\n## What is a projectId?\n\nOnce you setup your project to record, we generate a unique `projectId` for your project, and automatically insert it into your `cypress.json` file.\n\n**The `projectId` is a 6 character string in your cypress.json:**\n\n```javascript\n// cypress.json\n{\n  \"projectId\": \"a7bq2k\"\n}\n```\n\nThis is how we uniquely identify your project. If you manually alter this, **Cypress will no longer be able to identify your project or find the recorded builds for it**. We recommend that you check your `cypress.json` including the `projectId` into source control.\n\n***\n\n## What is a Record Key?\n\nOnce you're setup to record test runs, we automatically generate a **Record Key** for the project.\n\n**A record key is a GUID that looks like this:**\n\n```shell\nf4466038-70c2-4688-9ed9-106bf013cd73\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"You can create multiple Record Keys for a project, or delete existing ones from our [Dashboard](https://on.cypress.io/dashboard).\"\n}\n[/block]\n\nYou can also find your Record Key inside of the **Settings** tab.\n\n![screen shot 2017-02-12 at 4 12 40 pm](https://cloud.githubusercontent.com/assets/1268976/22866094/64aeeb3e-f13e-11e6-93f5-f7420892913f.png)\n\n***\n\n## How do a projectId and Record Key work together?\n\nCypress uses your `projectId` and **Record Key** together to uniquely identify projects.\n\n![ProjectID and Record Keys in Dashboard](https://cloud.githubusercontent.com/assets/1271364/22804089/8498f1a2-eee5-11e6-8598-4e60b4b1fc0b.png)\n\nThe record key is used to authenticate that your project is *allowed* to record. As long as your record key stays *private*, nobody will be able to record test runs for your project - even if they have your `projectId`.\n\nIf you have a public project you should *still* keep your record key secret. If someone knows both your record key and your `projectId`, they could record test runs for your project - which would mix up all of your results!\n\nThink of your record key as the key that enables you to **write and create** builds. However, it has nothing to do with being able to **read or see** builds once they are created.\n\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"If your Record Key is accidentally exposed, you simply need to remove it and generate a new one from our [Dashboard](https://on.cypress.io/dashboard).\"\n}\n[/block]\n\n***\n\n## What is the difference between public and private projects?\n\n**A public project** means that anyone can see the recorded runs for it. It's similar to how public projects on Github, Travis, or Circle are handled. Anyone who knows your `projectId` will be able to see the recorded runs for public projects.\n\n**A private project** means that only [users](https://on.cypress.io/guides/organizations#section-inviting-users) you explicitly invite to your [organization](https://on.cypress.io/guides/organizations) can see its recorded runs. Even if someone knows your `projectId`, they will not have access to your runs unless you have invited them.\n\nA Record Key has nothing to do with **viewing** build data - it's a \"write only\" key. Even if it is accidentally leaked, it will not affect who can \"see\" your builds.\n\n***\n\n# Transferring Ownership of a Project\n\nYou can transfer projects that you own to another organization you are a part of or to another user in the organization. This functionality only exists in our [Dashboard](https://on.cypress.io/dashboard).\n\n![Transfer Project dialog](https://cloud.githubusercontent.com/assets/1271364/22708695/440f4e5c-ed45-11e6-9a98-8f91b67871a3.png)\n\n***\n\n# Deleting a Project\n\nYou can delete projects you own. This will also delete all of their recorded runs. This functionality only exists in our [Dashboard](https://on.cypress.io/dashboard).\n\n![Delete project dialog](https://cloud.githubusercontent.com/assets/1271364/22708770/89f3080a-ed45-11e6-820e-7a8880fb0c20.png)\n","source":"guides/dashboard/projects.md","raw":"title: projects\n---\n\n# What are Projects?\n\nA Cypress project represents the directory of files and folders that make up your tests.\n\nThis is often the same repository as your code, but can also be a subfolder or a separate repository altogether.\n\n***\n\n# Adding a new Project\n\nProjects can **only** be added to Cypress through our [Desktop Application](https://on.cypress.io/guides/installing-and-running).\n\n1. Click :fa-plus: Add Project.\n\n![Add Project in LeftHand Corner](https://cloud.githubusercontent.com/assets/1271364/22699969/fe44c2e4-ed26-11e6-83d0-9baa0f51b15e.png)\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Projects added in our Desktop Application are strictly local to your computer. They are not tracked in any way by Cypress servers and do not communicate with us until they are [setup to be recorded](#section-recording-runs).\"\n}\n[/block]\n\n***\n\n# Setting up a Project to Record\n\nYou can also setup your project to have its test runs recorded and displayed in both the Desktop Application and the Dashboard.\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Not sure what the Dashboard is? [Its our service which displays all of your recorded runs](https://on.cypress.io/guides/dashboard-features).\"\n}\n[/block]\n\nDuring a run we record all failing tests, logs, screenshots, and videos.\n\n**To setup a project:**\n\n1. Click on the \"Runs\" tab of your project, then click \"Setup Project to Record\".\n\n![Setup Project Screen](https://cloud.githubusercontent.com/assets/1271364/22803739/2d66f42a-eee4-11e6-9b84-bd2e73a523d0.png)\n\n2. Fill in the name of your project (this is only for display purposes and can be changed later).\n\n![Project Name in Setup Project](https://cloud.githubusercontent.com/assets/1271364/22700406/9b3bc416-ed28-11e6-995b-297350420cce.png)\n\n3. Choose who owns the project. You can personally own it or select an organization you've created. Organizations work just like they do in Github. They enable you to seperate your personal and work projects. [Read more about Organizations.](https://on.cypress.io/guides/organizations)\n\n![Chosen Organization to Own](https://cloud.githubusercontent.com/assets/1271364/22700579/26353ba6-ed29-11e6-9510-5b7bf4a1cdd2.png)\n\n4. Choose whether this project is Public or Private.\n\n  **A public project** can have its recordings and runs seen by *anyone*. Typically these are open source projects.\n\n  **A private project** restricts its access to *only users you invite* to see your Organization or your own projects.\n\n![Privacy of Project](https://cloud.githubusercontent.com/assets/1271364/22803847/95870626-eee4-11e6-9627-7c00e8b77519.png)\n\n5. Click \"Setup Project\".\n\n![screen shot 2017-02-12 at 3 46 30 pm](https://cloud.githubusercontent.com/assets/1268976/22866093/64a9fb4c-f13e-11e6-9ebe-980ec078ba4e.png)\n\nYou are now ready to record your runs. Typically you would record your runs when running in [Continuous Integration](https://on.cypress.io/guides/continuous-integration) but you can also record your runs from your local computer.\n\n***\n\n## How do I record runs?\n\nNow that your project is setup, Cypress has inserted your unique [projectId](#section-what-is-a-projectid-) into `cypress.json`.\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Be sure to check your `cypress.json` into source control.\"\n}\n[/block]\n\nIn order to record we also require you provide us your [Record Key](#section-what-is-a-record-key-). The record key along with your projectId uniquely identifies your project.\n\nYou can provide the Record Key when running this command:\n\n```shell\ncypress run --record --key <record_key>\n```\n\nOr you can also set an environment variable and we will automatically look for that.\n\n```shell\n## you'd typically set this in your CI provider\nexport CYPRESS_RECORD_KEY=abc-key-123\n\n## we will automatically search and apply the key\ncypress run --record\n```\n\nOnce tests run, you will see them show up in the [Dashboard](https://on.cypress.io/dashboard) and in the Desktop Application.\n\n![Runs List](https://cloud.githubusercontent.com/assets/1271364/22800330/ff6c9474-eed6-11e6-9a32-8360d64b1071.png)\n\n![Dashboard Screenshot](https://cloud.githubusercontent.com/assets/1271364/22800284/d4dbe1d8-eed6-11e6-87ce-32474ea1000c.png)\n\n***\n\n## What is a projectId?\n\nOnce you setup your project to record, we generate a unique `projectId` for your project, and automatically insert it into your `cypress.json` file.\n\n**The `projectId` is a 6 character string in your cypress.json:**\n\n```javascript\n// cypress.json\n{\n  \"projectId\": \"a7bq2k\"\n}\n```\n\nThis is how we uniquely identify your project. If you manually alter this, **Cypress will no longer be able to identify your project or find the recorded builds for it**. We recommend that you check your `cypress.json` including the `projectId` into source control.\n\n***\n\n## What is a Record Key?\n\nOnce you're setup to record test runs, we automatically generate a **Record Key** for the project.\n\n**A record key is a GUID that looks like this:**\n\n```shell\nf4466038-70c2-4688-9ed9-106bf013cd73\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"You can create multiple Record Keys for a project, or delete existing ones from our [Dashboard](https://on.cypress.io/dashboard).\"\n}\n[/block]\n\nYou can also find your Record Key inside of the **Settings** tab.\n\n![screen shot 2017-02-12 at 4 12 40 pm](https://cloud.githubusercontent.com/assets/1268976/22866094/64aeeb3e-f13e-11e6-93f5-f7420892913f.png)\n\n***\n\n## How do a projectId and Record Key work together?\n\nCypress uses your `projectId` and **Record Key** together to uniquely identify projects.\n\n![ProjectID and Record Keys in Dashboard](https://cloud.githubusercontent.com/assets/1271364/22804089/8498f1a2-eee5-11e6-8598-4e60b4b1fc0b.png)\n\nThe record key is used to authenticate that your project is *allowed* to record. As long as your record key stays *private*, nobody will be able to record test runs for your project - even if they have your `projectId`.\n\nIf you have a public project you should *still* keep your record key secret. If someone knows both your record key and your `projectId`, they could record test runs for your project - which would mix up all of your results!\n\nThink of your record key as the key that enables you to **write and create** builds. However, it has nothing to do with being able to **read or see** builds once they are created.\n\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"If your Record Key is accidentally exposed, you simply need to remove it and generate a new one from our [Dashboard](https://on.cypress.io/dashboard).\"\n}\n[/block]\n\n***\n\n## What is the difference between public and private projects?\n\n**A public project** means that anyone can see the recorded runs for it. It's similar to how public projects on Github, Travis, or Circle are handled. Anyone who knows your `projectId` will be able to see the recorded runs for public projects.\n\n**A private project** means that only [users](https://on.cypress.io/guides/organizations#section-inviting-users) you explicitly invite to your [organization](https://on.cypress.io/guides/organizations) can see its recorded runs. Even if someone knows your `projectId`, they will not have access to your runs unless you have invited them.\n\nA Record Key has nothing to do with **viewing** build data - it's a \"write only\" key. Even if it is accidentally leaked, it will not affect who can \"see\" your builds.\n\n***\n\n# Transferring Ownership of a Project\n\nYou can transfer projects that you own to another organization you are a part of or to another user in the organization. This functionality only exists in our [Dashboard](https://on.cypress.io/dashboard).\n\n![Transfer Project dialog](https://cloud.githubusercontent.com/assets/1271364/22708695/440f4e5c-ed45-11e6-9a98-8f91b67871a3.png)\n\n***\n\n# Deleting a Project\n\nYou can delete projects you own. This will also delete all of their recorded runs. This functionality only exists in our [Dashboard](https://on.cypress.io/dashboard).\n\n![Delete project dialog](https://cloud.githubusercontent.com/assets/1271364/22708770/89f3080a-ed45-11e6-820e-7a8880fb0c20.png)\n","date":"2017-04-19T18:46:47.000Z","updated":"2017-04-19T18:46:47.000Z","path":"guides/dashboard/projects.html","comments":1,"layout":"page","_id":"cj1pby1kl002l68g8nuwwcdua","content":"<h1 id=\"What-are-Projects\"><a href=\"#What-are-Projects\" class=\"headerlink\" title=\"What are Projects?\"></a>What are Projects?</h1><p>A Cypress project represents the directory of files and folders that make up your tests.</p>\n<p>This is often the same repository as your code, but can also be a subfolder or a separate repository altogether.</p>\n<hr>\n<h1 id=\"Adding-a-new-Project\"><a href=\"#Adding-a-new-Project\" class=\"headerlink\" title=\"Adding a new Project\"></a>Adding a new Project</h1><p>Projects can <strong>only</strong> be added to Cypress through our <a href=\"https://on.cypress.io/guides/installing-and-running\" target=\"_blank\" rel=\"external\">Desktop Application</a>.</p>\n<ol>\n<li>Click :fa-plus: Add Project.</li>\n</ol>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22699969/fe44c2e4-ed26-11e6-83d0-9baa0f51b15e.png\" alt=\"Add Project in LeftHand Corner\"></p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “Projects added in our Desktop Application are strictly local to your computer. They are not tracked in any way by Cypress servers and do not communicate with us until they are <a href=\"#section-recording-runs\">setup to be recorded</a>.”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Setting-up-a-Project-to-Record\"><a href=\"#Setting-up-a-Project-to-Record\" class=\"headerlink\" title=\"Setting up a Project to Record\"></a>Setting up a Project to Record</h1><p>You can also setup your project to have its test runs recorded and displayed in both the Desktop Application and the Dashboard.</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “Not sure what the Dashboard is? <a href=\"https://on.cypress.io/guides/dashboard-features\" target=\"_blank\" rel=\"external\">Its our service which displays all of your recorded runs</a>.”<br>}<br>[/block]</p>\n<p>During a run we record all failing tests, logs, screenshots, and videos.</p>\n<p><strong>To setup a project:</strong></p>\n<ol>\n<li>Click on the “Runs” tab of your project, then click “Setup Project to Record”.</li>\n</ol>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22803739/2d66f42a-eee4-11e6-9b84-bd2e73a523d0.png\" alt=\"Setup Project Screen\"></p>\n<ol>\n<li>Fill in the name of your project (this is only for display purposes and can be changed later).</li>\n</ol>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22700406/9b3bc416-ed28-11e6-995b-297350420cce.png\" alt=\"Project Name in Setup Project\"></p>\n<ol>\n<li>Choose who owns the project. You can personally own it or select an organization you’ve created. Organizations work just like they do in Github. They enable you to seperate your personal and work projects. <a href=\"https://on.cypress.io/guides/organizations\" target=\"_blank\" rel=\"external\">Read more about Organizations.</a></li>\n</ol>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22700579/26353ba6-ed29-11e6-9510-5b7bf4a1cdd2.png\" alt=\"Chosen Organization to Own\"></p>\n<ol>\n<li><p>Choose whether this project is Public or Private.</p>\n<p><strong>A public project</strong> can have its recordings and runs seen by <em>anyone</em>. Typically these are open source projects.</p>\n<p><strong>A private project</strong> restricts its access to <em>only users you invite</em> to see your Organization or your own projects.</p>\n</li>\n</ol>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22803847/95870626-eee4-11e6-9627-7c00e8b77519.png\" alt=\"Privacy of Project\"></p>\n<ol>\n<li>Click “Setup Project”.</li>\n</ol>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/22866093/64a9fb4c-f13e-11e6-9ebe-980ec078ba4e.png\" alt=\"screen shot 2017-02-12 at 3 46 30 pm\"></p>\n<p>You are now ready to record your runs. Typically you would record your runs when running in <a href=\"https://on.cypress.io/guides/continuous-integration\" target=\"_blank\" rel=\"external\">Continuous Integration</a> but you can also record your runs from your local computer.</p>\n<hr>\n<h2 id=\"How-do-I-record-runs\"><a href=\"#How-do-I-record-runs\" class=\"headerlink\" title=\"How do I record runs?\"></a>How do I record runs?</h2><p>Now that your project is setup, Cypress has inserted your unique <a href=\"#section-what-is-a-projectid-\">projectId</a> into <code>cypress.json</code>.</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “Be sure to check your <code>cypress.json</code> into source control.”<br>}<br>[/block]</p>\n<p>In order to record we also require you provide us your <a href=\"#section-what-is-a-record-key-\">Record Key</a>. The record key along with your projectId uniquely identifies your project.</p>\n<p>You can provide the Record Key when running this command:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cypress run --record --key &lt;record_key&gt;</div></pre></td></tr></table></figure>\n<p>Or you can also set an environment variable and we will automatically look for that.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span># you'd typically set this in your CI provider</div><div class=\"line\">export CYPRESS_RECORD_KEY=abc-key-123</div><div class=\"line\"><span class=\"meta\"></span></div><div class=\"line\">## we will automatically search and apply the key</div><div class=\"line\">cypress run --record</div></pre></td></tr></table></figure>\n<p>Once tests run, you will see them show up in the <a href=\"https://on.cypress.io/dashboard\" target=\"_blank\" rel=\"external\">Dashboard</a> and in the Desktop Application.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22800330/ff6c9474-eed6-11e6-9a32-8360d64b1071.png\" alt=\"Runs List\"></p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22800284/d4dbe1d8-eed6-11e6-87ce-32474ea1000c.png\" alt=\"Dashboard Screenshot\"></p>\n<hr>\n<h2 id=\"What-is-a-projectId\"><a href=\"#What-is-a-projectId\" class=\"headerlink\" title=\"What is a projectId?\"></a>What is a projectId?</h2><p>Once you setup your project to record, we generate a unique <code>projectId</code> for your project, and automatically insert it into your <code>cypress.json</code> file.</p>\n<p><strong>The <code>projectId</code> is a 6 character string in your cypress.json:</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// cypress.json</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"projectId\"</span>: <span class=\"string\">\"a7bq2k\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>This is how we uniquely identify your project. If you manually alter this, <strong>Cypress will no longer be able to identify your project or find the recorded builds for it</strong>. We recommend that you check your <code>cypress.json</code> including the <code>projectId</code> into source control.</p>\n<hr>\n<h2 id=\"What-is-a-Record-Key\"><a href=\"#What-is-a-Record-Key\" class=\"headerlink\" title=\"What is a Record Key?\"></a>What is a Record Key?</h2><p>Once you’re setup to record test runs, we automatically generate a <strong>Record Key</strong> for the project.</p>\n<p><strong>A record key is a GUID that looks like this:</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">f4466038-70c2-4688-9ed9-106bf013cd73</div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “You can create multiple Record Keys for a project, or delete existing ones from our <a href=\"https://on.cypress.io/dashboard\" target=\"_blank\" rel=\"external\">Dashboard</a>.”<br>}<br>[/block]</p>\n<p>You can also find your Record Key inside of the <strong>Settings</strong> tab.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/22866094/64aeeb3e-f13e-11e6-93f5-f7420892913f.png\" alt=\"screen shot 2017-02-12 at 4 12 40 pm\"></p>\n<hr>\n<h2 id=\"How-do-a-projectId-and-Record-Key-work-together\"><a href=\"#How-do-a-projectId-and-Record-Key-work-together\" class=\"headerlink\" title=\"How do a projectId and Record Key work together?\"></a>How do a projectId and Record Key work together?</h2><p>Cypress uses your <code>projectId</code> and <strong>Record Key</strong> together to uniquely identify projects.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22804089/8498f1a2-eee5-11e6-8598-4e60b4b1fc0b.png\" alt=\"ProjectID and Record Keys in Dashboard\"></p>\n<p>The record key is used to authenticate that your project is <em>allowed</em> to record. As long as your record key stays <em>private</em>, nobody will be able to record test runs for your project - even if they have your <code>projectId</code>.</p>\n<p>If you have a public project you should <em>still</em> keep your record key secret. If someone knows both your record key and your <code>projectId</code>, they could record test runs for your project - which would mix up all of your results!</p>\n<p>Think of your record key as the key that enables you to <strong>write and create</strong> builds. However, it has nothing to do with being able to <strong>read or see</strong> builds once they are created.</p>\n<p>[block:callout]<br>{<br>  “type”: “warning”,<br>  “body”: “If your Record Key is accidentally exposed, you simply need to remove it and generate a new one from our <a href=\"https://on.cypress.io/dashboard\" target=\"_blank\" rel=\"external\">Dashboard</a>.”<br>}<br>[/block]</p>\n<hr>\n<h2 id=\"What-is-the-difference-between-public-and-private-projects\"><a href=\"#What-is-the-difference-between-public-and-private-projects\" class=\"headerlink\" title=\"What is the difference between public and private projects?\"></a>What is the difference between public and private projects?</h2><p><strong>A public project</strong> means that anyone can see the recorded runs for it. It’s similar to how public projects on Github, Travis, or Circle are handled. Anyone who knows your <code>projectId</code> will be able to see the recorded runs for public projects.</p>\n<p><strong>A private project</strong> means that only <a href=\"https://on.cypress.io/guides/organizations#section-inviting-users\" target=\"_blank\" rel=\"external\">users</a> you explicitly invite to your <a href=\"https://on.cypress.io/guides/organizations\" target=\"_blank\" rel=\"external\">organization</a> can see its recorded runs. Even if someone knows your <code>projectId</code>, they will not have access to your runs unless you have invited them.</p>\n<p>A Record Key has nothing to do with <strong>viewing</strong> build data - it’s a “write only” key. Even if it is accidentally leaked, it will not affect who can “see” your builds.</p>\n<hr>\n<h1 id=\"Transferring-Ownership-of-a-Project\"><a href=\"#Transferring-Ownership-of-a-Project\" class=\"headerlink\" title=\"Transferring Ownership of a Project\"></a>Transferring Ownership of a Project</h1><p>You can transfer projects that you own to another organization you are a part of or to another user in the organization. This functionality only exists in our <a href=\"https://on.cypress.io/dashboard\" target=\"_blank\" rel=\"external\">Dashboard</a>.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22708695/440f4e5c-ed45-11e6-9a98-8f91b67871a3.png\" alt=\"Transfer Project dialog\"></p>\n<hr>\n<h1 id=\"Deleting-a-Project\"><a href=\"#Deleting-a-Project\" class=\"headerlink\" title=\"Deleting a Project\"></a>Deleting a Project</h1><p>You can delete projects you own. This will also delete all of their recorded runs. This functionality only exists in our <a href=\"https://on.cypress.io/dashboard\" target=\"_blank\" rel=\"external\">Dashboard</a>.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22708770/89f3080a-ed45-11e6-820e-7a8880fb0c20.png\" alt=\"Delete project dialog\"></p>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<h1 id=\"What-are-Projects\"><a href=\"#What-are-Projects\" class=\"headerlink\" title=\"What are Projects?\"></a>What are Projects?</h1><p>A Cypress project represents the directory of files and folders that make up your tests.</p>\n<p>This is often the same repository as your code, but can also be a subfolder or a separate repository altogether.</p>\n<hr>\n<h1 id=\"Adding-a-new-Project\"><a href=\"#Adding-a-new-Project\" class=\"headerlink\" title=\"Adding a new Project\"></a>Adding a new Project</h1><p>Projects can <strong>only</strong> be added to Cypress through our <a href=\"https://on.cypress.io/guides/installing-and-running\">Desktop Application</a>.</p>\n<ol>\n<li>Click :fa-plus: Add Project.</li>\n</ol>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22699969/fe44c2e4-ed26-11e6-83d0-9baa0f51b15e.png\" alt=\"Add Project in LeftHand Corner\"></p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “Projects added in our Desktop Application are strictly local to your computer. They are not tracked in any way by Cypress servers and do not communicate with us until they are <a href=\"#section-recording-runs\">setup to be recorded</a>.”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Setting-up-a-Project-to-Record\"><a href=\"#Setting-up-a-Project-to-Record\" class=\"headerlink\" title=\"Setting up a Project to Record\"></a>Setting up a Project to Record</h1><p>You can also setup your project to have its test runs recorded and displayed in both the Desktop Application and the Dashboard.</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “Not sure what the Dashboard is? <a href=\"https://on.cypress.io/guides/dashboard-features\">Its our service which displays all of your recorded runs</a>.”<br>}<br>[/block]</p>\n<p>During a run we record all failing tests, logs, screenshots, and videos.</p>\n<p><strong>To setup a project:</strong></p>\n<ol>\n<li>Click on the “Runs” tab of your project, then click “Setup Project to Record”.</li>\n</ol>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22803739/2d66f42a-eee4-11e6-9b84-bd2e73a523d0.png\" alt=\"Setup Project Screen\"></p>\n<ol>\n<li>Fill in the name of your project (this is only for display purposes and can be changed later).</li>\n</ol>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22700406/9b3bc416-ed28-11e6-995b-297350420cce.png\" alt=\"Project Name in Setup Project\"></p>\n<ol>\n<li>Choose who owns the project. You can personally own it or select an organization you’ve created. Organizations work just like they do in Github. They enable you to seperate your personal and work projects. <a href=\"https://on.cypress.io/guides/organizations\">Read more about Organizations.</a></li>\n</ol>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22700579/26353ba6-ed29-11e6-9510-5b7bf4a1cdd2.png\" alt=\"Chosen Organization to Own\"></p>\n<ol>\n<li><p>Choose whether this project is Public or Private.</p>\n<p><strong>A public project</strong> can have its recordings and runs seen by <em>anyone</em>. Typically these are open source projects.</p>\n<p><strong>A private project</strong> restricts its access to <em>only users you invite</em> to see your Organization or your own projects.</p>\n</li>\n</ol>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22803847/95870626-eee4-11e6-9627-7c00e8b77519.png\" alt=\"Privacy of Project\"></p>\n<ol>\n<li>Click “Setup Project”.</li>\n</ol>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/22866093/64a9fb4c-f13e-11e6-9ebe-980ec078ba4e.png\" alt=\"screen shot 2017-02-12 at 3 46 30 pm\"></p>\n<p>You are now ready to record your runs. Typically you would record your runs when running in <a href=\"https://on.cypress.io/guides/continuous-integration\">Continuous Integration</a> but you can also record your runs from your local computer.</p>\n<hr>\n<h2 id=\"How-do-I-record-runs\"><a href=\"#How-do-I-record-runs\" class=\"headerlink\" title=\"How do I record runs?\"></a>How do I record runs?</h2><p>Now that your project is setup, Cypress has inserted your unique <a href=\"#section-what-is-a-projectid-\">projectId</a> into <code>cypress.json</code>.</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “Be sure to check your <code>cypress.json</code> into source control.”<br>}<br>[/block]</p>\n<p>In order to record we also require you provide us your <a href=\"#section-what-is-a-record-key-\">Record Key</a>. The record key along with your projectId uniquely identifies your project.</p>\n<p>You can provide the Record Key when running this command:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cypress run --record --key &lt;record_key&gt;</div></pre></td></tr></table></figure>\n<p>Or you can also set an environment variable and we will automatically look for that.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span># you'd typically set this in your CI provider</div><div class=\"line\">export CYPRESS_RECORD_KEY=abc-key-123</div><div class=\"line\"><span class=\"meta\"></div><div class=\"line\">#</span># we will automatically search and apply the key</div><div class=\"line\">cypress run --record</div></pre></td></tr></table></figure>\n<p>Once tests run, you will see them show up in the <a href=\"https://on.cypress.io/dashboard\">Dashboard</a> and in the Desktop Application.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22800330/ff6c9474-eed6-11e6-9a32-8360d64b1071.png\" alt=\"Runs List\"></p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22800284/d4dbe1d8-eed6-11e6-87ce-32474ea1000c.png\" alt=\"Dashboard Screenshot\"></p>\n<hr>\n<h2 id=\"What-is-a-projectId\"><a href=\"#What-is-a-projectId\" class=\"headerlink\" title=\"What is a projectId?\"></a>What is a projectId?</h2><p>Once you setup your project to record, we generate a unique <code>projectId</code> for your project, and automatically insert it into your <code>cypress.json</code> file.</p>\n<p><strong>The <code>projectId</code> is a 6 character string in your cypress.json:</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// cypress.json</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"projectId\"</span>: <span class=\"string\">\"a7bq2k\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>This is how we uniquely identify your project. If you manually alter this, <strong>Cypress will no longer be able to identify your project or find the recorded builds for it</strong>. We recommend that you check your <code>cypress.json</code> including the <code>projectId</code> into source control.</p>\n<hr>\n<h2 id=\"What-is-a-Record-Key\"><a href=\"#What-is-a-Record-Key\" class=\"headerlink\" title=\"What is a Record Key?\"></a>What is a Record Key?</h2><p>Once you’re setup to record test runs, we automatically generate a <strong>Record Key</strong> for the project.</p>\n<p><strong>A record key is a GUID that looks like this:</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">f4466038-70c2-4688-9ed9-106bf013cd73</div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “You can create multiple Record Keys for a project, or delete existing ones from our <a href=\"https://on.cypress.io/dashboard\">Dashboard</a>.”<br>}<br>[/block]</p>\n<p>You can also find your Record Key inside of the <strong>Settings</strong> tab.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/22866094/64aeeb3e-f13e-11e6-93f5-f7420892913f.png\" alt=\"screen shot 2017-02-12 at 4 12 40 pm\"></p>\n<hr>\n<h2 id=\"How-do-a-projectId-and-Record-Key-work-together\"><a href=\"#How-do-a-projectId-and-Record-Key-work-together\" class=\"headerlink\" title=\"How do a projectId and Record Key work together?\"></a>How do a projectId and Record Key work together?</h2><p>Cypress uses your <code>projectId</code> and <strong>Record Key</strong> together to uniquely identify projects.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22804089/8498f1a2-eee5-11e6-8598-4e60b4b1fc0b.png\" alt=\"ProjectID and Record Keys in Dashboard\"></p>\n<p>The record key is used to authenticate that your project is <em>allowed</em> to record. As long as your record key stays <em>private</em>, nobody will be able to record test runs for your project - even if they have your <code>projectId</code>.</p>\n<p>If you have a public project you should <em>still</em> keep your record key secret. If someone knows both your record key and your <code>projectId</code>, they could record test runs for your project - which would mix up all of your results!</p>\n<p>Think of your record key as the key that enables you to <strong>write and create</strong> builds. However, it has nothing to do with being able to <strong>read or see</strong> builds once they are created.</p>\n<p>[block:callout]<br>{<br>  “type”: “warning”,<br>  “body”: “If your Record Key is accidentally exposed, you simply need to remove it and generate a new one from our <a href=\"https://on.cypress.io/dashboard\">Dashboard</a>.”<br>}<br>[/block]</p>\n<hr>\n<h2 id=\"What-is-the-difference-between-public-and-private-projects\"><a href=\"#What-is-the-difference-between-public-and-private-projects\" class=\"headerlink\" title=\"What is the difference between public and private projects?\"></a>What is the difference between public and private projects?</h2><p><strong>A public project</strong> means that anyone can see the recorded runs for it. It’s similar to how public projects on Github, Travis, or Circle are handled. Anyone who knows your <code>projectId</code> will be able to see the recorded runs for public projects.</p>\n<p><strong>A private project</strong> means that only <a href=\"https://on.cypress.io/guides/organizations#section-inviting-users\">users</a> you explicitly invite to your <a href=\"https://on.cypress.io/guides/organizations\">organization</a> can see its recorded runs. Even if someone knows your <code>projectId</code>, they will not have access to your runs unless you have invited them.</p>\n<p>A Record Key has nothing to do with <strong>viewing</strong> build data - it’s a “write only” key. Even if it is accidentally leaked, it will not affect who can “see” your builds.</p>\n<hr>\n<h1 id=\"Transferring-Ownership-of-a-Project\"><a href=\"#Transferring-Ownership-of-a-Project\" class=\"headerlink\" title=\"Transferring Ownership of a Project\"></a>Transferring Ownership of a Project</h1><p>You can transfer projects that you own to another organization you are a part of or to another user in the organization. This functionality only exists in our <a href=\"https://on.cypress.io/dashboard\">Dashboard</a>.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22708695/440f4e5c-ed45-11e6-9a98-8f91b67871a3.png\" alt=\"Transfer Project dialog\"></p>\n<hr>\n<h1 id=\"Deleting-a-Project\"><a href=\"#Deleting-a-Project\" class=\"headerlink\" title=\"Deleting a Project\"></a>Deleting a Project</h1><p>You can delete projects you own. This will also delete all of their recorded runs. This functionality only exists in our <a href=\"https://on.cypress.io/dashboard\">Dashboard</a>.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22708770/89f3080a-ed45-11e6-820e-7a8880fb0c20.png\" alt=\"Delete project dialog\"></p>\n"},{"title":"installing-and-running","_content":"\n# System Requirements\n\nCypress is a desktop application. This desktop application is the equivalent replacement of Selenium Server and must be running to test in Cypress.\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"The desktop application manages your local projects. The actual testing will be done in a **browser**, not the desktop application\"\n}\n[/block]\n\nThe desktop application can be installed in the following operating systems:\n\n| Operating System |\n| ------ |\n| Linux |\n| OSX |\n\nWindows is [(not yet working)](https://github.com/cypress-io/cypress/issues/74).\n\nThere are no dependencies to install the Desktop Application, although if you want to [use Cypress from the Command Line](https://github.com/cypress-io/cypress-cli) you will need to have `node` installed.\n\n***\n\n# Installing\n\nYou can install Cypress in 2 different ways:\n* [Cypress CLI Tool](https://github.com/cypress-io/cypress-cli)\n* [Direct Download](#section-direct-download)\n\n## Command Line Tool\n\n```shell\n## install the Cypress CLI tool\nnpm install -g cypress-cli\n\n## install the Desktop Cypress app\ncypress install\n```\n\n![cypress-cli](https://cloud.githubusercontent.com/assets/1268976/14435124/4f632278-ffe4-11e5-9dab-0a2d493551b3.gif)\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"The Cypress CLI Tool contains many additional options such as installing a specific Cypress version.\\n\\nSee the [Cypress CLI Docs](https://github.com/cypress-io/cypress-cli#installation).\",\n  \"title\": \"Cypress CLI\"\n}\n[/block]\n\n## Direct Download\n\nYou can download Cypress directly [here.](http://download.cypress.io/desktop)\n\n[block:callout]\n{\n  \"type\": \"danger\",\n  \"body\": \"The vast majority of the time, Cypress will install correctly. But if you're on Linux you [might have to install some other dependencies](https://on.cypress.io/guides/continuous-integration#section-dependencies).\",\n  \"title\": \"Woops, I got an error installing\"\n}\n[/block]\n\n***\n\n# Logging In\n\nAfter installing, you will need to login to Cypress. Login currently requires a [Github](https://github.com/) account, if you do not have an account, you will have to [create one](https://github.com/join) to use Cypress.\n\n**To Login:**\n\n- Open the Cypress App -- just double click the app from your OS application's folder.\n- Click \"Log In with GitHub\".\n- Authorize GitHub access to your account.\n\n![Log In to Cypress](https://cloud.githubusercontent.com/assets/1271364/18134962/38a6c3d8-6f6e-11e6-998b-9884496cb898.png)\n\n## Your email: `jane.doe@gmail.com` has not been authorized.\n\nWhile in beta, the Cypress team has to whitelist the email address associated with your GitHub account in order for you to use Cypress.\n\n- If you received this error and have never filled out our [Early Adopter Access](http://goo.gl/forms/4vEMwj8LNT) form, fill out this form with the email in the error so we can whitelist it. You will receive an invite during one of our future Beta invites.\n- If you received this error after receiving a Beta invite email from Cypress, please send an email to **support@cypress.io** telling us the email in the error so we can whitelist it.\n\n***\n\n# Adding Projects\n\nAfter successfully logging in, you will need to add the project(s) you want to write Cypress tests in.\n\n- Click :fa-plus: Add Project.\n\n![Add Project in LeftHand Corner](https://cloud.githubusercontent.com/assets/1271364/22699969/fe44c2e4-ed26-11e6-83d0-9baa0f51b15e.png)\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Projects added in our Desktop Application are strictly local to your computer. They are not tracked in any way by Cypress servers and do not communicate with us until they are [setup to be recorded](https://on.cypress.io/guides/projects#section-recording-runs).\"\n}\n[/block]\n\n***\n\n# Running Tests from the GUI\n\nTo run tests:\n\n- Click on the project.\n- You will then come to a page listing all files in your project's `cypress/integration` folder. If it's a new project, you'll see a message about the folder structure generated for you and also an `example_spec.js` file.\n- Click on the test file you want to run or click \"Run All Tests\".\n- After opening your project in Cypress, Cypress will generate a `cypress.json` file in your project:\n\n```text\n<your project>/cypress.json\n```\n\nThis file contains a unique `projectId` and allows for specific Cypress [configuration](https://on.cypress.io/guides/configuration). It is okay to commit this file to `git`.\n\n***\n\n# Running Headlessly\n\nWhile you'll find yourself working primarily in the GUI, it is helpful to be able to run your tests headlessly.\n\nOnce you have the [Cypress CLI Tool](https://github.com/cypress-io/cypress-cli) installed, you can simply execute:\n\n```shell\ncypress run\n```\n\nAdditionally you can specify:\n\n- a single test file\n- [a specific reporter and reporter options](https://on.cypress.io/guides/reporters)\n- a different port\n- environment variables\n\nYou can [read about all of these options](https://github.com/cypress-io/cypress-cli#cypress-run-1) which are documented on the Cypress CLI tool.\n","source":"guides/getting-started/installing-and-running.md","raw":"title: installing-and-running\n---\n\n# System Requirements\n\nCypress is a desktop application. This desktop application is the equivalent replacement of Selenium Server and must be running to test in Cypress.\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"The desktop application manages your local projects. The actual testing will be done in a **browser**, not the desktop application\"\n}\n[/block]\n\nThe desktop application can be installed in the following operating systems:\n\n| Operating System |\n| ------ |\n| Linux |\n| OSX |\n\nWindows is [(not yet working)](https://github.com/cypress-io/cypress/issues/74).\n\nThere are no dependencies to install the Desktop Application, although if you want to [use Cypress from the Command Line](https://github.com/cypress-io/cypress-cli) you will need to have `node` installed.\n\n***\n\n# Installing\n\nYou can install Cypress in 2 different ways:\n* [Cypress CLI Tool](https://github.com/cypress-io/cypress-cli)\n* [Direct Download](#section-direct-download)\n\n## Command Line Tool\n\n```shell\n## install the Cypress CLI tool\nnpm install -g cypress-cli\n\n## install the Desktop Cypress app\ncypress install\n```\n\n![cypress-cli](https://cloud.githubusercontent.com/assets/1268976/14435124/4f632278-ffe4-11e5-9dab-0a2d493551b3.gif)\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"The Cypress CLI Tool contains many additional options such as installing a specific Cypress version.\\n\\nSee the [Cypress CLI Docs](https://github.com/cypress-io/cypress-cli#installation).\",\n  \"title\": \"Cypress CLI\"\n}\n[/block]\n\n## Direct Download\n\nYou can download Cypress directly [here.](http://download.cypress.io/desktop)\n\n[block:callout]\n{\n  \"type\": \"danger\",\n  \"body\": \"The vast majority of the time, Cypress will install correctly. But if you're on Linux you [might have to install some other dependencies](https://on.cypress.io/guides/continuous-integration#section-dependencies).\",\n  \"title\": \"Woops, I got an error installing\"\n}\n[/block]\n\n***\n\n# Logging In\n\nAfter installing, you will need to login to Cypress. Login currently requires a [Github](https://github.com/) account, if you do not have an account, you will have to [create one](https://github.com/join) to use Cypress.\n\n**To Login:**\n\n- Open the Cypress App -- just double click the app from your OS application's folder.\n- Click \"Log In with GitHub\".\n- Authorize GitHub access to your account.\n\n![Log In to Cypress](https://cloud.githubusercontent.com/assets/1271364/18134962/38a6c3d8-6f6e-11e6-998b-9884496cb898.png)\n\n## Your email: `jane.doe@gmail.com` has not been authorized.\n\nWhile in beta, the Cypress team has to whitelist the email address associated with your GitHub account in order for you to use Cypress.\n\n- If you received this error and have never filled out our [Early Adopter Access](http://goo.gl/forms/4vEMwj8LNT) form, fill out this form with the email in the error so we can whitelist it. You will receive an invite during one of our future Beta invites.\n- If you received this error after receiving a Beta invite email from Cypress, please send an email to **support@cypress.io** telling us the email in the error so we can whitelist it.\n\n***\n\n# Adding Projects\n\nAfter successfully logging in, you will need to add the project(s) you want to write Cypress tests in.\n\n- Click :fa-plus: Add Project.\n\n![Add Project in LeftHand Corner](https://cloud.githubusercontent.com/assets/1271364/22699969/fe44c2e4-ed26-11e6-83d0-9baa0f51b15e.png)\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Projects added in our Desktop Application are strictly local to your computer. They are not tracked in any way by Cypress servers and do not communicate with us until they are [setup to be recorded](https://on.cypress.io/guides/projects#section-recording-runs).\"\n}\n[/block]\n\n***\n\n# Running Tests from the GUI\n\nTo run tests:\n\n- Click on the project.\n- You will then come to a page listing all files in your project's `cypress/integration` folder. If it's a new project, you'll see a message about the folder structure generated for you and also an `example_spec.js` file.\n- Click on the test file you want to run or click \"Run All Tests\".\n- After opening your project in Cypress, Cypress will generate a `cypress.json` file in your project:\n\n```text\n<your project>/cypress.json\n```\n\nThis file contains a unique `projectId` and allows for specific Cypress [configuration](https://on.cypress.io/guides/configuration). It is okay to commit this file to `git`.\n\n***\n\n# Running Headlessly\n\nWhile you'll find yourself working primarily in the GUI, it is helpful to be able to run your tests headlessly.\n\nOnce you have the [Cypress CLI Tool](https://github.com/cypress-io/cypress-cli) installed, you can simply execute:\n\n```shell\ncypress run\n```\n\nAdditionally you can specify:\n\n- a single test file\n- [a specific reporter and reporter options](https://on.cypress.io/guides/reporters)\n- a different port\n- environment variables\n\nYou can [read about all of these options](https://github.com/cypress-io/cypress-cli#cypress-run-1) which are documented on the Cypress CLI tool.\n","date":"2017-04-19T18:46:47.000Z","updated":"2017-04-19T18:46:47.000Z","path":"guides/getting-started/installing-and-running.html","comments":1,"layout":"page","_id":"cj1pby1km002m68g8msvutgzo","content":"<h1 id=\"System-Requirements\"><a href=\"#System-Requirements\" class=\"headerlink\" title=\"System Requirements\"></a>System Requirements</h1><p>Cypress is a desktop application. This desktop application is the equivalent replacement of Selenium Server and must be running to test in Cypress.</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “The desktop application manages your local projects. The actual testing will be done in a <strong>browser</strong>, not the desktop application”<br>}<br>[/block]</p>\n<p>The desktop application can be installed in the following operating systems:</p>\n<table>\n<thead>\n<tr>\n<th>Operating System</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Linux</td>\n</tr>\n<tr>\n<td>OSX</td>\n</tr>\n</tbody>\n</table>\n<p>Windows is <a href=\"https://github.com/cypress-io/cypress/issues/74\" target=\"_blank\" rel=\"external\">(not yet working)</a>.</p>\n<p>There are no dependencies to install the Desktop Application, although if you want to <a href=\"https://github.com/cypress-io/cypress-cli\" target=\"_blank\" rel=\"external\">use Cypress from the Command Line</a> you will need to have <code>node</code> installed.</p>\n<hr>\n<h1 id=\"Installing\"><a href=\"#Installing\" class=\"headerlink\" title=\"Installing\"></a>Installing</h1><p>You can install Cypress in 2 different ways:</p>\n<ul>\n<li><a href=\"https://github.com/cypress-io/cypress-cli\" target=\"_blank\" rel=\"external\">Cypress CLI Tool</a></li>\n<li><a href=\"#section-direct-download\">Direct Download</a></li>\n</ul>\n<h2 id=\"Command-Line-Tool\"><a href=\"#Command-Line-Tool\" class=\"headerlink\" title=\"Command Line Tool\"></a>Command Line Tool</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span># install the Cypress CLI tool</div><div class=\"line\">npm install -g cypress-cli</div><div class=\"line\"><span class=\"meta\"></span></div><div class=\"line\">## install the Desktop Cypress app</div><div class=\"line\">cypress install</div></pre></td></tr></table></figure>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/14435124/4f632278-ffe4-11e5-9dab-0a2d493551b3.gif\" alt=\"cypress-cli\"></p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “The Cypress CLI Tool contains many additional options such as installing a specific Cypress version.\\n\\nSee the <a href=\"https://github.com/cypress-io/cypress-cli#installation\" target=\"_blank\" rel=\"external\">Cypress CLI Docs</a>.”,<br>  “title”: “Cypress CLI”<br>}<br>[/block]</p>\n<h2 id=\"Direct-Download\"><a href=\"#Direct-Download\" class=\"headerlink\" title=\"Direct Download\"></a>Direct Download</h2><p>You can download Cypress directly <a href=\"http://download.cypress.io/desktop\" target=\"_blank\" rel=\"external\">here.</a></p>\n<p>[block:callout]<br>{<br>  “type”: “danger”,<br>  “body”: “The vast majority of the time, Cypress will install correctly. But if you’re on Linux you <a href=\"https://on.cypress.io/guides/continuous-integration#section-dependencies\" target=\"_blank\" rel=\"external\">might have to install some other dependencies</a>.”,<br>  “title”: “Woops, I got an error installing”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Logging-In\"><a href=\"#Logging-In\" class=\"headerlink\" title=\"Logging In\"></a>Logging In</h1><p>After installing, you will need to login to Cypress. Login currently requires a <a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">Github</a> account, if you do not have an account, you will have to <a href=\"https://github.com/join\" target=\"_blank\" rel=\"external\">create one</a> to use Cypress.</p>\n<p><strong>To Login:</strong></p>\n<ul>\n<li>Open the Cypress App – just double click the app from your OS application’s folder.</li>\n<li>Click “Log In with GitHub”.</li>\n<li>Authorize GitHub access to your account.</li>\n</ul>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/18134962/38a6c3d8-6f6e-11e6-998b-9884496cb898.png\" alt=\"Log In to Cypress\"></p>\n<h2 id=\"Your-email-jane-doe-gmail-com-has-not-been-authorized\"><a href=\"#Your-email-jane-doe-gmail-com-has-not-been-authorized\" class=\"headerlink\" title=\"Your email: jane.doe@gmail.com has not been authorized.\"></a>Your email: <code>jane.doe@gmail.com</code> has not been authorized.</h2><p>While in beta, the Cypress team has to whitelist the email address associated with your GitHub account in order for you to use Cypress.</p>\n<ul>\n<li>If you received this error and have never filled out our <a href=\"http://goo.gl/forms/4vEMwj8LNT\" target=\"_blank\" rel=\"external\">Early Adopter Access</a> form, fill out this form with the email in the error so we can whitelist it. You will receive an invite during one of our future Beta invites.</li>\n<li>If you received this error after receiving a Beta invite email from Cypress, please send an email to <strong>support@cypress.io</strong> telling us the email in the error so we can whitelist it.</li>\n</ul>\n<hr>\n<h1 id=\"Adding-Projects\"><a href=\"#Adding-Projects\" class=\"headerlink\" title=\"Adding Projects\"></a>Adding Projects</h1><p>After successfully logging in, you will need to add the project(s) you want to write Cypress tests in.</p>\n<ul>\n<li>Click :fa-plus: Add Project.</li>\n</ul>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22699969/fe44c2e4-ed26-11e6-83d0-9baa0f51b15e.png\" alt=\"Add Project in LeftHand Corner\"></p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “Projects added in our Desktop Application are strictly local to your computer. They are not tracked in any way by Cypress servers and do not communicate with us until they are <a href=\"https://on.cypress.io/guides/projects#section-recording-runs\" target=\"_blank\" rel=\"external\">setup to be recorded</a>.”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Running-Tests-from-the-GUI\"><a href=\"#Running-Tests-from-the-GUI\" class=\"headerlink\" title=\"Running Tests from the GUI\"></a>Running Tests from the GUI</h1><p>To run tests:</p>\n<ul>\n<li>Click on the project.</li>\n<li>You will then come to a page listing all files in your project’s <code>cypress/integration</code> folder. If it’s a new project, you’ll see a message about the folder structure generated for you and also an <code>example_spec.js</code> file.</li>\n<li>Click on the test file you want to run or click “Run All Tests”.</li>\n<li>After opening your project in Cypress, Cypress will generate a <code>cypress.json</code> file in your project:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;your project&gt;/cypress.json</div></pre></td></tr></table></figure>\n<p>This file contains a unique <code>projectId</code> and allows for specific Cypress <a href=\"https://on.cypress.io/guides/configuration\" target=\"_blank\" rel=\"external\">configuration</a>. It is okay to commit this file to <code>git</code>.</p>\n<hr>\n<h1 id=\"Running-Headlessly\"><a href=\"#Running-Headlessly\" class=\"headerlink\" title=\"Running Headlessly\"></a>Running Headlessly</h1><p>While you’ll find yourself working primarily in the GUI, it is helpful to be able to run your tests headlessly.</p>\n<p>Once you have the <a href=\"https://github.com/cypress-io/cypress-cli\" target=\"_blank\" rel=\"external\">Cypress CLI Tool</a> installed, you can simply execute:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cypress run</div></pre></td></tr></table></figure>\n<p>Additionally you can specify:</p>\n<ul>\n<li>a single test file</li>\n<li><a href=\"https://on.cypress.io/guides/reporters\" target=\"_blank\" rel=\"external\">a specific reporter and reporter options</a></li>\n<li>a different port</li>\n<li>environment variables</li>\n</ul>\n<p>You can <a href=\"https://github.com/cypress-io/cypress-cli#cypress-run-1\" target=\"_blank\" rel=\"external\">read about all of these options</a> which are documented on the Cypress CLI tool.</p>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<h1 id=\"System-Requirements\"><a href=\"#System-Requirements\" class=\"headerlink\" title=\"System Requirements\"></a>System Requirements</h1><p>Cypress is a desktop application. This desktop application is the equivalent replacement of Selenium Server and must be running to test in Cypress.</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “The desktop application manages your local projects. The actual testing will be done in a <strong>browser</strong>, not the desktop application”<br>}<br>[/block]</p>\n<p>The desktop application can be installed in the following operating systems:</p>\n<table>\n<thead>\n<tr>\n<th>Operating System</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Linux</td>\n</tr>\n<tr>\n<td>OSX</td>\n</tr>\n</tbody>\n</table>\n<p>Windows is <a href=\"https://github.com/cypress-io/cypress/issues/74\">(not yet working)</a>.</p>\n<p>There are no dependencies to install the Desktop Application, although if you want to <a href=\"https://github.com/cypress-io/cypress-cli\">use Cypress from the Command Line</a> you will need to have <code>node</code> installed.</p>\n<hr>\n<h1 id=\"Installing\"><a href=\"#Installing\" class=\"headerlink\" title=\"Installing\"></a>Installing</h1><p>You can install Cypress in 2 different ways:</p>\n<ul>\n<li><a href=\"https://github.com/cypress-io/cypress-cli\">Cypress CLI Tool</a></li>\n<li><a href=\"#section-direct-download\">Direct Download</a></li>\n</ul>\n<h2 id=\"Command-Line-Tool\"><a href=\"#Command-Line-Tool\" class=\"headerlink\" title=\"Command Line Tool\"></a>Command Line Tool</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span># install the Cypress CLI tool</div><div class=\"line\">npm install -g cypress-cli</div><div class=\"line\"><span class=\"meta\"></div><div class=\"line\">#</span># install the Desktop Cypress app</div><div class=\"line\">cypress install</div></pre></td></tr></table></figure>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/14435124/4f632278-ffe4-11e5-9dab-0a2d493551b3.gif\" alt=\"cypress-cli\"></p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “The Cypress CLI Tool contains many additional options such as installing a specific Cypress version.\\n\\nSee the <a href=\"https://github.com/cypress-io/cypress-cli#installation\">Cypress CLI Docs</a>.”,<br>  “title”: “Cypress CLI”<br>}<br>[/block]</p>\n<h2 id=\"Direct-Download\"><a href=\"#Direct-Download\" class=\"headerlink\" title=\"Direct Download\"></a>Direct Download</h2><p>You can download Cypress directly <a href=\"http://download.cypress.io/desktop\">here.</a></p>\n<p>[block:callout]<br>{<br>  “type”: “danger”,<br>  “body”: “The vast majority of the time, Cypress will install correctly. But if you’re on Linux you <a href=\"https://on.cypress.io/guides/continuous-integration#section-dependencies\">might have to install some other dependencies</a>.”,<br>  “title”: “Woops, I got an error installing”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Logging-In\"><a href=\"#Logging-In\" class=\"headerlink\" title=\"Logging In\"></a>Logging In</h1><p>After installing, you will need to login to Cypress. Login currently requires a <a href=\"https://github.com/\">Github</a> account, if you do not have an account, you will have to <a href=\"https://github.com/join\">create one</a> to use Cypress.</p>\n<p><strong>To Login:</strong></p>\n<ul>\n<li>Open the Cypress App – just double click the app from your OS application’s folder.</li>\n<li>Click “Log In with GitHub”.</li>\n<li>Authorize GitHub access to your account.</li>\n</ul>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/18134962/38a6c3d8-6f6e-11e6-998b-9884496cb898.png\" alt=\"Log In to Cypress\"></p>\n<h2 id=\"Your-email-jane-doe-gmail-com-has-not-been-authorized\"><a href=\"#Your-email-jane-doe-gmail-com-has-not-been-authorized\" class=\"headerlink\" title=\"Your email: jane.doe@gmail.com has not been authorized.\"></a>Your email: <code>jane.doe@gmail.com</code> has not been authorized.</h2><p>While in beta, the Cypress team has to whitelist the email address associated with your GitHub account in order for you to use Cypress.</p>\n<ul>\n<li>If you received this error and have never filled out our <a href=\"http://goo.gl/forms/4vEMwj8LNT\">Early Adopter Access</a> form, fill out this form with the email in the error so we can whitelist it. You will receive an invite during one of our future Beta invites.</li>\n<li>If you received this error after receiving a Beta invite email from Cypress, please send an email to <strong>support@cypress.io</strong> telling us the email in the error so we can whitelist it.</li>\n</ul>\n<hr>\n<h1 id=\"Adding-Projects\"><a href=\"#Adding-Projects\" class=\"headerlink\" title=\"Adding Projects\"></a>Adding Projects</h1><p>After successfully logging in, you will need to add the project(s) you want to write Cypress tests in.</p>\n<ul>\n<li>Click :fa-plus: Add Project.</li>\n</ul>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22699969/fe44c2e4-ed26-11e6-83d0-9baa0f51b15e.png\" alt=\"Add Project in LeftHand Corner\"></p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “Projects added in our Desktop Application are strictly local to your computer. They are not tracked in any way by Cypress servers and do not communicate with us until they are <a href=\"https://on.cypress.io/guides/projects#section-recording-runs\">setup to be recorded</a>.”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Running-Tests-from-the-GUI\"><a href=\"#Running-Tests-from-the-GUI\" class=\"headerlink\" title=\"Running Tests from the GUI\"></a>Running Tests from the GUI</h1><p>To run tests:</p>\n<ul>\n<li>Click on the project.</li>\n<li>You will then come to a page listing all files in your project’s <code>cypress/integration</code> folder. If it’s a new project, you’ll see a message about the folder structure generated for you and also an <code>example_spec.js</code> file.</li>\n<li>Click on the test file you want to run or click “Run All Tests”.</li>\n<li>After opening your project in Cypress, Cypress will generate a <code>cypress.json</code> file in your project:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;your project&gt;/cypress.json</div></pre></td></tr></table></figure>\n<p>This file contains a unique <code>projectId</code> and allows for specific Cypress <a href=\"https://on.cypress.io/guides/configuration\">configuration</a>. It is okay to commit this file to <code>git</code>.</p>\n<hr>\n<h1 id=\"Running-Headlessly\"><a href=\"#Running-Headlessly\" class=\"headerlink\" title=\"Running Headlessly\"></a>Running Headlessly</h1><p>While you’ll find yourself working primarily in the GUI, it is helpful to be able to run your tests headlessly.</p>\n<p>Once you have the <a href=\"https://github.com/cypress-io/cypress-cli\">Cypress CLI Tool</a> installed, you can simply execute:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cypress run</div></pre></td></tr></table></figure>\n<p>Additionally you can specify:</p>\n<ul>\n<li>a single test file</li>\n<li><a href=\"https://on.cypress.io/guides/reporters\">a specific reporter and reporter options</a></li>\n<li>a different port</li>\n<li>environment variables</li>\n</ul>\n<p>You can <a href=\"https://github.com/cypress-io/cypress-cli#cypress-run-1\">read about all of these options</a> which are documented on the Cypress CLI tool.</p>\n"},{"title":"using-the-cypress-runner","_content":"\n# Overview\n\nCypress runs tests in a unique interactive runner that allows you to see commands as they execute while also viewing the application under test.\n\n![Cypress Test Runner](https://www.cypress.io/img/test-runner-gui-in-browser.9e6f99d7.png)\n\n***\n\n# Test Runner Components:\n\n## Command Log\n\nThe lefthand side of the test runner is a visual representation of your test suite. Each test block is properly nested and each test, when clicked, displays every Cypress command and assertion executed within the test's block as well as any command or assertion executed in relevant `before`, `beforeEach`, `afterEach`, and `after` hooks.\n\n<img width=\"436\" alt=\"screen shot 2017-03-06 at 2 03 49 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/23626797/1a6a59f6-027c-11e7-9ca5-7451b97557a9.png\">\n\n**Hovering on Commands**\n\nEach command and assertion, when hovered over, restores the Application Under Test (righthand side) to the state it was in when that command executed. This allows you to 'time-travel' back to previous states of your application when testing.\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"By default, Cypress keeps 50 tests worth of snapshots and command data for time traveling. If you are seeing extremely high memory consumption in your browser, you may want to lower the `numTestsKeptInMemory` in your [configuration](https://on.cypress.io/guides/configuration#section-global).\"\n}\n[/block]\n\n**Clicking on Commands**\n\nEach command, assertion, or error, when clicked on, displays extra information in the dev tools console. Clicking also 'pins' the Application Under Test (righthand side) to it's previous state when the command executed.\n\n![Click to console.log and to pin](https://cloud.githubusercontent.com/assets/1271364/23626854/59b2e6dc-027c-11e7-8c9e-7b4c9162f4c5.png)\n\n***\n\n## Instrument Panel\n\nFor certain commands like [`cy.route()`](https://on.cypress.io/api/route), [`cy.stub()`](https://on.cypress.io/api/stub), and [`cy.spy()`](https://on.cypress.io/api/spy), an extra instrument panel is displayed above the test to give more information about the state of your tests.\n\n*Routes*\n\n![Routes Instrument Panel](https://cloud.githubusercontent.com/assets/1271364/23625143/2500b172-0276-11e7-824a-590562176818.png)\n\n*Stubs*\n\n![Stubs Instrument Panel](https://cloud.githubusercontent.com/assets/1157043/22437473/335f7104-e6f6-11e6-8ee8-74dc21e7d4fa.png)\n\n*Spies*\n\n![Spies Instrument Panel](https://cloud.githubusercontent.com/assets/1157043/22437713/1d5f7be6-e6f7-11e6-9457-f35cbeaa5385.png)\n\n## Application Under Test\n\nThe righthand side of the test runner is used to display the Application Under Test (AUT: the application that was navigated to using a [`cy.visit()`](https://on.cypress.io/api/visit) or any subsequent routing calls made from the visited application.\n\nIn the example below, we wrote the following code in our test file:\n\n```javascript\ncy.visit('https://example.cypress.io')\n\ncy.title().should('include', 'Kitchen Sink')\n```\n\nIn the corresponding Application Preview below, you can see `https://example.cypress.io` is being displayed in the righthand side. Not only is the application visible, but it is fully interactable. You can open your developer tools to inspect elements as you would your normal application. The DOM is completely available for debugging.\n\n![screen shot 2017-03-06 at 2 31 06 pm](https://cloud.githubusercontent.com/assets/1271364/23626182/ec9d421a-0279-11e7-8ff2-42f33d2fe1ca.png)\n\nThe AUT also displays in the size and orientation specified in your tests. You can change the size or orientation with the [`cy.viewport()`](https://on.cypress.io/api/viewport) command or in your [Cypress configuration](https://docs.cypress.io/docs/configuration#section-viewport). If the AUT does not fit within the current browser window, it is scaled appropriately to fit within the window.\n\nThe current size and scale of the AUT is displayed in the top right corner of the window.\n\nThe image below shows that our application is displaying at `1000px` width, `660px` height and scaled to `100%`.\n\n![screen shot 2017-03-06 at 2 57 00 pm](https://cloud.githubusercontent.com/assets/1271364/23627080/43eda9c6-027d-11e7-8cb9-270e074587cb.png)\n\n*Note: The righthand side may also be used to display syntax errors in your test file that prevent the tests from running.*\n\n![screen shot 2017-03-06 at 2 19 23 pm](https://cloud.githubusercontent.com/assets/1271364/23625643/f04a6976-0277-11e7-8ff2-0be479e79e8a.png)\n\n","source":"guides/getting-started/using-the-cypress-runner.md","raw":"title: using-the-cypress-runner\n---\n\n# Overview\n\nCypress runs tests in a unique interactive runner that allows you to see commands as they execute while also viewing the application under test.\n\n![Cypress Test Runner](https://www.cypress.io/img/test-runner-gui-in-browser.9e6f99d7.png)\n\n***\n\n# Test Runner Components:\n\n## Command Log\n\nThe lefthand side of the test runner is a visual representation of your test suite. Each test block is properly nested and each test, when clicked, displays every Cypress command and assertion executed within the test's block as well as any command or assertion executed in relevant `before`, `beforeEach`, `afterEach`, and `after` hooks.\n\n<img width=\"436\" alt=\"screen shot 2017-03-06 at 2 03 49 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/23626797/1a6a59f6-027c-11e7-9ca5-7451b97557a9.png\">\n\n**Hovering on Commands**\n\nEach command and assertion, when hovered over, restores the Application Under Test (righthand side) to the state it was in when that command executed. This allows you to 'time-travel' back to previous states of your application when testing.\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"By default, Cypress keeps 50 tests worth of snapshots and command data for time traveling. If you are seeing extremely high memory consumption in your browser, you may want to lower the `numTestsKeptInMemory` in your [configuration](https://on.cypress.io/guides/configuration#section-global).\"\n}\n[/block]\n\n**Clicking on Commands**\n\nEach command, assertion, or error, when clicked on, displays extra information in the dev tools console. Clicking also 'pins' the Application Under Test (righthand side) to it's previous state when the command executed.\n\n![Click to console.log and to pin](https://cloud.githubusercontent.com/assets/1271364/23626854/59b2e6dc-027c-11e7-8c9e-7b4c9162f4c5.png)\n\n***\n\n## Instrument Panel\n\nFor certain commands like [`cy.route()`](https://on.cypress.io/api/route), [`cy.stub()`](https://on.cypress.io/api/stub), and [`cy.spy()`](https://on.cypress.io/api/spy), an extra instrument panel is displayed above the test to give more information about the state of your tests.\n\n*Routes*\n\n![Routes Instrument Panel](https://cloud.githubusercontent.com/assets/1271364/23625143/2500b172-0276-11e7-824a-590562176818.png)\n\n*Stubs*\n\n![Stubs Instrument Panel](https://cloud.githubusercontent.com/assets/1157043/22437473/335f7104-e6f6-11e6-8ee8-74dc21e7d4fa.png)\n\n*Spies*\n\n![Spies Instrument Panel](https://cloud.githubusercontent.com/assets/1157043/22437713/1d5f7be6-e6f7-11e6-9457-f35cbeaa5385.png)\n\n## Application Under Test\n\nThe righthand side of the test runner is used to display the Application Under Test (AUT: the application that was navigated to using a [`cy.visit()`](https://on.cypress.io/api/visit) or any subsequent routing calls made from the visited application.\n\nIn the example below, we wrote the following code in our test file:\n\n```javascript\ncy.visit('https://example.cypress.io')\n\ncy.title().should('include', 'Kitchen Sink')\n```\n\nIn the corresponding Application Preview below, you can see `https://example.cypress.io` is being displayed in the righthand side. Not only is the application visible, but it is fully interactable. You can open your developer tools to inspect elements as you would your normal application. The DOM is completely available for debugging.\n\n![screen shot 2017-03-06 at 2 31 06 pm](https://cloud.githubusercontent.com/assets/1271364/23626182/ec9d421a-0279-11e7-8ff2-42f33d2fe1ca.png)\n\nThe AUT also displays in the size and orientation specified in your tests. You can change the size or orientation with the [`cy.viewport()`](https://on.cypress.io/api/viewport) command or in your [Cypress configuration](https://docs.cypress.io/docs/configuration#section-viewport). If the AUT does not fit within the current browser window, it is scaled appropriately to fit within the window.\n\nThe current size and scale of the AUT is displayed in the top right corner of the window.\n\nThe image below shows that our application is displaying at `1000px` width, `660px` height and scaled to `100%`.\n\n![screen shot 2017-03-06 at 2 57 00 pm](https://cloud.githubusercontent.com/assets/1271364/23627080/43eda9c6-027d-11e7-8cb9-270e074587cb.png)\n\n*Note: The righthand side may also be used to display syntax errors in your test file that prevent the tests from running.*\n\n![screen shot 2017-03-06 at 2 19 23 pm](https://cloud.githubusercontent.com/assets/1271364/23625643/f04a6976-0277-11e7-8ff2-0be479e79e8a.png)\n\n","date":"2017-04-19T18:46:47.000Z","updated":"2017-04-19T18:46:47.000Z","path":"guides/getting-started/using-the-cypress-runner.html","comments":1,"layout":"page","_id":"cj1pby1km002n68g82czfgwtj","content":"<h1 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h1><p>Cypress runs tests in a unique interactive runner that allows you to see commands as they execute while also viewing the application under test.</p>\n<p><img src=\"https://www.cypress.io/img/test-runner-gui-in-browser.9e6f99d7.png\" alt=\"Cypress Test Runner\"></p>\n<hr>\n<h1 id=\"Test-Runner-Components\"><a href=\"#Test-Runner-Components\" class=\"headerlink\" title=\"Test Runner Components:\"></a>Test Runner Components:</h1><h2 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h2><p>The lefthand side of the test runner is a visual representation of your test suite. Each test block is properly nested and each test, when clicked, displays every Cypress command and assertion executed within the test’s block as well as any command or assertion executed in relevant <code>before</code>, <code>beforeEach</code>, <code>afterEach</code>, and <code>after</code> hooks.</p>\n<p><img width=\"436\" alt=\"screen shot 2017-03-06 at 2 03 49 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/23626797/1a6a59f6-027c-11e7-9ca5-7451b97557a9.png\"></p>\n<p><strong>Hovering on Commands</strong></p>\n<p>Each command and assertion, when hovered over, restores the Application Under Test (righthand side) to the state it was in when that command executed. This allows you to ‘time-travel’ back to previous states of your application when testing.</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “By default, Cypress keeps 50 tests worth of snapshots and command data for time traveling. If you are seeing extremely high memory consumption in your browser, you may want to lower the <code>numTestsKeptInMemory</code> in your <a href=\"https://on.cypress.io/guides/configuration#section-global\" target=\"_blank\" rel=\"external\">configuration</a>.”<br>}<br>[/block]</p>\n<p><strong>Clicking on Commands</strong></p>\n<p>Each command, assertion, or error, when clicked on, displays extra information in the dev tools console. Clicking also ‘pins’ the Application Under Test (righthand side) to it’s previous state when the command executed.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/23626854/59b2e6dc-027c-11e7-8c9e-7b4c9162f4c5.png\" alt=\"Click to console.log and to pin\"></p>\n<hr>\n<h2 id=\"Instrument-Panel\"><a href=\"#Instrument-Panel\" class=\"headerlink\" title=\"Instrument Panel\"></a>Instrument Panel</h2><p>For certain commands like <a href=\"https://on.cypress.io/api/route\" target=\"_blank\" rel=\"external\"><code>cy.route()</code></a>, <a href=\"https://on.cypress.io/api/stub\" target=\"_blank\" rel=\"external\"><code>cy.stub()</code></a>, and <a href=\"https://on.cypress.io/api/spy\" target=\"_blank\" rel=\"external\"><code>cy.spy()</code></a>, an extra instrument panel is displayed above the test to give more information about the state of your tests.</p>\n<p><em>Routes</em></p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/23625143/2500b172-0276-11e7-824a-590562176818.png\" alt=\"Routes Instrument Panel\"></p>\n<p><em>Stubs</em></p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1157043/22437473/335f7104-e6f6-11e6-8ee8-74dc21e7d4fa.png\" alt=\"Stubs Instrument Panel\"></p>\n<p><em>Spies</em></p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1157043/22437713/1d5f7be6-e6f7-11e6-9457-f35cbeaa5385.png\" alt=\"Spies Instrument Panel\"></p>\n<h2 id=\"Application-Under-Test\"><a href=\"#Application-Under-Test\" class=\"headerlink\" title=\"Application Under Test\"></a>Application Under Test</h2><p>The righthand side of the test runner is used to display the Application Under Test (AUT: the application that was navigated to using a <a href=\"https://on.cypress.io/api/visit\" target=\"_blank\" rel=\"external\"><code>cy.visit()</code></a> or any subsequent routing calls made from the visited application.</p>\n<p>In the example below, we wrote the following code in our test file:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.visit(<span class=\"string\">'https://example.cypress.io'</span>)</div><div class=\"line\"></div><div class=\"line\">cy.title().should(<span class=\"string\">'include'</span>, <span class=\"string\">'Kitchen Sink'</span>)</div></pre></td></tr></table></figure>\n<p>In the corresponding Application Preview below, you can see <code>https://example.cypress.io</code> is being displayed in the righthand side. Not only is the application visible, but it is fully interactable. You can open your developer tools to inspect elements as you would your normal application. The DOM is completely available for debugging.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/23626182/ec9d421a-0279-11e7-8ff2-42f33d2fe1ca.png\" alt=\"screen shot 2017-03-06 at 2 31 06 pm\"></p>\n<p>The AUT also displays in the size and orientation specified in your tests. You can change the size or orientation with the <a href=\"https://on.cypress.io/api/viewport\" target=\"_blank\" rel=\"external\"><code>cy.viewport()</code></a> command or in your <a href=\"https://docs.cypress.io/docs/configuration#section-viewport\" target=\"_blank\" rel=\"external\">Cypress configuration</a>. If the AUT does not fit within the current browser window, it is scaled appropriately to fit within the window.</p>\n<p>The current size and scale of the AUT is displayed in the top right corner of the window.</p>\n<p>The image below shows that our application is displaying at <code>1000px</code> width, <code>660px</code> height and scaled to <code>100%</code>.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/23627080/43eda9c6-027d-11e7-8cb9-270e074587cb.png\" alt=\"screen shot 2017-03-06 at 2 57 00 pm\"></p>\n<p><em>Note: The righthand side may also be used to display syntax errors in your test file that prevent the tests from running.</em></p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/23625643/f04a6976-0277-11e7-8ff2-0be479e79e8a.png\" alt=\"screen shot 2017-03-06 at 2 19 23 pm\"></p>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<h1 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h1><p>Cypress runs tests in a unique interactive runner that allows you to see commands as they execute while also viewing the application under test.</p>\n<p><img src=\"https://www.cypress.io/img/test-runner-gui-in-browser.9e6f99d7.png\" alt=\"Cypress Test Runner\"></p>\n<hr>\n<h1 id=\"Test-Runner-Components\"><a href=\"#Test-Runner-Components\" class=\"headerlink\" title=\"Test Runner Components:\"></a>Test Runner Components:</h1><h2 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h2><p>The lefthand side of the test runner is a visual representation of your test suite. Each test block is properly nested and each test, when clicked, displays every Cypress command and assertion executed within the test’s block as well as any command or assertion executed in relevant <code>before</code>, <code>beforeEach</code>, <code>afterEach</code>, and <code>after</code> hooks.</p>\n<p><img width=\"436\" alt=\"screen shot 2017-03-06 at 2 03 49 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/23626797/1a6a59f6-027c-11e7-9ca5-7451b97557a9.png\"></p>\n<p><strong>Hovering on Commands</strong></p>\n<p>Each command and assertion, when hovered over, restores the Application Under Test (righthand side) to the state it was in when that command executed. This allows you to ‘time-travel’ back to previous states of your application when testing.</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “By default, Cypress keeps 50 tests worth of snapshots and command data for time traveling. If you are seeing extremely high memory consumption in your browser, you may want to lower the <code>numTestsKeptInMemory</code> in your <a href=\"https://on.cypress.io/guides/configuration#section-global\">configuration</a>.”<br>}<br>[/block]</p>\n<p><strong>Clicking on Commands</strong></p>\n<p>Each command, assertion, or error, when clicked on, displays extra information in the dev tools console. Clicking also ‘pins’ the Application Under Test (righthand side) to it’s previous state when the command executed.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/23626854/59b2e6dc-027c-11e7-8c9e-7b4c9162f4c5.png\" alt=\"Click to console.log and to pin\"></p>\n<hr>\n<h2 id=\"Instrument-Panel\"><a href=\"#Instrument-Panel\" class=\"headerlink\" title=\"Instrument Panel\"></a>Instrument Panel</h2><p>For certain commands like <a href=\"https://on.cypress.io/api/route\"><code>cy.route()</code></a>, <a href=\"https://on.cypress.io/api/stub\"><code>cy.stub()</code></a>, and <a href=\"https://on.cypress.io/api/spy\"><code>cy.spy()</code></a>, an extra instrument panel is displayed above the test to give more information about the state of your tests.</p>\n<p><em>Routes</em></p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/23625143/2500b172-0276-11e7-824a-590562176818.png\" alt=\"Routes Instrument Panel\"></p>\n<p><em>Stubs</em></p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1157043/22437473/335f7104-e6f6-11e6-8ee8-74dc21e7d4fa.png\" alt=\"Stubs Instrument Panel\"></p>\n<p><em>Spies</em></p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1157043/22437713/1d5f7be6-e6f7-11e6-9457-f35cbeaa5385.png\" alt=\"Spies Instrument Panel\"></p>\n<h2 id=\"Application-Under-Test\"><a href=\"#Application-Under-Test\" class=\"headerlink\" title=\"Application Under Test\"></a>Application Under Test</h2><p>The righthand side of the test runner is used to display the Application Under Test (AUT: the application that was navigated to using a <a href=\"https://on.cypress.io/api/visit\"><code>cy.visit()</code></a> or any subsequent routing calls made from the visited application.</p>\n<p>In the example below, we wrote the following code in our test file:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.visit(<span class=\"string\">'https://example.cypress.io'</span>)</div><div class=\"line\"></div><div class=\"line\">cy.title().should(<span class=\"string\">'include'</span>, <span class=\"string\">'Kitchen Sink'</span>)</div></pre></td></tr></table></figure>\n<p>In the corresponding Application Preview below, you can see <code>https://example.cypress.io</code> is being displayed in the righthand side. Not only is the application visible, but it is fully interactable. You can open your developer tools to inspect elements as you would your normal application. The DOM is completely available for debugging.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/23626182/ec9d421a-0279-11e7-8ff2-42f33d2fe1ca.png\" alt=\"screen shot 2017-03-06 at 2 31 06 pm\"></p>\n<p>The AUT also displays in the size and orientation specified in your tests. You can change the size or orientation with the <a href=\"https://on.cypress.io/api/viewport\"><code>cy.viewport()</code></a> command or in your <a href=\"https://docs.cypress.io/docs/configuration#section-viewport\">Cypress configuration</a>. If the AUT does not fit within the current browser window, it is scaled appropriately to fit within the window.</p>\n<p>The current size and scale of the AUT is displayed in the top right corner of the window.</p>\n<p>The image below shows that our application is displaying at <code>1000px</code> width, <code>660px</code> height and scaled to <code>100%</code>.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/23627080/43eda9c6-027d-11e7-8cb9-270e074587cb.png\" alt=\"screen shot 2017-03-06 at 2 57 00 pm\"></p>\n<p><em>Note: The righthand side may also be used to display syntax errors in your test file that prevent the tests from running.</em></p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/23625643/f04a6976-0277-11e7-8ff2-0be479e79e8a.png\" alt=\"screen shot 2017-03-06 at 2 19 23 pm\"></p>\n"},{"title":"writing-your-first-test","_content":"\n# Folder Structure\n\nAfter adding a new project, Cypress will automatically scaffold out a suggested folder structure. By default it will create:\n\n```text\n/cypress\n/cypress/fixtures\n/cypress/integration\n/cypress/support\n```\n\nCypress also adds placeholder files to help get you started with examples in each folder.\n\n**Example JSON fixture**\n```text\n/cypress/fixtures/example.json\n```\n\n**Example Integration Test**\n```text\n/cypress/integration/example_spec.js\n```\n\n**Example JavaScript Support Files**\n```text\n/cypress/support/commands.js\n/cypress/support/defaults.js\n/cypress/support/index.js\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe using support files to import common utilities](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/es2015_commonjs_modules_spec.js)\",\n  \"title\": \"Using Support files for common functionality\"\n}\n[/block]\n\n**Configuring Folder Structure**\n\nWhile Cypress allows for configuration of where your tests, fixtures, and support files are located, if you're starting your first project, we recommend you use the above structure.\n\nYou can modify the folder configuration in your `cypress.json`. See [configuration](https://on.cypress.io/guides/configuration) for more detail.\n\n***\n\n# Test Files\n\nTest files may be written as `.js`, `.jsx`, `.coffee`, or `cjsx` files.\n\nCypress supports ES2015, ES2016, ES2017, and JSX. ES2015 modules and CommonJS modules are also supported, so you can `import` or `require` both npm packages and local modules.\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe using ES2015 and CommonJS modules](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/es2015_commonjs_modules_spec.js)\",\n  \"title\": \"Importing ES2015 or CommonJS modules\"\n}\n[/block]\n\nTo see an example of every command used in Cypress, open the [`example_spec.js`](https://github.com/cypress-io/cypress-example-kitchensink/blob/master/cypress/integration/example_spec.js) within your `cypress/integration` folder.\n\nTo start writing tests for your app, simply create a new file like `app_spec.js` within your `cypress/integration` folder. Refresh your tests list in the Cypress GUI and your new file should have appeared in the list.\n\n***\n\n# How to Write Tests\n\nCypress is built on top of [Mocha](https://on.cypress.io/guides/bundled-tools#section-mocha) and uses its `bdd` interface. Tests you write in Cypress will mostly adhere to this style.\n\nIf you're familiar with writing tests in JavaScript, then writing tests in Cypress will be a breeze.\n\nWe're still working on introductory docs and videos. If you want to see Cypress in action, [check out some examples](https://on.cypress.io/guides/all-example-apps) of applications using Cypress tests and [check out some example recipes we've written](https://github.com/cypress-io/cypress-example-recipes) for special use cases.\n\n## BDD Interface\n\nThe BDD interface borrowed from [Mocha](https://on.cypress.io/guides/bundled-tools#section-mocha) provides `describe()`, `context()`, `it()` and `specify()`.\n\n`context()` is identical to `describe()` and `specify()` is identical to `it()`, so choose whatever terminology works best for you.\n\n```javascript\n// -- Start: Our Application Code --\nfunction add (a, b) {\n  return a + b\n}\n\nfunction subtract (a, b) {\n  return a - b\n}\n\nfunction divide (a, b) {\n  return a / b\n}\n\nfunction multiply (a, b) {\n  return a * b\n}\n// -- End: Our Application Code --\n\n// -- Start: Our Cypress Tests --\ndescribe('Unit test our math functions', function() {\n  context('math', function() {\n    it('can add numbers', function() {\n      expect(add(1, 2)).to.eq(3)\n    })\n\n    it('can subtract numbers', function() {\n      expect(subtract(5, 12)).to.eq(-7)\n    })\n\n    specify('can divide numbers', function() {\n      expect(divide(27, 9)).to.eq(3)\n    })\n\n    specify('can muliple numbers', function() {\n      expect(multiply(5, 4)).to.eq(20)\n    })\n  })\n})\n// -- End: Our Cypress Tests --\n\n```\n\n## Hooks\n\nCypress also provides hooks (borrowed from [Mocha](https://on.cypress.io/guides/bundled-tools#section-mocha)).\n\nThese are helpful to set conditions that you want run before a set of tests or before each test. They're also helpful to clean up conditions after a set of tests or after each test.\n\n```javascript\ndescribe('Hooks', function() {\n  before(function() {\n    // runs before all tests in this block\n  })\n\n  after(function() {\n    // runs after all tests in this block\n  })\n\n  beforeEach(function() {\n    // runs before each test in this block\n  })\n\n  afterEach(function() {\n    // runs after each test in this block\n  })\n})\n```\n\n**The order of hook and test execution is as follows:**\n\n- All `before()` hooks run (once)\n- Any `beforeEach()` hooks run\n- Tests run\n- Any `afterEach()` hooks run\n- All `after()` hooks run (once)\n\n## Excluding and Including Tests\n\nTo run a specified suite or test simply append `.only()` to the function. All nested suites will also be executed.\n\n```javascript\n// -- Start: Our Application Code --\nfunction fizzbuzz (num) {\n  if (num % 3 === 0 && num % 5 === 0) {\n    return \"fizzbuzz\"\n  }\n\n  if (num % 3 === 0) {\n    return \"fizz\"\n  }\n\n  if (num % 5 === 0) {\n    return \"buzz\"\n  }\n}\n// -- End: Our Application Code --\n\n// -- Start: Our Cypress Tests --\ndescribe('Unit Test FizzBuzz', function(){\n  beforeEach(function(){\n    this.numsExpectedToEq = (arr, expected) =>\n      arr.forEach((num) => {\n        expect(fizzbuzz(num)).to.eq(expected)\n      })\n  })\n\n  // Only this test and it's beforeEach code would run\n  it.only('returns \"fizz\" when number is multiple of 3', function(){\n    this.numsExpectedToEq([9, 12, 18], \"fizz\")\n  })\n\n  it('returns \"buzz\" when number is multiple of 5', function(){\n    this.numsExpectedToEq([10, 20, 25], \"buzz\")\n  })\n\n  it('returns \"fizzbuzz\" when number is multiple of both 3 and 5', function(){\n    this.numsExpectedToEq([15, 30, 60], \"fizzbuzz\")\n  })\n})\n\n```\n\nTo skip a specified suite or test simply append `.skip()` to the function. All nested suites will also be skipped.\n\n```javascript\nit.skip('returns \"fizz\" when number is multiple of 3', function(){\n  this.numsExpectedToEq([9, 12, 18], \"fizz\")\n})\n```\n\n## Dynamically Generate Tests\n\nYou can dynamically generate tests using JavaScript.\n\n```javascript\ndescribe('if your app uses jQuery', function(){\n  ['mouseover', 'mouseout', 'mouseenter', 'mouseleave'].forEach((event) => {\n    it('triggers event: ' + event, function(){\n      // if your app uses jQuery, then we can trigger a jQuery\n      // event that causes the event callback to fire\n      cy\n        .get('#with-jquery').invoke('trigger', event)\n        .get('#messages').should('contain', 'the event ' + event + 'was fired')\n    })\n  })\n})\n```\n\nThe code above will produce a suite with 4 tests:\n\n```bash\n> if your app uses jQuery\n  > triggers event: 'mouseover'\n  > triggers event: 'mouseout'\n  > triggers event: 'mouseenter'\n  > triggers event: 'mouseleave'\n```\n\n","source":"guides/getting-started/writing-your-first-test.md","raw":"title: writing-your-first-test\n---\n\n# Folder Structure\n\nAfter adding a new project, Cypress will automatically scaffold out a suggested folder structure. By default it will create:\n\n```text\n/cypress\n/cypress/fixtures\n/cypress/integration\n/cypress/support\n```\n\nCypress also adds placeholder files to help get you started with examples in each folder.\n\n**Example JSON fixture**\n```text\n/cypress/fixtures/example.json\n```\n\n**Example Integration Test**\n```text\n/cypress/integration/example_spec.js\n```\n\n**Example JavaScript Support Files**\n```text\n/cypress/support/commands.js\n/cypress/support/defaults.js\n/cypress/support/index.js\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe using support files to import common utilities](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/es2015_commonjs_modules_spec.js)\",\n  \"title\": \"Using Support files for common functionality\"\n}\n[/block]\n\n**Configuring Folder Structure**\n\nWhile Cypress allows for configuration of where your tests, fixtures, and support files are located, if you're starting your first project, we recommend you use the above structure.\n\nYou can modify the folder configuration in your `cypress.json`. See [configuration](https://on.cypress.io/guides/configuration) for more detail.\n\n***\n\n# Test Files\n\nTest files may be written as `.js`, `.jsx`, `.coffee`, or `cjsx` files.\n\nCypress supports ES2015, ES2016, ES2017, and JSX. ES2015 modules and CommonJS modules are also supported, so you can `import` or `require` both npm packages and local modules.\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe using ES2015 and CommonJS modules](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/es2015_commonjs_modules_spec.js)\",\n  \"title\": \"Importing ES2015 or CommonJS modules\"\n}\n[/block]\n\nTo see an example of every command used in Cypress, open the [`example_spec.js`](https://github.com/cypress-io/cypress-example-kitchensink/blob/master/cypress/integration/example_spec.js) within your `cypress/integration` folder.\n\nTo start writing tests for your app, simply create a new file like `app_spec.js` within your `cypress/integration` folder. Refresh your tests list in the Cypress GUI and your new file should have appeared in the list.\n\n***\n\n# How to Write Tests\n\nCypress is built on top of [Mocha](https://on.cypress.io/guides/bundled-tools#section-mocha) and uses its `bdd` interface. Tests you write in Cypress will mostly adhere to this style.\n\nIf you're familiar with writing tests in JavaScript, then writing tests in Cypress will be a breeze.\n\nWe're still working on introductory docs and videos. If you want to see Cypress in action, [check out some examples](https://on.cypress.io/guides/all-example-apps) of applications using Cypress tests and [check out some example recipes we've written](https://github.com/cypress-io/cypress-example-recipes) for special use cases.\n\n## BDD Interface\n\nThe BDD interface borrowed from [Mocha](https://on.cypress.io/guides/bundled-tools#section-mocha) provides `describe()`, `context()`, `it()` and `specify()`.\n\n`context()` is identical to `describe()` and `specify()` is identical to `it()`, so choose whatever terminology works best for you.\n\n```javascript\n// -- Start: Our Application Code --\nfunction add (a, b) {\n  return a + b\n}\n\nfunction subtract (a, b) {\n  return a - b\n}\n\nfunction divide (a, b) {\n  return a / b\n}\n\nfunction multiply (a, b) {\n  return a * b\n}\n// -- End: Our Application Code --\n\n// -- Start: Our Cypress Tests --\ndescribe('Unit test our math functions', function() {\n  context('math', function() {\n    it('can add numbers', function() {\n      expect(add(1, 2)).to.eq(3)\n    })\n\n    it('can subtract numbers', function() {\n      expect(subtract(5, 12)).to.eq(-7)\n    })\n\n    specify('can divide numbers', function() {\n      expect(divide(27, 9)).to.eq(3)\n    })\n\n    specify('can muliple numbers', function() {\n      expect(multiply(5, 4)).to.eq(20)\n    })\n  })\n})\n// -- End: Our Cypress Tests --\n\n```\n\n## Hooks\n\nCypress also provides hooks (borrowed from [Mocha](https://on.cypress.io/guides/bundled-tools#section-mocha)).\n\nThese are helpful to set conditions that you want run before a set of tests or before each test. They're also helpful to clean up conditions after a set of tests or after each test.\n\n```javascript\ndescribe('Hooks', function() {\n  before(function() {\n    // runs before all tests in this block\n  })\n\n  after(function() {\n    // runs after all tests in this block\n  })\n\n  beforeEach(function() {\n    // runs before each test in this block\n  })\n\n  afterEach(function() {\n    // runs after each test in this block\n  })\n})\n```\n\n**The order of hook and test execution is as follows:**\n\n- All `before()` hooks run (once)\n- Any `beforeEach()` hooks run\n- Tests run\n- Any `afterEach()` hooks run\n- All `after()` hooks run (once)\n\n## Excluding and Including Tests\n\nTo run a specified suite or test simply append `.only()` to the function. All nested suites will also be executed.\n\n```javascript\n// -- Start: Our Application Code --\nfunction fizzbuzz (num) {\n  if (num % 3 === 0 && num % 5 === 0) {\n    return \"fizzbuzz\"\n  }\n\n  if (num % 3 === 0) {\n    return \"fizz\"\n  }\n\n  if (num % 5 === 0) {\n    return \"buzz\"\n  }\n}\n// -- End: Our Application Code --\n\n// -- Start: Our Cypress Tests --\ndescribe('Unit Test FizzBuzz', function(){\n  beforeEach(function(){\n    this.numsExpectedToEq = (arr, expected) =>\n      arr.forEach((num) => {\n        expect(fizzbuzz(num)).to.eq(expected)\n      })\n  })\n\n  // Only this test and it's beforeEach code would run\n  it.only('returns \"fizz\" when number is multiple of 3', function(){\n    this.numsExpectedToEq([9, 12, 18], \"fizz\")\n  })\n\n  it('returns \"buzz\" when number is multiple of 5', function(){\n    this.numsExpectedToEq([10, 20, 25], \"buzz\")\n  })\n\n  it('returns \"fizzbuzz\" when number is multiple of both 3 and 5', function(){\n    this.numsExpectedToEq([15, 30, 60], \"fizzbuzz\")\n  })\n})\n\n```\n\nTo skip a specified suite or test simply append `.skip()` to the function. All nested suites will also be skipped.\n\n```javascript\nit.skip('returns \"fizz\" when number is multiple of 3', function(){\n  this.numsExpectedToEq([9, 12, 18], \"fizz\")\n})\n```\n\n## Dynamically Generate Tests\n\nYou can dynamically generate tests using JavaScript.\n\n```javascript\ndescribe('if your app uses jQuery', function(){\n  ['mouseover', 'mouseout', 'mouseenter', 'mouseleave'].forEach((event) => {\n    it('triggers event: ' + event, function(){\n      // if your app uses jQuery, then we can trigger a jQuery\n      // event that causes the event callback to fire\n      cy\n        .get('#with-jquery').invoke('trigger', event)\n        .get('#messages').should('contain', 'the event ' + event + 'was fired')\n    })\n  })\n})\n```\n\nThe code above will produce a suite with 4 tests:\n\n```bash\n> if your app uses jQuery\n  > triggers event: 'mouseover'\n  > triggers event: 'mouseout'\n  > triggers event: 'mouseenter'\n  > triggers event: 'mouseleave'\n```\n\n","date":"2017-04-19T18:46:47.000Z","updated":"2017-04-19T18:46:47.000Z","path":"guides/getting-started/writing-your-first-test.html","comments":1,"layout":"page","_id":"cj1pby1kn002o68g8ao5jpi5h","content":"<h1 id=\"Folder-Structure\"><a href=\"#Folder-Structure\" class=\"headerlink\" title=\"Folder Structure\"></a>Folder Structure</h1><p>After adding a new project, Cypress will automatically scaffold out a suggested folder structure. By default it will create:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">/cypress</div><div class=\"line\">/cypress/fixtures</div><div class=\"line\">/cypress/integration</div><div class=\"line\">/cypress/support</div></pre></td></tr></table></figure>\n<p>Cypress also adds placeholder files to help get you started with examples in each folder.</p>\n<p><strong>Example JSON fixture</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/cypress/fixtures/example.json</div></pre></td></tr></table></figure></p>\n<p><strong>Example Integration Test</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/cypress/integration/example_spec.js</div></pre></td></tr></table></figure></p>\n<p><strong>Example JavaScript Support Files</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">/cypress/support/commands.js</div><div class=\"line\">/cypress/support/defaults.js</div><div class=\"line\">/cypress/support/index.js</div></pre></td></tr></table></figure></p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/es2015_commonjs_modules_spec.js\" target=\"_blank\" rel=\"external\">Check out our example recipe using support files to import common utilities</a>“,<br>  “title”: “Using Support files for common functionality”<br>}<br>[/block]</p>\n<p><strong>Configuring Folder Structure</strong></p>\n<p>While Cypress allows for configuration of where your tests, fixtures, and support files are located, if you’re starting your first project, we recommend you use the above structure.</p>\n<p>You can modify the folder configuration in your <code>cypress.json</code>. See <a href=\"https://on.cypress.io/guides/configuration\" target=\"_blank\" rel=\"external\">configuration</a> for more detail.</p>\n<hr>\n<h1 id=\"Test-Files\"><a href=\"#Test-Files\" class=\"headerlink\" title=\"Test Files\"></a>Test Files</h1><p>Test files may be written as <code>.js</code>, <code>.jsx</code>, <code>.coffee</code>, or <code>cjsx</code> files.</p>\n<p>Cypress supports ES2015, ES2016, ES2017, and JSX. ES2015 modules and CommonJS modules are also supported, so you can <code>import</code> or <code>require</code> both npm packages and local modules.</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/es2015_commonjs_modules_spec.js\" target=\"_blank\" rel=\"external\">Check out our example recipe using ES2015 and CommonJS modules</a>“,<br>  “title”: “Importing ES2015 or CommonJS modules”<br>}<br>[/block]</p>\n<p>To see an example of every command used in Cypress, open the <a href=\"https://github.com/cypress-io/cypress-example-kitchensink/blob/master/cypress/integration/example_spec.js\" target=\"_blank\" rel=\"external\"><code>example_spec.js</code></a> within your <code>cypress/integration</code> folder.</p>\n<p>To start writing tests for your app, simply create a new file like <code>app_spec.js</code> within your <code>cypress/integration</code> folder. Refresh your tests list in the Cypress GUI and your new file should have appeared in the list.</p>\n<hr>\n<h1 id=\"How-to-Write-Tests\"><a href=\"#How-to-Write-Tests\" class=\"headerlink\" title=\"How to Write Tests\"></a>How to Write Tests</h1><p>Cypress is built on top of <a href=\"https://on.cypress.io/guides/bundled-tools#section-mocha\" target=\"_blank\" rel=\"external\">Mocha</a> and uses its <code>bdd</code> interface. Tests you write in Cypress will mostly adhere to this style.</p>\n<p>If you’re familiar with writing tests in JavaScript, then writing tests in Cypress will be a breeze.</p>\n<p>We’re still working on introductory docs and videos. If you want to see Cypress in action, <a href=\"https://on.cypress.io/guides/all-example-apps\" target=\"_blank\" rel=\"external\">check out some examples</a> of applications using Cypress tests and <a href=\"https://github.com/cypress-io/cypress-example-recipes\" target=\"_blank\" rel=\"external\">check out some example recipes we’ve written</a> for special use cases.</p>\n<h2 id=\"BDD-Interface\"><a href=\"#BDD-Interface\" class=\"headerlink\" title=\"BDD Interface\"></a>BDD Interface</h2><p>The BDD interface borrowed from <a href=\"https://on.cypress.io/guides/bundled-tools#section-mocha\" target=\"_blank\" rel=\"external\">Mocha</a> provides <code>describe()</code>, <code>context()</code>, <code>it()</code> and <code>specify()</code>.</p>\n<p><code>context()</code> is identical to <code>describe()</code> and <code>specify()</code> is identical to <code>it()</code>, so choose whatever terminology works best for you.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// -- Start: Our Application Code --</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span> (<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> a + b</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subtract</span> (<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> a - b</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">divide</span> (<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> a / b</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">multiply</span> (<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> a * b</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// -- End: Our Application Code --</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// -- Start: Our Cypress Tests --</span></div><div class=\"line\">describe(<span class=\"string\">'Unit test our math functions'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  context(<span class=\"string\">'math'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    it(<span class=\"string\">'can add numbers'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      expect(add(<span class=\"number\">1</span>, <span class=\"number\">2</span>)).to.eq(<span class=\"number\">3</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    it(<span class=\"string\">'can subtract numbers'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      expect(subtract(<span class=\"number\">5</span>, <span class=\"number\">12</span>)).to.eq(<span class=\"number\">-7</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    specify(<span class=\"string\">'can divide numbers'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      expect(divide(<span class=\"number\">27</span>, <span class=\"number\">9</span>)).to.eq(<span class=\"number\">3</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    specify(<span class=\"string\">'can muliple numbers'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      expect(multiply(<span class=\"number\">5</span>, <span class=\"number\">4</span>)).to.eq(<span class=\"number\">20</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// -- End: Our Cypress Tests --</span></div></pre></td></tr></table></figure>\n<h2 id=\"Hooks\"><a href=\"#Hooks\" class=\"headerlink\" title=\"Hooks\"></a>Hooks</h2><p>Cypress also provides hooks (borrowed from <a href=\"https://on.cypress.io/guides/bundled-tools#section-mocha\" target=\"_blank\" rel=\"external\">Mocha</a>).</p>\n<p>These are helpful to set conditions that you want run before a set of tests or before each test. They’re also helpful to clean up conditions after a set of tests or after each test.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(<span class=\"string\">'Hooks'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  before(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// runs before all tests in this block</span></div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  after(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// runs after all tests in this block</span></div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  beforeEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// runs before each test in this block</span></div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  afterEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// runs after each test in this block</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p><strong>The order of hook and test execution is as follows:</strong></p>\n<ul>\n<li>All <code>before()</code> hooks run (once)</li>\n<li>Any <code>beforeEach()</code> hooks run</li>\n<li>Tests run</li>\n<li>Any <code>afterEach()</code> hooks run</li>\n<li>All <code>after()</code> hooks run (once)</li>\n</ul>\n<h2 id=\"Excluding-and-Including-Tests\"><a href=\"#Excluding-and-Including-Tests\" class=\"headerlink\" title=\"Excluding and Including Tests\"></a>Excluding and Including Tests</h2><p>To run a specified suite or test simply append <code>.only()</code> to the function. All nested suites will also be executed.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// -- Start: Our Application Code --</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fizzbuzz</span> (<span class=\"params\">num</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (num % <span class=\"number\">3</span> === <span class=\"number\">0</span> &amp;&amp; num % <span class=\"number\">5</span> === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"fizzbuzz\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (num % <span class=\"number\">3</span> === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"fizz\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (num % <span class=\"number\">5</span> === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"buzz\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// -- End: Our Application Code --</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// -- Start: Our Cypress Tests --</span></div><div class=\"line\">describe(<span class=\"string\">'Unit Test FizzBuzz'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  beforeEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.numsExpectedToEq = <span class=\"function\">(<span class=\"params\">arr, expected</span>) =&gt;</span></div><div class=\"line\">      arr.forEach(<span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> &#123;</div><div class=\"line\">        expect(fizzbuzz(num)).to.eq(expected)</div><div class=\"line\">      &#125;)</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Only this test and it's beforeEach code would run</span></div><div class=\"line\">  it.only(<span class=\"string\">'returns \"fizz\" when number is multiple of 3'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.numsExpectedToEq([<span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">18</span>], <span class=\"string\">\"fizz\"</span>)</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  it(<span class=\"string\">'returns \"buzz\" when number is multiple of 5'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.numsExpectedToEq([<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">25</span>], <span class=\"string\">\"buzz\"</span>)</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  it(<span class=\"string\">'returns \"fizzbuzz\" when number is multiple of both 3 and 5'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.numsExpectedToEq([<span class=\"number\">15</span>, <span class=\"number\">30</span>, <span class=\"number\">60</span>], <span class=\"string\">\"fizzbuzz\"</span>)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>To skip a specified suite or test simply append <code>.skip()</code> to the function. All nested suites will also be skipped.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">it.skip(<span class=\"string\">'returns \"fizz\" when number is multiple of 3'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.numsExpectedToEq([<span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">18</span>], <span class=\"string\">\"fizz\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Dynamically-Generate-Tests\"><a href=\"#Dynamically-Generate-Tests\" class=\"headerlink\" title=\"Dynamically Generate Tests\"></a>Dynamically Generate Tests</h2><p>You can dynamically generate tests using JavaScript.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(<span class=\"string\">'if your app uses jQuery'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  [<span class=\"string\">'mouseover'</span>, <span class=\"string\">'mouseout'</span>, <span class=\"string\">'mouseenter'</span>, <span class=\"string\">'mouseleave'</span>].forEach(<span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</div><div class=\"line\">    it(<span class=\"string\">'triggers event: '</span> + event, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"comment\">// if your app uses jQuery, then we can trigger a jQuery</span></div><div class=\"line\">      <span class=\"comment\">// event that causes the event callback to fire</span></div><div class=\"line\">      cy</div><div class=\"line\">        .get(<span class=\"string\">'#with-jquery'</span>).invoke(<span class=\"string\">'trigger'</span>, event)</div><div class=\"line\">        .get(<span class=\"string\">'#messages'</span>).should(<span class=\"string\">'contain'</span>, <span class=\"string\">'the event '</span> + event + <span class=\"string\">'was fired'</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>The code above will produce a suite with 4 tests:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">if</span> your app uses jQuery</div><div class=\"line\">  &gt; triggers event: <span class=\"string\">'mouseover'</span></div><div class=\"line\">  &gt; triggers event: <span class=\"string\">'mouseout'</span></div><div class=\"line\">  &gt; triggers event: <span class=\"string\">'mouseenter'</span></div><div class=\"line\">  &gt; triggers event: <span class=\"string\">'mouseleave'</span></div></pre></td></tr></table></figure>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<h1 id=\"Folder-Structure\"><a href=\"#Folder-Structure\" class=\"headerlink\" title=\"Folder Structure\"></a>Folder Structure</h1><p>After adding a new project, Cypress will automatically scaffold out a suggested folder structure. By default it will create:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">/cypress</div><div class=\"line\">/cypress/fixtures</div><div class=\"line\">/cypress/integration</div><div class=\"line\">/cypress/support</div></pre></td></tr></table></figure>\n<p>Cypress also adds placeholder files to help get you started with examples in each folder.</p>\n<p><strong>Example JSON fixture</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/cypress/fixtures/example.json</div></pre></td></tr></table></figure></p>\n<p><strong>Example Integration Test</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/cypress/integration/example_spec.js</div></pre></td></tr></table></figure></p>\n<p><strong>Example JavaScript Support Files</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">/cypress/support/commands.js</div><div class=\"line\">/cypress/support/defaults.js</div><div class=\"line\">/cypress/support/index.js</div></pre></td></tr></table></figure></p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/es2015_commonjs_modules_spec.js\">Check out our example recipe using support files to import common utilities</a>“,<br>  “title”: “Using Support files for common functionality”<br>}<br>[/block]</p>\n<p><strong>Configuring Folder Structure</strong></p>\n<p>While Cypress allows for configuration of where your tests, fixtures, and support files are located, if you’re starting your first project, we recommend you use the above structure.</p>\n<p>You can modify the folder configuration in your <code>cypress.json</code>. See <a href=\"https://on.cypress.io/guides/configuration\">configuration</a> for more detail.</p>\n<hr>\n<h1 id=\"Test-Files\"><a href=\"#Test-Files\" class=\"headerlink\" title=\"Test Files\"></a>Test Files</h1><p>Test files may be written as <code>.js</code>, <code>.jsx</code>, <code>.coffee</code>, or <code>cjsx</code> files.</p>\n<p>Cypress supports ES2015, ES2016, ES2017, and JSX. ES2015 modules and CommonJS modules are also supported, so you can <code>import</code> or <code>require</code> both npm packages and local modules.</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/es2015_commonjs_modules_spec.js\">Check out our example recipe using ES2015 and CommonJS modules</a>“,<br>  “title”: “Importing ES2015 or CommonJS modules”<br>}<br>[/block]</p>\n<p>To see an example of every command used in Cypress, open the <a href=\"https://github.com/cypress-io/cypress-example-kitchensink/blob/master/cypress/integration/example_spec.js\"><code>example_spec.js</code></a> within your <code>cypress/integration</code> folder.</p>\n<p>To start writing tests for your app, simply create a new file like <code>app_spec.js</code> within your <code>cypress/integration</code> folder. Refresh your tests list in the Cypress GUI and your new file should have appeared in the list.</p>\n<hr>\n<h1 id=\"How-to-Write-Tests\"><a href=\"#How-to-Write-Tests\" class=\"headerlink\" title=\"How to Write Tests\"></a>How to Write Tests</h1><p>Cypress is built on top of <a href=\"https://on.cypress.io/guides/bundled-tools#section-mocha\">Mocha</a> and uses its <code>bdd</code> interface. Tests you write in Cypress will mostly adhere to this style.</p>\n<p>If you’re familiar with writing tests in JavaScript, then writing tests in Cypress will be a breeze.</p>\n<p>We’re still working on introductory docs and videos. If you want to see Cypress in action, <a href=\"https://on.cypress.io/guides/all-example-apps\">check out some examples</a> of applications using Cypress tests and <a href=\"https://github.com/cypress-io/cypress-example-recipes\">check out some example recipes we’ve written</a> for special use cases.</p>\n<h2 id=\"BDD-Interface\"><a href=\"#BDD-Interface\" class=\"headerlink\" title=\"BDD Interface\"></a>BDD Interface</h2><p>The BDD interface borrowed from <a href=\"https://on.cypress.io/guides/bundled-tools#section-mocha\">Mocha</a> provides <code>describe()</code>, <code>context()</code>, <code>it()</code> and <code>specify()</code>.</p>\n<p><code>context()</code> is identical to <code>describe()</code> and <code>specify()</code> is identical to <code>it()</code>, so choose whatever terminology works best for you.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// -- Start: Our Application Code --</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span> (<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> a + b</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subtract</span> (<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> a - b</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">divide</span> (<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> a / b</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">multiply</span> (<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> a * b</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// -- End: Our Application Code --</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// -- Start: Our Cypress Tests --</span></div><div class=\"line\">describe(<span class=\"string\">'Unit test our math functions'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  context(<span class=\"string\">'math'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    it(<span class=\"string\">'can add numbers'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      expect(add(<span class=\"number\">1</span>, <span class=\"number\">2</span>)).to.eq(<span class=\"number\">3</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    it(<span class=\"string\">'can subtract numbers'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      expect(subtract(<span class=\"number\">5</span>, <span class=\"number\">12</span>)).to.eq(<span class=\"number\">-7</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    specify(<span class=\"string\">'can divide numbers'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      expect(divide(<span class=\"number\">27</span>, <span class=\"number\">9</span>)).to.eq(<span class=\"number\">3</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    specify(<span class=\"string\">'can muliple numbers'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      expect(multiply(<span class=\"number\">5</span>, <span class=\"number\">4</span>)).to.eq(<span class=\"number\">20</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// -- End: Our Cypress Tests --</span></div></pre></td></tr></table></figure>\n<h2 id=\"Hooks\"><a href=\"#Hooks\" class=\"headerlink\" title=\"Hooks\"></a>Hooks</h2><p>Cypress also provides hooks (borrowed from <a href=\"https://on.cypress.io/guides/bundled-tools#section-mocha\">Mocha</a>).</p>\n<p>These are helpful to set conditions that you want run before a set of tests or before each test. They’re also helpful to clean up conditions after a set of tests or after each test.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(<span class=\"string\">'Hooks'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  before(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// runs before all tests in this block</span></div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  after(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// runs after all tests in this block</span></div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  beforeEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// runs before each test in this block</span></div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  afterEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// runs after each test in this block</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p><strong>The order of hook and test execution is as follows:</strong></p>\n<ul>\n<li>All <code>before()</code> hooks run (once)</li>\n<li>Any <code>beforeEach()</code> hooks run</li>\n<li>Tests run</li>\n<li>Any <code>afterEach()</code> hooks run</li>\n<li>All <code>after()</code> hooks run (once)</li>\n</ul>\n<h2 id=\"Excluding-and-Including-Tests\"><a href=\"#Excluding-and-Including-Tests\" class=\"headerlink\" title=\"Excluding and Including Tests\"></a>Excluding and Including Tests</h2><p>To run a specified suite or test simply append <code>.only()</code> to the function. All nested suites will also be executed.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// -- Start: Our Application Code --</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fizzbuzz</span> (<span class=\"params\">num</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (num % <span class=\"number\">3</span> === <span class=\"number\">0</span> &amp;&amp; num % <span class=\"number\">5</span> === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"fizzbuzz\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (num % <span class=\"number\">3</span> === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"fizz\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (num % <span class=\"number\">5</span> === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"buzz\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// -- End: Our Application Code --</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// -- Start: Our Cypress Tests --</span></div><div class=\"line\">describe(<span class=\"string\">'Unit Test FizzBuzz'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  beforeEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.numsExpectedToEq = <span class=\"function\">(<span class=\"params\">arr, expected</span>) =&gt;</span></div><div class=\"line\">      arr.forEach(<span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> &#123;</div><div class=\"line\">        expect(fizzbuzz(num)).to.eq(expected)</div><div class=\"line\">      &#125;)</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Only this test and it's beforeEach code would run</span></div><div class=\"line\">  it.only(<span class=\"string\">'returns \"fizz\" when number is multiple of 3'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.numsExpectedToEq([<span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">18</span>], <span class=\"string\">\"fizz\"</span>)</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  it(<span class=\"string\">'returns \"buzz\" when number is multiple of 5'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.numsExpectedToEq([<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">25</span>], <span class=\"string\">\"buzz\"</span>)</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  it(<span class=\"string\">'returns \"fizzbuzz\" when number is multiple of both 3 and 5'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.numsExpectedToEq([<span class=\"number\">15</span>, <span class=\"number\">30</span>, <span class=\"number\">60</span>], <span class=\"string\">\"fizzbuzz\"</span>)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>To skip a specified suite or test simply append <code>.skip()</code> to the function. All nested suites will also be skipped.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">it.skip(<span class=\"string\">'returns \"fizz\" when number is multiple of 3'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.numsExpectedToEq([<span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">18</span>], <span class=\"string\">\"fizz\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Dynamically-Generate-Tests\"><a href=\"#Dynamically-Generate-Tests\" class=\"headerlink\" title=\"Dynamically Generate Tests\"></a>Dynamically Generate Tests</h2><p>You can dynamically generate tests using JavaScript.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(<span class=\"string\">'if your app uses jQuery'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  [<span class=\"string\">'mouseover'</span>, <span class=\"string\">'mouseout'</span>, <span class=\"string\">'mouseenter'</span>, <span class=\"string\">'mouseleave'</span>].forEach(<span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</div><div class=\"line\">    it(<span class=\"string\">'triggers event: '</span> + event, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"comment\">// if your app uses jQuery, then we can trigger a jQuery</span></div><div class=\"line\">      <span class=\"comment\">// event that causes the event callback to fire</span></div><div class=\"line\">      cy</div><div class=\"line\">        .get(<span class=\"string\">'#with-jquery'</span>).invoke(<span class=\"string\">'trigger'</span>, event)</div><div class=\"line\">        .get(<span class=\"string\">'#messages'</span>).should(<span class=\"string\">'contain'</span>, <span class=\"string\">'the event '</span> + event + <span class=\"string\">'was fired'</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>The code above will produce a suite with 4 tests:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">if</span> your app uses jQuery</div><div class=\"line\">  &gt; triggers event: <span class=\"string\">'mouseover'</span></div><div class=\"line\">  &gt; triggers event: <span class=\"string\">'mouseout'</span></div><div class=\"line\">  &gt; triggers event: <span class=\"string\">'mouseenter'</span></div><div class=\"line\">  &gt; triggers event: <span class=\"string\">'mouseleave'</span></div></pre></td></tr></table></figure>\n"},{"title":"bundled-tools","_content":"\n# Mocha\n\n[Mocha docs](http://mochajs.org/)\n\nCypress has adopted Mocha's `bdd` syntax, which fits perfectly with both integration and unit testing. All of the tests you'll be writing sit on the fundamental harness Mocha provides, namely:\n\n* [describe()](https://mochajs.org/#bdd)\n* [context()](https://mochajs.org/#bdd)\n* [it()](https://mochajs.org/#bdd)\n* [before()](https://mochajs.org/#hooks)\n* [beforeEach()](https://mochajs.org/#hooks)\n* [afterEach()](https://mochajs.org/#hooks)\n* [after()](https://mochajs.org/#hooks)\n* [.only()](https://mochajs.org/#exclusive-tests)\n* [.skip()](https://mochajs.org/#inclusive-tests)\n\nAdditionally, Mocha gives us excellent [`async` support](https://mochajs.org/#asynchronous-code). Cypress has extended Mocha, sanding off the rough edges, weird edge cases, bugs, and error messages. These fixes are all completely transparent.\n\n***\n\n# Chai\n\n[Chai docs](http://chaijs.com/)\n\nWhile Mocha provides us a framework to structure our tests, Chai gives us the ability to easily write assertions. Chai gives us readable assertions with excellent error messages. Cypress extends this, fixes several common pitfalls, and wraps Chai's DSL using [subjects](https://on.cypress.io/guides/making-assertions) and the [cy.should](https://on.cypress.io/api/should) command.\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe to see how to extend chai yourself](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/extending_chai_assertion_plugins_spec.js)\",\n  \"title\": \"Extending chai to use assertion plugins\"\n}\n[/block]\n\n***\n\n# Chai-jQuery\n\n[Chai-jQuery docs](https://github.com/chaijs/chai-jquery)\n\nWhen writing integration tests, you will likely work a lot with the DOM. Cypress brings in Chai-jQuery, which automatically extends Chai with specific jQuery chainer methods.\n\n***\n\n# Sinon\n\n[Sinon docs](http://sinonjs.org/)\n\nWhen writing unit tests, or even in integration-like tests, you often need to ability to [stub](http://sinonjs.org/docs/#stubs) and [spy](http://sinonjs.org/docs/#spies) methods. Cypress includes two methods, [`cy.stub`](https://on.cypress.io/api/stub) and [`cy.spy`](https://on.cypress.io/api/spy) that return Sinon stubs and spies, respectively.\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe for stubbing dependencies in unit tests](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/unit_test_stubbing_dependencies_spec.js)\",\n  \"title\": \"Stubbing Dependencies when Unit Testing\"\n}\n[/block]\n\n***\n\n# Sinon-Chai\n\n[Sinon-Chai docs](https://github.com/domenic/sinon-chai)\n\nWhen working with `stubs` or `spies` you'll regularly want to use those when writing Chai assertions. Cypress bundles in Sinon-Chai which extends Chai allowing you to [write assertions](https://github.com/domenic/sinon-chai#assertions) about `stubs` and `spies`.\n\n***\n\n# Sinon-As-Promised\n\n[Sinon-As-Promised docs](https://github.com/bendrucker/sinon-as-promised)\n\nSinon-as-Promised gives you the ability to stub methods that return Promises. To fulfill the async contract of these methods, you would use Sinon-as-Promised to force these methods to easily [`resolve`](https://github.com/bendrucker/sinon-as-promised#stubresolvesvalue---stub) or [`reject`](https://github.com/bendrucker/sinon-as-promised#stubrejectserr---stub) at your discretion.\n\n***\n\n# Other Library Utilities\n\nCypress also bundles the following tools on the `Cypress` object. These can be used anywhere inside of your tests.\n\n- [Cypress._](https://on.cypress.io/api/cypress-underscore) (Underscore)\n- [Cypress.$](https://on.cypress.io/api/cypress-jquery) (jQuery)\n- [Cypress.minimatch](https://on.cypress.io/api/cypress-minimatch) (minimatch.js)\n- [Cypress.moment](https://on.cypress.io/api/cypress-moment) (moment.js)\n- [Cypress.Blob](https://on.cypress.io/api/cypress-blob) (blob utils)\n- [Cypress.Promise](https://on.cypress.io/api/cypress-promise) (Bluebird)\n","source":"guides/guides/bundled-tools.md","raw":"title: bundled-tools\n---\n\n# Mocha\n\n[Mocha docs](http://mochajs.org/)\n\nCypress has adopted Mocha's `bdd` syntax, which fits perfectly with both integration and unit testing. All of the tests you'll be writing sit on the fundamental harness Mocha provides, namely:\n\n* [describe()](https://mochajs.org/#bdd)\n* [context()](https://mochajs.org/#bdd)\n* [it()](https://mochajs.org/#bdd)\n* [before()](https://mochajs.org/#hooks)\n* [beforeEach()](https://mochajs.org/#hooks)\n* [afterEach()](https://mochajs.org/#hooks)\n* [after()](https://mochajs.org/#hooks)\n* [.only()](https://mochajs.org/#exclusive-tests)\n* [.skip()](https://mochajs.org/#inclusive-tests)\n\nAdditionally, Mocha gives us excellent [`async` support](https://mochajs.org/#asynchronous-code). Cypress has extended Mocha, sanding off the rough edges, weird edge cases, bugs, and error messages. These fixes are all completely transparent.\n\n***\n\n# Chai\n\n[Chai docs](http://chaijs.com/)\n\nWhile Mocha provides us a framework to structure our tests, Chai gives us the ability to easily write assertions. Chai gives us readable assertions with excellent error messages. Cypress extends this, fixes several common pitfalls, and wraps Chai's DSL using [subjects](https://on.cypress.io/guides/making-assertions) and the [cy.should](https://on.cypress.io/api/should) command.\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe to see how to extend chai yourself](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/extending_chai_assertion_plugins_spec.js)\",\n  \"title\": \"Extending chai to use assertion plugins\"\n}\n[/block]\n\n***\n\n# Chai-jQuery\n\n[Chai-jQuery docs](https://github.com/chaijs/chai-jquery)\n\nWhen writing integration tests, you will likely work a lot with the DOM. Cypress brings in Chai-jQuery, which automatically extends Chai with specific jQuery chainer methods.\n\n***\n\n# Sinon\n\n[Sinon docs](http://sinonjs.org/)\n\nWhen writing unit tests, or even in integration-like tests, you often need to ability to [stub](http://sinonjs.org/docs/#stubs) and [spy](http://sinonjs.org/docs/#spies) methods. Cypress includes two methods, [`cy.stub`](https://on.cypress.io/api/stub) and [`cy.spy`](https://on.cypress.io/api/spy) that return Sinon stubs and spies, respectively.\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe for stubbing dependencies in unit tests](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/unit_test_stubbing_dependencies_spec.js)\",\n  \"title\": \"Stubbing Dependencies when Unit Testing\"\n}\n[/block]\n\n***\n\n# Sinon-Chai\n\n[Sinon-Chai docs](https://github.com/domenic/sinon-chai)\n\nWhen working with `stubs` or `spies` you'll regularly want to use those when writing Chai assertions. Cypress bundles in Sinon-Chai which extends Chai allowing you to [write assertions](https://github.com/domenic/sinon-chai#assertions) about `stubs` and `spies`.\n\n***\n\n# Sinon-As-Promised\n\n[Sinon-As-Promised docs](https://github.com/bendrucker/sinon-as-promised)\n\nSinon-as-Promised gives you the ability to stub methods that return Promises. To fulfill the async contract of these methods, you would use Sinon-as-Promised to force these methods to easily [`resolve`](https://github.com/bendrucker/sinon-as-promised#stubresolvesvalue---stub) or [`reject`](https://github.com/bendrucker/sinon-as-promised#stubrejectserr---stub) at your discretion.\n\n***\n\n# Other Library Utilities\n\nCypress also bundles the following tools on the `Cypress` object. These can be used anywhere inside of your tests.\n\n- [Cypress._](https://on.cypress.io/api/cypress-underscore) (Underscore)\n- [Cypress.$](https://on.cypress.io/api/cypress-jquery) (jQuery)\n- [Cypress.minimatch](https://on.cypress.io/api/cypress-minimatch) (minimatch.js)\n- [Cypress.moment](https://on.cypress.io/api/cypress-moment) (moment.js)\n- [Cypress.Blob](https://on.cypress.io/api/cypress-blob) (blob utils)\n- [Cypress.Promise](https://on.cypress.io/api/cypress-promise) (Bluebird)\n","date":"2017-04-19T18:46:47.000Z","updated":"2017-04-19T18:46:47.000Z","path":"guides/guides/bundled-tools.html","comments":1,"layout":"page","_id":"cj1pby1kn002p68g83iv5ub9g","content":"<h1 id=\"Mocha\"><a href=\"#Mocha\" class=\"headerlink\" title=\"Mocha\"></a>Mocha</h1><p><a href=\"http://mochajs.org/\" target=\"_blank\" rel=\"external\">Mocha docs</a></p>\n<p>Cypress has adopted Mocha’s <code>bdd</code> syntax, which fits perfectly with both integration and unit testing. All of the tests you’ll be writing sit on the fundamental harness Mocha provides, namely:</p>\n<ul>\n<li><a href=\"https://mochajs.org/#bdd\" target=\"_blank\" rel=\"external\">describe()</a></li>\n<li><a href=\"https://mochajs.org/#bdd\" target=\"_blank\" rel=\"external\">context()</a></li>\n<li><a href=\"https://mochajs.org/#bdd\" target=\"_blank\" rel=\"external\">it()</a></li>\n<li><a href=\"https://mochajs.org/#hooks\" target=\"_blank\" rel=\"external\">before()</a></li>\n<li><a href=\"https://mochajs.org/#hooks\" target=\"_blank\" rel=\"external\">beforeEach()</a></li>\n<li><a href=\"https://mochajs.org/#hooks\" target=\"_blank\" rel=\"external\">afterEach()</a></li>\n<li><a href=\"https://mochajs.org/#hooks\" target=\"_blank\" rel=\"external\">after()</a></li>\n<li><a href=\"https://mochajs.org/#exclusive-tests\" target=\"_blank\" rel=\"external\">.only()</a></li>\n<li><a href=\"https://mochajs.org/#inclusive-tests\" target=\"_blank\" rel=\"external\">.skip()</a></li>\n</ul>\n<p>Additionally, Mocha gives us excellent <a href=\"https://mochajs.org/#asynchronous-code\" target=\"_blank\" rel=\"external\"><code>async</code> support</a>. Cypress has extended Mocha, sanding off the rough edges, weird edge cases, bugs, and error messages. These fixes are all completely transparent.</p>\n<hr>\n<h1 id=\"Chai\"><a href=\"#Chai\" class=\"headerlink\" title=\"Chai\"></a>Chai</h1><p><a href=\"http://chaijs.com/\" target=\"_blank\" rel=\"external\">Chai docs</a></p>\n<p>While Mocha provides us a framework to structure our tests, Chai gives us the ability to easily write assertions. Chai gives us readable assertions with excellent error messages. Cypress extends this, fixes several common pitfalls, and wraps Chai’s DSL using <a href=\"https://on.cypress.io/guides/making-assertions\" target=\"_blank\" rel=\"external\">subjects</a> and the <a href=\"https://on.cypress.io/api/should\" target=\"_blank\" rel=\"external\">cy.should</a> command.</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/extending_chai_assertion_plugins_spec.js\" target=\"_blank\" rel=\"external\">Check out our example recipe to see how to extend chai yourself</a>“,<br>  “title”: “Extending chai to use assertion plugins”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Chai-jQuery\"><a href=\"#Chai-jQuery\" class=\"headerlink\" title=\"Chai-jQuery\"></a>Chai-jQuery</h1><p><a href=\"https://github.com/chaijs/chai-jquery\" target=\"_blank\" rel=\"external\">Chai-jQuery docs</a></p>\n<p>When writing integration tests, you will likely work a lot with the DOM. Cypress brings in Chai-jQuery, which automatically extends Chai with specific jQuery chainer methods.</p>\n<hr>\n<h1 id=\"Sinon\"><a href=\"#Sinon\" class=\"headerlink\" title=\"Sinon\"></a>Sinon</h1><p><a href=\"http://sinonjs.org/\" target=\"_blank\" rel=\"external\">Sinon docs</a></p>\n<p>When writing unit tests, or even in integration-like tests, you often need to ability to <a href=\"http://sinonjs.org/docs/#stubs\" target=\"_blank\" rel=\"external\">stub</a> and <a href=\"http://sinonjs.org/docs/#spies\" target=\"_blank\" rel=\"external\">spy</a> methods. Cypress includes two methods, <a href=\"https://on.cypress.io/api/stub\" target=\"_blank\" rel=\"external\"><code>cy.stub</code></a> and <a href=\"https://on.cypress.io/api/spy\" target=\"_blank\" rel=\"external\"><code>cy.spy</code></a> that return Sinon stubs and spies, respectively.</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/unit_test_stubbing_dependencies_spec.js\" target=\"_blank\" rel=\"external\">Check out our example recipe for stubbing dependencies in unit tests</a>“,<br>  “title”: “Stubbing Dependencies when Unit Testing”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Sinon-Chai\"><a href=\"#Sinon-Chai\" class=\"headerlink\" title=\"Sinon-Chai\"></a>Sinon-Chai</h1><p><a href=\"https://github.com/domenic/sinon-chai\" target=\"_blank\" rel=\"external\">Sinon-Chai docs</a></p>\n<p>When working with <code>stubs</code> or <code>spies</code> you’ll regularly want to use those when writing Chai assertions. Cypress bundles in Sinon-Chai which extends Chai allowing you to <a href=\"https://github.com/domenic/sinon-chai#assertions\" target=\"_blank\" rel=\"external\">write assertions</a> about <code>stubs</code> and <code>spies</code>.</p>\n<hr>\n<h1 id=\"Sinon-As-Promised\"><a href=\"#Sinon-As-Promised\" class=\"headerlink\" title=\"Sinon-As-Promised\"></a>Sinon-As-Promised</h1><p><a href=\"https://github.com/bendrucker/sinon-as-promised\" target=\"_blank\" rel=\"external\">Sinon-As-Promised docs</a></p>\n<p>Sinon-as-Promised gives you the ability to stub methods that return Promises. To fulfill the async contract of these methods, you would use Sinon-as-Promised to force these methods to easily <a href=\"https://github.com/bendrucker/sinon-as-promised#stubresolvesvalue---stub\" target=\"_blank\" rel=\"external\"><code>resolve</code></a> or <a href=\"https://github.com/bendrucker/sinon-as-promised#stubrejectserr---stub\" target=\"_blank\" rel=\"external\"><code>reject</code></a> at your discretion.</p>\n<hr>\n<h1 id=\"Other-Library-Utilities\"><a href=\"#Other-Library-Utilities\" class=\"headerlink\" title=\"Other Library Utilities\"></a>Other Library Utilities</h1><p>Cypress also bundles the following tools on the <code>Cypress</code> object. These can be used anywhere inside of your tests.</p>\n<ul>\n<li><a href=\"https://on.cypress.io/api/cypress-underscore\" target=\"_blank\" rel=\"external\">Cypress._</a> (Underscore)</li>\n<li><a href=\"https://on.cypress.io/api/cypress-jquery\" target=\"_blank\" rel=\"external\">Cypress.$</a> (jQuery)</li>\n<li><a href=\"https://on.cypress.io/api/cypress-minimatch\" target=\"_blank\" rel=\"external\">Cypress.minimatch</a> (minimatch.js)</li>\n<li><a href=\"https://on.cypress.io/api/cypress-moment\" target=\"_blank\" rel=\"external\">Cypress.moment</a> (moment.js)</li>\n<li><a href=\"https://on.cypress.io/api/cypress-blob\" target=\"_blank\" rel=\"external\">Cypress.Blob</a> (blob utils)</li>\n<li><a href=\"https://on.cypress.io/api/cypress-promise\" target=\"_blank\" rel=\"external\">Cypress.Promise</a> (Bluebird)</li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<h1 id=\"Mocha\"><a href=\"#Mocha\" class=\"headerlink\" title=\"Mocha\"></a>Mocha</h1><p><a href=\"http://mochajs.org/\">Mocha docs</a></p>\n<p>Cypress has adopted Mocha’s <code>bdd</code> syntax, which fits perfectly with both integration and unit testing. All of the tests you’ll be writing sit on the fundamental harness Mocha provides, namely:</p>\n<ul>\n<li><a href=\"https://mochajs.org/#bdd\">describe()</a></li>\n<li><a href=\"https://mochajs.org/#bdd\">context()</a></li>\n<li><a href=\"https://mochajs.org/#bdd\">it()</a></li>\n<li><a href=\"https://mochajs.org/#hooks\">before()</a></li>\n<li><a href=\"https://mochajs.org/#hooks\">beforeEach()</a></li>\n<li><a href=\"https://mochajs.org/#hooks\">afterEach()</a></li>\n<li><a href=\"https://mochajs.org/#hooks\">after()</a></li>\n<li><a href=\"https://mochajs.org/#exclusive-tests\">.only()</a></li>\n<li><a href=\"https://mochajs.org/#inclusive-tests\">.skip()</a></li>\n</ul>\n<p>Additionally, Mocha gives us excellent <a href=\"https://mochajs.org/#asynchronous-code\"><code>async</code> support</a>. Cypress has extended Mocha, sanding off the rough edges, weird edge cases, bugs, and error messages. These fixes are all completely transparent.</p>\n<hr>\n<h1 id=\"Chai\"><a href=\"#Chai\" class=\"headerlink\" title=\"Chai\"></a>Chai</h1><p><a href=\"http://chaijs.com/\">Chai docs</a></p>\n<p>While Mocha provides us a framework to structure our tests, Chai gives us the ability to easily write assertions. Chai gives us readable assertions with excellent error messages. Cypress extends this, fixes several common pitfalls, and wraps Chai’s DSL using <a href=\"https://on.cypress.io/guides/making-assertions\">subjects</a> and the <a href=\"https://on.cypress.io/api/should\">cy.should</a> command.</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/extending_chai_assertion_plugins_spec.js\">Check out our example recipe to see how to extend chai yourself</a>“,<br>  “title”: “Extending chai to use assertion plugins”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Chai-jQuery\"><a href=\"#Chai-jQuery\" class=\"headerlink\" title=\"Chai-jQuery\"></a>Chai-jQuery</h1><p><a href=\"https://github.com/chaijs/chai-jquery\">Chai-jQuery docs</a></p>\n<p>When writing integration tests, you will likely work a lot with the DOM. Cypress brings in Chai-jQuery, which automatically extends Chai with specific jQuery chainer methods.</p>\n<hr>\n<h1 id=\"Sinon\"><a href=\"#Sinon\" class=\"headerlink\" title=\"Sinon\"></a>Sinon</h1><p><a href=\"http://sinonjs.org/\">Sinon docs</a></p>\n<p>When writing unit tests, or even in integration-like tests, you often need to ability to <a href=\"http://sinonjs.org/docs/#stubs\">stub</a> and <a href=\"http://sinonjs.org/docs/#spies\">spy</a> methods. Cypress includes two methods, <a href=\"https://on.cypress.io/api/stub\"><code>cy.stub</code></a> and <a href=\"https://on.cypress.io/api/spy\"><code>cy.spy</code></a> that return Sinon stubs and spies, respectively.</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/unit_test_stubbing_dependencies_spec.js\">Check out our example recipe for stubbing dependencies in unit tests</a>“,<br>  “title”: “Stubbing Dependencies when Unit Testing”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Sinon-Chai\"><a href=\"#Sinon-Chai\" class=\"headerlink\" title=\"Sinon-Chai\"></a>Sinon-Chai</h1><p><a href=\"https://github.com/domenic/sinon-chai\">Sinon-Chai docs</a></p>\n<p>When working with <code>stubs</code> or <code>spies</code> you’ll regularly want to use those when writing Chai assertions. Cypress bundles in Sinon-Chai which extends Chai allowing you to <a href=\"https://github.com/domenic/sinon-chai#assertions\">write assertions</a> about <code>stubs</code> and <code>spies</code>.</p>\n<hr>\n<h1 id=\"Sinon-As-Promised\"><a href=\"#Sinon-As-Promised\" class=\"headerlink\" title=\"Sinon-As-Promised\"></a>Sinon-As-Promised</h1><p><a href=\"https://github.com/bendrucker/sinon-as-promised\">Sinon-As-Promised docs</a></p>\n<p>Sinon-as-Promised gives you the ability to stub methods that return Promises. To fulfill the async contract of these methods, you would use Sinon-as-Promised to force these methods to easily <a href=\"https://github.com/bendrucker/sinon-as-promised#stubresolvesvalue---stub\"><code>resolve</code></a> or <a href=\"https://github.com/bendrucker/sinon-as-promised#stubrejectserr---stub\"><code>reject</code></a> at your discretion.</p>\n<hr>\n<h1 id=\"Other-Library-Utilities\"><a href=\"#Other-Library-Utilities\" class=\"headerlink\" title=\"Other Library Utilities\"></a>Other Library Utilities</h1><p>Cypress also bundles the following tools on the <code>Cypress</code> object. These can be used anywhere inside of your tests.</p>\n<ul>\n<li><a href=\"https://on.cypress.io/api/cypress-underscore\">Cypress._</a> (Underscore)</li>\n<li><a href=\"https://on.cypress.io/api/cypress-jquery\">Cypress.$</a> (jQuery)</li>\n<li><a href=\"https://on.cypress.io/api/cypress-minimatch\">Cypress.minimatch</a> (minimatch.js)</li>\n<li><a href=\"https://on.cypress.io/api/cypress-moment\">Cypress.moment</a> (moment.js)</li>\n<li><a href=\"https://on.cypress.io/api/cypress-blob\">Cypress.Blob</a> (blob utils)</li>\n<li><a href=\"https://on.cypress.io/api/cypress-promise\">Cypress.Promise</a> (Bluebird)</li>\n</ul>\n"},{"title":"creating-fixtures","_content":"\n# What are Fixtures\n\nA fixture in Cypress is a fixed set of data located in a file that is used as a baseline for running tests. The purpose of a test fixture is to ensure that there is a well known and fixed environment in which tests are run so that results are repeatable. Fixtures are accessed within tests by using the [`cy.fixture`](https://on.cypress.io/api/fixture) command.\n\n***\n\n# Supported Formats\n\n| File Extension |\n| --- |\n| `.coffee` |\n| `.gif` |\n| `.html` |\n| `.jpeg` |\n| `.jpg` |\n| `.js` |\n| `.json` |\n| `.png` |\n| `.txt` |\n| `.csv` |\n| `.tif` |\n| `.tiff` |\n| `.zip` |\n\n***\n\n## Validation\n\nCypress will automatically validate your fixtures. If your `.json`, `.js`, or `.coffee` files contain syntax errors, they will automatically be shown in the Command Log.\n\n***\n\n## Formatting\n\nCypress automatically formats your fixture files. That means you can paste in a single line of `json` and the next time Cypress serves this fixture, it will format / indent the `json` which makes it easier to read and debug.\n\nImage fixtures will be sent as `base64`.\n\n***\n\n# Fixtures vs Factories\n\n***\n\n# Routing Responses\n\n***\n\n# Organizing Fixtures\n\nCypress will automatically scaffold out a suggested folder structure for organizing your fixtures on every new project. By default it will create this structure when you boot your project:\n\n```text\n// within your project's root folder\n/cypress/fixtures/example.json\n```\n\nYour fixtures can be further organized within additional folders. For instance, you could create another folder called `images` and add images:\n\n```text\n/cypress/fixtures/images/cats.png\n/cypress/fixtures/images/dogs.png\n/cypress/fixtures/images/birds.png\n```\n\nTo access the fixtures nested within the `images` folder, simply include the folder in your [`cy.fixture`](https://on.cypress.io/api/fixture) command.\n\n```javascript\ncy.fixture(\"images/dogs.png\") //returns dogs.png as Base64\n```\n","source":"guides/guides/creating-fixtures.md","raw":"title: creating-fixtures\n---\n\n# What are Fixtures\n\nA fixture in Cypress is a fixed set of data located in a file that is used as a baseline for running tests. The purpose of a test fixture is to ensure that there is a well known and fixed environment in which tests are run so that results are repeatable. Fixtures are accessed within tests by using the [`cy.fixture`](https://on.cypress.io/api/fixture) command.\n\n***\n\n# Supported Formats\n\n| File Extension |\n| --- |\n| `.coffee` |\n| `.gif` |\n| `.html` |\n| `.jpeg` |\n| `.jpg` |\n| `.js` |\n| `.json` |\n| `.png` |\n| `.txt` |\n| `.csv` |\n| `.tif` |\n| `.tiff` |\n| `.zip` |\n\n***\n\n## Validation\n\nCypress will automatically validate your fixtures. If your `.json`, `.js`, or `.coffee` files contain syntax errors, they will automatically be shown in the Command Log.\n\n***\n\n## Formatting\n\nCypress automatically formats your fixture files. That means you can paste in a single line of `json` and the next time Cypress serves this fixture, it will format / indent the `json` which makes it easier to read and debug.\n\nImage fixtures will be sent as `base64`.\n\n***\n\n# Fixtures vs Factories\n\n***\n\n# Routing Responses\n\n***\n\n# Organizing Fixtures\n\nCypress will automatically scaffold out a suggested folder structure for organizing your fixtures on every new project. By default it will create this structure when you boot your project:\n\n```text\n// within your project's root folder\n/cypress/fixtures/example.json\n```\n\nYour fixtures can be further organized within additional folders. For instance, you could create another folder called `images` and add images:\n\n```text\n/cypress/fixtures/images/cats.png\n/cypress/fixtures/images/dogs.png\n/cypress/fixtures/images/birds.png\n```\n\nTo access the fixtures nested within the `images` folder, simply include the folder in your [`cy.fixture`](https://on.cypress.io/api/fixture) command.\n\n```javascript\ncy.fixture(\"images/dogs.png\") //returns dogs.png as Base64\n```\n","date":"2017-04-19T18:46:47.000Z","updated":"2017-04-19T18:46:47.000Z","path":"guides/guides/creating-fixtures.html","comments":1,"layout":"page","_id":"cj1pby1ko002q68g8hh4voy99","content":"<h1 id=\"What-are-Fixtures\"><a href=\"#What-are-Fixtures\" class=\"headerlink\" title=\"What are Fixtures\"></a>What are Fixtures</h1><p>A fixture in Cypress is a fixed set of data located in a file that is used as a baseline for running tests. The purpose of a test fixture is to ensure that there is a well known and fixed environment in which tests are run so that results are repeatable. Fixtures are accessed within tests by using the <a href=\"https://on.cypress.io/api/fixture\" target=\"_blank\" rel=\"external\"><code>cy.fixture</code></a> command.</p>\n<hr>\n<h1 id=\"Supported-Formats\"><a href=\"#Supported-Formats\" class=\"headerlink\" title=\"Supported Formats\"></a>Supported Formats</h1><table>\n<thead>\n<tr>\n<th>File Extension</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>.coffee</code></td>\n</tr>\n<tr>\n<td><code>.gif</code></td>\n</tr>\n<tr>\n<td><code>.html</code></td>\n</tr>\n<tr>\n<td><code>.jpeg</code></td>\n</tr>\n<tr>\n<td><code>.jpg</code></td>\n</tr>\n<tr>\n<td><code>.js</code></td>\n</tr>\n<tr>\n<td><code>.json</code></td>\n</tr>\n<tr>\n<td><code>.png</code></td>\n</tr>\n<tr>\n<td><code>.txt</code></td>\n</tr>\n<tr>\n<td><code>.csv</code></td>\n</tr>\n<tr>\n<td><code>.tif</code></td>\n</tr>\n<tr>\n<td><code>.tiff</code></td>\n</tr>\n<tr>\n<td><code>.zip</code></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"Validation\"><a href=\"#Validation\" class=\"headerlink\" title=\"Validation\"></a>Validation</h2><p>Cypress will automatically validate your fixtures. If your <code>.json</code>, <code>.js</code>, or <code>.coffee</code> files contain syntax errors, they will automatically be shown in the Command Log.</p>\n<hr>\n<h2 id=\"Formatting\"><a href=\"#Formatting\" class=\"headerlink\" title=\"Formatting\"></a>Formatting</h2><p>Cypress automatically formats your fixture files. That means you can paste in a single line of <code>json</code> and the next time Cypress serves this fixture, it will format / indent the <code>json</code> which makes it easier to read and debug.</p>\n<p>Image fixtures will be sent as <code>base64</code>.</p>\n<hr>\n<h1 id=\"Fixtures-vs-Factories\"><a href=\"#Fixtures-vs-Factories\" class=\"headerlink\" title=\"Fixtures vs Factories\"></a>Fixtures vs Factories</h1><hr>\n<h1 id=\"Routing-Responses\"><a href=\"#Routing-Responses\" class=\"headerlink\" title=\"Routing Responses\"></a>Routing Responses</h1><hr>\n<h1 id=\"Organizing-Fixtures\"><a href=\"#Organizing-Fixtures\" class=\"headerlink\" title=\"Organizing Fixtures\"></a>Organizing Fixtures</h1><p>Cypress will automatically scaffold out a suggested folder structure for organizing your fixtures on every new project. By default it will create this structure when you boot your project:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// within your project&apos;s root folder</div><div class=\"line\">/cypress/fixtures/example.json</div></pre></td></tr></table></figure>\n<p>Your fixtures can be further organized within additional folders. For instance, you could create another folder called <code>images</code> and add images:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">/cypress/fixtures/images/cats.png</div><div class=\"line\">/cypress/fixtures/images/dogs.png</div><div class=\"line\">/cypress/fixtures/images/birds.png</div></pre></td></tr></table></figure>\n<p>To access the fixtures nested within the <code>images</code> folder, simply include the folder in your <a href=\"https://on.cypress.io/api/fixture\" target=\"_blank\" rel=\"external\"><code>cy.fixture</code></a> command.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.fixture(<span class=\"string\">\"images/dogs.png\"</span>) <span class=\"comment\">//returns dogs.png as Base64</span></div></pre></td></tr></table></figure>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<h1 id=\"What-are-Fixtures\"><a href=\"#What-are-Fixtures\" class=\"headerlink\" title=\"What are Fixtures\"></a>What are Fixtures</h1><p>A fixture in Cypress is a fixed set of data located in a file that is used as a baseline for running tests. The purpose of a test fixture is to ensure that there is a well known and fixed environment in which tests are run so that results are repeatable. Fixtures are accessed within tests by using the <a href=\"https://on.cypress.io/api/fixture\"><code>cy.fixture</code></a> command.</p>\n<hr>\n<h1 id=\"Supported-Formats\"><a href=\"#Supported-Formats\" class=\"headerlink\" title=\"Supported Formats\"></a>Supported Formats</h1><table>\n<thead>\n<tr>\n<th>File Extension</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>.coffee</code></td>\n</tr>\n<tr>\n<td><code>.gif</code></td>\n</tr>\n<tr>\n<td><code>.html</code></td>\n</tr>\n<tr>\n<td><code>.jpeg</code></td>\n</tr>\n<tr>\n<td><code>.jpg</code></td>\n</tr>\n<tr>\n<td><code>.js</code></td>\n</tr>\n<tr>\n<td><code>.json</code></td>\n</tr>\n<tr>\n<td><code>.png</code></td>\n</tr>\n<tr>\n<td><code>.txt</code></td>\n</tr>\n<tr>\n<td><code>.csv</code></td>\n</tr>\n<tr>\n<td><code>.tif</code></td>\n</tr>\n<tr>\n<td><code>.tiff</code></td>\n</tr>\n<tr>\n<td><code>.zip</code></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"Validation\"><a href=\"#Validation\" class=\"headerlink\" title=\"Validation\"></a>Validation</h2><p>Cypress will automatically validate your fixtures. If your <code>.json</code>, <code>.js</code>, or <code>.coffee</code> files contain syntax errors, they will automatically be shown in the Command Log.</p>\n<hr>\n<h2 id=\"Formatting\"><a href=\"#Formatting\" class=\"headerlink\" title=\"Formatting\"></a>Formatting</h2><p>Cypress automatically formats your fixture files. That means you can paste in a single line of <code>json</code> and the next time Cypress serves this fixture, it will format / indent the <code>json</code> which makes it easier to read and debug.</p>\n<p>Image fixtures will be sent as <code>base64</code>.</p>\n<hr>\n<h1 id=\"Fixtures-vs-Factories\"><a href=\"#Fixtures-vs-Factories\" class=\"headerlink\" title=\"Fixtures vs Factories\"></a>Fixtures vs Factories</h1><hr>\n<h1 id=\"Routing-Responses\"><a href=\"#Routing-Responses\" class=\"headerlink\" title=\"Routing Responses\"></a>Routing Responses</h1><hr>\n<h1 id=\"Organizing-Fixtures\"><a href=\"#Organizing-Fixtures\" class=\"headerlink\" title=\"Organizing Fixtures\"></a>Organizing Fixtures</h1><p>Cypress will automatically scaffold out a suggested folder structure for organizing your fixtures on every new project. By default it will create this structure when you boot your project:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// within your project&apos;s root folder</div><div class=\"line\">/cypress/fixtures/example.json</div></pre></td></tr></table></figure>\n<p>Your fixtures can be further organized within additional folders. For instance, you could create another folder called <code>images</code> and add images:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">/cypress/fixtures/images/cats.png</div><div class=\"line\">/cypress/fixtures/images/dogs.png</div><div class=\"line\">/cypress/fixtures/images/birds.png</div></pre></td></tr></table></figure>\n<p>To access the fixtures nested within the <code>images</code> folder, simply include the folder in your <a href=\"https://on.cypress.io/api/fixture\"><code>cy.fixture</code></a> command.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.fixture(<span class=\"string\">\"images/dogs.png\"</span>) <span class=\"comment\">//returns dogs.png as Base64</span></div></pre></td></tr></table></figure>\n"},{"title":"configuration","_content":"\n# Configuration Options\n\nWhen a project is added to Cypress, a `cypress.json` file is created in your project. This file contains your `projectId` and any configuration values you supply.\n\n```json\n{\n  \"projectId\": \"128076ed-9868-4e98-9cef-98dd8b705d75\"\n}\n```\n\nBy modifying the following values you can change the default behavior of Cypress.\n\nHere is a list of available options and their default values.\n\n## Global\n\nOption | Default | Description\n----- | ---- | ----\n`baseUrl` | `null` | Base url to prefix to [`cy.visit`](https://on.cypress.io/api/visit) or [`cy.request`](https://on.cypress.io/api/request) command\n`env` | `{}` | [Environment Variables](https://on.cypress.io/guides/environment-variables)\n`ignoreTestFiles` | `*.hot-update.js` | A string or array of glob patterns for ignoring test files that would otherwise be shown in your tests list. Under the hood Cypress is using `minimatch` with the options: `{dot: true, matchBase: true}`. We suggest you using [http://globtester.com](http://globtester.com) to test what files would match.\n`port` |  | Port to use for Cypress\n`numTestsKeptInMemory` | `50` | The number of tests for which snapshots and command data are kept in memory. Reduce this number if you are seeing extremely high memory consumption in your browser.\n`reporter` | `spec` | The [reporter](https://on.cypress.io/guides/reporters) used during headless or CI runs\n`reporterOptions` | `null` | The [reporter options](https://on.cypress.io/guides/reporters#section-reporter-options) used. Supported options depend on the reporter.\n`screenshotOnHeadlessFailure` | `true` | Whether to take a screenshot automatically on test failure when running headlessly or in CI\n`watchForFileChanges` | `true` | Whether Cypress will watch and restart tests on file changes\n\n***\n\n## Timeouts\n\nOption | Default | Description\n----- | ---- | ----\n`defaultCommandTimeout` | `4000` | Time, in milliseconds, to wait until most DOM based commands are considered timed out\n`execTimeout` | `60000` | Time, in milliseconds, to wait for a system command to finish executing during [`cy.exec`](https://on.cypress.io/api/exec) command\n`pageLoadTimeout` | `60000` | Time, in milliseconds, to wait until [`cy.visit`](https://on.cypress.io/api/visit), [`cy.go`](https://on.cypress.io/api/go), [`cy.reload`](https://on.cypress.io/api/reload), or a page load times out\n`requestTimeout` | `5000` | Time, in milliseconds, to wait for an XHR request during [`cy.wait`](wait) command\n`responseTimeout` | `30000` | Time, in milliseconds, to wait until a response for [`cy.request`](https://on.cypress.io/api/request), [`cy.wait`](https://on.cypress.io/api/wait), [`cy.fixture`](https://on.cypress.io/api/fixture), [`cy.getCookie`](https://on.cypress.io/api/getcookie), [`cy.getCookies`](https://on.cypress.io/api/getcookies), [`cy.setCookie`](https://on.cypress.io/api/setcookie), [`cy.clearCookie`](https://on.cypress.io/api/clearcookie) and [`cy.clearCookies`](https://on.cypress.io/api/clearcookies), and [`cy.screenshot`](https://on.cypress.io/api/screenshot) commands\n\n***\n\n## Folders\n\nTo turn off the use of `fixture` folders, pass `false` into the configuration option.\n\nOption | Default | Description\n----- | ---- | ----\n`fixturesFolder`    | `cypress/fixtures`    | Where Cypress will look for fixture files\n`integrationFolder` | `cypress/integration` | Where Cypress will look for integration test files\n`supportFile` | `cypress/support` | Path to a file to load before your test files. File is compiled and bundled as test files are. Pass `false` to turn off.\n`screenshotsFolder`     | `cypress/screenshots`     | Where Cypress will automatically save screenshots from [`cy.screenshot()`](https://on.cypress.io/api/screenshot) or during test failures when running headlessly.\n`videosFolder`     | `cypress/videos`     | Where Cypress will automatically save the video of the test run when running headlessly.\n\n***\n\n## Screenshots\n\nOption | Default | Description\n----- | ---- | ----\n`screenshotsFolder`     | `cypress/screenshots`     | Where Cypress will automatically save screenshots from [`cy.screenshot()`](https://on.cypress.io/api/screenshot) or during test failures when running headlessly.\n`screenshotOnHeadlessFailure` | `true` | Whether Cypress will automatically take a screenshot when a test fails when running tests headlessly or in CI.\n`trashAssetsBeforeHeadlessRuns` | `true` | Whether Cypress will trash assets within the `screenshotsFolder` and `videosFolder` before headless test runs.\n\n***\n\n## Videos\n\nOption | Default | Description\n----- | ---- | ----\n`videoRecording`     | `true`     | Whether Cypress will record a video of the test run when running headlessly.\n`videoCompression` | `32` | The quality setting for the video compression, in Constant Rate Factor (CRF). The value can be `false` to disable compression or a value between `0` and `51`, where a lower value results in better quality (at the expense of a higher file size).\n`videosFolder`     | `cypress/videos`     | Where Cypress will automatically save the video of the test run when running headlessly.\n`trashAssetsBeforeHeadlessRuns` | `true` | Whether Cypress will trash assets within the `screenshotsFolder` and `videosFolder` before headless test runs.\n\n***\n\n## Browser\n\nOption | Default | Description\n----- | ---- | ----\n`chromeWebSecurity`    | true    | Whether Chome Web Security for `same-origin policy` and `insecure mixed content` is enabled. [Read more about this here.](https://on.cypress.io/guides/web-security)\n\n***\n\n## Web Server\n\nOption | Default | Description\n----- | ---- | ----\n`fileServerFolder`    | root project folder    | Where Cypress will attempt to serve your application files\n\n***\n\n## Viewport\n\nOption | Default | Description\n----- | ---- | ----\n`viewportWidth` | `1000` | Default width in pixels for [`cy.viewport`](https://on.cypress.io/api/viewport)\n`viewportHeight` | `660` | Default height in pixels for  [`cy.viewport`](https://on.cypress.io/api/viewport)\n\n***\n\n## Animations\n\nOption | Default | Description\n----- | ---- | ----\n`waitForAnimations` | `true` | Whether to wait for elements to finish animating before applying commands\n`animationDistanceThreshold` | `5` | The distance in pixels an element must exceed to be considered animating\n\n***\n\n# Overriding Options\n\nBesides modifying your `cypress.json` you can also change configuration options by the **Command Line** or from your system **Environment Variabes**.\n\n## Command Line\n\nWhen [running Cypress from the Command Line](https://github.com/cypress-io/cypress-cli#cypress-open-1) you can pass the `--config` flag.\n\nBe sure to separate multiple values with a **comma**.\n\nExample:\n\n```shell\n## you can pass --config to cypress open or cypress run\ncypress open --config watchForFileChanges=false,waitForAnimations=false\n\ncypress run --config integrationFolder=tests,fixturesFolder=false\n\ncypress run --record --config viewportWidth=1280,viewportHeight=720\n```\n\n***\n\n## Environment Variables\n\nYou can also use environment variables to override configuration values. This is especially useful in CI or when working locally. This gives you the ability to change configuration options without modifying any code or build scripts.\n\nBy default, any environment variable that matches a cooresponding configuration key will override its default value.\n\n```shell\n## change the viewport width + height with environment variables\nexport CYPRESS_VIEWPORT_WIDTH=800\nexport CYPRESS_VIEWPORT_HEIGHT=600\n```\n\nWe automatically normalize both the key and the value.\n\nKeys are automatically camel cased, and we will automatically convert values into `Number` and `Boolean`.\n\n```shell\n## both of these are valid\nexport CYPRESS_pageLoadTimeout=100000\nexport CYPRESS_PAGE_LOAD_TIMEOUT=100000\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Make sure to prefix your environment variables with **CYPRESS_** else they will be ignored.\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"Environment variables which do not match configuration keys will instead be set as regular environment variables for use in your tests with `Cypress.env()`.\\n\\nYou can [read more about Environment Variables](https://on.cypress.io/environment-variables).\"\n}\n[/block]\n\n***\n\n# Resolved Configuration\n\nWhen you open a Cypress project, we will display the resolved configuration to you.\n\nThis makes it easy to understand and see where different values came from.\n\n![Resolved Configuration](https://cloud.githubusercontent.com/assets/1271364/22704601/47c9881e-ed36-11e6-81a0-725778038902.png)\n","source":"guides/guides/configuration.md","raw":"title: configuration\n---\n\n# Configuration Options\n\nWhen a project is added to Cypress, a `cypress.json` file is created in your project. This file contains your `projectId` and any configuration values you supply.\n\n```json\n{\n  \"projectId\": \"128076ed-9868-4e98-9cef-98dd8b705d75\"\n}\n```\n\nBy modifying the following values you can change the default behavior of Cypress.\n\nHere is a list of available options and their default values.\n\n## Global\n\nOption | Default | Description\n----- | ---- | ----\n`baseUrl` | `null` | Base url to prefix to [`cy.visit`](https://on.cypress.io/api/visit) or [`cy.request`](https://on.cypress.io/api/request) command\n`env` | `{}` | [Environment Variables](https://on.cypress.io/guides/environment-variables)\n`ignoreTestFiles` | `*.hot-update.js` | A string or array of glob patterns for ignoring test files that would otherwise be shown in your tests list. Under the hood Cypress is using `minimatch` with the options: `{dot: true, matchBase: true}`. We suggest you using [http://globtester.com](http://globtester.com) to test what files would match.\n`port` |  | Port to use for Cypress\n`numTestsKeptInMemory` | `50` | The number of tests for which snapshots and command data are kept in memory. Reduce this number if you are seeing extremely high memory consumption in your browser.\n`reporter` | `spec` | The [reporter](https://on.cypress.io/guides/reporters) used during headless or CI runs\n`reporterOptions` | `null` | The [reporter options](https://on.cypress.io/guides/reporters#section-reporter-options) used. Supported options depend on the reporter.\n`screenshotOnHeadlessFailure` | `true` | Whether to take a screenshot automatically on test failure when running headlessly or in CI\n`watchForFileChanges` | `true` | Whether Cypress will watch and restart tests on file changes\n\n***\n\n## Timeouts\n\nOption | Default | Description\n----- | ---- | ----\n`defaultCommandTimeout` | `4000` | Time, in milliseconds, to wait until most DOM based commands are considered timed out\n`execTimeout` | `60000` | Time, in milliseconds, to wait for a system command to finish executing during [`cy.exec`](https://on.cypress.io/api/exec) command\n`pageLoadTimeout` | `60000` | Time, in milliseconds, to wait until [`cy.visit`](https://on.cypress.io/api/visit), [`cy.go`](https://on.cypress.io/api/go), [`cy.reload`](https://on.cypress.io/api/reload), or a page load times out\n`requestTimeout` | `5000` | Time, in milliseconds, to wait for an XHR request during [`cy.wait`](wait) command\n`responseTimeout` | `30000` | Time, in milliseconds, to wait until a response for [`cy.request`](https://on.cypress.io/api/request), [`cy.wait`](https://on.cypress.io/api/wait), [`cy.fixture`](https://on.cypress.io/api/fixture), [`cy.getCookie`](https://on.cypress.io/api/getcookie), [`cy.getCookies`](https://on.cypress.io/api/getcookies), [`cy.setCookie`](https://on.cypress.io/api/setcookie), [`cy.clearCookie`](https://on.cypress.io/api/clearcookie) and [`cy.clearCookies`](https://on.cypress.io/api/clearcookies), and [`cy.screenshot`](https://on.cypress.io/api/screenshot) commands\n\n***\n\n## Folders\n\nTo turn off the use of `fixture` folders, pass `false` into the configuration option.\n\nOption | Default | Description\n----- | ---- | ----\n`fixturesFolder`    | `cypress/fixtures`    | Where Cypress will look for fixture files\n`integrationFolder` | `cypress/integration` | Where Cypress will look for integration test files\n`supportFile` | `cypress/support` | Path to a file to load before your test files. File is compiled and bundled as test files are. Pass `false` to turn off.\n`screenshotsFolder`     | `cypress/screenshots`     | Where Cypress will automatically save screenshots from [`cy.screenshot()`](https://on.cypress.io/api/screenshot) or during test failures when running headlessly.\n`videosFolder`     | `cypress/videos`     | Where Cypress will automatically save the video of the test run when running headlessly.\n\n***\n\n## Screenshots\n\nOption | Default | Description\n----- | ---- | ----\n`screenshotsFolder`     | `cypress/screenshots`     | Where Cypress will automatically save screenshots from [`cy.screenshot()`](https://on.cypress.io/api/screenshot) or during test failures when running headlessly.\n`screenshotOnHeadlessFailure` | `true` | Whether Cypress will automatically take a screenshot when a test fails when running tests headlessly or in CI.\n`trashAssetsBeforeHeadlessRuns` | `true` | Whether Cypress will trash assets within the `screenshotsFolder` and `videosFolder` before headless test runs.\n\n***\n\n## Videos\n\nOption | Default | Description\n----- | ---- | ----\n`videoRecording`     | `true`     | Whether Cypress will record a video of the test run when running headlessly.\n`videoCompression` | `32` | The quality setting for the video compression, in Constant Rate Factor (CRF). The value can be `false` to disable compression or a value between `0` and `51`, where a lower value results in better quality (at the expense of a higher file size).\n`videosFolder`     | `cypress/videos`     | Where Cypress will automatically save the video of the test run when running headlessly.\n`trashAssetsBeforeHeadlessRuns` | `true` | Whether Cypress will trash assets within the `screenshotsFolder` and `videosFolder` before headless test runs.\n\n***\n\n## Browser\n\nOption | Default | Description\n----- | ---- | ----\n`chromeWebSecurity`    | true    | Whether Chome Web Security for `same-origin policy` and `insecure mixed content` is enabled. [Read more about this here.](https://on.cypress.io/guides/web-security)\n\n***\n\n## Web Server\n\nOption | Default | Description\n----- | ---- | ----\n`fileServerFolder`    | root project folder    | Where Cypress will attempt to serve your application files\n\n***\n\n## Viewport\n\nOption | Default | Description\n----- | ---- | ----\n`viewportWidth` | `1000` | Default width in pixels for [`cy.viewport`](https://on.cypress.io/api/viewport)\n`viewportHeight` | `660` | Default height in pixels for  [`cy.viewport`](https://on.cypress.io/api/viewport)\n\n***\n\n## Animations\n\nOption | Default | Description\n----- | ---- | ----\n`waitForAnimations` | `true` | Whether to wait for elements to finish animating before applying commands\n`animationDistanceThreshold` | `5` | The distance in pixels an element must exceed to be considered animating\n\n***\n\n# Overriding Options\n\nBesides modifying your `cypress.json` you can also change configuration options by the **Command Line** or from your system **Environment Variabes**.\n\n## Command Line\n\nWhen [running Cypress from the Command Line](https://github.com/cypress-io/cypress-cli#cypress-open-1) you can pass the `--config` flag.\n\nBe sure to separate multiple values with a **comma**.\n\nExample:\n\n```shell\n## you can pass --config to cypress open or cypress run\ncypress open --config watchForFileChanges=false,waitForAnimations=false\n\ncypress run --config integrationFolder=tests,fixturesFolder=false\n\ncypress run --record --config viewportWidth=1280,viewportHeight=720\n```\n\n***\n\n## Environment Variables\n\nYou can also use environment variables to override configuration values. This is especially useful in CI or when working locally. This gives you the ability to change configuration options without modifying any code or build scripts.\n\nBy default, any environment variable that matches a cooresponding configuration key will override its default value.\n\n```shell\n## change the viewport width + height with environment variables\nexport CYPRESS_VIEWPORT_WIDTH=800\nexport CYPRESS_VIEWPORT_HEIGHT=600\n```\n\nWe automatically normalize both the key and the value.\n\nKeys are automatically camel cased, and we will automatically convert values into `Number` and `Boolean`.\n\n```shell\n## both of these are valid\nexport CYPRESS_pageLoadTimeout=100000\nexport CYPRESS_PAGE_LOAD_TIMEOUT=100000\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Make sure to prefix your environment variables with **CYPRESS_** else they will be ignored.\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"Environment variables which do not match configuration keys will instead be set as regular environment variables for use in your tests with `Cypress.env()`.\\n\\nYou can [read more about Environment Variables](https://on.cypress.io/environment-variables).\"\n}\n[/block]\n\n***\n\n# Resolved Configuration\n\nWhen you open a Cypress project, we will display the resolved configuration to you.\n\nThis makes it easy to understand and see where different values came from.\n\n![Resolved Configuration](https://cloud.githubusercontent.com/assets/1271364/22704601/47c9881e-ed36-11e6-81a0-725778038902.png)\n","date":"2017-04-19T18:46:47.000Z","updated":"2017-04-19T18:46:47.000Z","path":"guides/guides/configuration.html","comments":1,"layout":"page","_id":"cj1pby1ko002r68g8op2ejwvq","content":"<h1 id=\"Configuration-Options\"><a href=\"#Configuration-Options\" class=\"headerlink\" title=\"Configuration Options\"></a>Configuration Options</h1><p>When a project is added to Cypress, a <code>cypress.json</code> file is created in your project. This file contains your <code>projectId</code> and any configuration values you supply.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"projectId\"</span>: <span class=\"string\">\"128076ed-9868-4e98-9cef-98dd8b705d75\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>By modifying the following values you can change the default behavior of Cypress.</p>\n<p>Here is a list of available options and their default values.</p>\n<h2 id=\"Global\"><a href=\"#Global\" class=\"headerlink\" title=\"Global\"></a>Global</h2><table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>baseUrl</code></td>\n<td><code>null</code></td>\n<td>Base url to prefix to <a href=\"https://on.cypress.io/api/visit\" target=\"_blank\" rel=\"external\"><code>cy.visit</code></a> or <a href=\"https://on.cypress.io/api/request\" target=\"_blank\" rel=\"external\"><code>cy.request</code></a> command</td>\n</tr>\n<tr>\n<td><code>env</code></td>\n<td><code>{}</code></td>\n<td><a href=\"https://on.cypress.io/guides/environment-variables\" target=\"_blank\" rel=\"external\">Environment Variables</a></td>\n</tr>\n<tr>\n<td><code>ignoreTestFiles</code></td>\n<td><code>*.hot-update.js</code></td>\n<td>A string or array of glob patterns for ignoring test files that would otherwise be shown in your tests list. Under the hood Cypress is using <code>minimatch</code> with the options: <code>{dot: true, matchBase: true}</code>. We suggest you using <a href=\"http://globtester.com\" target=\"_blank\" rel=\"external\">http://globtester.com</a> to test what files would match.</td>\n</tr>\n<tr>\n<td><code>port</code></td>\n<td></td>\n<td>Port to use for Cypress</td>\n</tr>\n<tr>\n<td><code>numTestsKeptInMemory</code></td>\n<td><code>50</code></td>\n<td>The number of tests for which snapshots and command data are kept in memory. Reduce this number if you are seeing extremely high memory consumption in your browser.</td>\n</tr>\n<tr>\n<td><code>reporter</code></td>\n<td><code>spec</code></td>\n<td>The <a href=\"https://on.cypress.io/guides/reporters\" target=\"_blank\" rel=\"external\">reporter</a> used during headless or CI runs</td>\n</tr>\n<tr>\n<td><code>reporterOptions</code></td>\n<td><code>null</code></td>\n<td>The <a href=\"https://on.cypress.io/guides/reporters#section-reporter-options\" target=\"_blank\" rel=\"external\">reporter options</a> used. Supported options depend on the reporter.</td>\n</tr>\n<tr>\n<td><code>screenshotOnHeadlessFailure</code></td>\n<td><code>true</code></td>\n<td>Whether to take a screenshot automatically on test failure when running headlessly or in CI</td>\n</tr>\n<tr>\n<td><code>watchForFileChanges</code></td>\n<td><code>true</code></td>\n<td>Whether Cypress will watch and restart tests on file changes</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"Timeouts\"><a href=\"#Timeouts\" class=\"headerlink\" title=\"Timeouts\"></a>Timeouts</h2><table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>defaultCommandTimeout</code></td>\n<td><code>4000</code></td>\n<td>Time, in milliseconds, to wait until most DOM based commands are considered timed out</td>\n</tr>\n<tr>\n<td><code>execTimeout</code></td>\n<td><code>60000</code></td>\n<td>Time, in milliseconds, to wait for a system command to finish executing during <a href=\"https://on.cypress.io/api/exec\" target=\"_blank\" rel=\"external\"><code>cy.exec</code></a> command</td>\n</tr>\n<tr>\n<td><code>pageLoadTimeout</code></td>\n<td><code>60000</code></td>\n<td>Time, in milliseconds, to wait until <a href=\"https://on.cypress.io/api/visit\" target=\"_blank\" rel=\"external\"><code>cy.visit</code></a>, <a href=\"https://on.cypress.io/api/go\" target=\"_blank\" rel=\"external\"><code>cy.go</code></a>, <a href=\"https://on.cypress.io/api/reload\" target=\"_blank\" rel=\"external\"><code>cy.reload</code></a>, or a page load times out</td>\n</tr>\n<tr>\n<td><code>requestTimeout</code></td>\n<td><code>5000</code></td>\n<td>Time, in milliseconds, to wait for an XHR request during <a href=\"wait\"><code>cy.wait</code></a> command</td>\n</tr>\n<tr>\n<td><code>responseTimeout</code></td>\n<td><code>30000</code></td>\n<td>Time, in milliseconds, to wait until a response for <a href=\"https://on.cypress.io/api/request\" target=\"_blank\" rel=\"external\"><code>cy.request</code></a>, <a href=\"https://on.cypress.io/api/wait\" target=\"_blank\" rel=\"external\"><code>cy.wait</code></a>, <a href=\"https://on.cypress.io/api/fixture\" target=\"_blank\" rel=\"external\"><code>cy.fixture</code></a>, <a href=\"https://on.cypress.io/api/getcookie\" target=\"_blank\" rel=\"external\"><code>cy.getCookie</code></a>, <a href=\"https://on.cypress.io/api/getcookies\" target=\"_blank\" rel=\"external\"><code>cy.getCookies</code></a>, <a href=\"https://on.cypress.io/api/setcookie\" target=\"_blank\" rel=\"external\"><code>cy.setCookie</code></a>, <a href=\"https://on.cypress.io/api/clearcookie\" target=\"_blank\" rel=\"external\"><code>cy.clearCookie</code></a> and <a href=\"https://on.cypress.io/api/clearcookies\" target=\"_blank\" rel=\"external\"><code>cy.clearCookies</code></a>, and <a href=\"https://on.cypress.io/api/screenshot\" target=\"_blank\" rel=\"external\"><code>cy.screenshot</code></a> commands</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"Folders\"><a href=\"#Folders\" class=\"headerlink\" title=\"Folders\"></a>Folders</h2><p>To turn off the use of <code>fixture</code> folders, pass <code>false</code> into the configuration option.</p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>fixturesFolder</code></td>\n<td><code>cypress/fixtures</code></td>\n<td>Where Cypress will look for fixture files</td>\n</tr>\n<tr>\n<td><code>integrationFolder</code></td>\n<td><code>cypress/integration</code></td>\n<td>Where Cypress will look for integration test files</td>\n</tr>\n<tr>\n<td><code>supportFile</code></td>\n<td><code>cypress/support</code></td>\n<td>Path to a file to load before your test files. File is compiled and bundled as test files are. Pass <code>false</code> to turn off.</td>\n</tr>\n<tr>\n<td><code>screenshotsFolder</code></td>\n<td><code>cypress/screenshots</code></td>\n<td>Where Cypress will automatically save screenshots from <a href=\"https://on.cypress.io/api/screenshot\" target=\"_blank\" rel=\"external\"><code>cy.screenshot()</code></a> or during test failures when running headlessly.</td>\n</tr>\n<tr>\n<td><code>videosFolder</code></td>\n<td><code>cypress/videos</code></td>\n<td>Where Cypress will automatically save the video of the test run when running headlessly.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"Screenshots\"><a href=\"#Screenshots\" class=\"headerlink\" title=\"Screenshots\"></a>Screenshots</h2><table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>screenshotsFolder</code></td>\n<td><code>cypress/screenshots</code></td>\n<td>Where Cypress will automatically save screenshots from <a href=\"https://on.cypress.io/api/screenshot\" target=\"_blank\" rel=\"external\"><code>cy.screenshot()</code></a> or during test failures when running headlessly.</td>\n</tr>\n<tr>\n<td><code>screenshotOnHeadlessFailure</code></td>\n<td><code>true</code></td>\n<td>Whether Cypress will automatically take a screenshot when a test fails when running tests headlessly or in CI.</td>\n</tr>\n<tr>\n<td><code>trashAssetsBeforeHeadlessRuns</code></td>\n<td><code>true</code></td>\n<td>Whether Cypress will trash assets within the <code>screenshotsFolder</code> and <code>videosFolder</code> before headless test runs.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"Videos\"><a href=\"#Videos\" class=\"headerlink\" title=\"Videos\"></a>Videos</h2><table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>videoRecording</code></td>\n<td><code>true</code></td>\n<td>Whether Cypress will record a video of the test run when running headlessly.</td>\n</tr>\n<tr>\n<td><code>videoCompression</code></td>\n<td><code>32</code></td>\n<td>The quality setting for the video compression, in Constant Rate Factor (CRF). The value can be <code>false</code> to disable compression or a value between <code>0</code> and <code>51</code>, where a lower value results in better quality (at the expense of a higher file size).</td>\n</tr>\n<tr>\n<td><code>videosFolder</code></td>\n<td><code>cypress/videos</code></td>\n<td>Where Cypress will automatically save the video of the test run when running headlessly.</td>\n</tr>\n<tr>\n<td><code>trashAssetsBeforeHeadlessRuns</code></td>\n<td><code>true</code></td>\n<td>Whether Cypress will trash assets within the <code>screenshotsFolder</code> and <code>videosFolder</code> before headless test runs.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"Browser\"><a href=\"#Browser\" class=\"headerlink\" title=\"Browser\"></a>Browser</h2><table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>chromeWebSecurity</code></td>\n<td>true</td>\n<td>Whether Chome Web Security for <code>same-origin policy</code> and <code>insecure mixed content</code> is enabled. <a href=\"https://on.cypress.io/guides/web-security\" target=\"_blank\" rel=\"external\">Read more about this here.</a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"Web-Server\"><a href=\"#Web-Server\" class=\"headerlink\" title=\"Web Server\"></a>Web Server</h2><table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>fileServerFolder</code></td>\n<td>root project folder</td>\n<td>Where Cypress will attempt to serve your application files</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"Viewport\"><a href=\"#Viewport\" class=\"headerlink\" title=\"Viewport\"></a>Viewport</h2><table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>viewportWidth</code></td>\n<td><code>1000</code></td>\n<td>Default width in pixels for <a href=\"https://on.cypress.io/api/viewport\" target=\"_blank\" rel=\"external\"><code>cy.viewport</code></a></td>\n</tr>\n<tr>\n<td><code>viewportHeight</code></td>\n<td><code>660</code></td>\n<td>Default height in pixels for  <a href=\"https://on.cypress.io/api/viewport\" target=\"_blank\" rel=\"external\"><code>cy.viewport</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"Animations\"><a href=\"#Animations\" class=\"headerlink\" title=\"Animations\"></a>Animations</h2><table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>waitForAnimations</code></td>\n<td><code>true</code></td>\n<td>Whether to wait for elements to finish animating before applying commands</td>\n</tr>\n<tr>\n<td><code>animationDistanceThreshold</code></td>\n<td><code>5</code></td>\n<td>The distance in pixels an element must exceed to be considered animating</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Overriding-Options\"><a href=\"#Overriding-Options\" class=\"headerlink\" title=\"Overriding Options\"></a>Overriding Options</h1><p>Besides modifying your <code>cypress.json</code> you can also change configuration options by the <strong>Command Line</strong> or from your system <strong>Environment Variabes</strong>.</p>\n<h2 id=\"Command-Line\"><a href=\"#Command-Line\" class=\"headerlink\" title=\"Command Line\"></a>Command Line</h2><p>When <a href=\"https://github.com/cypress-io/cypress-cli#cypress-open-1\" target=\"_blank\" rel=\"external\">running Cypress from the Command Line</a> you can pass the <code>--config</code> flag.</p>\n<p>Be sure to separate multiple values with a <strong>comma</strong>.</p>\n<p>Example:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># you can pass --config to cypress open or cypress run</span></span></div><div class=\"line\">cypress open --config watchForFileChanges=false,waitForAnimations=false</div><div class=\"line\"></div><div class=\"line\">cypress run --config integrationFolder=tests,fixturesFolder=false</div><div class=\"line\"></div><div class=\"line\">cypress run --record --config viewportWidth=1280,viewportHeight=720</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Environment-Variables\"><a href=\"#Environment-Variables\" class=\"headerlink\" title=\"Environment Variables\"></a>Environment Variables</h2><p>You can also use environment variables to override configuration values. This is especially useful in CI or when working locally. This gives you the ability to change configuration options without modifying any code or build scripts.</p>\n<p>By default, any environment variable that matches a cooresponding configuration key will override its default value.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># change the viewport width + height with environment variables</span></span></div><div class=\"line\">export CYPRESS_VIEWPORT_WIDTH=800</div><div class=\"line\">export CYPRESS_VIEWPORT_HEIGHT=600</div></pre></td></tr></table></figure>\n<p>We automatically normalize both the key and the value.</p>\n<p>Keys are automatically camel cased, and we will automatically convert values into <code>Number</code> and <code>Boolean</code>.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># both of these are valid</span></span></div><div class=\"line\">export CYPRESS_pageLoadTimeout=100000</div><div class=\"line\">export CYPRESS_PAGE_LOAD_TIMEOUT=100000</div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “Make sure to prefix your environment variables with <strong>CYPRESS_</strong> else they will be ignored.”<br>}<br>[/block]</p>\n<p>[block:callout]<br>{<br>  “type”: “warning”,<br>  “body”: “Environment variables which do not match configuration keys will instead be set as regular environment variables for use in your tests with <code>Cypress.env()</code>.\\n\\nYou can <a href=\"https://on.cypress.io/environment-variables\" target=\"_blank\" rel=\"external\">read more about Environment Variables</a>.”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Resolved-Configuration\"><a href=\"#Resolved-Configuration\" class=\"headerlink\" title=\"Resolved Configuration\"></a>Resolved Configuration</h1><p>When you open a Cypress project, we will display the resolved configuration to you.</p>\n<p>This makes it easy to understand and see where different values came from.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22704601/47c9881e-ed36-11e6-81a0-725778038902.png\" alt=\"Resolved Configuration\"></p>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<h1 id=\"Configuration-Options\"><a href=\"#Configuration-Options\" class=\"headerlink\" title=\"Configuration Options\"></a>Configuration Options</h1><p>When a project is added to Cypress, a <code>cypress.json</code> file is created in your project. This file contains your <code>projectId</code> and any configuration values you supply.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"projectId\"</span>: <span class=\"string\">\"128076ed-9868-4e98-9cef-98dd8b705d75\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>By modifying the following values you can change the default behavior of Cypress.</p>\n<p>Here is a list of available options and their default values.</p>\n<h2 id=\"Global\"><a href=\"#Global\" class=\"headerlink\" title=\"Global\"></a>Global</h2><table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>baseUrl</code></td>\n<td><code>null</code></td>\n<td>Base url to prefix to <a href=\"https://on.cypress.io/api/visit\"><code>cy.visit</code></a> or <a href=\"https://on.cypress.io/api/request\"><code>cy.request</code></a> command</td>\n</tr>\n<tr>\n<td><code>env</code></td>\n<td><code>{}</code></td>\n<td><a href=\"https://on.cypress.io/guides/environment-variables\">Environment Variables</a></td>\n</tr>\n<tr>\n<td><code>ignoreTestFiles</code></td>\n<td><code>*.hot-update.js</code></td>\n<td>A string or array of glob patterns for ignoring test files that would otherwise be shown in your tests list. Under the hood Cypress is using <code>minimatch</code> with the options: <code>{dot: true, matchBase: true}</code>. We suggest you using <a href=\"http://globtester.com\">http://globtester.com</a> to test what files would match.</td>\n</tr>\n<tr>\n<td><code>port</code></td>\n<td></td>\n<td>Port to use for Cypress</td>\n</tr>\n<tr>\n<td><code>numTestsKeptInMemory</code></td>\n<td><code>50</code></td>\n<td>The number of tests for which snapshots and command data are kept in memory. Reduce this number if you are seeing extremely high memory consumption in your browser.</td>\n</tr>\n<tr>\n<td><code>reporter</code></td>\n<td><code>spec</code></td>\n<td>The <a href=\"https://on.cypress.io/guides/reporters\">reporter</a> used during headless or CI runs</td>\n</tr>\n<tr>\n<td><code>reporterOptions</code></td>\n<td><code>null</code></td>\n<td>The <a href=\"https://on.cypress.io/guides/reporters#section-reporter-options\">reporter options</a> used. Supported options depend on the reporter.</td>\n</tr>\n<tr>\n<td><code>screenshotOnHeadlessFailure</code></td>\n<td><code>true</code></td>\n<td>Whether to take a screenshot automatically on test failure when running headlessly or in CI</td>\n</tr>\n<tr>\n<td><code>watchForFileChanges</code></td>\n<td><code>true</code></td>\n<td>Whether Cypress will watch and restart tests on file changes</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"Timeouts\"><a href=\"#Timeouts\" class=\"headerlink\" title=\"Timeouts\"></a>Timeouts</h2><table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>defaultCommandTimeout</code></td>\n<td><code>4000</code></td>\n<td>Time, in milliseconds, to wait until most DOM based commands are considered timed out</td>\n</tr>\n<tr>\n<td><code>execTimeout</code></td>\n<td><code>60000</code></td>\n<td>Time, in milliseconds, to wait for a system command to finish executing during <a href=\"https://on.cypress.io/api/exec\"><code>cy.exec</code></a> command</td>\n</tr>\n<tr>\n<td><code>pageLoadTimeout</code></td>\n<td><code>60000</code></td>\n<td>Time, in milliseconds, to wait until <a href=\"https://on.cypress.io/api/visit\"><code>cy.visit</code></a>, <a href=\"https://on.cypress.io/api/go\"><code>cy.go</code></a>, <a href=\"https://on.cypress.io/api/reload\"><code>cy.reload</code></a>, or a page load times out</td>\n</tr>\n<tr>\n<td><code>requestTimeout</code></td>\n<td><code>5000</code></td>\n<td>Time, in milliseconds, to wait for an XHR request during <a href=\"wait\"><code>cy.wait</code></a> command</td>\n</tr>\n<tr>\n<td><code>responseTimeout</code></td>\n<td><code>30000</code></td>\n<td>Time, in milliseconds, to wait until a response for <a href=\"https://on.cypress.io/api/request\"><code>cy.request</code></a>, <a href=\"https://on.cypress.io/api/wait\"><code>cy.wait</code></a>, <a href=\"https://on.cypress.io/api/fixture\"><code>cy.fixture</code></a>, <a href=\"https://on.cypress.io/api/getcookie\"><code>cy.getCookie</code></a>, <a href=\"https://on.cypress.io/api/getcookies\"><code>cy.getCookies</code></a>, <a href=\"https://on.cypress.io/api/setcookie\"><code>cy.setCookie</code></a>, <a href=\"https://on.cypress.io/api/clearcookie\"><code>cy.clearCookie</code></a> and <a href=\"https://on.cypress.io/api/clearcookies\"><code>cy.clearCookies</code></a>, and <a href=\"https://on.cypress.io/api/screenshot\"><code>cy.screenshot</code></a> commands</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"Folders\"><a href=\"#Folders\" class=\"headerlink\" title=\"Folders\"></a>Folders</h2><p>To turn off the use of <code>fixture</code> folders, pass <code>false</code> into the configuration option.</p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>fixturesFolder</code></td>\n<td><code>cypress/fixtures</code></td>\n<td>Where Cypress will look for fixture files</td>\n</tr>\n<tr>\n<td><code>integrationFolder</code></td>\n<td><code>cypress/integration</code></td>\n<td>Where Cypress will look for integration test files</td>\n</tr>\n<tr>\n<td><code>supportFile</code></td>\n<td><code>cypress/support</code></td>\n<td>Path to a file to load before your test files. File is compiled and bundled as test files are. Pass <code>false</code> to turn off.</td>\n</tr>\n<tr>\n<td><code>screenshotsFolder</code></td>\n<td><code>cypress/screenshots</code></td>\n<td>Where Cypress will automatically save screenshots from <a href=\"https://on.cypress.io/api/screenshot\"><code>cy.screenshot()</code></a> or during test failures when running headlessly.</td>\n</tr>\n<tr>\n<td><code>videosFolder</code></td>\n<td><code>cypress/videos</code></td>\n<td>Where Cypress will automatically save the video of the test run when running headlessly.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"Screenshots\"><a href=\"#Screenshots\" class=\"headerlink\" title=\"Screenshots\"></a>Screenshots</h2><table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>screenshotsFolder</code></td>\n<td><code>cypress/screenshots</code></td>\n<td>Where Cypress will automatically save screenshots from <a href=\"https://on.cypress.io/api/screenshot\"><code>cy.screenshot()</code></a> or during test failures when running headlessly.</td>\n</tr>\n<tr>\n<td><code>screenshotOnHeadlessFailure</code></td>\n<td><code>true</code></td>\n<td>Whether Cypress will automatically take a screenshot when a test fails when running tests headlessly or in CI.</td>\n</tr>\n<tr>\n<td><code>trashAssetsBeforeHeadlessRuns</code></td>\n<td><code>true</code></td>\n<td>Whether Cypress will trash assets within the <code>screenshotsFolder</code> and <code>videosFolder</code> before headless test runs.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"Videos\"><a href=\"#Videos\" class=\"headerlink\" title=\"Videos\"></a>Videos</h2><table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>videoRecording</code></td>\n<td><code>true</code></td>\n<td>Whether Cypress will record a video of the test run when running headlessly.</td>\n</tr>\n<tr>\n<td><code>videoCompression</code></td>\n<td><code>32</code></td>\n<td>The quality setting for the video compression, in Constant Rate Factor (CRF). The value can be <code>false</code> to disable compression or a value between <code>0</code> and <code>51</code>, where a lower value results in better quality (at the expense of a higher file size).</td>\n</tr>\n<tr>\n<td><code>videosFolder</code></td>\n<td><code>cypress/videos</code></td>\n<td>Where Cypress will automatically save the video of the test run when running headlessly.</td>\n</tr>\n<tr>\n<td><code>trashAssetsBeforeHeadlessRuns</code></td>\n<td><code>true</code></td>\n<td>Whether Cypress will trash assets within the <code>screenshotsFolder</code> and <code>videosFolder</code> before headless test runs.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"Browser\"><a href=\"#Browser\" class=\"headerlink\" title=\"Browser\"></a>Browser</h2><table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>chromeWebSecurity</code></td>\n<td>true</td>\n<td>Whether Chome Web Security for <code>same-origin policy</code> and <code>insecure mixed content</code> is enabled. <a href=\"https://on.cypress.io/guides/web-security\">Read more about this here.</a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"Web-Server\"><a href=\"#Web-Server\" class=\"headerlink\" title=\"Web Server\"></a>Web Server</h2><table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>fileServerFolder</code></td>\n<td>root project folder</td>\n<td>Where Cypress will attempt to serve your application files</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"Viewport\"><a href=\"#Viewport\" class=\"headerlink\" title=\"Viewport\"></a>Viewport</h2><table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>viewportWidth</code></td>\n<td><code>1000</code></td>\n<td>Default width in pixels for <a href=\"https://on.cypress.io/api/viewport\"><code>cy.viewport</code></a></td>\n</tr>\n<tr>\n<td><code>viewportHeight</code></td>\n<td><code>660</code></td>\n<td>Default height in pixels for  <a href=\"https://on.cypress.io/api/viewport\"><code>cy.viewport</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"Animations\"><a href=\"#Animations\" class=\"headerlink\" title=\"Animations\"></a>Animations</h2><table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>waitForAnimations</code></td>\n<td><code>true</code></td>\n<td>Whether to wait for elements to finish animating before applying commands</td>\n</tr>\n<tr>\n<td><code>animationDistanceThreshold</code></td>\n<td><code>5</code></td>\n<td>The distance in pixels an element must exceed to be considered animating</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Overriding-Options\"><a href=\"#Overriding-Options\" class=\"headerlink\" title=\"Overriding Options\"></a>Overriding Options</h1><p>Besides modifying your <code>cypress.json</code> you can also change configuration options by the <strong>Command Line</strong> or from your system <strong>Environment Variabes</strong>.</p>\n<h2 id=\"Command-Line\"><a href=\"#Command-Line\" class=\"headerlink\" title=\"Command Line\"></a>Command Line</h2><p>When <a href=\"https://github.com/cypress-io/cypress-cli#cypress-open-1\">running Cypress from the Command Line</a> you can pass the <code>--config</code> flag.</p>\n<p>Be sure to separate multiple values with a <strong>comma</strong>.</p>\n<p>Example:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># you can pass --config to cypress open or cypress run</span></span></div><div class=\"line\">cypress open --config watchForFileChanges=false,waitForAnimations=false</div><div class=\"line\"></div><div class=\"line\">cypress run --config integrationFolder=tests,fixturesFolder=false</div><div class=\"line\"></div><div class=\"line\">cypress run --record --config viewportWidth=1280,viewportHeight=720</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Environment-Variables\"><a href=\"#Environment-Variables\" class=\"headerlink\" title=\"Environment Variables\"></a>Environment Variables</h2><p>You can also use environment variables to override configuration values. This is especially useful in CI or when working locally. This gives you the ability to change configuration options without modifying any code or build scripts.</p>\n<p>By default, any environment variable that matches a cooresponding configuration key will override its default value.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># change the viewport width + height with environment variables</span></span></div><div class=\"line\">export CYPRESS_VIEWPORT_WIDTH=800</div><div class=\"line\">export CYPRESS_VIEWPORT_HEIGHT=600</div></pre></td></tr></table></figure>\n<p>We automatically normalize both the key and the value.</p>\n<p>Keys are automatically camel cased, and we will automatically convert values into <code>Number</code> and <code>Boolean</code>.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># both of these are valid</span></span></div><div class=\"line\">export CYPRESS_pageLoadTimeout=100000</div><div class=\"line\">export CYPRESS_PAGE_LOAD_TIMEOUT=100000</div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “Make sure to prefix your environment variables with <strong>CYPRESS_</strong> else they will be ignored.”<br>}<br>[/block]</p>\n<p>[block:callout]<br>{<br>  “type”: “warning”,<br>  “body”: “Environment variables which do not match configuration keys will instead be set as regular environment variables for use in your tests with <code>Cypress.env()</code>.\\n\\nYou can <a href=\"https://on.cypress.io/environment-variables\">read more about Environment Variables</a>.”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Resolved-Configuration\"><a href=\"#Resolved-Configuration\" class=\"headerlink\" title=\"Resolved Configuration\"></a>Resolved Configuration</h1><p>When you open a Cypress project, we will display the resolved configuration to you.</p>\n<p>This makes it easy to understand and see where different values came from.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/22704601/47c9881e-ed36-11e6-81a0-725778038902.png\" alt=\"Resolved Configuration\"></p>\n"},{"title":"continuous-integration","_content":"\n# What's Supported?\n\nCypress should run on **all** CI providers. We currently have seen Cypress working on the following services / providers:\n\n- Jenkins (Linux)\n- TravisCI\n- CircleCI\n- CodeShip\n- GitLab\n- Docker\n\n***\n\n# Running in CI\n\nRunning Cypress in CI is just as easy as running it locally. You generally only need to do two things:\n\n```shell\n## 1. install the CLI tools\nnpm install -g cypress-cli\n\n## 2. run cypress\ncypress run\n```\n\nThat's it!\n\nThis will automatically go out and install Cypress, and then run all your tests.\n\nFor a comprehensive list of all the options you can pass to `cypress run`, [refer to the CLI documentation](https://on.cypress.io/cli).\n\n![travis-logs](https://cloud.githubusercontent.com/assets/1268976/9291527/8ea21024-4393-11e5-86b7-80e3b5d1047e.gif)\n\n***\n\n## Your CI Config File\n\nDepending on which CI provider you'll need to add these two lines (above) to a config file.\n\nFor instance with TravisCI and CircleCI we have:\n\n- `.travis.yml`\n- `circle.yml`\n\nYou'll want to refer to your CI providers documentation for knowing when to run those commands.\n\nHere's a couple example config files:\n\n```yaml\n## .travis.yml\n\nbefore_install:\n  - npm install -g cypress-cli\n\nscript:\n  - cypress run\n```\n\n```yaml\n## circle.yml\n\ndependencies:\n  post:\n    - npm install -g cypress-cli\n\ntest:\n  override:\n    - cypress run\n```\n\nFor more example config files check out any of our [example apps](https://on.cypress.io/guides/all-example-apps).\n\n***\n\n## Recording your runs\n\nYou can automatically have Cypress record your runs and make them available in our Dashboard.\n\nRecorded runs will contain:\n\n- Standard output\n- Failing Tests\n- Screenshots\n- Videos\n\nTo record your runs:\n\n1. [Setup your project to record](https://on.cypress.io/guides/projects)\n2. [Pass the --record flag to `cypress run`](https://on.cypress.io/how-do-i-record-runs)\n\nYou can [read more about the Dashboard here](https://on.cypress.io/guides/dashboard-features).\n\n***\n\n# Using Environment Variables\n\nYou can set various environment variables to modify how Cypress runs.\n\nTypically you'd want to do this to:\n\n- [Hide your **Record Key**](#section-hide-your-record-key)\n- [Install a specific version](#section-install-a-specific-version)\n- [Modify configuration settings](#section-modify-configuration-settings)\n- [Change environment variables in your tests](#section-change-environment-variables-in-your-tests)\n\n***\n\n## Hide your Record Key\n\nIf you are [recording your runs](#section-recording-your-runs) on a public project, you'll want to protect your Record Key. [Learn why.](https://docs.cypress.io/docs/projects#section-how-do-a-projectid-and-record-key-work-together-)\n\nInstead of hard coding it into your run command like this:\n\n```shell\ncypress run --record --key <record_key>\n```\n\nYou can set it as an environment variable and we'll automatically use that value.\n\nTypically you'd set this inside of your CI provider like this:\n\n**CircleCI**\n![screen shot 2017-02-12 at 8 56 17 pm](https://cloud.githubusercontent.com/assets/1268976/22868594/cabd8152-f165-11e6-8897-0e3e57d0eafd.png)\n\n**TravisCI**\n![screen shot 2017-02-12 at 8 58 01 pm](https://cloud.githubusercontent.com/assets/1268976/22868637/05c46e00-f166-11e6-9106-682d5729acca.png)\n\nYou can now omit the `--key` flag when recording.\n\n```shell\n## weeee we don't have to pass in the key here!\ncypress run --record\n```\n\n***\n\n## Install a specific version\n\nYou can install a specific version of Cypress by setting the environment variable: `CYPRESS_VERSION`.\n\n**Set the version to an older Cypress**\n![screen shot 2016-03-28 at 11 28 26 am](https://cloud.githubusercontent.com/assets/1271364/14081365/601e2da4-f4d8-11e5-8ea8-0491ffcb0999.png)\n\n***\n\n## Modify configuration settings\n\nDon't forget you can also override settings in `cypress.json` to modify Cypress's behavior.\n\nTypical use cases would be modifying things like:\n\n- `CYPRESS_BASE_URL`\n- `CYPRESS_VIDEO_COMPRESSION`\n- `CYPRESS_REPORTER`\n\nRefer to the [configuration docs](https://on.cypress.io/guides/configuration#section-environment-variables) for more examples.\n\n***\n\n## Change environment variables in your tests\n\nOf course you can also set environment varibables for use strictly in your tests.\n\nThese enable your code to reference dynamic values.\n\n```shell\nexport \"EXTERNAL_API_SERVER=https://corp.acme.co\"\n```\n\nAnd then in your tests:\n\n```javascript\ncy\n  .request({\n    method: \"POST\",\n    url: Cypress.env(\"EXTERNAL_API_SERVER\") + \"/users/1\",\n    body: {\n      foo: \"bar\",\n      baz: \"quux\"\n    }\n  })\n```\n\nRefer to the dedicated [Environment Variables Guide](https://on.cypress.io/guides/environment-variables) for more examples.\n\n***\n\n# Optimizing CI\n\nMost CI providers allow caching of directories and dependencies between builds. This allows you to save the state of Cypress, therefore making the builds run faster.\n\n## Caching Cypress in Travis CI\n\n```yaml\n## .travis.yml\n\ncache:\n  directories:\n    - /home/travis/.cypress/Cypress\n```\n\n***\n\n## Caching Cypress in CircleCI\n\n```yaml\n## circle.yml\n\n## make sure you set the correct node version based on what you've installed!\ndependencies:\n  cache_directories:\n    - /home/ubuntu/nvm/versions/node/v6.2.2/bin/cypress\n    - /home/ubuntu/nvm/versions/node/v6.2.2/lib/node_modules/cypress-cli\n    - /home/ubuntu/.cypress/Cypress\n```\n\n***\n\n# Dependencies\n\nIf you're using a hosted CI service such as `Travis` or `CircleCI` then you don't have to install anything.\n\nFor **everything else** you must install these dependencies:\n\n```shell\napt-get install xvfb libgtk2.0-0 libnotify-dev libgconf-2-4 libnss3 libxss1\n```\n\nIf you run `cypress run` and see no output [see this section for troubleshooting this known issue](#section-no-output).\n\n***\n\n# Known Issues\n\n## CircleCI\n\nYou need to select their [`Ubuntu 12.04` image](https://circleci.com/docs/build-image-precise/).\n\n![](https://cloud.githubusercontent.com/assets/1268976/20771195/6e93e9f4-b716-11e6-809b-f4fd8f6fa439.png)\n\nThe `Ubuntu 14.04` image does not have all of the required dependencies installed by default. You can likely install them yourself. [There is an open issue for this here.](https://github.com/cypress-io/cypress/issues/315)\n\n***\n\n## Jenkins\n\nYou need to install all of the [linux dependencies](#section-dependencies).\n\n***\n\n## Docker\n\nWe don't offer an **official** docker container, but our users have created one. [This container has all of the required dependencies installed and ready to go](https://docs.cypress.io/docs/userland-extensions#section-docker).\n\nIf you don't use this image you must install all of the [linux dependencies](#section-dependencies).\n\nSee [this issue](https://github.com/cypress-io/cypress/issues/165) for more information.\n\nIf you are running **long** runs on Docker, you need to set the `ipc` to `host` mode.\n\n[This issue](https://github.com/cypress-io/cypress/issues/350) describes exactly what to do.\n\n***\n\n# Troubleshooting\n\n## No Output\n\n**Sympton**\nAfter executing `cypress run` you don't see any output. In other words: nothing happens.\n\n**Problem**\nYou are in 100% of the cases missing [a dependency](#section-dependencies) above. Please install all of the dependencies.\n\nThe reason you're not seeing any output is a longstanding issue with Cypress which [there is an open issue for](https://github.com/cypress-io/cypress/issues/317).\n\nWe are working on improving this experience!\n\n**Seeing Errors**\nAlthough running `cypress run` will yield no output - you can see the actual dependency failure by invoking the Cypress binary directly.\n\n```shell\n## invoke the Cypress binary directly\n/home/<user>/.cypress/Cypress/Cypress\n```\n","source":"guides/guides/continuous-integration.md","raw":"title: continuous-integration\n---\n\n# What's Supported?\n\nCypress should run on **all** CI providers. We currently have seen Cypress working on the following services / providers:\n\n- Jenkins (Linux)\n- TravisCI\n- CircleCI\n- CodeShip\n- GitLab\n- Docker\n\n***\n\n# Running in CI\n\nRunning Cypress in CI is just as easy as running it locally. You generally only need to do two things:\n\n```shell\n## 1. install the CLI tools\nnpm install -g cypress-cli\n\n## 2. run cypress\ncypress run\n```\n\nThat's it!\n\nThis will automatically go out and install Cypress, and then run all your tests.\n\nFor a comprehensive list of all the options you can pass to `cypress run`, [refer to the CLI documentation](https://on.cypress.io/cli).\n\n![travis-logs](https://cloud.githubusercontent.com/assets/1268976/9291527/8ea21024-4393-11e5-86b7-80e3b5d1047e.gif)\n\n***\n\n## Your CI Config File\n\nDepending on which CI provider you'll need to add these two lines (above) to a config file.\n\nFor instance with TravisCI and CircleCI we have:\n\n- `.travis.yml`\n- `circle.yml`\n\nYou'll want to refer to your CI providers documentation for knowing when to run those commands.\n\nHere's a couple example config files:\n\n```yaml\n## .travis.yml\n\nbefore_install:\n  - npm install -g cypress-cli\n\nscript:\n  - cypress run\n```\n\n```yaml\n## circle.yml\n\ndependencies:\n  post:\n    - npm install -g cypress-cli\n\ntest:\n  override:\n    - cypress run\n```\n\nFor more example config files check out any of our [example apps](https://on.cypress.io/guides/all-example-apps).\n\n***\n\n## Recording your runs\n\nYou can automatically have Cypress record your runs and make them available in our Dashboard.\n\nRecorded runs will contain:\n\n- Standard output\n- Failing Tests\n- Screenshots\n- Videos\n\nTo record your runs:\n\n1. [Setup your project to record](https://on.cypress.io/guides/projects)\n2. [Pass the --record flag to `cypress run`](https://on.cypress.io/how-do-i-record-runs)\n\nYou can [read more about the Dashboard here](https://on.cypress.io/guides/dashboard-features).\n\n***\n\n# Using Environment Variables\n\nYou can set various environment variables to modify how Cypress runs.\n\nTypically you'd want to do this to:\n\n- [Hide your **Record Key**](#section-hide-your-record-key)\n- [Install a specific version](#section-install-a-specific-version)\n- [Modify configuration settings](#section-modify-configuration-settings)\n- [Change environment variables in your tests](#section-change-environment-variables-in-your-tests)\n\n***\n\n## Hide your Record Key\n\nIf you are [recording your runs](#section-recording-your-runs) on a public project, you'll want to protect your Record Key. [Learn why.](https://docs.cypress.io/docs/projects#section-how-do-a-projectid-and-record-key-work-together-)\n\nInstead of hard coding it into your run command like this:\n\n```shell\ncypress run --record --key <record_key>\n```\n\nYou can set it as an environment variable and we'll automatically use that value.\n\nTypically you'd set this inside of your CI provider like this:\n\n**CircleCI**\n![screen shot 2017-02-12 at 8 56 17 pm](https://cloud.githubusercontent.com/assets/1268976/22868594/cabd8152-f165-11e6-8897-0e3e57d0eafd.png)\n\n**TravisCI**\n![screen shot 2017-02-12 at 8 58 01 pm](https://cloud.githubusercontent.com/assets/1268976/22868637/05c46e00-f166-11e6-9106-682d5729acca.png)\n\nYou can now omit the `--key` flag when recording.\n\n```shell\n## weeee we don't have to pass in the key here!\ncypress run --record\n```\n\n***\n\n## Install a specific version\n\nYou can install a specific version of Cypress by setting the environment variable: `CYPRESS_VERSION`.\n\n**Set the version to an older Cypress**\n![screen shot 2016-03-28 at 11 28 26 am](https://cloud.githubusercontent.com/assets/1271364/14081365/601e2da4-f4d8-11e5-8ea8-0491ffcb0999.png)\n\n***\n\n## Modify configuration settings\n\nDon't forget you can also override settings in `cypress.json` to modify Cypress's behavior.\n\nTypical use cases would be modifying things like:\n\n- `CYPRESS_BASE_URL`\n- `CYPRESS_VIDEO_COMPRESSION`\n- `CYPRESS_REPORTER`\n\nRefer to the [configuration docs](https://on.cypress.io/guides/configuration#section-environment-variables) for more examples.\n\n***\n\n## Change environment variables in your tests\n\nOf course you can also set environment varibables for use strictly in your tests.\n\nThese enable your code to reference dynamic values.\n\n```shell\nexport \"EXTERNAL_API_SERVER=https://corp.acme.co\"\n```\n\nAnd then in your tests:\n\n```javascript\ncy\n  .request({\n    method: \"POST\",\n    url: Cypress.env(\"EXTERNAL_API_SERVER\") + \"/users/1\",\n    body: {\n      foo: \"bar\",\n      baz: \"quux\"\n    }\n  })\n```\n\nRefer to the dedicated [Environment Variables Guide](https://on.cypress.io/guides/environment-variables) for more examples.\n\n***\n\n# Optimizing CI\n\nMost CI providers allow caching of directories and dependencies between builds. This allows you to save the state of Cypress, therefore making the builds run faster.\n\n## Caching Cypress in Travis CI\n\n```yaml\n## .travis.yml\n\ncache:\n  directories:\n    - /home/travis/.cypress/Cypress\n```\n\n***\n\n## Caching Cypress in CircleCI\n\n```yaml\n## circle.yml\n\n## make sure you set the correct node version based on what you've installed!\ndependencies:\n  cache_directories:\n    - /home/ubuntu/nvm/versions/node/v6.2.2/bin/cypress\n    - /home/ubuntu/nvm/versions/node/v6.2.2/lib/node_modules/cypress-cli\n    - /home/ubuntu/.cypress/Cypress\n```\n\n***\n\n# Dependencies\n\nIf you're using a hosted CI service such as `Travis` or `CircleCI` then you don't have to install anything.\n\nFor **everything else** you must install these dependencies:\n\n```shell\napt-get install xvfb libgtk2.0-0 libnotify-dev libgconf-2-4 libnss3 libxss1\n```\n\nIf you run `cypress run` and see no output [see this section for troubleshooting this known issue](#section-no-output).\n\n***\n\n# Known Issues\n\n## CircleCI\n\nYou need to select their [`Ubuntu 12.04` image](https://circleci.com/docs/build-image-precise/).\n\n![](https://cloud.githubusercontent.com/assets/1268976/20771195/6e93e9f4-b716-11e6-809b-f4fd8f6fa439.png)\n\nThe `Ubuntu 14.04` image does not have all of the required dependencies installed by default. You can likely install them yourself. [There is an open issue for this here.](https://github.com/cypress-io/cypress/issues/315)\n\n***\n\n## Jenkins\n\nYou need to install all of the [linux dependencies](#section-dependencies).\n\n***\n\n## Docker\n\nWe don't offer an **official** docker container, but our users have created one. [This container has all of the required dependencies installed and ready to go](https://docs.cypress.io/docs/userland-extensions#section-docker).\n\nIf you don't use this image you must install all of the [linux dependencies](#section-dependencies).\n\nSee [this issue](https://github.com/cypress-io/cypress/issues/165) for more information.\n\nIf you are running **long** runs on Docker, you need to set the `ipc` to `host` mode.\n\n[This issue](https://github.com/cypress-io/cypress/issues/350) describes exactly what to do.\n\n***\n\n# Troubleshooting\n\n## No Output\n\n**Sympton**\nAfter executing `cypress run` you don't see any output. In other words: nothing happens.\n\n**Problem**\nYou are in 100% of the cases missing [a dependency](#section-dependencies) above. Please install all of the dependencies.\n\nThe reason you're not seeing any output is a longstanding issue with Cypress which [there is an open issue for](https://github.com/cypress-io/cypress/issues/317).\n\nWe are working on improving this experience!\n\n**Seeing Errors**\nAlthough running `cypress run` will yield no output - you can see the actual dependency failure by invoking the Cypress binary directly.\n\n```shell\n## invoke the Cypress binary directly\n/home/<user>/.cypress/Cypress/Cypress\n```\n","date":"2017-04-19T18:46:47.000Z","updated":"2017-04-19T18:46:47.000Z","path":"guides/guides/continuous-integration.html","comments":1,"layout":"page","_id":"cj1pby1kp002s68g8br98xzp3","content":"<h1 id=\"What’s-Supported\"><a href=\"#What’s-Supported\" class=\"headerlink\" title=\"What’s Supported?\"></a>What’s Supported?</h1><p>Cypress should run on <strong>all</strong> CI providers. We currently have seen Cypress working on the following services / providers:</p>\n<ul>\n<li>Jenkins (Linux)</li>\n<li>TravisCI</li>\n<li>CircleCI</li>\n<li>CodeShip</li>\n<li>GitLab</li>\n<li>Docker</li>\n</ul>\n<hr>\n<h1 id=\"Running-in-CI\"><a href=\"#Running-in-CI\" class=\"headerlink\" title=\"Running in CI\"></a>Running in CI</h1><p>Running Cypress in CI is just as easy as running it locally. You generally only need to do two things:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 1. install the CLI tools</span></span></div><div class=\"line\">npm install -g cypress-cli</div><div class=\"line\"><span class=\"meta\"></span></div><div class=\"line\">#<span class=\"bash\"><span class=\"comment\"># 2. run cypress</span></span></div><div class=\"line\">cypress run</div></pre></td></tr></table></figure>\n<p>That’s it!</p>\n<p>This will automatically go out and install Cypress, and then run all your tests.</p>\n<p>For a comprehensive list of all the options you can pass to <code>cypress run</code>, <a href=\"https://on.cypress.io/cli\" target=\"_blank\" rel=\"external\">refer to the CLI documentation</a>.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/9291527/8ea21024-4393-11e5-86b7-80e3b5d1047e.gif\" alt=\"travis-logs\"></p>\n<hr>\n<h2 id=\"Your-CI-Config-File\"><a href=\"#Your-CI-Config-File\" class=\"headerlink\" title=\"Your CI Config File\"></a>Your CI Config File</h2><p>Depending on which CI provider you’ll need to add these two lines (above) to a config file.</p>\n<p>For instance with TravisCI and CircleCI we have:</p>\n<ul>\n<li><code>.travis.yml</code></li>\n<li><code>circle.yml</code></li>\n</ul>\n<p>You’ll want to refer to your CI providers documentation for knowing when to run those commands.</p>\n<p>Here’s a couple example config files:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">## .travis.yml</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">before_install:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"bullet\">-g</span> <span class=\"string\">cypress-cli</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">script:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">cypress</span> <span class=\"string\">run</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">## circle.yml</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">dependencies:</span></div><div class=\"line\"><span class=\"attr\">  post:</span></div><div class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"bullet\">-g</span> <span class=\"string\">cypress-cli</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">test:</span></div><div class=\"line\"><span class=\"attr\">  override:</span></div><div class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">cypress</span> <span class=\"string\">run</span></div></pre></td></tr></table></figure>\n<p>For more example config files check out any of our <a href=\"https://on.cypress.io/guides/all-example-apps\" target=\"_blank\" rel=\"external\">example apps</a>.</p>\n<hr>\n<h2 id=\"Recording-your-runs\"><a href=\"#Recording-your-runs\" class=\"headerlink\" title=\"Recording your runs\"></a>Recording your runs</h2><p>You can automatically have Cypress record your runs and make them available in our Dashboard.</p>\n<p>Recorded runs will contain:</p>\n<ul>\n<li>Standard output</li>\n<li>Failing Tests</li>\n<li>Screenshots</li>\n<li>Videos</li>\n</ul>\n<p>To record your runs:</p>\n<ol>\n<li><a href=\"https://on.cypress.io/guides/projects\" target=\"_blank\" rel=\"external\">Setup your project to record</a></li>\n<li><a href=\"https://on.cypress.io/how-do-i-record-runs\" target=\"_blank\" rel=\"external\">Pass the –record flag to <code>cypress run</code></a></li>\n</ol>\n<p>You can <a href=\"https://on.cypress.io/guides/dashboard-features\" target=\"_blank\" rel=\"external\">read more about the Dashboard here</a>.</p>\n<hr>\n<h1 id=\"Using-Environment-Variables\"><a href=\"#Using-Environment-Variables\" class=\"headerlink\" title=\"Using Environment Variables\"></a>Using Environment Variables</h1><p>You can set various environment variables to modify how Cypress runs.</p>\n<p>Typically you’d want to do this to:</p>\n<ul>\n<li><a href=\"#section-hide-your-record-key\">Hide your <strong>Record Key</strong></a></li>\n<li><a href=\"#section-install-a-specific-version\">Install a specific version</a></li>\n<li><a href=\"#section-modify-configuration-settings\">Modify configuration settings</a></li>\n<li><a href=\"#section-change-environment-variables-in-your-tests\">Change environment variables in your tests</a></li>\n</ul>\n<hr>\n<h2 id=\"Hide-your-Record-Key\"><a href=\"#Hide-your-Record-Key\" class=\"headerlink\" title=\"Hide your Record Key\"></a>Hide your Record Key</h2><p>If you are <a href=\"#section-recording-your-runs\">recording your runs</a> on a public project, you’ll want to protect your Record Key. <a href=\"https://docs.cypress.io/docs/projects#section-how-do-a-projectid-and-record-key-work-together-\" target=\"_blank\" rel=\"external\">Learn why.</a></p>\n<p>Instead of hard coding it into your run command like this:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cypress run --record --key &lt;record_key&gt;</div></pre></td></tr></table></figure>\n<p>You can set it as an environment variable and we’ll automatically use that value.</p>\n<p>Typically you’d set this inside of your CI provider like this:</p>\n<p><strong>CircleCI</strong><br><img src=\"https://cloud.githubusercontent.com/assets/1268976/22868594/cabd8152-f165-11e6-8897-0e3e57d0eafd.png\" alt=\"screen shot 2017-02-12 at 8 56 17 pm\"></p>\n<p><strong>TravisCI</strong><br><img src=\"https://cloud.githubusercontent.com/assets/1268976/22868637/05c46e00-f166-11e6-9106-682d5729acca.png\" alt=\"screen shot 2017-02-12 at 8 58 01 pm\"></p>\n<p>You can now omit the <code>--key</code> flag when recording.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># weeee we don't have to pass in the key here!</span></span></div><div class=\"line\">cypress run --record</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Install-a-specific-version\"><a href=\"#Install-a-specific-version\" class=\"headerlink\" title=\"Install a specific version\"></a>Install a specific version</h2><p>You can install a specific version of Cypress by setting the environment variable: <code>CYPRESS_VERSION</code>.</p>\n<p><strong>Set the version to an older Cypress</strong><br><img src=\"https://cloud.githubusercontent.com/assets/1271364/14081365/601e2da4-f4d8-11e5-8ea8-0491ffcb0999.png\" alt=\"screen shot 2016-03-28 at 11 28 26 am\"></p>\n<hr>\n<h2 id=\"Modify-configuration-settings\"><a href=\"#Modify-configuration-settings\" class=\"headerlink\" title=\"Modify configuration settings\"></a>Modify configuration settings</h2><p>Don’t forget you can also override settings in <code>cypress.json</code> to modify Cypress’s behavior.</p>\n<p>Typical use cases would be modifying things like:</p>\n<ul>\n<li><code>CYPRESS_BASE_URL</code></li>\n<li><code>CYPRESS_VIDEO_COMPRESSION</code></li>\n<li><code>CYPRESS_REPORTER</code></li>\n</ul>\n<p>Refer to the <a href=\"https://on.cypress.io/guides/configuration#section-environment-variables\" target=\"_blank\" rel=\"external\">configuration docs</a> for more examples.</p>\n<hr>\n<h2 id=\"Change-environment-variables-in-your-tests\"><a href=\"#Change-environment-variables-in-your-tests\" class=\"headerlink\" title=\"Change environment variables in your tests\"></a>Change environment variables in your tests</h2><p>Of course you can also set environment varibables for use strictly in your tests.</p>\n<p>These enable your code to reference dynamic values.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export \"EXTERNAL_API_SERVER=https://corp.acme.co\"</div></pre></td></tr></table></figure>\n<p>And then in your tests:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .request(&#123;</div><div class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">\"POST\"</span>,</div><div class=\"line\">    <span class=\"attr\">url</span>: Cypress.env(<span class=\"string\">\"EXTERNAL_API_SERVER\"</span>) + <span class=\"string\">\"/users/1\"</span>,</div><div class=\"line\">    <span class=\"attr\">body</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">foo</span>: <span class=\"string\">\"bar\"</span>,</div><div class=\"line\">      <span class=\"attr\">baz</span>: <span class=\"string\">\"quux\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<p>Refer to the dedicated <a href=\"https://on.cypress.io/guides/environment-variables\" target=\"_blank\" rel=\"external\">Environment Variables Guide</a> for more examples.</p>\n<hr>\n<h1 id=\"Optimizing-CI\"><a href=\"#Optimizing-CI\" class=\"headerlink\" title=\"Optimizing CI\"></a>Optimizing CI</h1><p>Most CI providers allow caching of directories and dependencies between builds. This allows you to save the state of Cypress, therefore making the builds run faster.</p>\n<h2 id=\"Caching-Cypress-in-Travis-CI\"><a href=\"#Caching-Cypress-in-Travis-CI\" class=\"headerlink\" title=\"Caching Cypress in Travis CI\"></a>Caching Cypress in Travis CI</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">## .travis.yml</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">cache:</span></div><div class=\"line\"><span class=\"attr\">  directories:</span></div><div class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/home/travis/.cypress/Cypress</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Caching-Cypress-in-CircleCI\"><a href=\"#Caching-Cypress-in-CircleCI\" class=\"headerlink\" title=\"Caching Cypress in CircleCI\"></a>Caching Cypress in CircleCI</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">## circle.yml</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">## make sure you set the correct node version based on what you've installed!</span></div><div class=\"line\"><span class=\"attr\">dependencies:</span></div><div class=\"line\"><span class=\"attr\">  cache_directories:</span></div><div class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/home/ubuntu/nvm/versions/node/v6.2.2/bin/cypress</span></div><div class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/home/ubuntu/nvm/versions/node/v6.2.2/lib/node_modules/cypress-cli</span></div><div class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/home/ubuntu/.cypress/Cypress</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Dependencies\"><a href=\"#Dependencies\" class=\"headerlink\" title=\"Dependencies\"></a>Dependencies</h1><p>If you’re using a hosted CI service such as <code>Travis</code> or <code>CircleCI</code> then you don’t have to install anything.</p>\n<p>For <strong>everything else</strong> you must install these dependencies:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get install xvfb libgtk2.0-0 libnotify-dev libgconf-2-4 libnss3 libxss1</div></pre></td></tr></table></figure>\n<p>If you run <code>cypress run</code> and see no output <a href=\"#section-no-output\">see this section for troubleshooting this known issue</a>.</p>\n<hr>\n<h1 id=\"Known-Issues\"><a href=\"#Known-Issues\" class=\"headerlink\" title=\"Known Issues\"></a>Known Issues</h1><h2 id=\"CircleCI\"><a href=\"#CircleCI\" class=\"headerlink\" title=\"CircleCI\"></a>CircleCI</h2><p>You need to select their <a href=\"https://circleci.com/docs/build-image-precise/\" target=\"_blank\" rel=\"external\"><code>Ubuntu 12.04</code> image</a>.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/20771195/6e93e9f4-b716-11e6-809b-f4fd8f6fa439.png\" alt=\"\"></p>\n<p>The <code>Ubuntu 14.04</code> image does not have all of the required dependencies installed by default. You can likely install them yourself. <a href=\"https://github.com/cypress-io/cypress/issues/315\" target=\"_blank\" rel=\"external\">There is an open issue for this here.</a></p>\n<hr>\n<h2 id=\"Jenkins\"><a href=\"#Jenkins\" class=\"headerlink\" title=\"Jenkins\"></a>Jenkins</h2><p>You need to install all of the <a href=\"#section-dependencies\">linux dependencies</a>.</p>\n<hr>\n<h2 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h2><p>We don’t offer an <strong>official</strong> docker container, but our users have created one. <a href=\"https://docs.cypress.io/docs/userland-extensions#section-docker\" target=\"_blank\" rel=\"external\">This container has all of the required dependencies installed and ready to go</a>.</p>\n<p>If you don’t use this image you must install all of the <a href=\"#section-dependencies\">linux dependencies</a>.</p>\n<p>See <a href=\"https://github.com/cypress-io/cypress/issues/165\" target=\"_blank\" rel=\"external\">this issue</a> for more information.</p>\n<p>If you are running <strong>long</strong> runs on Docker, you need to set the <code>ipc</code> to <code>host</code> mode.</p>\n<p><a href=\"https://github.com/cypress-io/cypress/issues/350\" target=\"_blank\" rel=\"external\">This issue</a> describes exactly what to do.</p>\n<hr>\n<h1 id=\"Troubleshooting\"><a href=\"#Troubleshooting\" class=\"headerlink\" title=\"Troubleshooting\"></a>Troubleshooting</h1><h2 id=\"No-Output\"><a href=\"#No-Output\" class=\"headerlink\" title=\"No Output\"></a>No Output</h2><p><strong>Sympton</strong><br>After executing <code>cypress run</code> you don’t see any output. In other words: nothing happens.</p>\n<p><strong>Problem</strong><br>You are in 100% of the cases missing <a href=\"#section-dependencies\">a dependency</a> above. Please install all of the dependencies.</p>\n<p>The reason you’re not seeing any output is a longstanding issue with Cypress which <a href=\"https://github.com/cypress-io/cypress/issues/317\" target=\"_blank\" rel=\"external\">there is an open issue for</a>.</p>\n<p>We are working on improving this experience!</p>\n<p><strong>Seeing Errors</strong><br>Although running <code>cypress run</code> will yield no output - you can see the actual dependency failure by invoking the Cypress binary directly.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># invoke the Cypress binary directly</span></span></div><div class=\"line\">/home/&lt;user&gt;/.cypress/Cypress/Cypress</div></pre></td></tr></table></figure>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<h1 id=\"What’s-Supported\"><a href=\"#What’s-Supported\" class=\"headerlink\" title=\"What’s Supported?\"></a>What’s Supported?</h1><p>Cypress should run on <strong>all</strong> CI providers. We currently have seen Cypress working on the following services / providers:</p>\n<ul>\n<li>Jenkins (Linux)</li>\n<li>TravisCI</li>\n<li>CircleCI</li>\n<li>CodeShip</li>\n<li>GitLab</li>\n<li>Docker</li>\n</ul>\n<hr>\n<h1 id=\"Running-in-CI\"><a href=\"#Running-in-CI\" class=\"headerlink\" title=\"Running in CI\"></a>Running in CI</h1><p>Running Cypress in CI is just as easy as running it locally. You generally only need to do two things:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 1. install the CLI tools</span></span></div><div class=\"line\">npm install -g cypress-cli</div><div class=\"line\"><span class=\"meta\"></div><div class=\"line\">#</span><span class=\"bash\"><span class=\"comment\"># 2. run cypress</span></span></div><div class=\"line\">cypress run</div></pre></td></tr></table></figure>\n<p>That’s it!</p>\n<p>This will automatically go out and install Cypress, and then run all your tests.</p>\n<p>For a comprehensive list of all the options you can pass to <code>cypress run</code>, <a href=\"https://on.cypress.io/cli\">refer to the CLI documentation</a>.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/9291527/8ea21024-4393-11e5-86b7-80e3b5d1047e.gif\" alt=\"travis-logs\"></p>\n<hr>\n<h2 id=\"Your-CI-Config-File\"><a href=\"#Your-CI-Config-File\" class=\"headerlink\" title=\"Your CI Config File\"></a>Your CI Config File</h2><p>Depending on which CI provider you’ll need to add these two lines (above) to a config file.</p>\n<p>For instance with TravisCI and CircleCI we have:</p>\n<ul>\n<li><code>.travis.yml</code></li>\n<li><code>circle.yml</code></li>\n</ul>\n<p>You’ll want to refer to your CI providers documentation for knowing when to run those commands.</p>\n<p>Here’s a couple example config files:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">## .travis.yml</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">before_install:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"bullet\">-g</span> <span class=\"string\">cypress-cli</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">script:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">cypress</span> <span class=\"string\">run</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">## circle.yml</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">dependencies:</span></div><div class=\"line\"><span class=\"attr\">  post:</span></div><div class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"bullet\">-g</span> <span class=\"string\">cypress-cli</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">test:</span></div><div class=\"line\"><span class=\"attr\">  override:</span></div><div class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">cypress</span> <span class=\"string\">run</span></div></pre></td></tr></table></figure>\n<p>For more example config files check out any of our <a href=\"https://on.cypress.io/guides/all-example-apps\">example apps</a>.</p>\n<hr>\n<h2 id=\"Recording-your-runs\"><a href=\"#Recording-your-runs\" class=\"headerlink\" title=\"Recording your runs\"></a>Recording your runs</h2><p>You can automatically have Cypress record your runs and make them available in our Dashboard.</p>\n<p>Recorded runs will contain:</p>\n<ul>\n<li>Standard output</li>\n<li>Failing Tests</li>\n<li>Screenshots</li>\n<li>Videos</li>\n</ul>\n<p>To record your runs:</p>\n<ol>\n<li><a href=\"https://on.cypress.io/guides/projects\">Setup your project to record</a></li>\n<li><a href=\"https://on.cypress.io/how-do-i-record-runs\">Pass the –record flag to <code>cypress run</code></a></li>\n</ol>\n<p>You can <a href=\"https://on.cypress.io/guides/dashboard-features\">read more about the Dashboard here</a>.</p>\n<hr>\n<h1 id=\"Using-Environment-Variables\"><a href=\"#Using-Environment-Variables\" class=\"headerlink\" title=\"Using Environment Variables\"></a>Using Environment Variables</h1><p>You can set various environment variables to modify how Cypress runs.</p>\n<p>Typically you’d want to do this to:</p>\n<ul>\n<li><a href=\"#section-hide-your-record-key\">Hide your <strong>Record Key</strong></a></li>\n<li><a href=\"#section-install-a-specific-version\">Install a specific version</a></li>\n<li><a href=\"#section-modify-configuration-settings\">Modify configuration settings</a></li>\n<li><a href=\"#section-change-environment-variables-in-your-tests\">Change environment variables in your tests</a></li>\n</ul>\n<hr>\n<h2 id=\"Hide-your-Record-Key\"><a href=\"#Hide-your-Record-Key\" class=\"headerlink\" title=\"Hide your Record Key\"></a>Hide your Record Key</h2><p>If you are <a href=\"#section-recording-your-runs\">recording your runs</a> on a public project, you’ll want to protect your Record Key. <a href=\"https://docs.cypress.io/docs/projects#section-how-do-a-projectid-and-record-key-work-together-\">Learn why.</a></p>\n<p>Instead of hard coding it into your run command like this:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cypress run --record --key &lt;record_key&gt;</div></pre></td></tr></table></figure>\n<p>You can set it as an environment variable and we’ll automatically use that value.</p>\n<p>Typically you’d set this inside of your CI provider like this:</p>\n<p><strong>CircleCI</strong><br><img src=\"https://cloud.githubusercontent.com/assets/1268976/22868594/cabd8152-f165-11e6-8897-0e3e57d0eafd.png\" alt=\"screen shot 2017-02-12 at 8 56 17 pm\"></p>\n<p><strong>TravisCI</strong><br><img src=\"https://cloud.githubusercontent.com/assets/1268976/22868637/05c46e00-f166-11e6-9106-682d5729acca.png\" alt=\"screen shot 2017-02-12 at 8 58 01 pm\"></p>\n<p>You can now omit the <code>--key</code> flag when recording.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># weeee we don't have to pass in the key here!</span></span></div><div class=\"line\">cypress run --record</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Install-a-specific-version\"><a href=\"#Install-a-specific-version\" class=\"headerlink\" title=\"Install a specific version\"></a>Install a specific version</h2><p>You can install a specific version of Cypress by setting the environment variable: <code>CYPRESS_VERSION</code>.</p>\n<p><strong>Set the version to an older Cypress</strong><br><img src=\"https://cloud.githubusercontent.com/assets/1271364/14081365/601e2da4-f4d8-11e5-8ea8-0491ffcb0999.png\" alt=\"screen shot 2016-03-28 at 11 28 26 am\"></p>\n<hr>\n<h2 id=\"Modify-configuration-settings\"><a href=\"#Modify-configuration-settings\" class=\"headerlink\" title=\"Modify configuration settings\"></a>Modify configuration settings</h2><p>Don’t forget you can also override settings in <code>cypress.json</code> to modify Cypress’s behavior.</p>\n<p>Typical use cases would be modifying things like:</p>\n<ul>\n<li><code>CYPRESS_BASE_URL</code></li>\n<li><code>CYPRESS_VIDEO_COMPRESSION</code></li>\n<li><code>CYPRESS_REPORTER</code></li>\n</ul>\n<p>Refer to the <a href=\"https://on.cypress.io/guides/configuration#section-environment-variables\">configuration docs</a> for more examples.</p>\n<hr>\n<h2 id=\"Change-environment-variables-in-your-tests\"><a href=\"#Change-environment-variables-in-your-tests\" class=\"headerlink\" title=\"Change environment variables in your tests\"></a>Change environment variables in your tests</h2><p>Of course you can also set environment varibables for use strictly in your tests.</p>\n<p>These enable your code to reference dynamic values.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export \"EXTERNAL_API_SERVER=https://corp.acme.co\"</div></pre></td></tr></table></figure>\n<p>And then in your tests:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .request(&#123;</div><div class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">\"POST\"</span>,</div><div class=\"line\">    <span class=\"attr\">url</span>: Cypress.env(<span class=\"string\">\"EXTERNAL_API_SERVER\"</span>) + <span class=\"string\">\"/users/1\"</span>,</div><div class=\"line\">    <span class=\"attr\">body</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">foo</span>: <span class=\"string\">\"bar\"</span>,</div><div class=\"line\">      <span class=\"attr\">baz</span>: <span class=\"string\">\"quux\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<p>Refer to the dedicated <a href=\"https://on.cypress.io/guides/environment-variables\">Environment Variables Guide</a> for more examples.</p>\n<hr>\n<h1 id=\"Optimizing-CI\"><a href=\"#Optimizing-CI\" class=\"headerlink\" title=\"Optimizing CI\"></a>Optimizing CI</h1><p>Most CI providers allow caching of directories and dependencies between builds. This allows you to save the state of Cypress, therefore making the builds run faster.</p>\n<h2 id=\"Caching-Cypress-in-Travis-CI\"><a href=\"#Caching-Cypress-in-Travis-CI\" class=\"headerlink\" title=\"Caching Cypress in Travis CI\"></a>Caching Cypress in Travis CI</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">## .travis.yml</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">cache:</span></div><div class=\"line\"><span class=\"attr\">  directories:</span></div><div class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/home/travis/.cypress/Cypress</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Caching-Cypress-in-CircleCI\"><a href=\"#Caching-Cypress-in-CircleCI\" class=\"headerlink\" title=\"Caching Cypress in CircleCI\"></a>Caching Cypress in CircleCI</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">## circle.yml</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">## make sure you set the correct node version based on what you've installed!</span></div><div class=\"line\"><span class=\"attr\">dependencies:</span></div><div class=\"line\"><span class=\"attr\">  cache_directories:</span></div><div class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/home/ubuntu/nvm/versions/node/v6.2.2/bin/cypress</span></div><div class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/home/ubuntu/nvm/versions/node/v6.2.2/lib/node_modules/cypress-cli</span></div><div class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">/home/ubuntu/.cypress/Cypress</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Dependencies\"><a href=\"#Dependencies\" class=\"headerlink\" title=\"Dependencies\"></a>Dependencies</h1><p>If you’re using a hosted CI service such as <code>Travis</code> or <code>CircleCI</code> then you don’t have to install anything.</p>\n<p>For <strong>everything else</strong> you must install these dependencies:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get install xvfb libgtk2.0-0 libnotify-dev libgconf-2-4 libnss3 libxss1</div></pre></td></tr></table></figure>\n<p>If you run <code>cypress run</code> and see no output <a href=\"#section-no-output\">see this section for troubleshooting this known issue</a>.</p>\n<hr>\n<h1 id=\"Known-Issues\"><a href=\"#Known-Issues\" class=\"headerlink\" title=\"Known Issues\"></a>Known Issues</h1><h2 id=\"CircleCI\"><a href=\"#CircleCI\" class=\"headerlink\" title=\"CircleCI\"></a>CircleCI</h2><p>You need to select their <a href=\"https://circleci.com/docs/build-image-precise/\"><code>Ubuntu 12.04</code> image</a>.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/20771195/6e93e9f4-b716-11e6-809b-f4fd8f6fa439.png\" alt=\"\"></p>\n<p>The <code>Ubuntu 14.04</code> image does not have all of the required dependencies installed by default. You can likely install them yourself. <a href=\"https://github.com/cypress-io/cypress/issues/315\">There is an open issue for this here.</a></p>\n<hr>\n<h2 id=\"Jenkins\"><a href=\"#Jenkins\" class=\"headerlink\" title=\"Jenkins\"></a>Jenkins</h2><p>You need to install all of the <a href=\"#section-dependencies\">linux dependencies</a>.</p>\n<hr>\n<h2 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h2><p>We don’t offer an <strong>official</strong> docker container, but our users have created one. <a href=\"https://docs.cypress.io/docs/userland-extensions#section-docker\">This container has all of the required dependencies installed and ready to go</a>.</p>\n<p>If you don’t use this image you must install all of the <a href=\"#section-dependencies\">linux dependencies</a>.</p>\n<p>See <a href=\"https://github.com/cypress-io/cypress/issues/165\">this issue</a> for more information.</p>\n<p>If you are running <strong>long</strong> runs on Docker, you need to set the <code>ipc</code> to <code>host</code> mode.</p>\n<p><a href=\"https://github.com/cypress-io/cypress/issues/350\">This issue</a> describes exactly what to do.</p>\n<hr>\n<h1 id=\"Troubleshooting\"><a href=\"#Troubleshooting\" class=\"headerlink\" title=\"Troubleshooting\"></a>Troubleshooting</h1><h2 id=\"No-Output\"><a href=\"#No-Output\" class=\"headerlink\" title=\"No Output\"></a>No Output</h2><p><strong>Sympton</strong><br>After executing <code>cypress run</code> you don’t see any output. In other words: nothing happens.</p>\n<p><strong>Problem</strong><br>You are in 100% of the cases missing <a href=\"#section-dependencies\">a dependency</a> above. Please install all of the dependencies.</p>\n<p>The reason you’re not seeing any output is a longstanding issue with Cypress which <a href=\"https://github.com/cypress-io/cypress/issues/317\">there is an open issue for</a>.</p>\n<p>We are working on improving this experience!</p>\n<p><strong>Seeing Errors</strong><br>Although running <code>cypress run</code> will yield no output - you can see the actual dependency failure by invoking the Cypress binary directly.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># invoke the Cypress binary directly</span></span></div><div class=\"line\">/home/&lt;user&gt;/.cypress/Cypress/Cypress</div></pre></td></tr></table></figure>\n"},{"title":"environment-variables","_content":"\n# Use Case\n\nEnvironment variables should be used:\n- Whenever values are different across developer machines\n- Whenever values change frequently and are highly dynamic\n\nThe most common use case is to access custom values you've written in your `hosts` file.\n\nFor instance instead of hard coding this in your tests:\n\n```javascript\ncy\n  // this would break on other dev machines\n  .visit(\"http://server.dev.local\")\n```\n\nWe can move this into an environment variable.\n\n```javascript\ncy\n  // now this is pointing to a dynamic\n  // environment variable\n  .visit(Cypress.env(\"host\"))\n```\n\n***\n\n# Setting Environment Variables\n\nThere are 4 different ways to set environment variables. Each has a slightly different use case.\n\n**To summarize you can:**\n\n- set in `cypress.json`\n- create a `cypress.env.json`\n- export as `CYPRESS_*`\n- pass in the CLI as `--env`\n\nDon't feel obligated to pick just one method. It is common to use one strategy for local development but another when running in CI.\n\nWhen your tests are running, you can use the [`Cypress.env()`](https://on.cypress.io/api/env) function to access the values of your environment variables.\n\n***\n\n## Option #1: Set in `cypress.json`\n\nAny key/value you set in your [`cypress.json`](https://on.cypress.io/guides/configuration) under the `env` key will become an environment variable.\n\n```json\n// cypress.json\n{\n  \"projectId\": \"128076ed-9868-4e98-9cef-98dd8b705d75\",\n  \"env\": {\n    \"foo\": \"bar\",\n    \"some\": \"value\"\n  }\n}\n```\n\n```javascript\n// in your test files\n\nCypress.env()       // => {foo: \"bar\", some: \"value\"}\nCypress.env(\"foo\")  // => \"bar\"\nCypress.env(\"some\") // => \"value\"\n```\n\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"- Great for values that need to be checked into source control and remain the same on all machines\",\n  \"title\": \"Benefits\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"danger\",\n  \"body\": \"- Only works for values which should be the same on across all machines\",\n  \"title\": \"Downsides\"\n}\n[/block]\n\n***\n\n## Option #2: Create a `cypress.env.json`\n\nYou can create your own `cypress.env.json`, which Cypress will automatically check. Values in here will overwrite conflicting values in `cypress.json`.\n\nThis strategy is useful because if you add `cypress.env.json` to your `.gitignore` file, the values in here can be different for each developer machine.\n\n```json\n// cypress.env.json\n\n{\n  \"host\": \"veronica.dev.local\",\n  \"api_server\": \"http://localhost:8888/api/v1/\"\n}\n```\n\n```javascript\n// in your test files\n\nCypress.env()             // => {host: \"veronica.dev.local\", api_server: \"http://localhost:8888/api/v1\"}\nCypress.env(\"host\")       // => \"veronica.dev.local\"\nCypress.env(\"api_server\") // => \"http://localhost:8888/api/v1/\"\n```\n\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"- Dedicated file just for environment variables\\n- Enables you to generate this file from other build processes\\n- Values can be different on each machine if not checked into source control\",\n  \"title\": \"Benefits\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"danger\",\n  \"body\": \"- Another file you have to deal with\\n- Overkill for 1 or 2 environment variables\",\n  \"title\": \"Downsides\"\n}\n[/block]\n\n***\n\n## Option #3: Export as `CYPRESS_*`\n\nAny environment variable on your machine that starts with either `CYPRESS_` or `cypress_` will automatically be added and made available to you.\n\nConflicting values from this method will override `cypress.json` and `cypress.env.json` files.\n\nCypress will automatically **strip off** the `CYPRESS_` when adding your environment variables.\n\n```shell\n# export cypress env variables from the command line\nexport CYPRESS_HOST=laura.dev.local\nexport cypress_api_server=http://localhost:8888/api/v1/\n```\n\n```javascript\n// in your test files\n\nCypress.env()             // => {HOST: \"laura.dev.local\", api_server: \"http://localhost:8888/api/v1\"}\nCypress.env(\"HOST\")       // => \"laura.dev.local\"\nCypress.env(\"api_server\") // => \"http://localhost:8888/api/v1/\"\n```\n\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"- Quickly export some values\\n- Can be stored in your `bash_profile`\\n- Allows for dynamic values between different machines\\n- Especially useful for CI environments\",\n  \"title\": \"Benefits\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"danger\",\n  \"body\": \"- Not as obvious where values come from vs the other methods\",\n  \"title\": \"Downsides\"\n}\n[/block]\n\n***\n\n## Option #4: Pass in from the CLI as `--env`\n\nLastly you can also pass in environment variables as options when [using the CLI tool](https://github.com/cypress-io/cypress-cli).\n\nValues here will overwrite all other conflicting environment variables.\n\nYou can use the `--env` option on `cypress run`.\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Multiple values must be separated by a comma. NOT A SPACE.\"\n}\n[/block]\n\n```yaml\ncypress run --env host=kevin.dev.local,api_server=http://localhost:8888/api/v1\n```\n\n```javascript\n// in your test files\n\nCypress.env()             // => {host: \"kevin.dev.local\", api_server: \"http://localhost:8888/api/v1\"}\nCypress.env(\"host\")       // => \"kevin.dev.local\"\nCypress.env(\"api_server\") // => \"http://localhost:8888/api/v1/\"\n```\n\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"- Does not require any changes to files / config\\n- Obvious where environment variables come from\\n- Allows for dynamic values between different machines\\n- Overwrites all other forms of setting env variables\",\n  \"title\": \"Benefits\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"danger\",\n  \"body\": \"- Pain to write the `--env` options everywhere you use Cypress\",\n  \"title\": \"Downsides\"\n}\n[/block]\n\n***\n\n# Overriding Configuration\n\nIf your environment variables match a standard configuration key then instead of setting an `environment variable` they will instead override the configuration value.\n\n```shell\n## this changes the baseUrl configuration value\n## and will not set an environment variable in Cypress.env()\nexport CYPRESS_BASE_URL=http://localhost:8080\n\n## the key 'foo' does not match a configuration key so\n## this just sets a regular environment variable in Cypress.env()\nexport CYPRESS_FOO=bar\n```\n\nYou can [read more about how environment variables can change configuration here](https://on.cypress.io/configuration).\n","source":"guides/guides/environment-variables.md","raw":"title: environment-variables\n---\n\n# Use Case\n\nEnvironment variables should be used:\n- Whenever values are different across developer machines\n- Whenever values change frequently and are highly dynamic\n\nThe most common use case is to access custom values you've written in your `hosts` file.\n\nFor instance instead of hard coding this in your tests:\n\n```javascript\ncy\n  // this would break on other dev machines\n  .visit(\"http://server.dev.local\")\n```\n\nWe can move this into an environment variable.\n\n```javascript\ncy\n  // now this is pointing to a dynamic\n  // environment variable\n  .visit(Cypress.env(\"host\"))\n```\n\n***\n\n# Setting Environment Variables\n\nThere are 4 different ways to set environment variables. Each has a slightly different use case.\n\n**To summarize you can:**\n\n- set in `cypress.json`\n- create a `cypress.env.json`\n- export as `CYPRESS_*`\n- pass in the CLI as `--env`\n\nDon't feel obligated to pick just one method. It is common to use one strategy for local development but another when running in CI.\n\nWhen your tests are running, you can use the [`Cypress.env()`](https://on.cypress.io/api/env) function to access the values of your environment variables.\n\n***\n\n## Option #1: Set in `cypress.json`\n\nAny key/value you set in your [`cypress.json`](https://on.cypress.io/guides/configuration) under the `env` key will become an environment variable.\n\n```json\n// cypress.json\n{\n  \"projectId\": \"128076ed-9868-4e98-9cef-98dd8b705d75\",\n  \"env\": {\n    \"foo\": \"bar\",\n    \"some\": \"value\"\n  }\n}\n```\n\n```javascript\n// in your test files\n\nCypress.env()       // => {foo: \"bar\", some: \"value\"}\nCypress.env(\"foo\")  // => \"bar\"\nCypress.env(\"some\") // => \"value\"\n```\n\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"- Great for values that need to be checked into source control and remain the same on all machines\",\n  \"title\": \"Benefits\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"danger\",\n  \"body\": \"- Only works for values which should be the same on across all machines\",\n  \"title\": \"Downsides\"\n}\n[/block]\n\n***\n\n## Option #2: Create a `cypress.env.json`\n\nYou can create your own `cypress.env.json`, which Cypress will automatically check. Values in here will overwrite conflicting values in `cypress.json`.\n\nThis strategy is useful because if you add `cypress.env.json` to your `.gitignore` file, the values in here can be different for each developer machine.\n\n```json\n// cypress.env.json\n\n{\n  \"host\": \"veronica.dev.local\",\n  \"api_server\": \"http://localhost:8888/api/v1/\"\n}\n```\n\n```javascript\n// in your test files\n\nCypress.env()             // => {host: \"veronica.dev.local\", api_server: \"http://localhost:8888/api/v1\"}\nCypress.env(\"host\")       // => \"veronica.dev.local\"\nCypress.env(\"api_server\") // => \"http://localhost:8888/api/v1/\"\n```\n\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"- Dedicated file just for environment variables\\n- Enables you to generate this file from other build processes\\n- Values can be different on each machine if not checked into source control\",\n  \"title\": \"Benefits\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"danger\",\n  \"body\": \"- Another file you have to deal with\\n- Overkill for 1 or 2 environment variables\",\n  \"title\": \"Downsides\"\n}\n[/block]\n\n***\n\n## Option #3: Export as `CYPRESS_*`\n\nAny environment variable on your machine that starts with either `CYPRESS_` or `cypress_` will automatically be added and made available to you.\n\nConflicting values from this method will override `cypress.json` and `cypress.env.json` files.\n\nCypress will automatically **strip off** the `CYPRESS_` when adding your environment variables.\n\n```shell\n# export cypress env variables from the command line\nexport CYPRESS_HOST=laura.dev.local\nexport cypress_api_server=http://localhost:8888/api/v1/\n```\n\n```javascript\n// in your test files\n\nCypress.env()             // => {HOST: \"laura.dev.local\", api_server: \"http://localhost:8888/api/v1\"}\nCypress.env(\"HOST\")       // => \"laura.dev.local\"\nCypress.env(\"api_server\") // => \"http://localhost:8888/api/v1/\"\n```\n\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"- Quickly export some values\\n- Can be stored in your `bash_profile`\\n- Allows for dynamic values between different machines\\n- Especially useful for CI environments\",\n  \"title\": \"Benefits\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"danger\",\n  \"body\": \"- Not as obvious where values come from vs the other methods\",\n  \"title\": \"Downsides\"\n}\n[/block]\n\n***\n\n## Option #4: Pass in from the CLI as `--env`\n\nLastly you can also pass in environment variables as options when [using the CLI tool](https://github.com/cypress-io/cypress-cli).\n\nValues here will overwrite all other conflicting environment variables.\n\nYou can use the `--env` option on `cypress run`.\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Multiple values must be separated by a comma. NOT A SPACE.\"\n}\n[/block]\n\n```yaml\ncypress run --env host=kevin.dev.local,api_server=http://localhost:8888/api/v1\n```\n\n```javascript\n// in your test files\n\nCypress.env()             // => {host: \"kevin.dev.local\", api_server: \"http://localhost:8888/api/v1\"}\nCypress.env(\"host\")       // => \"kevin.dev.local\"\nCypress.env(\"api_server\") // => \"http://localhost:8888/api/v1/\"\n```\n\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"- Does not require any changes to files / config\\n- Obvious where environment variables come from\\n- Allows for dynamic values between different machines\\n- Overwrites all other forms of setting env variables\",\n  \"title\": \"Benefits\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"danger\",\n  \"body\": \"- Pain to write the `--env` options everywhere you use Cypress\",\n  \"title\": \"Downsides\"\n}\n[/block]\n\n***\n\n# Overriding Configuration\n\nIf your environment variables match a standard configuration key then instead of setting an `environment variable` they will instead override the configuration value.\n\n```shell\n## this changes the baseUrl configuration value\n## and will not set an environment variable in Cypress.env()\nexport CYPRESS_BASE_URL=http://localhost:8080\n\n## the key 'foo' does not match a configuration key so\n## this just sets a regular environment variable in Cypress.env()\nexport CYPRESS_FOO=bar\n```\n\nYou can [read more about how environment variables can change configuration here](https://on.cypress.io/configuration).\n","date":"2017-04-19T18:46:47.000Z","updated":"2017-04-19T18:46:47.000Z","path":"guides/guides/environment-variables.html","comments":1,"layout":"page","_id":"cj1pby1kp002t68g87pjcqfxc","content":"<h1 id=\"Use-Case\"><a href=\"#Use-Case\" class=\"headerlink\" title=\"Use Case\"></a>Use Case</h1><p>Environment variables should be used:</p>\n<ul>\n<li>Whenever values are different across developer machines</li>\n<li>Whenever values change frequently and are highly dynamic</li>\n</ul>\n<p>The most common use case is to access custom values you’ve written in your <code>hosts</code> file.</p>\n<p>For instance instead of hard coding this in your tests:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  <span class=\"comment\">// this would break on other dev machines</span></div><div class=\"line\">  .visit(<span class=\"string\">\"http://server.dev.local\"</span>)</div></pre></td></tr></table></figure>\n<p>We can move this into an environment variable.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  <span class=\"comment\">// now this is pointing to a dynamic</span></div><div class=\"line\">  <span class=\"comment\">// environment variable</span></div><div class=\"line\">  .visit(Cypress.env(<span class=\"string\">\"host\"</span>))</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Setting-Environment-Variables\"><a href=\"#Setting-Environment-Variables\" class=\"headerlink\" title=\"Setting Environment Variables\"></a>Setting Environment Variables</h1><p>There are 4 different ways to set environment variables. Each has a slightly different use case.</p>\n<p><strong>To summarize you can:</strong></p>\n<ul>\n<li>set in <code>cypress.json</code></li>\n<li>create a <code>cypress.env.json</code></li>\n<li>export as <code>CYPRESS_*</code></li>\n<li>pass in the CLI as <code>--env</code></li>\n</ul>\n<p>Don’t feel obligated to pick just one method. It is common to use one strategy for local development but another when running in CI.</p>\n<p>When your tests are running, you can use the <a href=\"https://on.cypress.io/api/env\" target=\"_blank\" rel=\"external\"><code>Cypress.env()</code></a> function to access the values of your environment variables.</p>\n<hr>\n<h2 id=\"Option-1-Set-in-cypress-json\"><a href=\"#Option-1-Set-in-cypress-json\" class=\"headerlink\" title=\"Option #1: Set in cypress.json\"></a>Option #1: Set in <code>cypress.json</code></h2><p>Any key/value you set in your <a href=\"https://on.cypress.io/guides/configuration\" target=\"_blank\" rel=\"external\"><code>cypress.json</code></a> under the <code>env</code> key will become an environment variable.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">// cypress.json</div><div class=\"line\">&#123;</div><div class=\"line\">  \"projectId\": \"128076ed-9868-4e98-9cef-98dd8b705d75\",</div><div class=\"line\">  \"env\": &#123;</div><div class=\"line\">    \"foo\": \"bar\",</div><div class=\"line\">    \"some\": \"value\"</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in your test files</span></div><div class=\"line\"></div><div class=\"line\">Cypress.env()       <span class=\"comment\">// =&gt; &#123;foo: \"bar\", some: \"value\"&#125;</span></div><div class=\"line\">Cypress.env(<span class=\"string\">\"foo\"</span>)  <span class=\"comment\">// =&gt; \"bar\"</span></div><div class=\"line\">Cypress.env(<span class=\"string\">\"some\"</span>) <span class=\"comment\">// =&gt; \"value\"</span></div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “success”,<br>  “body”: “- Great for values that need to be checked into source control and remain the same on all machines”,<br>  “title”: “Benefits”<br>}<br>[/block]</p>\n<p>[block:callout]<br>{<br>  “type”: “danger”,<br>  “body”: “- Only works for values which should be the same on across all machines”,<br>  “title”: “Downsides”<br>}<br>[/block]</p>\n<hr>\n<h2 id=\"Option-2-Create-a-cypress-env-json\"><a href=\"#Option-2-Create-a-cypress-env-json\" class=\"headerlink\" title=\"Option #2: Create a cypress.env.json\"></a>Option #2: Create a <code>cypress.env.json</code></h2><p>You can create your own <code>cypress.env.json</code>, which Cypress will automatically check. Values in here will overwrite conflicting values in <code>cypress.json</code>.</p>\n<p>This strategy is useful because if you add <code>cypress.env.json</code> to your <code>.gitignore</code> file, the values in here can be different for each developer machine.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">// cypress.env.json</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  \"host\": \"veronica.dev.local\",</div><div class=\"line\">  \"api_server\": \"http://localhost:8888/api/v1/\"</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in your test files</span></div><div class=\"line\"></div><div class=\"line\">Cypress.env()             <span class=\"comment\">// =&gt; &#123;host: \"veronica.dev.local\", api_server: \"http://localhost:8888/api/v1\"&#125;</span></div><div class=\"line\">Cypress.env(<span class=\"string\">\"host\"</span>)       <span class=\"comment\">// =&gt; \"veronica.dev.local\"</span></div><div class=\"line\">Cypress.env(<span class=\"string\">\"api_server\"</span>) <span class=\"comment\">// =&gt; \"http://localhost:8888/api/v1/\"</span></div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “success”,<br>  “body”: “- Dedicated file just for environment variables\\n- Enables you to generate this file from other build processes\\n- Values can be different on each machine if not checked into source control”,<br>  “title”: “Benefits”<br>}<br>[/block]</p>\n<p>[block:callout]<br>{<br>  “type”: “danger”,<br>  “body”: “- Another file you have to deal with\\n- Overkill for 1 or 2 environment variables”,<br>  “title”: “Downsides”<br>}<br>[/block]</p>\n<hr>\n<h2 id=\"Option-3-Export-as-CYPRESS\"><a href=\"#Option-3-Export-as-CYPRESS\" class=\"headerlink\" title=\"Option #3: Export as CYPRESS_*\"></a>Option #3: Export as <code>CYPRESS_*</code></h2><p>Any environment variable on your machine that starts with either <code>CYPRESS_</code> or <code>cypress_</code> will automatically be added and made available to you.</p>\n<p>Conflicting values from this method will override <code>cypress.json</code> and <code>cypress.env.json</code> files.</p>\n<p>Cypress will automatically <strong>strip off</strong> the <code>CYPRESS_</code> when adding your environment variables.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">export</span> cypress env variables from the <span class=\"built_in\">command</span> line</span></div><div class=\"line\">export CYPRESS_HOST=laura.dev.local</div><div class=\"line\">export cypress_api_server=http://localhost:8888/api/v1/</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in your test files</span></div><div class=\"line\"></div><div class=\"line\">Cypress.env()             <span class=\"comment\">// =&gt; &#123;HOST: \"laura.dev.local\", api_server: \"http://localhost:8888/api/v1\"&#125;</span></div><div class=\"line\">Cypress.env(<span class=\"string\">\"HOST\"</span>)       <span class=\"comment\">// =&gt; \"laura.dev.local\"</span></div><div class=\"line\">Cypress.env(<span class=\"string\">\"api_server\"</span>) <span class=\"comment\">// =&gt; \"http://localhost:8888/api/v1/\"</span></div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “success”,<br>  “body”: “- Quickly export some values\\n- Can be stored in your <code>bash_profile</code>\\n- Allows for dynamic values between different machines\\n- Especially useful for CI environments”,<br>  “title”: “Benefits”<br>}<br>[/block]</p>\n<p>[block:callout]<br>{<br>  “type”: “danger”,<br>  “body”: “- Not as obvious where values come from vs the other methods”,<br>  “title”: “Downsides”<br>}<br>[/block]</p>\n<hr>\n<h2 id=\"Option-4-Pass-in-from-the-CLI-as-env\"><a href=\"#Option-4-Pass-in-from-the-CLI-as-env\" class=\"headerlink\" title=\"Option #4: Pass in from the CLI as --env\"></a>Option #4: Pass in from the CLI as <code>--env</code></h2><p>Lastly you can also pass in environment variables as options when <a href=\"https://github.com/cypress-io/cypress-cli\" target=\"_blank\" rel=\"external\">using the CLI tool</a>.</p>\n<p>Values here will overwrite all other conflicting environment variables.</p>\n<p>You can use the <code>--env</code> option on <code>cypress run</code>.</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “Multiple values must be separated by a comma. NOT A SPACE.”<br>}<br>[/block]</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">cypress</span> <span class=\"string\">run</span> <span class=\"bullet\">--env</span> <span class=\"string\">host=kevin.dev.local,api_server=http://localhost:8888/api/v1</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in your test files</span></div><div class=\"line\"></div><div class=\"line\">Cypress.env()             <span class=\"comment\">// =&gt; &#123;host: \"kevin.dev.local\", api_server: \"http://localhost:8888/api/v1\"&#125;</span></div><div class=\"line\">Cypress.env(<span class=\"string\">\"host\"</span>)       <span class=\"comment\">// =&gt; \"kevin.dev.local\"</span></div><div class=\"line\">Cypress.env(<span class=\"string\">\"api_server\"</span>) <span class=\"comment\">// =&gt; \"http://localhost:8888/api/v1/\"</span></div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “success”,<br>  “body”: “- Does not require any changes to files / config\\n- Obvious where environment variables come from\\n- Allows for dynamic values between different machines\\n- Overwrites all other forms of setting env variables”,<br>  “title”: “Benefits”<br>}<br>[/block]</p>\n<p>[block:callout]<br>{<br>  “type”: “danger”,<br>  “body”: “- Pain to write the <code>--env</code> options everywhere you use Cypress”,<br>  “title”: “Downsides”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Overriding-Configuration\"><a href=\"#Overriding-Configuration\" class=\"headerlink\" title=\"Overriding Configuration\"></a>Overriding Configuration</h1><p>If your environment variables match a standard configuration key then instead of setting an <code>environment variable</code> they will instead override the configuration value.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># this changes the baseUrl configuration value</span></span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># and will not set an environment variable in Cypress.env()</span></span></div><div class=\"line\">export CYPRESS_BASE_URL=http://localhost:8080</div><div class=\"line\"><span class=\"meta\"></span></div><div class=\"line\">#<span class=\"bash\"><span class=\"comment\"># the key 'foo' does not match a configuration key so</span></span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># this just sets a regular environment variable in Cypress.env()</span></span></div><div class=\"line\">export CYPRESS_FOO=bar</div></pre></td></tr></table></figure>\n<p>You can <a href=\"https://on.cypress.io/configuration\" target=\"_blank\" rel=\"external\">read more about how environment variables can change configuration here</a>.</p>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<h1 id=\"Use-Case\"><a href=\"#Use-Case\" class=\"headerlink\" title=\"Use Case\"></a>Use Case</h1><p>Environment variables should be used:</p>\n<ul>\n<li>Whenever values are different across developer machines</li>\n<li>Whenever values change frequently and are highly dynamic</li>\n</ul>\n<p>The most common use case is to access custom values you’ve written in your <code>hosts</code> file.</p>\n<p>For instance instead of hard coding this in your tests:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  <span class=\"comment\">// this would break on other dev machines</span></div><div class=\"line\">  .visit(<span class=\"string\">\"http://server.dev.local\"</span>)</div></pre></td></tr></table></figure>\n<p>We can move this into an environment variable.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  <span class=\"comment\">// now this is pointing to a dynamic</span></div><div class=\"line\">  <span class=\"comment\">// environment variable</span></div><div class=\"line\">  .visit(Cypress.env(<span class=\"string\">\"host\"</span>))</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Setting-Environment-Variables\"><a href=\"#Setting-Environment-Variables\" class=\"headerlink\" title=\"Setting Environment Variables\"></a>Setting Environment Variables</h1><p>There are 4 different ways to set environment variables. Each has a slightly different use case.</p>\n<p><strong>To summarize you can:</strong></p>\n<ul>\n<li>set in <code>cypress.json</code></li>\n<li>create a <code>cypress.env.json</code></li>\n<li>export as <code>CYPRESS_*</code></li>\n<li>pass in the CLI as <code>--env</code></li>\n</ul>\n<p>Don’t feel obligated to pick just one method. It is common to use one strategy for local development but another when running in CI.</p>\n<p>When your tests are running, you can use the <a href=\"https://on.cypress.io/api/env\"><code>Cypress.env()</code></a> function to access the values of your environment variables.</p>\n<hr>\n<h2 id=\"Option-1-Set-in-cypress-json\"><a href=\"#Option-1-Set-in-cypress-json\" class=\"headerlink\" title=\"Option #1: Set in cypress.json\"></a>Option #1: Set in <code>cypress.json</code></h2><p>Any key/value you set in your <a href=\"https://on.cypress.io/guides/configuration\"><code>cypress.json</code></a> under the <code>env</code> key will become an environment variable.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">// cypress.json</div><div class=\"line\">&#123;</div><div class=\"line\">  \"projectId\": \"128076ed-9868-4e98-9cef-98dd8b705d75\",</div><div class=\"line\">  \"env\": &#123;</div><div class=\"line\">    \"foo\": \"bar\",</div><div class=\"line\">    \"some\": \"value\"</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in your test files</span></div><div class=\"line\"></div><div class=\"line\">Cypress.env()       <span class=\"comment\">// =&gt; &#123;foo: \"bar\", some: \"value\"&#125;</span></div><div class=\"line\">Cypress.env(<span class=\"string\">\"foo\"</span>)  <span class=\"comment\">// =&gt; \"bar\"</span></div><div class=\"line\">Cypress.env(<span class=\"string\">\"some\"</span>) <span class=\"comment\">// =&gt; \"value\"</span></div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “success”,<br>  “body”: “- Great for values that need to be checked into source control and remain the same on all machines”,<br>  “title”: “Benefits”<br>}<br>[/block]</p>\n<p>[block:callout]<br>{<br>  “type”: “danger”,<br>  “body”: “- Only works for values which should be the same on across all machines”,<br>  “title”: “Downsides”<br>}<br>[/block]</p>\n<hr>\n<h2 id=\"Option-2-Create-a-cypress-env-json\"><a href=\"#Option-2-Create-a-cypress-env-json\" class=\"headerlink\" title=\"Option #2: Create a cypress.env.json\"></a>Option #2: Create a <code>cypress.env.json</code></h2><p>You can create your own <code>cypress.env.json</code>, which Cypress will automatically check. Values in here will overwrite conflicting values in <code>cypress.json</code>.</p>\n<p>This strategy is useful because if you add <code>cypress.env.json</code> to your <code>.gitignore</code> file, the values in here can be different for each developer machine.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">// cypress.env.json</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  \"host\": \"veronica.dev.local\",</div><div class=\"line\">  \"api_server\": \"http://localhost:8888/api/v1/\"</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in your test files</span></div><div class=\"line\"></div><div class=\"line\">Cypress.env()             <span class=\"comment\">// =&gt; &#123;host: \"veronica.dev.local\", api_server: \"http://localhost:8888/api/v1\"&#125;</span></div><div class=\"line\">Cypress.env(<span class=\"string\">\"host\"</span>)       <span class=\"comment\">// =&gt; \"veronica.dev.local\"</span></div><div class=\"line\">Cypress.env(<span class=\"string\">\"api_server\"</span>) <span class=\"comment\">// =&gt; \"http://localhost:8888/api/v1/\"</span></div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “success”,<br>  “body”: “- Dedicated file just for environment variables\\n- Enables you to generate this file from other build processes\\n- Values can be different on each machine if not checked into source control”,<br>  “title”: “Benefits”<br>}<br>[/block]</p>\n<p>[block:callout]<br>{<br>  “type”: “danger”,<br>  “body”: “- Another file you have to deal with\\n- Overkill for 1 or 2 environment variables”,<br>  “title”: “Downsides”<br>}<br>[/block]</p>\n<hr>\n<h2 id=\"Option-3-Export-as-CYPRESS\"><a href=\"#Option-3-Export-as-CYPRESS\" class=\"headerlink\" title=\"Option #3: Export as CYPRESS_*\"></a>Option #3: Export as <code>CYPRESS_*</code></h2><p>Any environment variable on your machine that starts with either <code>CYPRESS_</code> or <code>cypress_</code> will automatically be added and made available to you.</p>\n<p>Conflicting values from this method will override <code>cypress.json</code> and <code>cypress.env.json</code> files.</p>\n<p>Cypress will automatically <strong>strip off</strong> the <code>CYPRESS_</code> when adding your environment variables.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">export</span> cypress env variables from the <span class=\"built_in\">command</span> line</span></div><div class=\"line\">export CYPRESS_HOST=laura.dev.local</div><div class=\"line\">export cypress_api_server=http://localhost:8888/api/v1/</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in your test files</span></div><div class=\"line\"></div><div class=\"line\">Cypress.env()             <span class=\"comment\">// =&gt; &#123;HOST: \"laura.dev.local\", api_server: \"http://localhost:8888/api/v1\"&#125;</span></div><div class=\"line\">Cypress.env(<span class=\"string\">\"HOST\"</span>)       <span class=\"comment\">// =&gt; \"laura.dev.local\"</span></div><div class=\"line\">Cypress.env(<span class=\"string\">\"api_server\"</span>) <span class=\"comment\">// =&gt; \"http://localhost:8888/api/v1/\"</span></div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “success”,<br>  “body”: “- Quickly export some values\\n- Can be stored in your <code>bash_profile</code>\\n- Allows for dynamic values between different machines\\n- Especially useful for CI environments”,<br>  “title”: “Benefits”<br>}<br>[/block]</p>\n<p>[block:callout]<br>{<br>  “type”: “danger”,<br>  “body”: “- Not as obvious where values come from vs the other methods”,<br>  “title”: “Downsides”<br>}<br>[/block]</p>\n<hr>\n<h2 id=\"Option-4-Pass-in-from-the-CLI-as-env\"><a href=\"#Option-4-Pass-in-from-the-CLI-as-env\" class=\"headerlink\" title=\"Option #4: Pass in from the CLI as --env\"></a>Option #4: Pass in from the CLI as <code>--env</code></h2><p>Lastly you can also pass in environment variables as options when <a href=\"https://github.com/cypress-io/cypress-cli\">using the CLI tool</a>.</p>\n<p>Values here will overwrite all other conflicting environment variables.</p>\n<p>You can use the <code>--env</code> option on <code>cypress run</code>.</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “Multiple values must be separated by a comma. NOT A SPACE.”<br>}<br>[/block]</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">cypress</span> <span class=\"string\">run</span> <span class=\"bullet\">--env</span> <span class=\"string\">host=kevin.dev.local,api_server=http://localhost:8888/api/v1</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in your test files</span></div><div class=\"line\"></div><div class=\"line\">Cypress.env()             <span class=\"comment\">// =&gt; &#123;host: \"kevin.dev.local\", api_server: \"http://localhost:8888/api/v1\"&#125;</span></div><div class=\"line\">Cypress.env(<span class=\"string\">\"host\"</span>)       <span class=\"comment\">// =&gt; \"kevin.dev.local\"</span></div><div class=\"line\">Cypress.env(<span class=\"string\">\"api_server\"</span>) <span class=\"comment\">// =&gt; \"http://localhost:8888/api/v1/\"</span></div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “success”,<br>  “body”: “- Does not require any changes to files / config\\n- Obvious where environment variables come from\\n- Allows for dynamic values between different machines\\n- Overwrites all other forms of setting env variables”,<br>  “title”: “Benefits”<br>}<br>[/block]</p>\n<p>[block:callout]<br>{<br>  “type”: “danger”,<br>  “body”: “- Pain to write the <code>--env</code> options everywhere you use Cypress”,<br>  “title”: “Downsides”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Overriding-Configuration\"><a href=\"#Overriding-Configuration\" class=\"headerlink\" title=\"Overriding Configuration\"></a>Overriding Configuration</h1><p>If your environment variables match a standard configuration key then instead of setting an <code>environment variable</code> they will instead override the configuration value.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># this changes the baseUrl configuration value</span></span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># and will not set an environment variable in Cypress.env()</span></span></div><div class=\"line\">export CYPRESS_BASE_URL=http://localhost:8080</div><div class=\"line\"><span class=\"meta\"></div><div class=\"line\">#</span><span class=\"bash\"><span class=\"comment\"># the key 'foo' does not match a configuration key so</span></span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># this just sets a regular environment variable in Cypress.env()</span></span></div><div class=\"line\">export CYPRESS_FOO=bar</div></pre></td></tr></table></figure>\n<p>You can <a href=\"https://on.cypress.io/configuration\">read more about how environment variables can change configuration here</a>.</p>\n"},{"title":"issuing-commands","_content":"\n# Commands are Async\n\nWhen writing integration tests, you will need to traverse the DOM and perform user actions. In traditional server-side rendered views, it's unlikely you be deal with many application state changes. However, if you're writing an application using a modern JavaScript framework, you'll likely need to navigate through highly complex, dynamic states.\n\n> Cypress is designed to handle *both* traditional server-side rendered views & modern JavaScript framework applications.\n\nThe architecture of Cypress focuses around asynchronicity. The DOM is a highly complex, mutable object; to handle the indeterminate state of the DOM, we've designed our commands to be asynchronous.\n\n**Because all commands are async, this offers many advantages.**\n\n1. All commands can retry until a certain specified condition is met.\n2. Commands can be replayed, inserted between others, or even conditionally run.\n3. Cypress can look ahead (or look behind) at commands which have yet to run, and alter its behavior.\n\nCypress is designed to also handle the disadvantages of async. One example is [aliasing](https://on.cypress.io/guides/using-aliases). This works around the need to assign values to variables.\n\nThe [Command API](https://on.cypress.io/api) attempts to balance readability, terseness, flexibility, and capability all while being designed similar to familiar APIs. The [Command API](https://on.cypress.io/api) is also fluent - that is, you chain all commands together - similar to how jQuery's API is designed.\n\n***\n\n# Subjects\n\nCommands work just like JavaScript Promises. That is, the resolved value of one command becomes the `subject` of the next command - just like a waterfall.\n\n```javascript\ncy\n  // when 'get' resolves, the subject\n  // becomes the DOM element <div#main>\n  .get(\"#main\")\n\n  // after 'get' resolves, the find command\n  // runs and is passed <div#main> as its subject.\n  // <div#main> becomes the subject that we 'find' on.\n  .find(\"button\")\n\n  // after 'find' resolves, <button> becomes the new subject.\n  // <button> is what the click operates on.\n  // this is functionally equivalent to\n  // writing $(\"#main\").find(\"button\").click() in jQuery.\n  .click()\n```\n\nThe difference between the Cypress API and jQuery's API is that *all* commands are async. **No command returns an actual assignable value.** That is because every command is queued, ran, and retried until it resolves. Some commands may not resolve until several seconds after they are run.\n\nFor instance you **cannot** do this:\n\n```javascript\n// THIS WILL NOT WORK!\nbutton = cy.get(\"#main\").find(\"button\")\n```\n\nJust like Promises, the value that async commands return can only be yielded in a callback function.\n\nIf you want to retrieve the resolved value (the subject) of a command, use a [`then`](https://on.cypress.io/api/then) command, the same way you would with Promises.\n\n```javascript\ncy.get(\"#main\").find(\"button\").then(function($button){\n  // when the 'find' command resolves, we can yield its\n  // resolved value (the new subject) in a callback function.\n  // now we can work with this value directly.\n  $button.trigger(\"click\")\n})\n```\n\nWhen chaining together multiple commands you rarely should need to yield the subject via a [`cy.then`](https://on.cypress.io/api/then) command. Cypress favors readability and terseness, and even [assertions](https://on.cypress.io/guides/making-assertions) can be implicitly run without having to use a [`cy.then`](https://on.cypress.io/api/then) command.\n\n```javascript\n// we're testing that an 'active' class is\n// applied to our button after being clicked\ncy.get(\"#main\").find(\"button\").click().should(\"have.class\", \"active\")\n```\n\n***\n\n# Chaining\n\nBecause Cypress implements a fluent API, all commands are linked together.  Cypress has a small, but powerful, set of rules to know how to process the chain of commands.\n\n**There are 3 types of commands:**\n\n- [Parent Commands](#section-parent-commands)\n- [Child Commands](#section-child-commands)\n- [Dual Commands](#section-dual-commands)\n\n***\n\n## Parent Commands\n\nParent commands always *begin* a new chain of commands. Even if you've written a previous chain, parent commands will always start a new chain, and ignore previous chains. Parent commands should be written off the `cy` object:\n\n**Examples of parent commands:**\n\n - [`visit`](https://on.cypress.io/api/visit)\n - [`server`](https://on.cypress.io/api/server)\n - [`get`](https://on.cypress.io/api/get)\n - [`root`](https://on.cypress.io/api/root)\n\n```javascript\ncy\n  // visit is a parent command which is initially called off the cy object\n  .visit(\"http://localhost:8000\")\n\n  // get ignores previously run commands and will\n  //  query (by default) from the root document\n  .get(\"#main\").find(\"button\").click().should(\"have.class\", \"active\")\n\n  // because get is a parent command, when we use it a 2nd time in a chain\n  // the previous chain is ignored and we query from the root document\n  .get(\"input\").type(\"foobarbaz\")\n```\n\n***\n\n## Child Commands\n\nChild commands are always chained off of a **parent** command, or another **child** command.\n\n**Examples of child commands:**\n\n- [`find`](https://on.cypress.io/api/find)\n- [`click`](https://on.cypress.io/api/click)\n- [`type`](https://on.cypress.io/api/type)\n- [`children`](https://on.cypress.io/api/children)\n- [`should`](https://on.cypress.io/api/should)\n\nEach of the above commands require an existing subject. It wouldn't make sense to [`click`](https://on.cypress.io/api/click) onto nothing, nor would it make sense to [`type`](https://on.cypress.io/api/type) or query for [`children`](https://on.cypress.io/api/children) of nothing.\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"If child commands have specific rules which are not met, they will throw a very explicit error telling you why they can't be invoked at that time.\"\n}\n[/block]\n\nLooking at our previous example:\n\n```javascript\ncy\n  .visit(\"http://localhost:8000\")\n\n  .get(\"#main\")\n    // we find the button within the existing DOM subject <div#main>\n    // our subject now becomes the <button> element\n    .find(\"button\")\n\n    // then we click the current subject, <button>\n    .click()\n\n    // the click command does not change the subject\n    // it returns the existing <button> subject\n    // we can now assert that the <button> has the class 'active'\n    .should(\"have.class\", \"active\")\n\n  .get(\"input\")\n\n    // we type into an existing DOM <input /> subject\n    .type(\"foobarbaz\")\n```\n\n***\n\n## Dual Commands\n\nWhile parent commands always start a new chain of commands and child commands require being chained off a parent command, dual commands can behave as parent or child command. That is, they can **start** a new chain, or be chained off of an **existing** chain.\n\n**Examples of dual commands:**\n\n- [`contains`](https://on.cypress.io/api/contains)\n- [`wait`](https://on.cypress.io/api/wait)\n\n```javascript\ncy\n  // contains acts as a parent command, starting a chain of commands\n  // contains will query from the root document (the default subject)\n  .contains(\"Jane Lane\").click()\n\n  // contains can also act as a child command, using it's parent command's subject, <form>\n  // contains only searches for content inside of the <form> element\n  .get(\"form\").contains(\"Submit!\").click()\n\n```","source":"guides/guides/issuing-commands.md","raw":"title: issuing-commands\n---\n\n# Commands are Async\n\nWhen writing integration tests, you will need to traverse the DOM and perform user actions. In traditional server-side rendered views, it's unlikely you be deal with many application state changes. However, if you're writing an application using a modern JavaScript framework, you'll likely need to navigate through highly complex, dynamic states.\n\n> Cypress is designed to handle *both* traditional server-side rendered views & modern JavaScript framework applications.\n\nThe architecture of Cypress focuses around asynchronicity. The DOM is a highly complex, mutable object; to handle the indeterminate state of the DOM, we've designed our commands to be asynchronous.\n\n**Because all commands are async, this offers many advantages.**\n\n1. All commands can retry until a certain specified condition is met.\n2. Commands can be replayed, inserted between others, or even conditionally run.\n3. Cypress can look ahead (or look behind) at commands which have yet to run, and alter its behavior.\n\nCypress is designed to also handle the disadvantages of async. One example is [aliasing](https://on.cypress.io/guides/using-aliases). This works around the need to assign values to variables.\n\nThe [Command API](https://on.cypress.io/api) attempts to balance readability, terseness, flexibility, and capability all while being designed similar to familiar APIs. The [Command API](https://on.cypress.io/api) is also fluent - that is, you chain all commands together - similar to how jQuery's API is designed.\n\n***\n\n# Subjects\n\nCommands work just like JavaScript Promises. That is, the resolved value of one command becomes the `subject` of the next command - just like a waterfall.\n\n```javascript\ncy\n  // when 'get' resolves, the subject\n  // becomes the DOM element <div#main>\n  .get(\"#main\")\n\n  // after 'get' resolves, the find command\n  // runs and is passed <div#main> as its subject.\n  // <div#main> becomes the subject that we 'find' on.\n  .find(\"button\")\n\n  // after 'find' resolves, <button> becomes the new subject.\n  // <button> is what the click operates on.\n  // this is functionally equivalent to\n  // writing $(\"#main\").find(\"button\").click() in jQuery.\n  .click()\n```\n\nThe difference between the Cypress API and jQuery's API is that *all* commands are async. **No command returns an actual assignable value.** That is because every command is queued, ran, and retried until it resolves. Some commands may not resolve until several seconds after they are run.\n\nFor instance you **cannot** do this:\n\n```javascript\n// THIS WILL NOT WORK!\nbutton = cy.get(\"#main\").find(\"button\")\n```\n\nJust like Promises, the value that async commands return can only be yielded in a callback function.\n\nIf you want to retrieve the resolved value (the subject) of a command, use a [`then`](https://on.cypress.io/api/then) command, the same way you would with Promises.\n\n```javascript\ncy.get(\"#main\").find(\"button\").then(function($button){\n  // when the 'find' command resolves, we can yield its\n  // resolved value (the new subject) in a callback function.\n  // now we can work with this value directly.\n  $button.trigger(\"click\")\n})\n```\n\nWhen chaining together multiple commands you rarely should need to yield the subject via a [`cy.then`](https://on.cypress.io/api/then) command. Cypress favors readability and terseness, and even [assertions](https://on.cypress.io/guides/making-assertions) can be implicitly run without having to use a [`cy.then`](https://on.cypress.io/api/then) command.\n\n```javascript\n// we're testing that an 'active' class is\n// applied to our button after being clicked\ncy.get(\"#main\").find(\"button\").click().should(\"have.class\", \"active\")\n```\n\n***\n\n# Chaining\n\nBecause Cypress implements a fluent API, all commands are linked together.  Cypress has a small, but powerful, set of rules to know how to process the chain of commands.\n\n**There are 3 types of commands:**\n\n- [Parent Commands](#section-parent-commands)\n- [Child Commands](#section-child-commands)\n- [Dual Commands](#section-dual-commands)\n\n***\n\n## Parent Commands\n\nParent commands always *begin* a new chain of commands. Even if you've written a previous chain, parent commands will always start a new chain, and ignore previous chains. Parent commands should be written off the `cy` object:\n\n**Examples of parent commands:**\n\n - [`visit`](https://on.cypress.io/api/visit)\n - [`server`](https://on.cypress.io/api/server)\n - [`get`](https://on.cypress.io/api/get)\n - [`root`](https://on.cypress.io/api/root)\n\n```javascript\ncy\n  // visit is a parent command which is initially called off the cy object\n  .visit(\"http://localhost:8000\")\n\n  // get ignores previously run commands and will\n  //  query (by default) from the root document\n  .get(\"#main\").find(\"button\").click().should(\"have.class\", \"active\")\n\n  // because get is a parent command, when we use it a 2nd time in a chain\n  // the previous chain is ignored and we query from the root document\n  .get(\"input\").type(\"foobarbaz\")\n```\n\n***\n\n## Child Commands\n\nChild commands are always chained off of a **parent** command, or another **child** command.\n\n**Examples of child commands:**\n\n- [`find`](https://on.cypress.io/api/find)\n- [`click`](https://on.cypress.io/api/click)\n- [`type`](https://on.cypress.io/api/type)\n- [`children`](https://on.cypress.io/api/children)\n- [`should`](https://on.cypress.io/api/should)\n\nEach of the above commands require an existing subject. It wouldn't make sense to [`click`](https://on.cypress.io/api/click) onto nothing, nor would it make sense to [`type`](https://on.cypress.io/api/type) or query for [`children`](https://on.cypress.io/api/children) of nothing.\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"If child commands have specific rules which are not met, they will throw a very explicit error telling you why they can't be invoked at that time.\"\n}\n[/block]\n\nLooking at our previous example:\n\n```javascript\ncy\n  .visit(\"http://localhost:8000\")\n\n  .get(\"#main\")\n    // we find the button within the existing DOM subject <div#main>\n    // our subject now becomes the <button> element\n    .find(\"button\")\n\n    // then we click the current subject, <button>\n    .click()\n\n    // the click command does not change the subject\n    // it returns the existing <button> subject\n    // we can now assert that the <button> has the class 'active'\n    .should(\"have.class\", \"active\")\n\n  .get(\"input\")\n\n    // we type into an existing DOM <input /> subject\n    .type(\"foobarbaz\")\n```\n\n***\n\n## Dual Commands\n\nWhile parent commands always start a new chain of commands and child commands require being chained off a parent command, dual commands can behave as parent or child command. That is, they can **start** a new chain, or be chained off of an **existing** chain.\n\n**Examples of dual commands:**\n\n- [`contains`](https://on.cypress.io/api/contains)\n- [`wait`](https://on.cypress.io/api/wait)\n\n```javascript\ncy\n  // contains acts as a parent command, starting a chain of commands\n  // contains will query from the root document (the default subject)\n  .contains(\"Jane Lane\").click()\n\n  // contains can also act as a child command, using it's parent command's subject, <form>\n  // contains only searches for content inside of the <form> element\n  .get(\"form\").contains(\"Submit!\").click()\n\n```","date":"2017-04-19T18:46:47.000Z","updated":"2017-04-19T18:46:47.000Z","path":"guides/guides/issuing-commands.html","comments":1,"layout":"page","_id":"cj1pby1kq002u68g82qd3yt0z","content":"<h1 id=\"Commands-are-Async\"><a href=\"#Commands-are-Async\" class=\"headerlink\" title=\"Commands are Async\"></a>Commands are Async</h1><p>When writing integration tests, you will need to traverse the DOM and perform user actions. In traditional server-side rendered views, it’s unlikely you be deal with many application state changes. However, if you’re writing an application using a modern JavaScript framework, you’ll likely need to navigate through highly complex, dynamic states.</p>\n<blockquote>\n<p>Cypress is designed to handle <em>both</em> traditional server-side rendered views &amp; modern JavaScript framework applications.</p>\n</blockquote>\n<p>The architecture of Cypress focuses around asynchronicity. The DOM is a highly complex, mutable object; to handle the indeterminate state of the DOM, we’ve designed our commands to be asynchronous.</p>\n<p><strong>Because all commands are async, this offers many advantages.</strong></p>\n<ol>\n<li>All commands can retry until a certain specified condition is met.</li>\n<li>Commands can be replayed, inserted between others, or even conditionally run.</li>\n<li>Cypress can look ahead (or look behind) at commands which have yet to run, and alter its behavior.</li>\n</ol>\n<p>Cypress is designed to also handle the disadvantages of async. One example is <a href=\"https://on.cypress.io/guides/using-aliases\" target=\"_blank\" rel=\"external\">aliasing</a>. This works around the need to assign values to variables.</p>\n<p>The <a href=\"https://on.cypress.io/api\" target=\"_blank\" rel=\"external\">Command API</a> attempts to balance readability, terseness, flexibility, and capability all while being designed similar to familiar APIs. The <a href=\"https://on.cypress.io/api\" target=\"_blank\" rel=\"external\">Command API</a> is also fluent - that is, you chain all commands together - similar to how jQuery’s API is designed.</p>\n<hr>\n<h1 id=\"Subjects\"><a href=\"#Subjects\" class=\"headerlink\" title=\"Subjects\"></a>Subjects</h1><p>Commands work just like JavaScript Promises. That is, the resolved value of one command becomes the <code>subject</code> of the next command - just like a waterfall.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  <span class=\"comment\">// when 'get' resolves, the subject</span></div><div class=\"line\">  <span class=\"comment\">// becomes the DOM element &lt;div#main&gt;</span></div><div class=\"line\">  .get(<span class=\"string\">\"#main\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// after 'get' resolves, the find command</span></div><div class=\"line\">  <span class=\"comment\">// runs and is passed &lt;div#main&gt; as its subject.</span></div><div class=\"line\">  <span class=\"comment\">// &lt;div#main&gt; becomes the subject that we 'find' on.</span></div><div class=\"line\">  .find(<span class=\"string\">\"button\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// after 'find' resolves, &lt;button&gt; becomes the new subject.</span></div><div class=\"line\">  <span class=\"comment\">// &lt;button&gt; is what the click operates on.</span></div><div class=\"line\">  <span class=\"comment\">// this is functionally equivalent to</span></div><div class=\"line\">  <span class=\"comment\">// writing $(\"#main\").find(\"button\").click() in jQuery.</span></div><div class=\"line\">  .click()</div></pre></td></tr></table></figure>\n<p>The difference between the Cypress API and jQuery’s API is that <em>all</em> commands are async. <strong>No command returns an actual assignable value.</strong> That is because every command is queued, ran, and retried until it resolves. Some commands may not resolve until several seconds after they are run.</p>\n<p>For instance you <strong>cannot</strong> do this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// THIS WILL NOT WORK!</span></div><div class=\"line\">button = cy.get(<span class=\"string\">\"#main\"</span>).find(<span class=\"string\">\"button\"</span>)</div></pre></td></tr></table></figure>\n<p>Just like Promises, the value that async commands return can only be yielded in a callback function.</p>\n<p>If you want to retrieve the resolved value (the subject) of a command, use a <a href=\"https://on.cypress.io/api/then\" target=\"_blank\" rel=\"external\"><code>then</code></a> command, the same way you would with Promises.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"#main\"</span>).find(<span class=\"string\">\"button\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$button</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// when the 'find' command resolves, we can yield its</span></div><div class=\"line\">  <span class=\"comment\">// resolved value (the new subject) in a callback function.</span></div><div class=\"line\">  <span class=\"comment\">// now we can work with this value directly.</span></div><div class=\"line\">  $button.trigger(<span class=\"string\">\"click\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>When chaining together multiple commands you rarely should need to yield the subject via a <a href=\"https://on.cypress.io/api/then\" target=\"_blank\" rel=\"external\"><code>cy.then</code></a> command. Cypress favors readability and terseness, and even <a href=\"https://on.cypress.io/guides/making-assertions\" target=\"_blank\" rel=\"external\">assertions</a> can be implicitly run without having to use a <a href=\"https://on.cypress.io/api/then\" target=\"_blank\" rel=\"external\"><code>cy.then</code></a> command.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// we're testing that an 'active' class is</span></div><div class=\"line\"><span class=\"comment\">// applied to our button after being clicked</span></div><div class=\"line\">cy.get(<span class=\"string\">\"#main\"</span>).find(<span class=\"string\">\"button\"</span>).click().should(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"active\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Chaining\"><a href=\"#Chaining\" class=\"headerlink\" title=\"Chaining\"></a>Chaining</h1><p>Because Cypress implements a fluent API, all commands are linked together.  Cypress has a small, but powerful, set of rules to know how to process the chain of commands.</p>\n<p><strong>There are 3 types of commands:</strong></p>\n<ul>\n<li><a href=\"#section-parent-commands\">Parent Commands</a></li>\n<li><a href=\"#section-child-commands\">Child Commands</a></li>\n<li><a href=\"#section-dual-commands\">Dual Commands</a></li>\n</ul>\n<hr>\n<h2 id=\"Parent-Commands\"><a href=\"#Parent-Commands\" class=\"headerlink\" title=\"Parent Commands\"></a>Parent Commands</h2><p>Parent commands always <em>begin</em> a new chain of commands. Even if you’ve written a previous chain, parent commands will always start a new chain, and ignore previous chains. Parent commands should be written off the <code>cy</code> object:</p>\n<p><strong>Examples of parent commands:</strong></p>\n<ul>\n<li><a href=\"https://on.cypress.io/api/visit\" target=\"_blank\" rel=\"external\"><code>visit</code></a></li>\n<li><a href=\"https://on.cypress.io/api/server\" target=\"_blank\" rel=\"external\"><code>server</code></a></li>\n<li><a href=\"https://on.cypress.io/api/get\" target=\"_blank\" rel=\"external\"><code>get</code></a></li>\n<li><a href=\"https://on.cypress.io/api/root\" target=\"_blank\" rel=\"external\"><code>root</code></a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  <span class=\"comment\">// visit is a parent command which is initially called off the cy object</span></div><div class=\"line\">  .visit(<span class=\"string\">\"http://localhost:8000\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// get ignores previously run commands and will</span></div><div class=\"line\">  <span class=\"comment\">//  query (by default) from the root document</span></div><div class=\"line\">  .get(<span class=\"string\">\"#main\"</span>).find(<span class=\"string\">\"button\"</span>).click().should(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"active\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// because get is a parent command, when we use it a 2nd time in a chain</span></div><div class=\"line\">  <span class=\"comment\">// the previous chain is ignored and we query from the root document</span></div><div class=\"line\">  .get(<span class=\"string\">\"input\"</span>).type(<span class=\"string\">\"foobarbaz\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Child-Commands\"><a href=\"#Child-Commands\" class=\"headerlink\" title=\"Child Commands\"></a>Child Commands</h2><p>Child commands are always chained off of a <strong>parent</strong> command, or another <strong>child</strong> command.</p>\n<p><strong>Examples of child commands:</strong></p>\n<ul>\n<li><a href=\"https://on.cypress.io/api/find\" target=\"_blank\" rel=\"external\"><code>find</code></a></li>\n<li><a href=\"https://on.cypress.io/api/click\" target=\"_blank\" rel=\"external\"><code>click</code></a></li>\n<li><a href=\"https://on.cypress.io/api/type\" target=\"_blank\" rel=\"external\"><code>type</code></a></li>\n<li><a href=\"https://on.cypress.io/api/children\" target=\"_blank\" rel=\"external\"><code>children</code></a></li>\n<li><a href=\"https://on.cypress.io/api/should\" target=\"_blank\" rel=\"external\"><code>should</code></a></li>\n</ul>\n<p>Each of the above commands require an existing subject. It wouldn’t make sense to <a href=\"https://on.cypress.io/api/click\" target=\"_blank\" rel=\"external\"><code>click</code></a> onto nothing, nor would it make sense to <a href=\"https://on.cypress.io/api/type\" target=\"_blank\" rel=\"external\"><code>type</code></a> or query for <a href=\"https://on.cypress.io/api/children\" target=\"_blank\" rel=\"external\"><code>children</code></a> of nothing.</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “If child commands have specific rules which are not met, they will throw a very explicit error telling you why they can’t be invoked at that time.”<br>}<br>[/block]</p>\n<p>Looking at our previous example:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .visit(<span class=\"string\">\"http://localhost:8000\"</span>)</div><div class=\"line\"></div><div class=\"line\">  .get(<span class=\"string\">\"#main\"</span>)</div><div class=\"line\">    <span class=\"comment\">// we find the button within the existing DOM subject &lt;div#main&gt;</span></div><div class=\"line\">    <span class=\"comment\">// our subject now becomes the &lt;button&gt; element</span></div><div class=\"line\">    .find(<span class=\"string\">\"button\"</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// then we click the current subject, &lt;button&gt;</span></div><div class=\"line\">    .click()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// the click command does not change the subject</span></div><div class=\"line\">    <span class=\"comment\">// it returns the existing &lt;button&gt; subject</span></div><div class=\"line\">    <span class=\"comment\">// we can now assert that the &lt;button&gt; has the class 'active'</span></div><div class=\"line\">    .should(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"active\"</span>)</div><div class=\"line\"></div><div class=\"line\">  .get(<span class=\"string\">\"input\"</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// we type into an existing DOM &lt;input /&gt; subject</span></div><div class=\"line\">    .type(<span class=\"string\">\"foobarbaz\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Dual-Commands\"><a href=\"#Dual-Commands\" class=\"headerlink\" title=\"Dual Commands\"></a>Dual Commands</h2><p>While parent commands always start a new chain of commands and child commands require being chained off a parent command, dual commands can behave as parent or child command. That is, they can <strong>start</strong> a new chain, or be chained off of an <strong>existing</strong> chain.</p>\n<p><strong>Examples of dual commands:</strong></p>\n<ul>\n<li><a href=\"https://on.cypress.io/api/contains\" target=\"_blank\" rel=\"external\"><code>contains</code></a></li>\n<li><a href=\"https://on.cypress.io/api/wait\" target=\"_blank\" rel=\"external\"><code>wait</code></a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  <span class=\"comment\">// contains acts as a parent command, starting a chain of commands</span></div><div class=\"line\">  <span class=\"comment\">// contains will query from the root document (the default subject)</span></div><div class=\"line\">  .contains(<span class=\"string\">\"Jane Lane\"</span>).click()</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// contains can also act as a child command, using it's parent command's subject, &lt;form&gt;</span></div><div class=\"line\">  <span class=\"comment\">// contains only searches for content inside of the &lt;form&gt; element</span></div><div class=\"line\">  .get(<span class=\"string\">\"form\"</span>).contains(<span class=\"string\">\"Submit!\"</span>).click()</div></pre></td></tr></table></figure>","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<h1 id=\"Commands-are-Async\"><a href=\"#Commands-are-Async\" class=\"headerlink\" title=\"Commands are Async\"></a>Commands are Async</h1><p>When writing integration tests, you will need to traverse the DOM and perform user actions. In traditional server-side rendered views, it’s unlikely you be deal with many application state changes. However, if you’re writing an application using a modern JavaScript framework, you’ll likely need to navigate through highly complex, dynamic states.</p>\n<blockquote>\n<p>Cypress is designed to handle <em>both</em> traditional server-side rendered views &amp; modern JavaScript framework applications.</p>\n</blockquote>\n<p>The architecture of Cypress focuses around asynchronicity. The DOM is a highly complex, mutable object; to handle the indeterminate state of the DOM, we’ve designed our commands to be asynchronous.</p>\n<p><strong>Because all commands are async, this offers many advantages.</strong></p>\n<ol>\n<li>All commands can retry until a certain specified condition is met.</li>\n<li>Commands can be replayed, inserted between others, or even conditionally run.</li>\n<li>Cypress can look ahead (or look behind) at commands which have yet to run, and alter its behavior.</li>\n</ol>\n<p>Cypress is designed to also handle the disadvantages of async. One example is <a href=\"https://on.cypress.io/guides/using-aliases\">aliasing</a>. This works around the need to assign values to variables.</p>\n<p>The <a href=\"https://on.cypress.io/api\">Command API</a> attempts to balance readability, terseness, flexibility, and capability all while being designed similar to familiar APIs. The <a href=\"https://on.cypress.io/api\">Command API</a> is also fluent - that is, you chain all commands together - similar to how jQuery’s API is designed.</p>\n<hr>\n<h1 id=\"Subjects\"><a href=\"#Subjects\" class=\"headerlink\" title=\"Subjects\"></a>Subjects</h1><p>Commands work just like JavaScript Promises. That is, the resolved value of one command becomes the <code>subject</code> of the next command - just like a waterfall.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  <span class=\"comment\">// when 'get' resolves, the subject</span></div><div class=\"line\">  <span class=\"comment\">// becomes the DOM element &lt;div#main&gt;</span></div><div class=\"line\">  .get(<span class=\"string\">\"#main\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// after 'get' resolves, the find command</span></div><div class=\"line\">  <span class=\"comment\">// runs and is passed &lt;div#main&gt; as its subject.</span></div><div class=\"line\">  <span class=\"comment\">// &lt;div#main&gt; becomes the subject that we 'find' on.</span></div><div class=\"line\">  .find(<span class=\"string\">\"button\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// after 'find' resolves, &lt;button&gt; becomes the new subject.</span></div><div class=\"line\">  <span class=\"comment\">// &lt;button&gt; is what the click operates on.</span></div><div class=\"line\">  <span class=\"comment\">// this is functionally equivalent to</span></div><div class=\"line\">  <span class=\"comment\">// writing $(\"#main\").find(\"button\").click() in jQuery.</span></div><div class=\"line\">  .click()</div></pre></td></tr></table></figure>\n<p>The difference between the Cypress API and jQuery’s API is that <em>all</em> commands are async. <strong>No command returns an actual assignable value.</strong> That is because every command is queued, ran, and retried until it resolves. Some commands may not resolve until several seconds after they are run.</p>\n<p>For instance you <strong>cannot</strong> do this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// THIS WILL NOT WORK!</span></div><div class=\"line\">button = cy.get(<span class=\"string\">\"#main\"</span>).find(<span class=\"string\">\"button\"</span>)</div></pre></td></tr></table></figure>\n<p>Just like Promises, the value that async commands return can only be yielded in a callback function.</p>\n<p>If you want to retrieve the resolved value (the subject) of a command, use a <a href=\"https://on.cypress.io/api/then\"><code>then</code></a> command, the same way you would with Promises.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"#main\"</span>).find(<span class=\"string\">\"button\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$button</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// when the 'find' command resolves, we can yield its</span></div><div class=\"line\">  <span class=\"comment\">// resolved value (the new subject) in a callback function.</span></div><div class=\"line\">  <span class=\"comment\">// now we can work with this value directly.</span></div><div class=\"line\">  $button.trigger(<span class=\"string\">\"click\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>When chaining together multiple commands you rarely should need to yield the subject via a <a href=\"https://on.cypress.io/api/then\"><code>cy.then</code></a> command. Cypress favors readability and terseness, and even <a href=\"https://on.cypress.io/guides/making-assertions\">assertions</a> can be implicitly run without having to use a <a href=\"https://on.cypress.io/api/then\"><code>cy.then</code></a> command.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// we're testing that an 'active' class is</span></div><div class=\"line\"><span class=\"comment\">// applied to our button after being clicked</span></div><div class=\"line\">cy.get(<span class=\"string\">\"#main\"</span>).find(<span class=\"string\">\"button\"</span>).click().should(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"active\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Chaining\"><a href=\"#Chaining\" class=\"headerlink\" title=\"Chaining\"></a>Chaining</h1><p>Because Cypress implements a fluent API, all commands are linked together.  Cypress has a small, but powerful, set of rules to know how to process the chain of commands.</p>\n<p><strong>There are 3 types of commands:</strong></p>\n<ul>\n<li><a href=\"#section-parent-commands\">Parent Commands</a></li>\n<li><a href=\"#section-child-commands\">Child Commands</a></li>\n<li><a href=\"#section-dual-commands\">Dual Commands</a></li>\n</ul>\n<hr>\n<h2 id=\"Parent-Commands\"><a href=\"#Parent-Commands\" class=\"headerlink\" title=\"Parent Commands\"></a>Parent Commands</h2><p>Parent commands always <em>begin</em> a new chain of commands. Even if you’ve written a previous chain, parent commands will always start a new chain, and ignore previous chains. Parent commands should be written off the <code>cy</code> object:</p>\n<p><strong>Examples of parent commands:</strong></p>\n<ul>\n<li><a href=\"https://on.cypress.io/api/visit\"><code>visit</code></a></li>\n<li><a href=\"https://on.cypress.io/api/server\"><code>server</code></a></li>\n<li><a href=\"https://on.cypress.io/api/get\"><code>get</code></a></li>\n<li><a href=\"https://on.cypress.io/api/root\"><code>root</code></a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  <span class=\"comment\">// visit is a parent command which is initially called off the cy object</span></div><div class=\"line\">  .visit(<span class=\"string\">\"http://localhost:8000\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// get ignores previously run commands and will</span></div><div class=\"line\">  <span class=\"comment\">//  query (by default) from the root document</span></div><div class=\"line\">  .get(<span class=\"string\">\"#main\"</span>).find(<span class=\"string\">\"button\"</span>).click().should(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"active\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// because get is a parent command, when we use it a 2nd time in a chain</span></div><div class=\"line\">  <span class=\"comment\">// the previous chain is ignored and we query from the root document</span></div><div class=\"line\">  .get(<span class=\"string\">\"input\"</span>).type(<span class=\"string\">\"foobarbaz\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Child-Commands\"><a href=\"#Child-Commands\" class=\"headerlink\" title=\"Child Commands\"></a>Child Commands</h2><p>Child commands are always chained off of a <strong>parent</strong> command, or another <strong>child</strong> command.</p>\n<p><strong>Examples of child commands:</strong></p>\n<ul>\n<li><a href=\"https://on.cypress.io/api/find\"><code>find</code></a></li>\n<li><a href=\"https://on.cypress.io/api/click\"><code>click</code></a></li>\n<li><a href=\"https://on.cypress.io/api/type\"><code>type</code></a></li>\n<li><a href=\"https://on.cypress.io/api/children\"><code>children</code></a></li>\n<li><a href=\"https://on.cypress.io/api/should\"><code>should</code></a></li>\n</ul>\n<p>Each of the above commands require an existing subject. It wouldn’t make sense to <a href=\"https://on.cypress.io/api/click\"><code>click</code></a> onto nothing, nor would it make sense to <a href=\"https://on.cypress.io/api/type\"><code>type</code></a> or query for <a href=\"https://on.cypress.io/api/children\"><code>children</code></a> of nothing.</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “If child commands have specific rules which are not met, they will throw a very explicit error telling you why they can’t be invoked at that time.”<br>}<br>[/block]</p>\n<p>Looking at our previous example:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .visit(<span class=\"string\">\"http://localhost:8000\"</span>)</div><div class=\"line\"></div><div class=\"line\">  .get(<span class=\"string\">\"#main\"</span>)</div><div class=\"line\">    <span class=\"comment\">// we find the button within the existing DOM subject &lt;div#main&gt;</span></div><div class=\"line\">    <span class=\"comment\">// our subject now becomes the &lt;button&gt; element</span></div><div class=\"line\">    .find(<span class=\"string\">\"button\"</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// then we click the current subject, &lt;button&gt;</span></div><div class=\"line\">    .click()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// the click command does not change the subject</span></div><div class=\"line\">    <span class=\"comment\">// it returns the existing &lt;button&gt; subject</span></div><div class=\"line\">    <span class=\"comment\">// we can now assert that the &lt;button&gt; has the class 'active'</span></div><div class=\"line\">    .should(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"active\"</span>)</div><div class=\"line\"></div><div class=\"line\">  .get(<span class=\"string\">\"input\"</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// we type into an existing DOM &lt;input /&gt; subject</span></div><div class=\"line\">    .type(<span class=\"string\">\"foobarbaz\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Dual-Commands\"><a href=\"#Dual-Commands\" class=\"headerlink\" title=\"Dual Commands\"></a>Dual Commands</h2><p>While parent commands always start a new chain of commands and child commands require being chained off a parent command, dual commands can behave as parent or child command. That is, they can <strong>start</strong> a new chain, or be chained off of an <strong>existing</strong> chain.</p>\n<p><strong>Examples of dual commands:</strong></p>\n<ul>\n<li><a href=\"https://on.cypress.io/api/contains\"><code>contains</code></a></li>\n<li><a href=\"https://on.cypress.io/api/wait\"><code>wait</code></a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  <span class=\"comment\">// contains acts as a parent command, starting a chain of commands</span></div><div class=\"line\">  <span class=\"comment\">// contains will query from the root document (the default subject)</span></div><div class=\"line\">  .contains(<span class=\"string\">\"Jane Lane\"</span>).click()</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// contains can also act as a child command, using it's parent command's subject, &lt;form&gt;</span></div><div class=\"line\">  <span class=\"comment\">// contains only searches for content inside of the &lt;form&gt; element</span></div><div class=\"line\">  .get(<span class=\"string\">\"form\"</span>).contains(<span class=\"string\">\"Submit!\"</span>).click()</div></pre></td></tr></table></figure>"},{"title":"finding-elements","_content":"\n# Traversal\n\nAt the heart of all integration tests is the DOM. Cypress gives you a host of familiar commands to make traversing the DOM as easy as possible.\n\nYou'll notice many of these commands match the same behavior as their [jQuery counterparts](https://api.jquery.com/category/traversing/).\n\n***\n\n## List of Commands\n\n- [children](https://on.cypress.io/api/children)\n- [closest](https://on.cypress.io/api/closest)\n- [contains](https://on.cypress.io/api/contains)\n- [eq](https://on.cypress.io/api/eq)\n- [find](https://on.cypress.io/api/find)\n- [filter](https://on.cypress.io/api/filter)\n- [first](https://on.cypress.io/api/first)\n- [get](https://on.cypress.io/api/get)\n- [last](https://on.cypress.io/api/last)\n- [next](https://on.cypress.io/api/next)\n- [not](https://on.cypress.io/api/not)\n- [parent](https://on.cypress.io/api/parent)\n- [parents](https://on.cypress.io/api/parents)\n- [prev](https://on.cypress.io/api/prev)\n- [siblings](https://on.cypress.io/api/siblings)\n\n***\n\n## Starting a Query\n\nIn Cypress, you will almost always start a sequence of traversal commands with [`cy.get`](https://on.cypress.io/api/get). You can think of [`cy.get`](https://on.cypress.io/api/get) as the same as jQuery's `$` for getting DOM elements.\n\n**The following examples are equivalent:**\n\n```javascript\n// return the element with id: 'main'\ncy.get(\"#main\") // in cypress\n$(\"#main\")      // in jquery\n\n// we can chain other traversal commands\n// using the same familiar pattern\ncy.get(\"#main\").find(\"ul\").children(\"li\").first() // in cypress\n$(\"#main\").find(\"ul\").children(\"li\").first()      // in jquery\n```\n\n***\n\n## CSS Selectors\n\nAll DOM commands support the same CSS selectors found in the [jQuery Sizzle](https://sizzlejs.com/) engine.\n\n```javascript\n// All of the commands below are valid\n\ncy.get(\"ul\").find(\"li:nth-child(odd)\")\n\ncy.get(\"select[name=list] :not(:selected)\")\n\ncy.get(\".container\").children(\"input:disabled'\")\n\ncy.get(\"header\").find(\"*\")\n\ncy.get(\"input[type=checkbox]\").first(\"input:checked\")\n\ncy.get(\"span:nth-of-type(2)\")\n\ncy.get(\"input[data-js='user-name'][ng-input]\")\n```\n\n***\n\n# Existence\n\n## Waiting for an element to exist\n\nIf you're coming to Cypress from another framework you'll likely first wonder:\n\n> How do I wait until an element exists?\n\nAt first glance you may think you need to write this in Cypress:\n\n```javascript\ncy.get(\"#container\").should(\"exist\")\n                          ↲\n         // this assertion is unnecessary\n```\n\nIn Cypress you **never have to explicitly wait for an element to exist**. By default Cypress does this for you.\n\n**What's going on under the hood?**\n\nUnder the hood, Cypress will *automatically* retry commands which do not find elements. Cypress will continue retrying a command until it times outs.\n\n*Imagine this example:*\n\n```javascript\ncy.get(\"form\").find(\"inpit\").type(\"foo\").parent(\".row\")\n                       ↲\n    // oops we have a typo here in our selector\n```\n\nCypress will continue to retry finding the `inpit` element for **4 seconds** and then time out since this element does not exist. The [`cy.type`](https://on.cypress.io/api/type) and [`cy.parent`](https://on.cypress.io/api/parent) commands are never issued because Cypress will give up after failing to find the `inpit` element.\n\nAnother way to look at it is to imagine there being an implied `.should(\"exist\")` after every DOM command.\n\nIt's as if Cypress is writing the code below for you:\n\n```javascript\ncy\n  .get(\"form\").should(\"exist\")\n  .find(\"input\").should(\"exist\").type(\"foo\")\n  .parent(\".row\").should(\"exist\")\n```\n\n***\n\n## Waiting for an element not to exist\n\nIf you've read the previous section you may be wondering:\n\n> If Cypress automatically waits for elements to exist, how do I tell Cypress to **wait for an element not to exist**?\n\nThe answer is quite simple - just add that assertion and Cypress will *reverse* its default behavior.\n\n```javascript\ncy\n  .get(\"button\").click()\n\n  // now cypress will reverse its behavior.\n  //\n  // instead of retrying until an element DOES exist\n  // it will now retry until this element DOES NOT exist\n  .get(\"#loading-spinner\").should(\"not.exist\")\n```\n\nIn fact - assertions *always* tell Cypress when to resolve your DOM commands.\n\nYou simply describe the state of your element with assertions, and Cypress knows not to resolve your command until the element(s) in question match the assertion(s) behavior.\n\n***\n\n# Timeouts\n\n## How retrying works\n\nWhen you provide assertions, Cypress knows to automatically wait until those assertions pass.\n\nWhen an assertion does not pass, Cypress will wait a brief period of time and retry again.\n\nBy default, all commands will retry until [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) is exceeded. By default this means Cypress will wait up to **4 seconds** per DOM command + its associated assertions.\n\nImagine this example:\n\n```javascript\ncy\n  .get(\"#main\")     // <-- wait up to 4 seconds for '#main' to be found\n\n  .children(\"form\") // <-- wait up to 4 seconds for 'form' children to be found\n\n  .find(\"input\")                  // <-- wait up to 4 seconds for this 'input' to be found\n    .should(\"have.value\", \"foo\")  // <-- and to have the value 'foo'\n    .and(\"have.class\", \"radio\")   // <-- and to have the class 'radio'\n\n  .parents(\"#foo\")\n    .should(\"not.exist\")          // <-- wait up to 4 seconds for this element NOT to be found\n```\n\n***\n\n## Increasing timeouts\n\nYou have two ways of increasing the amount of time Cypress waits for resolving DOM commands.\n\n1. Change the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) globally\n2. Override the timeout option on a specific command\n\nOverriding the timeout option on a specific command looks like this:\n\n```javascript\ncy\n  .get(\"#main\", {timeout: 5000})   // <-- wait up to 5 seconds for '#main' to be found\n\n  .children(\"form\")                // <-- wait up to 4 seconds again\n\n  .find(\"input\", {timeout: 10000}) // <-- wait up to 10 seconds for this 'input' to be found\n    .should(\"have.value\", \"foo\")   // <-- and to have the value 'foo'\n    .and(\"have.class\", \"radio\")    // <-- and to have the class 'radio'\n\n  .parents(\"#foo\", {timeout: 2000})\n    .should(\"not.exist\")            // <-- wait up to 2 seconds for this element NOT to be found\n```\n\nIt's important to note that timeouts will automatically flow down to their cooresponding assertions.\n\n**In the example we wait up to a total of 10 seconds to:**\n\n1. find the `<input>`\n2. ensure it has a value of `foo`\n3. ensure it has a class of `radio`\n\n```javascript\ncy.find(\"input\", {timeout: 10000}).should(\"have.value\", \"foo\").and(\"have.class\", \"radio\")\n                         ↲\n      // adding the timeout here will automatically\n      // flow down to the assertions, and they will\n      // be retried for up to 10 seconds\n```\n\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"Assuming you have two assertions, if one passes, and one fails, Cypress will continue to retry until they **both** pass. If Cypress eventually times out you'll get a visual indicator in your Command Log to know which specific assertion failed.\"\n}\n[/block]\n\n***\n\n# Assertions\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Read about [Making Assertions](https://on.cypress.io/guides/making-assertions) and where they come from.\",\n  \"title\": \"New to Cypress?\"\n}\n[/block]\n\n## Length Assertions\n\n```javascript\n// retry until we find 3 matching <li.selected>\ncy.get(\"li.selected\").should(\"have.length\", 3)\n```\n\n***\n\n## Class Assertions\n\n```javascript\n// retry until this input does not have class disabled\ncy.get(\"form\").find(\"input\").should(\"not.have.class\", \"disabled\")\n```\n\n***\n\n## Value Assertions\n\n```javascript\n// retry until this textarea has the correct value\ncy.get(\"textarea\").should(\"have.value\", \"foo bar baz\")\n```\n\n***\n\n## Text Content Assertions\n\n```javascript\n// retry until this span does not contain 'click me'\ncy.get(\"a\").parent(\"span.help\").should(\"not.contain\", \"click me\")\n```\n\n***\n\n## Visibility Assertions\n\n```javascript\n// retry until this button is visible\ncy.get(\"button\").should(\"be.visible\")\n```\n\n***\n\n## Existence Assertions\n\n```javascript\n// retry until loading spinner no longer exists\ncy.get(\"#loading\").should(\"not.exist\")\n```\n\n***\n\n## State Assertions\n\n```javascript\n// retry until our radio is checked\ncy.get(\":radio\").should(\"be.checked\")\n```","source":"guides/guides/finding-elements.md","raw":"title: finding-elements\n---\n\n# Traversal\n\nAt the heart of all integration tests is the DOM. Cypress gives you a host of familiar commands to make traversing the DOM as easy as possible.\n\nYou'll notice many of these commands match the same behavior as their [jQuery counterparts](https://api.jquery.com/category/traversing/).\n\n***\n\n## List of Commands\n\n- [children](https://on.cypress.io/api/children)\n- [closest](https://on.cypress.io/api/closest)\n- [contains](https://on.cypress.io/api/contains)\n- [eq](https://on.cypress.io/api/eq)\n- [find](https://on.cypress.io/api/find)\n- [filter](https://on.cypress.io/api/filter)\n- [first](https://on.cypress.io/api/first)\n- [get](https://on.cypress.io/api/get)\n- [last](https://on.cypress.io/api/last)\n- [next](https://on.cypress.io/api/next)\n- [not](https://on.cypress.io/api/not)\n- [parent](https://on.cypress.io/api/parent)\n- [parents](https://on.cypress.io/api/parents)\n- [prev](https://on.cypress.io/api/prev)\n- [siblings](https://on.cypress.io/api/siblings)\n\n***\n\n## Starting a Query\n\nIn Cypress, you will almost always start a sequence of traversal commands with [`cy.get`](https://on.cypress.io/api/get). You can think of [`cy.get`](https://on.cypress.io/api/get) as the same as jQuery's `$` for getting DOM elements.\n\n**The following examples are equivalent:**\n\n```javascript\n// return the element with id: 'main'\ncy.get(\"#main\") // in cypress\n$(\"#main\")      // in jquery\n\n// we can chain other traversal commands\n// using the same familiar pattern\ncy.get(\"#main\").find(\"ul\").children(\"li\").first() // in cypress\n$(\"#main\").find(\"ul\").children(\"li\").first()      // in jquery\n```\n\n***\n\n## CSS Selectors\n\nAll DOM commands support the same CSS selectors found in the [jQuery Sizzle](https://sizzlejs.com/) engine.\n\n```javascript\n// All of the commands below are valid\n\ncy.get(\"ul\").find(\"li:nth-child(odd)\")\n\ncy.get(\"select[name=list] :not(:selected)\")\n\ncy.get(\".container\").children(\"input:disabled'\")\n\ncy.get(\"header\").find(\"*\")\n\ncy.get(\"input[type=checkbox]\").first(\"input:checked\")\n\ncy.get(\"span:nth-of-type(2)\")\n\ncy.get(\"input[data-js='user-name'][ng-input]\")\n```\n\n***\n\n# Existence\n\n## Waiting for an element to exist\n\nIf you're coming to Cypress from another framework you'll likely first wonder:\n\n> How do I wait until an element exists?\n\nAt first glance you may think you need to write this in Cypress:\n\n```javascript\ncy.get(\"#container\").should(\"exist\")\n                          ↲\n         // this assertion is unnecessary\n```\n\nIn Cypress you **never have to explicitly wait for an element to exist**. By default Cypress does this for you.\n\n**What's going on under the hood?**\n\nUnder the hood, Cypress will *automatically* retry commands which do not find elements. Cypress will continue retrying a command until it times outs.\n\n*Imagine this example:*\n\n```javascript\ncy.get(\"form\").find(\"inpit\").type(\"foo\").parent(\".row\")\n                       ↲\n    // oops we have a typo here in our selector\n```\n\nCypress will continue to retry finding the `inpit` element for **4 seconds** and then time out since this element does not exist. The [`cy.type`](https://on.cypress.io/api/type) and [`cy.parent`](https://on.cypress.io/api/parent) commands are never issued because Cypress will give up after failing to find the `inpit` element.\n\nAnother way to look at it is to imagine there being an implied `.should(\"exist\")` after every DOM command.\n\nIt's as if Cypress is writing the code below for you:\n\n```javascript\ncy\n  .get(\"form\").should(\"exist\")\n  .find(\"input\").should(\"exist\").type(\"foo\")\n  .parent(\".row\").should(\"exist\")\n```\n\n***\n\n## Waiting for an element not to exist\n\nIf you've read the previous section you may be wondering:\n\n> If Cypress automatically waits for elements to exist, how do I tell Cypress to **wait for an element not to exist**?\n\nThe answer is quite simple - just add that assertion and Cypress will *reverse* its default behavior.\n\n```javascript\ncy\n  .get(\"button\").click()\n\n  // now cypress will reverse its behavior.\n  //\n  // instead of retrying until an element DOES exist\n  // it will now retry until this element DOES NOT exist\n  .get(\"#loading-spinner\").should(\"not.exist\")\n```\n\nIn fact - assertions *always* tell Cypress when to resolve your DOM commands.\n\nYou simply describe the state of your element with assertions, and Cypress knows not to resolve your command until the element(s) in question match the assertion(s) behavior.\n\n***\n\n# Timeouts\n\n## How retrying works\n\nWhen you provide assertions, Cypress knows to automatically wait until those assertions pass.\n\nWhen an assertion does not pass, Cypress will wait a brief period of time and retry again.\n\nBy default, all commands will retry until [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) is exceeded. By default this means Cypress will wait up to **4 seconds** per DOM command + its associated assertions.\n\nImagine this example:\n\n```javascript\ncy\n  .get(\"#main\")     // <-- wait up to 4 seconds for '#main' to be found\n\n  .children(\"form\") // <-- wait up to 4 seconds for 'form' children to be found\n\n  .find(\"input\")                  // <-- wait up to 4 seconds for this 'input' to be found\n    .should(\"have.value\", \"foo\")  // <-- and to have the value 'foo'\n    .and(\"have.class\", \"radio\")   // <-- and to have the class 'radio'\n\n  .parents(\"#foo\")\n    .should(\"not.exist\")          // <-- wait up to 4 seconds for this element NOT to be found\n```\n\n***\n\n## Increasing timeouts\n\nYou have two ways of increasing the amount of time Cypress waits for resolving DOM commands.\n\n1. Change the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) globally\n2. Override the timeout option on a specific command\n\nOverriding the timeout option on a specific command looks like this:\n\n```javascript\ncy\n  .get(\"#main\", {timeout: 5000})   // <-- wait up to 5 seconds for '#main' to be found\n\n  .children(\"form\")                // <-- wait up to 4 seconds again\n\n  .find(\"input\", {timeout: 10000}) // <-- wait up to 10 seconds for this 'input' to be found\n    .should(\"have.value\", \"foo\")   // <-- and to have the value 'foo'\n    .and(\"have.class\", \"radio\")    // <-- and to have the class 'radio'\n\n  .parents(\"#foo\", {timeout: 2000})\n    .should(\"not.exist\")            // <-- wait up to 2 seconds for this element NOT to be found\n```\n\nIt's important to note that timeouts will automatically flow down to their cooresponding assertions.\n\n**In the example we wait up to a total of 10 seconds to:**\n\n1. find the `<input>`\n2. ensure it has a value of `foo`\n3. ensure it has a class of `radio`\n\n```javascript\ncy.find(\"input\", {timeout: 10000}).should(\"have.value\", \"foo\").and(\"have.class\", \"radio\")\n                         ↲\n      // adding the timeout here will automatically\n      // flow down to the assertions, and they will\n      // be retried for up to 10 seconds\n```\n\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"Assuming you have two assertions, if one passes, and one fails, Cypress will continue to retry until they **both** pass. If Cypress eventually times out you'll get a visual indicator in your Command Log to know which specific assertion failed.\"\n}\n[/block]\n\n***\n\n# Assertions\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Read about [Making Assertions](https://on.cypress.io/guides/making-assertions) and where they come from.\",\n  \"title\": \"New to Cypress?\"\n}\n[/block]\n\n## Length Assertions\n\n```javascript\n// retry until we find 3 matching <li.selected>\ncy.get(\"li.selected\").should(\"have.length\", 3)\n```\n\n***\n\n## Class Assertions\n\n```javascript\n// retry until this input does not have class disabled\ncy.get(\"form\").find(\"input\").should(\"not.have.class\", \"disabled\")\n```\n\n***\n\n## Value Assertions\n\n```javascript\n// retry until this textarea has the correct value\ncy.get(\"textarea\").should(\"have.value\", \"foo bar baz\")\n```\n\n***\n\n## Text Content Assertions\n\n```javascript\n// retry until this span does not contain 'click me'\ncy.get(\"a\").parent(\"span.help\").should(\"not.contain\", \"click me\")\n```\n\n***\n\n## Visibility Assertions\n\n```javascript\n// retry until this button is visible\ncy.get(\"button\").should(\"be.visible\")\n```\n\n***\n\n## Existence Assertions\n\n```javascript\n// retry until loading spinner no longer exists\ncy.get(\"#loading\").should(\"not.exist\")\n```\n\n***\n\n## State Assertions\n\n```javascript\n// retry until our radio is checked\ncy.get(\":radio\").should(\"be.checked\")\n```","date":"2017-04-19T18:46:47.000Z","updated":"2017-04-19T18:46:47.000Z","path":"guides/guides/finding-elements.html","comments":1,"layout":"page","_id":"cj1pby1kq002v68g8yeb8vjxd","content":"<h1 id=\"Traversal\"><a href=\"#Traversal\" class=\"headerlink\" title=\"Traversal\"></a>Traversal</h1><p>At the heart of all integration tests is the DOM. Cypress gives you a host of familiar commands to make traversing the DOM as easy as possible.</p>\n<p>You’ll notice many of these commands match the same behavior as their <a href=\"https://api.jquery.com/category/traversing/\" target=\"_blank\" rel=\"external\">jQuery counterparts</a>.</p>\n<hr>\n<h2 id=\"List-of-Commands\"><a href=\"#List-of-Commands\" class=\"headerlink\" title=\"List of Commands\"></a>List of Commands</h2><ul>\n<li><a href=\"https://on.cypress.io/api/children\" target=\"_blank\" rel=\"external\">children</a></li>\n<li><a href=\"https://on.cypress.io/api/closest\" target=\"_blank\" rel=\"external\">closest</a></li>\n<li><a href=\"https://on.cypress.io/api/contains\" target=\"_blank\" rel=\"external\">contains</a></li>\n<li><a href=\"https://on.cypress.io/api/eq\" target=\"_blank\" rel=\"external\">eq</a></li>\n<li><a href=\"https://on.cypress.io/api/find\" target=\"_blank\" rel=\"external\">find</a></li>\n<li><a href=\"https://on.cypress.io/api/filter\" target=\"_blank\" rel=\"external\">filter</a></li>\n<li><a href=\"https://on.cypress.io/api/first\" target=\"_blank\" rel=\"external\">first</a></li>\n<li><a href=\"https://on.cypress.io/api/get\" target=\"_blank\" rel=\"external\">get</a></li>\n<li><a href=\"https://on.cypress.io/api/last\" target=\"_blank\" rel=\"external\">last</a></li>\n<li><a href=\"https://on.cypress.io/api/next\" target=\"_blank\" rel=\"external\">next</a></li>\n<li><a href=\"https://on.cypress.io/api/not\" target=\"_blank\" rel=\"external\">not</a></li>\n<li><a href=\"https://on.cypress.io/api/parent\" target=\"_blank\" rel=\"external\">parent</a></li>\n<li><a href=\"https://on.cypress.io/api/parents\" target=\"_blank\" rel=\"external\">parents</a></li>\n<li><a href=\"https://on.cypress.io/api/prev\" target=\"_blank\" rel=\"external\">prev</a></li>\n<li><a href=\"https://on.cypress.io/api/siblings\" target=\"_blank\" rel=\"external\">siblings</a></li>\n</ul>\n<hr>\n<h2 id=\"Starting-a-Query\"><a href=\"#Starting-a-Query\" class=\"headerlink\" title=\"Starting a Query\"></a>Starting a Query</h2><p>In Cypress, you will almost always start a sequence of traversal commands with <a href=\"https://on.cypress.io/api/get\" target=\"_blank\" rel=\"external\"><code>cy.get</code></a>. You can think of <a href=\"https://on.cypress.io/api/get\" target=\"_blank\" rel=\"external\"><code>cy.get</code></a> as the same as jQuery’s <code>$</code> for getting DOM elements.</p>\n<p><strong>The following examples are equivalent:</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// return the element with id: 'main'</span></div><div class=\"line\">cy.get(<span class=\"string\">\"#main\"</span>) <span class=\"comment\">// in cypress</span></div><div class=\"line\">$(<span class=\"string\">\"#main\"</span>)      <span class=\"comment\">// in jquery</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// we can chain other traversal commands</span></div><div class=\"line\"><span class=\"comment\">// using the same familiar pattern</span></div><div class=\"line\">cy.get(<span class=\"string\">\"#main\"</span>).find(<span class=\"string\">\"ul\"</span>).children(<span class=\"string\">\"li\"</span>).first() <span class=\"comment\">// in cypress</span></div><div class=\"line\">$(<span class=\"string\">\"#main\"</span>).find(<span class=\"string\">\"ul\"</span>).children(<span class=\"string\">\"li\"</span>).first()      <span class=\"comment\">// in jquery</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"CSS-Selectors\"><a href=\"#CSS-Selectors\" class=\"headerlink\" title=\"CSS Selectors\"></a>CSS Selectors</h2><p>All DOM commands support the same CSS selectors found in the <a href=\"https://sizzlejs.com/\" target=\"_blank\" rel=\"external\">jQuery Sizzle</a> engine.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// All of the commands below are valid</span></div><div class=\"line\"></div><div class=\"line\">cy.get(<span class=\"string\">\"ul\"</span>).find(<span class=\"string\">\"li:nth-child(odd)\"</span>)</div><div class=\"line\"></div><div class=\"line\">cy.get(<span class=\"string\">\"select[name=list] :not(:selected)\"</span>)</div><div class=\"line\"></div><div class=\"line\">cy.get(<span class=\"string\">\".container\"</span>).children(<span class=\"string\">\"input:disabled'\"</span>)</div><div class=\"line\"></div><div class=\"line\">cy.get(<span class=\"string\">\"header\"</span>).find(<span class=\"string\">\"*\"</span>)</div><div class=\"line\"></div><div class=\"line\">cy.get(<span class=\"string\">\"input[type=checkbox]\"</span>).first(<span class=\"string\">\"input:checked\"</span>)</div><div class=\"line\"></div><div class=\"line\">cy.get(<span class=\"string\">\"span:nth-of-type(2)\"</span>)</div><div class=\"line\"></div><div class=\"line\">cy.get(<span class=\"string\">\"input[data-js='user-name'][ng-input]\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Existence\"><a href=\"#Existence\" class=\"headerlink\" title=\"Existence\"></a>Existence</h1><h2 id=\"Waiting-for-an-element-to-exist\"><a href=\"#Waiting-for-an-element-to-exist\" class=\"headerlink\" title=\"Waiting for an element to exist\"></a>Waiting for an element to exist</h2><p>If you’re coming to Cypress from another framework you’ll likely first wonder:</p>\n<blockquote>\n<p>How do I wait until an element exists?</p>\n</blockquote>\n<p>At first glance you may think you need to write this in Cypress:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"#container\"</span>).should(<span class=\"string\">\"exist\"</span>)</div><div class=\"line\">                          ↲</div><div class=\"line\">         <span class=\"comment\">// this assertion is unnecessary</span></div></pre></td></tr></table></figure>\n<p>In Cypress you <strong>never have to explicitly wait for an element to exist</strong>. By default Cypress does this for you.</p>\n<p><strong>What’s going on under the hood?</strong></p>\n<p>Under the hood, Cypress will <em>automatically</em> retry commands which do not find elements. Cypress will continue retrying a command until it times outs.</p>\n<p><em>Imagine this example:</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"form\"</span>).find(<span class=\"string\">\"inpit\"</span>).type(<span class=\"string\">\"foo\"</span>).parent(<span class=\"string\">\".row\"</span>)</div><div class=\"line\">                       ↲</div><div class=\"line\">    <span class=\"comment\">// oops we have a typo here in our selector</span></div></pre></td></tr></table></figure>\n<p>Cypress will continue to retry finding the <code>inpit</code> element for <strong>4 seconds</strong> and then time out since this element does not exist. The <a href=\"https://on.cypress.io/api/type\" target=\"_blank\" rel=\"external\"><code>cy.type</code></a> and <a href=\"https://on.cypress.io/api/parent\" target=\"_blank\" rel=\"external\"><code>cy.parent</code></a> commands are never issued because Cypress will give up after failing to find the <code>inpit</code> element.</p>\n<p>Another way to look at it is to imagine there being an implied <code>.should(&quot;exist&quot;)</code> after every DOM command.</p>\n<p>It’s as if Cypress is writing the code below for you:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"form\"</span>).should(<span class=\"string\">\"exist\"</span>)</div><div class=\"line\">  .find(<span class=\"string\">\"input\"</span>).should(<span class=\"string\">\"exist\"</span>).type(<span class=\"string\">\"foo\"</span>)</div><div class=\"line\">  .parent(<span class=\"string\">\".row\"</span>).should(<span class=\"string\">\"exist\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Waiting-for-an-element-not-to-exist\"><a href=\"#Waiting-for-an-element-not-to-exist\" class=\"headerlink\" title=\"Waiting for an element not to exist\"></a>Waiting for an element not to exist</h2><p>If you’ve read the previous section you may be wondering:</p>\n<blockquote>\n<p>If Cypress automatically waits for elements to exist, how do I tell Cypress to <strong>wait for an element not to exist</strong>?</p>\n</blockquote>\n<p>The answer is quite simple - just add that assertion and Cypress will <em>reverse</em> its default behavior.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"button\"</span>).click()</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// now cypress will reverse its behavior.</span></div><div class=\"line\">  <span class=\"comment\">//</span></div><div class=\"line\">  <span class=\"comment\">// instead of retrying until an element DOES exist</span></div><div class=\"line\">  <span class=\"comment\">// it will now retry until this element DOES NOT exist</span></div><div class=\"line\">  .get(<span class=\"string\">\"#loading-spinner\"</span>).should(<span class=\"string\">\"not.exist\"</span>)</div></pre></td></tr></table></figure>\n<p>In fact - assertions <em>always</em> tell Cypress when to resolve your DOM commands.</p>\n<p>You simply describe the state of your element with assertions, and Cypress knows not to resolve your command until the element(s) in question match the assertion(s) behavior.</p>\n<hr>\n<h1 id=\"Timeouts\"><a href=\"#Timeouts\" class=\"headerlink\" title=\"Timeouts\"></a>Timeouts</h1><h2 id=\"How-retrying-works\"><a href=\"#How-retrying-works\" class=\"headerlink\" title=\"How retrying works\"></a>How retrying works</h2><p>When you provide assertions, Cypress knows to automatically wait until those assertions pass.</p>\n<p>When an assertion does not pass, Cypress will wait a brief period of time and retry again.</p>\n<p>By default, all commands will retry until <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a> is exceeded. By default this means Cypress will wait up to <strong>4 seconds</strong> per DOM command + its associated assertions.</p>\n<p>Imagine this example:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"#main\"</span>)     <span class=\"comment\">// &lt;-- wait up to 4 seconds for '#main' to be found</span></div><div class=\"line\"></div><div class=\"line\">  .children(<span class=\"string\">\"form\"</span>) <span class=\"comment\">// &lt;-- wait up to 4 seconds for 'form' children to be found</span></div><div class=\"line\"></div><div class=\"line\">  .find(<span class=\"string\">\"input\"</span>)                  <span class=\"comment\">// &lt;-- wait up to 4 seconds for this 'input' to be found</span></div><div class=\"line\">    .should(<span class=\"string\">\"have.value\"</span>, <span class=\"string\">\"foo\"</span>)  <span class=\"comment\">// &lt;-- and to have the value 'foo'</span></div><div class=\"line\">    .and(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"radio\"</span>)   <span class=\"comment\">// &lt;-- and to have the class 'radio'</span></div><div class=\"line\"></div><div class=\"line\">  .parents(<span class=\"string\">\"#foo\"</span>)</div><div class=\"line\">    .should(<span class=\"string\">\"not.exist\"</span>)          <span class=\"comment\">// &lt;-- wait up to 4 seconds for this element NOT to be found</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Increasing-timeouts\"><a href=\"#Increasing-timeouts\" class=\"headerlink\" title=\"Increasing timeouts\"></a>Increasing timeouts</h2><p>You have two ways of increasing the amount of time Cypress waits for resolving DOM commands.</p>\n<ol>\n<li>Change the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a> globally</li>\n<li>Override the timeout option on a specific command</li>\n</ol>\n<p>Overriding the timeout option on a specific command looks like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"#main\"</span>, &#123;<span class=\"attr\">timeout</span>: <span class=\"number\">5000</span>&#125;)   <span class=\"comment\">// &lt;-- wait up to 5 seconds for '#main' to be found</span></div><div class=\"line\"></div><div class=\"line\">  .children(<span class=\"string\">\"form\"</span>)                <span class=\"comment\">// &lt;-- wait up to 4 seconds again</span></div><div class=\"line\"></div><div class=\"line\">  .find(<span class=\"string\">\"input\"</span>, &#123;<span class=\"attr\">timeout</span>: <span class=\"number\">10000</span>&#125;) <span class=\"comment\">// &lt;-- wait up to 10 seconds for this 'input' to be found</span></div><div class=\"line\">    .should(<span class=\"string\">\"have.value\"</span>, <span class=\"string\">\"foo\"</span>)   <span class=\"comment\">// &lt;-- and to have the value 'foo'</span></div><div class=\"line\">    .and(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"radio\"</span>)    <span class=\"comment\">// &lt;-- and to have the class 'radio'</span></div><div class=\"line\"></div><div class=\"line\">  .parents(<span class=\"string\">\"#foo\"</span>, &#123;<span class=\"attr\">timeout</span>: <span class=\"number\">2000</span>&#125;)</div><div class=\"line\">    .should(<span class=\"string\">\"not.exist\"</span>)            <span class=\"comment\">// &lt;-- wait up to 2 seconds for this element NOT to be found</span></div></pre></td></tr></table></figure>\n<p>It’s important to note that timeouts will automatically flow down to their cooresponding assertions.</p>\n<p><strong>In the example we wait up to a total of 10 seconds to:</strong></p>\n<ol>\n<li>find the <code>&lt;input&gt;</code></li>\n<li>ensure it has a value of <code>foo</code></li>\n<li>ensure it has a class of <code>radio</code></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.find(<span class=\"string\">\"input\"</span>, &#123;<span class=\"attr\">timeout</span>: <span class=\"number\">10000</span>&#125;).should(<span class=\"string\">\"have.value\"</span>, <span class=\"string\">\"foo\"</span>).and(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"radio\"</span>)</div><div class=\"line\">                         ↲</div><div class=\"line\">      <span class=\"comment\">// adding the timeout here will automatically</span></div><div class=\"line\">      <span class=\"comment\">// flow down to the assertions, and they will</span></div><div class=\"line\">      <span class=\"comment\">// be retried for up to 10 seconds</span></div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “warning”,<br>  “body”: “Assuming you have two assertions, if one passes, and one fails, Cypress will continue to retry until they <strong>both</strong> pass. If Cypress eventually times out you’ll get a visual indicator in your Command Log to know which specific assertion failed.”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Assertions\"><a href=\"#Assertions\" class=\"headerlink\" title=\"Assertions\"></a>Assertions</h1><p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “Read about <a href=\"https://on.cypress.io/guides/making-assertions\" target=\"_blank\" rel=\"external\">Making Assertions</a> and where they come from.”,<br>  “title”: “New to Cypress?”<br>}<br>[/block]</p>\n<h2 id=\"Length-Assertions\"><a href=\"#Length-Assertions\" class=\"headerlink\" title=\"Length Assertions\"></a>Length Assertions</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// retry until we find 3 matching &lt;li.selected&gt;</span></div><div class=\"line\">cy.get(<span class=\"string\">\"li.selected\"</span>).should(<span class=\"string\">\"have.length\"</span>, <span class=\"number\">3</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Class-Assertions\"><a href=\"#Class-Assertions\" class=\"headerlink\" title=\"Class Assertions\"></a>Class Assertions</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// retry until this input does not have class disabled</span></div><div class=\"line\">cy.get(<span class=\"string\">\"form\"</span>).find(<span class=\"string\">\"input\"</span>).should(<span class=\"string\">\"not.have.class\"</span>, <span class=\"string\">\"disabled\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Value-Assertions\"><a href=\"#Value-Assertions\" class=\"headerlink\" title=\"Value Assertions\"></a>Value Assertions</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// retry until this textarea has the correct value</span></div><div class=\"line\">cy.get(<span class=\"string\">\"textarea\"</span>).should(<span class=\"string\">\"have.value\"</span>, <span class=\"string\">\"foo bar baz\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Text-Content-Assertions\"><a href=\"#Text-Content-Assertions\" class=\"headerlink\" title=\"Text Content Assertions\"></a>Text Content Assertions</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// retry until this span does not contain 'click me'</span></div><div class=\"line\">cy.get(<span class=\"string\">\"a\"</span>).parent(<span class=\"string\">\"span.help\"</span>).should(<span class=\"string\">\"not.contain\"</span>, <span class=\"string\">\"click me\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Visibility-Assertions\"><a href=\"#Visibility-Assertions\" class=\"headerlink\" title=\"Visibility Assertions\"></a>Visibility Assertions</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// retry until this button is visible</span></div><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).should(<span class=\"string\">\"be.visible\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Existence-Assertions\"><a href=\"#Existence-Assertions\" class=\"headerlink\" title=\"Existence Assertions\"></a>Existence Assertions</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// retry until loading spinner no longer exists</span></div><div class=\"line\">cy.get(<span class=\"string\">\"#loading\"</span>).should(<span class=\"string\">\"not.exist\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"State-Assertions\"><a href=\"#State-Assertions\" class=\"headerlink\" title=\"State Assertions\"></a>State Assertions</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// retry until our radio is checked</span></div><div class=\"line\">cy.get(<span class=\"string\">\":radio\"</span>).should(<span class=\"string\">\"be.checked\"</span>)</div></pre></td></tr></table></figure>","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<h1 id=\"Traversal\"><a href=\"#Traversal\" class=\"headerlink\" title=\"Traversal\"></a>Traversal</h1><p>At the heart of all integration tests is the DOM. Cypress gives you a host of familiar commands to make traversing the DOM as easy as possible.</p>\n<p>You’ll notice many of these commands match the same behavior as their <a href=\"https://api.jquery.com/category/traversing/\">jQuery counterparts</a>.</p>\n<hr>\n<h2 id=\"List-of-Commands\"><a href=\"#List-of-Commands\" class=\"headerlink\" title=\"List of Commands\"></a>List of Commands</h2><ul>\n<li><a href=\"https://on.cypress.io/api/children\">children</a></li>\n<li><a href=\"https://on.cypress.io/api/closest\">closest</a></li>\n<li><a href=\"https://on.cypress.io/api/contains\">contains</a></li>\n<li><a href=\"https://on.cypress.io/api/eq\">eq</a></li>\n<li><a href=\"https://on.cypress.io/api/find\">find</a></li>\n<li><a href=\"https://on.cypress.io/api/filter\">filter</a></li>\n<li><a href=\"https://on.cypress.io/api/first\">first</a></li>\n<li><a href=\"https://on.cypress.io/api/get\">get</a></li>\n<li><a href=\"https://on.cypress.io/api/last\">last</a></li>\n<li><a href=\"https://on.cypress.io/api/next\">next</a></li>\n<li><a href=\"https://on.cypress.io/api/not\">not</a></li>\n<li><a href=\"https://on.cypress.io/api/parent\">parent</a></li>\n<li><a href=\"https://on.cypress.io/api/parents\">parents</a></li>\n<li><a href=\"https://on.cypress.io/api/prev\">prev</a></li>\n<li><a href=\"https://on.cypress.io/api/siblings\">siblings</a></li>\n</ul>\n<hr>\n<h2 id=\"Starting-a-Query\"><a href=\"#Starting-a-Query\" class=\"headerlink\" title=\"Starting a Query\"></a>Starting a Query</h2><p>In Cypress, you will almost always start a sequence of traversal commands with <a href=\"https://on.cypress.io/api/get\"><code>cy.get</code></a>. You can think of <a href=\"https://on.cypress.io/api/get\"><code>cy.get</code></a> as the same as jQuery’s <code>$</code> for getting DOM elements.</p>\n<p><strong>The following examples are equivalent:</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// return the element with id: 'main'</span></div><div class=\"line\">cy.get(<span class=\"string\">\"#main\"</span>) <span class=\"comment\">// in cypress</span></div><div class=\"line\">$(<span class=\"string\">\"#main\"</span>)      <span class=\"comment\">// in jquery</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// we can chain other traversal commands</span></div><div class=\"line\"><span class=\"comment\">// using the same familiar pattern</span></div><div class=\"line\">cy.get(<span class=\"string\">\"#main\"</span>).find(<span class=\"string\">\"ul\"</span>).children(<span class=\"string\">\"li\"</span>).first() <span class=\"comment\">// in cypress</span></div><div class=\"line\">$(<span class=\"string\">\"#main\"</span>).find(<span class=\"string\">\"ul\"</span>).children(<span class=\"string\">\"li\"</span>).first()      <span class=\"comment\">// in jquery</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"CSS-Selectors\"><a href=\"#CSS-Selectors\" class=\"headerlink\" title=\"CSS Selectors\"></a>CSS Selectors</h2><p>All DOM commands support the same CSS selectors found in the <a href=\"https://sizzlejs.com/\">jQuery Sizzle</a> engine.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// All of the commands below are valid</span></div><div class=\"line\"></div><div class=\"line\">cy.get(<span class=\"string\">\"ul\"</span>).find(<span class=\"string\">\"li:nth-child(odd)\"</span>)</div><div class=\"line\"></div><div class=\"line\">cy.get(<span class=\"string\">\"select[name=list] :not(:selected)\"</span>)</div><div class=\"line\"></div><div class=\"line\">cy.get(<span class=\"string\">\".container\"</span>).children(<span class=\"string\">\"input:disabled'\"</span>)</div><div class=\"line\"></div><div class=\"line\">cy.get(<span class=\"string\">\"header\"</span>).find(<span class=\"string\">\"*\"</span>)</div><div class=\"line\"></div><div class=\"line\">cy.get(<span class=\"string\">\"input[type=checkbox]\"</span>).first(<span class=\"string\">\"input:checked\"</span>)</div><div class=\"line\"></div><div class=\"line\">cy.get(<span class=\"string\">\"span:nth-of-type(2)\"</span>)</div><div class=\"line\"></div><div class=\"line\">cy.get(<span class=\"string\">\"input[data-js='user-name'][ng-input]\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Existence\"><a href=\"#Existence\" class=\"headerlink\" title=\"Existence\"></a>Existence</h1><h2 id=\"Waiting-for-an-element-to-exist\"><a href=\"#Waiting-for-an-element-to-exist\" class=\"headerlink\" title=\"Waiting for an element to exist\"></a>Waiting for an element to exist</h2><p>If you’re coming to Cypress from another framework you’ll likely first wonder:</p>\n<blockquote>\n<p>How do I wait until an element exists?</p>\n</blockquote>\n<p>At first glance you may think you need to write this in Cypress:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"#container\"</span>).should(<span class=\"string\">\"exist\"</span>)</div><div class=\"line\">                          ↲</div><div class=\"line\">         <span class=\"comment\">// this assertion is unnecessary</span></div></pre></td></tr></table></figure>\n<p>In Cypress you <strong>never have to explicitly wait for an element to exist</strong>. By default Cypress does this for you.</p>\n<p><strong>What’s going on under the hood?</strong></p>\n<p>Under the hood, Cypress will <em>automatically</em> retry commands which do not find elements. Cypress will continue retrying a command until it times outs.</p>\n<p><em>Imagine this example:</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"form\"</span>).find(<span class=\"string\">\"inpit\"</span>).type(<span class=\"string\">\"foo\"</span>).parent(<span class=\"string\">\".row\"</span>)</div><div class=\"line\">                       ↲</div><div class=\"line\">    <span class=\"comment\">// oops we have a typo here in our selector</span></div></pre></td></tr></table></figure>\n<p>Cypress will continue to retry finding the <code>inpit</code> element for <strong>4 seconds</strong> and then time out since this element does not exist. The <a href=\"https://on.cypress.io/api/type\"><code>cy.type</code></a> and <a href=\"https://on.cypress.io/api/parent\"><code>cy.parent</code></a> commands are never issued because Cypress will give up after failing to find the <code>inpit</code> element.</p>\n<p>Another way to look at it is to imagine there being an implied <code>.should(&quot;exist&quot;)</code> after every DOM command.</p>\n<p>It’s as if Cypress is writing the code below for you:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"form\"</span>).should(<span class=\"string\">\"exist\"</span>)</div><div class=\"line\">  .find(<span class=\"string\">\"input\"</span>).should(<span class=\"string\">\"exist\"</span>).type(<span class=\"string\">\"foo\"</span>)</div><div class=\"line\">  .parent(<span class=\"string\">\".row\"</span>).should(<span class=\"string\">\"exist\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Waiting-for-an-element-not-to-exist\"><a href=\"#Waiting-for-an-element-not-to-exist\" class=\"headerlink\" title=\"Waiting for an element not to exist\"></a>Waiting for an element not to exist</h2><p>If you’ve read the previous section you may be wondering:</p>\n<blockquote>\n<p>If Cypress automatically waits for elements to exist, how do I tell Cypress to <strong>wait for an element not to exist</strong>?</p>\n</blockquote>\n<p>The answer is quite simple - just add that assertion and Cypress will <em>reverse</em> its default behavior.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"button\"</span>).click()</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// now cypress will reverse its behavior.</span></div><div class=\"line\">  <span class=\"comment\">//</span></div><div class=\"line\">  <span class=\"comment\">// instead of retrying until an element DOES exist</span></div><div class=\"line\">  <span class=\"comment\">// it will now retry until this element DOES NOT exist</span></div><div class=\"line\">  .get(<span class=\"string\">\"#loading-spinner\"</span>).should(<span class=\"string\">\"not.exist\"</span>)</div></pre></td></tr></table></figure>\n<p>In fact - assertions <em>always</em> tell Cypress when to resolve your DOM commands.</p>\n<p>You simply describe the state of your element with assertions, and Cypress knows not to resolve your command until the element(s) in question match the assertion(s) behavior.</p>\n<hr>\n<h1 id=\"Timeouts\"><a href=\"#Timeouts\" class=\"headerlink\" title=\"Timeouts\"></a>Timeouts</h1><h2 id=\"How-retrying-works\"><a href=\"#How-retrying-works\" class=\"headerlink\" title=\"How retrying works\"></a>How retrying works</h2><p>When you provide assertions, Cypress knows to automatically wait until those assertions pass.</p>\n<p>When an assertion does not pass, Cypress will wait a brief period of time and retry again.</p>\n<p>By default, all commands will retry until <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a> is exceeded. By default this means Cypress will wait up to <strong>4 seconds</strong> per DOM command + its associated assertions.</p>\n<p>Imagine this example:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"#main\"</span>)     <span class=\"comment\">// &lt;-- wait up to 4 seconds for '#main' to be found</span></div><div class=\"line\"></div><div class=\"line\">  .children(<span class=\"string\">\"form\"</span>) <span class=\"comment\">// &lt;-- wait up to 4 seconds for 'form' children to be found</span></div><div class=\"line\"></div><div class=\"line\">  .find(<span class=\"string\">\"input\"</span>)                  <span class=\"comment\">// &lt;-- wait up to 4 seconds for this 'input' to be found</span></div><div class=\"line\">    .should(<span class=\"string\">\"have.value\"</span>, <span class=\"string\">\"foo\"</span>)  <span class=\"comment\">// &lt;-- and to have the value 'foo'</span></div><div class=\"line\">    .and(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"radio\"</span>)   <span class=\"comment\">// &lt;-- and to have the class 'radio'</span></div><div class=\"line\"></div><div class=\"line\">  .parents(<span class=\"string\">\"#foo\"</span>)</div><div class=\"line\">    .should(<span class=\"string\">\"not.exist\"</span>)          <span class=\"comment\">// &lt;-- wait up to 4 seconds for this element NOT to be found</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Increasing-timeouts\"><a href=\"#Increasing-timeouts\" class=\"headerlink\" title=\"Increasing timeouts\"></a>Increasing timeouts</h2><p>You have two ways of increasing the amount of time Cypress waits for resolving DOM commands.</p>\n<ol>\n<li>Change the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a> globally</li>\n<li>Override the timeout option on a specific command</li>\n</ol>\n<p>Overriding the timeout option on a specific command looks like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"#main\"</span>, &#123;<span class=\"attr\">timeout</span>: <span class=\"number\">5000</span>&#125;)   <span class=\"comment\">// &lt;-- wait up to 5 seconds for '#main' to be found</span></div><div class=\"line\"></div><div class=\"line\">  .children(<span class=\"string\">\"form\"</span>)                <span class=\"comment\">// &lt;-- wait up to 4 seconds again</span></div><div class=\"line\"></div><div class=\"line\">  .find(<span class=\"string\">\"input\"</span>, &#123;<span class=\"attr\">timeout</span>: <span class=\"number\">10000</span>&#125;) <span class=\"comment\">// &lt;-- wait up to 10 seconds for this 'input' to be found</span></div><div class=\"line\">    .should(<span class=\"string\">\"have.value\"</span>, <span class=\"string\">\"foo\"</span>)   <span class=\"comment\">// &lt;-- and to have the value 'foo'</span></div><div class=\"line\">    .and(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"radio\"</span>)    <span class=\"comment\">// &lt;-- and to have the class 'radio'</span></div><div class=\"line\"></div><div class=\"line\">  .parents(<span class=\"string\">\"#foo\"</span>, &#123;<span class=\"attr\">timeout</span>: <span class=\"number\">2000</span>&#125;)</div><div class=\"line\">    .should(<span class=\"string\">\"not.exist\"</span>)            <span class=\"comment\">// &lt;-- wait up to 2 seconds for this element NOT to be found</span></div></pre></td></tr></table></figure>\n<p>It’s important to note that timeouts will automatically flow down to their cooresponding assertions.</p>\n<p><strong>In the example we wait up to a total of 10 seconds to:</strong></p>\n<ol>\n<li>find the <code>&lt;input&gt;</code></li>\n<li>ensure it has a value of <code>foo</code></li>\n<li>ensure it has a class of <code>radio</code></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.find(<span class=\"string\">\"input\"</span>, &#123;<span class=\"attr\">timeout</span>: <span class=\"number\">10000</span>&#125;).should(<span class=\"string\">\"have.value\"</span>, <span class=\"string\">\"foo\"</span>).and(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"radio\"</span>)</div><div class=\"line\">                         ↲</div><div class=\"line\">      <span class=\"comment\">// adding the timeout here will automatically</span></div><div class=\"line\">      <span class=\"comment\">// flow down to the assertions, and they will</span></div><div class=\"line\">      <span class=\"comment\">// be retried for up to 10 seconds</span></div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “warning”,<br>  “body”: “Assuming you have two assertions, if one passes, and one fails, Cypress will continue to retry until they <strong>both</strong> pass. If Cypress eventually times out you’ll get a visual indicator in your Command Log to know which specific assertion failed.”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Assertions\"><a href=\"#Assertions\" class=\"headerlink\" title=\"Assertions\"></a>Assertions</h1><p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “Read about <a href=\"https://on.cypress.io/guides/making-assertions\">Making Assertions</a> and where they come from.”,<br>  “title”: “New to Cypress?”<br>}<br>[/block]</p>\n<h2 id=\"Length-Assertions\"><a href=\"#Length-Assertions\" class=\"headerlink\" title=\"Length Assertions\"></a>Length Assertions</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// retry until we find 3 matching &lt;li.selected&gt;</span></div><div class=\"line\">cy.get(<span class=\"string\">\"li.selected\"</span>).should(<span class=\"string\">\"have.length\"</span>, <span class=\"number\">3</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Class-Assertions\"><a href=\"#Class-Assertions\" class=\"headerlink\" title=\"Class Assertions\"></a>Class Assertions</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// retry until this input does not have class disabled</span></div><div class=\"line\">cy.get(<span class=\"string\">\"form\"</span>).find(<span class=\"string\">\"input\"</span>).should(<span class=\"string\">\"not.have.class\"</span>, <span class=\"string\">\"disabled\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Value-Assertions\"><a href=\"#Value-Assertions\" class=\"headerlink\" title=\"Value Assertions\"></a>Value Assertions</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// retry until this textarea has the correct value</span></div><div class=\"line\">cy.get(<span class=\"string\">\"textarea\"</span>).should(<span class=\"string\">\"have.value\"</span>, <span class=\"string\">\"foo bar baz\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Text-Content-Assertions\"><a href=\"#Text-Content-Assertions\" class=\"headerlink\" title=\"Text Content Assertions\"></a>Text Content Assertions</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// retry until this span does not contain 'click me'</span></div><div class=\"line\">cy.get(<span class=\"string\">\"a\"</span>).parent(<span class=\"string\">\"span.help\"</span>).should(<span class=\"string\">\"not.contain\"</span>, <span class=\"string\">\"click me\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Visibility-Assertions\"><a href=\"#Visibility-Assertions\" class=\"headerlink\" title=\"Visibility Assertions\"></a>Visibility Assertions</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// retry until this button is visible</span></div><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).should(<span class=\"string\">\"be.visible\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Existence-Assertions\"><a href=\"#Existence-Assertions\" class=\"headerlink\" title=\"Existence Assertions\"></a>Existence Assertions</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// retry until loading spinner no longer exists</span></div><div class=\"line\">cy.get(<span class=\"string\">\"#loading\"</span>).should(<span class=\"string\">\"not.exist\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"State-Assertions\"><a href=\"#State-Assertions\" class=\"headerlink\" title=\"State Assertions\"></a>State Assertions</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// retry until our radio is checked</span></div><div class=\"line\">cy.get(<span class=\"string\">\":radio\"</span>).should(<span class=\"string\">\"be.checked\"</span>)</div></pre></td></tr></table></figure>"},{"title":"network-requests-xhr","_content":"\n# Strategy\n\nCypress makes it easy to manage the entire lifecyle of AJAX / XHR requests within your application. Cypress provides you direct access to the XHR objects, enabling you to make assertions about its properties. Additionally you can even stub and mock a request's response.\n\n**Common testing scenarios:**\n\n- Asserting on a request's body\n- Asserting on a request's url\n- Asserting on a request's headers\n- Stubbing a response's body\n- Stubbing a response's status code\n- Stubbing a response's headers\n- Delaying a response\n- Waiting for a response to happen\n\nWithin Cypress, you have the ability to choose whether to stub responses or allow them to actually hit your server. You can also mix and match within the same test by choosing to stub certain requests, while allowing others to hit your server.\n\nLet's investigate both strategies, why you would use one versus the other, and why you should regularly use both.\n\n***\n\n## 1: Don't Stub Responses\n\nRequests that aren't stubbed will actually reach your server. By *not* stubbing your responses, you are writing true **end to end** tests. This means you are driving your application the same way a real user would.\n\n> When requests are not stubbed, this gaurantees the *contract* between your client and server is working correctly.\n\nIn other words, you can have confidence your server is sending the correct data in the correct structure for your client to consume. It is a good idea to have **end to end** tests around your application's *critical paths*. These typically include user login, signup, and other critical paths such as billing.\n\n**There are downsides to not stubbing responses you should be aware of:**\n\n- Since no responses are stubbed, that means your server has to *actually send real responses*. This can be problematic because you may have to *seed a database* before every test to generate state. For instance, if you were testing **pagination**, you'd have to seed the database with every object that it takes to replicate this feature in your application.\n- Since real responses go through every single layer of your server (controllers / models / views) the tests are often *much* slower than stubbed responses.\n\nIf you are writing a traditional server-side application where most of the responses are `HTML` you will likely have few stubbed responses. However, most modern applications that serve `JSON` can take advantage of stubbing.\n\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"- Guaranteed to work in production\\n- Test coverage around server endpoints\\n- Great for traditional server-side HTML rendering\",\n  \"title\": \"Benefits\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"danger\",\n  \"body\": \"- Requires seeding\\n- Much slower\\n- Hard to test edge cases\",\n  \"title\": \"Downsides\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"- Use sparingly\\n- Great for the *critical paths* of your application\\n- Helpful to have one test around the *happy path* of a feature\",\n  \"title\": \"Suggestions\"\n}\n[/block]\n\n***\n\n## 2: Stub Responses\n\nStubbing responses enables you to control every aspect of the response, including the response body, the status, headers, and even network delay. Stubbing is extremely fast, most responses will be returned in less than 20ms.\n\n> Stubbing responses is a great way to control the data that is returned to your client.\n\nYou don't have to do any work on the server. Your application will have no idea it's requests are being stubbed, so there are **no code changes** needed. In fact, stubbed requests will show up in the Network tab of your Developer Tools, and your application will continue to work after the test is finished.\n\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"- Easy control of response bodies, status, and headers\\n- Force responses to take longer to simulate network delay\\n- No code changes to your server or client code\\n- Fast, < 20ms response times\\n- Perfect for JSON API's\",\n  \"title\": \"Benefits\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"danger\",\n  \"body\": \"- No guarantee your stubbed responses match the actual data your server sends\\n- No test coverage on some server endpoints\\n- Not as useful if you're using traditional server side HTML rendering\",\n  \"title\": \"Downsides\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"- Use for the vast majority of your testing\\n- Mix and match, typically have one true end to end test, and then stub the rest\",\n  \"title\": \"Suggestions\"\n}\n[/block]\n\n***\n\n# How to stub responses\n\nCypress makes it easy to stub a response and control the `body`, `status`, `headers`, or even delay.\n\nTo begin stubbing responses you have to do two things.\n\n1. Start a [`cy.server`](https://on.cypress.io/api/server)\n2. Provide a [`cy.route`](https://on.cypress.io/api/route)\n\nThese two commands work together to control the behavior of your responses within the command's options. See [`cy.server` options](https://on.cypress.io/api/server#section-options) and [`cy.route` options](https://on.cypress.io/api/route#section-options) for instructions on how to stub responses.\n\n[`cy.server`](https://on.cypress.io/api/server) enables stubbing, while [`cy.route`](https://on.cypress.io/api/route) provides a routing table so Cypress understands which response should go with which request.\n\n***\n\n# Requests\n\nCypress will automatically indicate when an XHR request happens in your application. These are logged in the Command Log regardless of whether or not you are using stubbing. This provides you a visual indicator when a request has started and when it is finished. Additionally, Cypress will take a snapshot of the DOM when the request is made and another snapshot when the response comes back.\n\nBy default, Cypress is configured to *ignore* requests that are used to fetch static content like `.js` or `.html` files. This keeps the Command Log less noisy. This option can be changed in the [configuration](https://on.cypress.io/guides/configuration).\n\nCypress automatically collects the request `headers` and the request `body` and will make this available to you.\n\n***\n\n# Server + Routing Table\n\n```javascript\ncy\n  // enable response stubbing\n  .server()\n\n  // Route all GET requests that have a\n  // URL that matches the RegExp /users/\n  // and force the response to be: []\n  .route({\n    method: \"GET\",\n    url: /users/,\n    response: []\n  })\n```\n\nEach [`cy.route`](https://on.cypress.io/api/route) you provide will automatically route those requests to specific responses and control their body, response headers, or even force additional network delay.\n\nWhen you start a server and provide a routing table, Cypress will display this under \"Routes\" in the Command Log.\n\n![Routing Table](https://cloud.githubusercontent.com/assets/1268976/10780221/91743ab8-7d11-11e5-9fe1-8bcbdf5e344c.png)\n\nOnce you start a server with [`cy.server`](https://on.cypress.io/api/server), all requests will be controllable for the remainder of the test. When a new test runs, Cypress will restore the default behavior and remove all routing and stubbing. For a complete reference of the API and options, refer to the documentation for each command.\n\n- [`cy.server`](https://on.cypress.io/api/server)\n- [`cy.route`](https://on.cypress.io/api/route)\n\n***\n\n# Fixtures\n\nWhen stubbing a response, you typically need to manage potentially large and complex JSON objects. Cypress has support for [fixtures](https://on.cypress.io/guides/creating-fixtures), and even allows you to integrate fixture syntax directly into responses.\n\n```javascript\ncy\n  .server()\n\n   // we set the response to be the activites.json fixture\n  .route(\"GET\", /activities/, \"fixture:activities.json\")\n```\n\nYou can additionally reference [aliases](https://on.cypress.io/guides/using-aliases) within responses. These aliases do not have to point to fixtures, but that is a common use case. Separating out a fixture enables you to work and mutate that object prior to handing it off to a response.\n\n```javascript\ncy\n  .server()\n\n  .fixture(\"activities.json\").as(\"activitiesJSON\")\n  .route(\"GET\", /activities/, \"@activitiesJSON\")\n```\n\n***\n\n# Waiting\n\nWhether or not you choose to stub responses, Cypress enables you to declaratively [`cy.wait`](https://on.cypress.io/api/wait) for requests and their responses.\n\n```javascript\ncy\n  .server()\n  .route(/activities/, \"fixture:activities\").as(\"getActivities\")\n  .route(/messages/, \"fixture:messages\").as(\"getMessages\")\n\n  // visit the dashboard, which should make requests that match\n  // the two routes above\n  .visit(\"http://localhost:8888/dashboard\")\n\n  // pass an array of Route Aliases which forces Cypress to wait\n  // until it sees a response for each request that matches\n  // each of these aliases\n  .wait([\"@getActivities\", \"@getMessages\"])\n\n  // these commands will not run until the wait command resolves above\n  .get(\"h1\").should(\"contain\", \"Dashboard\")\n```\n\nDeclaratively waiting for responses has many advantages:\n- You descrease test flake\n- Source of failure is clearer\n- You can make assertions about the XHR objects\n\n***\n\n## Removing Flake\n\nOne advantage of declaratively waiting for requests is that it decreases test flake. You can think of [`cy.wait`](https://on.cypress.io/api/wait) as a guard that indicates to Cypress when you expect a request to be made that matches a specific routing alias. This prevents commands from running until responses come back and it guards against situations where your requests are initially delayed.\n\n**Auto-complete Example:**\n\n```javascript\ncy\n  .server()\n  .route(/search/, [{item: \"Book 1\"}, {item: \"Book 2\"}]).as(\"getSearch\")\n\n  // our autocomplete field is throttled\n  // meaning it only makes a request after\n  // 500ms from the last keyPress\n  .get(\"#autocomplete\").type(\"Book\")\n\n  // wait for the request + response\n  // thus insulating us from the\n  // throttled request\n  .wait(\"@getSearch\")\n\n  .get(\"#results\")\n    .should(\"contain\", \"Book 1\")\n    .and(\"contain\", \"Book 2\")\n```\n\nWhat makes this example above so powerful is that Cypress will automatically wait for a request that matches the `getSearch` alias. Instead of forcing Cypress to test the *side effect* of a successful request (the display of the Book results), you can test the actual *cause* of the results.\n\n***\n\n## Clear Source of Failure\n\nIn our example above, we added an assertion to the display of the search results.\n\n**The search results working are coupled to a few things in our application:**\n\n1. Our application making a request to the correct URL.\n2. Our application correctly processing the response.\n3. Our application inserting the results into the DOM.\n\nIn this example, there are many possible sources of failure. In most testing tools, if our request failed to ever go out, we would normally only ever get an error once we attempt to find the results in the DOM and see that there is no matching element. This is problematic because it's unknown *why* the results failed to be displayed. Was there a problem with our rendering code? Did we modify or change an attribute such as an `id` or `class` on an element? Perhaps our server sent us different Book items.\n\nWith Cypress, by adding a [`cy.wait`](https://on.cypress.io/api/wait) guard, you can more easily pinpoint your specific problem. If the request never went out, you'll receive errors like this.\n\n![wait failure](https://cloud.githubusercontent.com/assets/1268976/10780062/a9c3245a-7d0f-11e5-9984-67d84650b0a0.png)\n\nNow we know exactly why our test failed. It had nothing to do with the DOM. Instead we can see that either our request never went out or a request went out to the wrong URL.\n\n***\n\n## Asserting about the XHR Object\n\nAnother benefit of using [`cy.wait`](https://on.cypress.io/api/wait) on requests is that it allows you to access the actual `XHR` object. This is useful when you want to make assertions about this object.\n\nIn our example above we can assert about the request object to verify that it sent data as a query string in the URL. Although we're mocking the response, we can still verify that our application sends the correct request.\n\n```javascript\ncy\n  .server()\n  .route(/search/, [{item: \"Book 1\"}, {item: \"Book 2\"}]).as(\"getSearch\")\n\n  .get(\"#autocomplete\").type(\"Book\")\n\n  // this yields us the XHR object which includes\n  // fields for request, response, url, method, etc\n  .wait(\"@getSearch\")\n    .its(\"url\").should(\"include\", \"/search?query=Book\")\n\n  .get(\"#results\")\n    .should(\"contain\", \"Book 1\")\n    .and(\"contain\", \"Book 2\")\n```\n\n**The XHR object that [`cy.wait`](https://on.cypress.io/api/wait) yields you has everything you need to make assertions including:**\n\n- URL\n- Method\n- Status Code\n- Request Body\n- Request Headers\n- Response Body\n- Response Headers","source":"guides/guides/network-requests.md","raw":"title: network-requests-xhr\n---\n\n# Strategy\n\nCypress makes it easy to manage the entire lifecyle of AJAX / XHR requests within your application. Cypress provides you direct access to the XHR objects, enabling you to make assertions about its properties. Additionally you can even stub and mock a request's response.\n\n**Common testing scenarios:**\n\n- Asserting on a request's body\n- Asserting on a request's url\n- Asserting on a request's headers\n- Stubbing a response's body\n- Stubbing a response's status code\n- Stubbing a response's headers\n- Delaying a response\n- Waiting for a response to happen\n\nWithin Cypress, you have the ability to choose whether to stub responses or allow them to actually hit your server. You can also mix and match within the same test by choosing to stub certain requests, while allowing others to hit your server.\n\nLet's investigate both strategies, why you would use one versus the other, and why you should regularly use both.\n\n***\n\n## 1: Don't Stub Responses\n\nRequests that aren't stubbed will actually reach your server. By *not* stubbing your responses, you are writing true **end to end** tests. This means you are driving your application the same way a real user would.\n\n> When requests are not stubbed, this gaurantees the *contract* between your client and server is working correctly.\n\nIn other words, you can have confidence your server is sending the correct data in the correct structure for your client to consume. It is a good idea to have **end to end** tests around your application's *critical paths*. These typically include user login, signup, and other critical paths such as billing.\n\n**There are downsides to not stubbing responses you should be aware of:**\n\n- Since no responses are stubbed, that means your server has to *actually send real responses*. This can be problematic because you may have to *seed a database* before every test to generate state. For instance, if you were testing **pagination**, you'd have to seed the database with every object that it takes to replicate this feature in your application.\n- Since real responses go through every single layer of your server (controllers / models / views) the tests are often *much* slower than stubbed responses.\n\nIf you are writing a traditional server-side application where most of the responses are `HTML` you will likely have few stubbed responses. However, most modern applications that serve `JSON` can take advantage of stubbing.\n\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"- Guaranteed to work in production\\n- Test coverage around server endpoints\\n- Great for traditional server-side HTML rendering\",\n  \"title\": \"Benefits\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"danger\",\n  \"body\": \"- Requires seeding\\n- Much slower\\n- Hard to test edge cases\",\n  \"title\": \"Downsides\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"- Use sparingly\\n- Great for the *critical paths* of your application\\n- Helpful to have one test around the *happy path* of a feature\",\n  \"title\": \"Suggestions\"\n}\n[/block]\n\n***\n\n## 2: Stub Responses\n\nStubbing responses enables you to control every aspect of the response, including the response body, the status, headers, and even network delay. Stubbing is extremely fast, most responses will be returned in less than 20ms.\n\n> Stubbing responses is a great way to control the data that is returned to your client.\n\nYou don't have to do any work on the server. Your application will have no idea it's requests are being stubbed, so there are **no code changes** needed. In fact, stubbed requests will show up in the Network tab of your Developer Tools, and your application will continue to work after the test is finished.\n\n[block:callout]\n{\n  \"type\": \"success\",\n  \"body\": \"- Easy control of response bodies, status, and headers\\n- Force responses to take longer to simulate network delay\\n- No code changes to your server or client code\\n- Fast, < 20ms response times\\n- Perfect for JSON API's\",\n  \"title\": \"Benefits\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"danger\",\n  \"body\": \"- No guarantee your stubbed responses match the actual data your server sends\\n- No test coverage on some server endpoints\\n- Not as useful if you're using traditional server side HTML rendering\",\n  \"title\": \"Downsides\"\n}\n[/block]\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"- Use for the vast majority of your testing\\n- Mix and match, typically have one true end to end test, and then stub the rest\",\n  \"title\": \"Suggestions\"\n}\n[/block]\n\n***\n\n# How to stub responses\n\nCypress makes it easy to stub a response and control the `body`, `status`, `headers`, or even delay.\n\nTo begin stubbing responses you have to do two things.\n\n1. Start a [`cy.server`](https://on.cypress.io/api/server)\n2. Provide a [`cy.route`](https://on.cypress.io/api/route)\n\nThese two commands work together to control the behavior of your responses within the command's options. See [`cy.server` options](https://on.cypress.io/api/server#section-options) and [`cy.route` options](https://on.cypress.io/api/route#section-options) for instructions on how to stub responses.\n\n[`cy.server`](https://on.cypress.io/api/server) enables stubbing, while [`cy.route`](https://on.cypress.io/api/route) provides a routing table so Cypress understands which response should go with which request.\n\n***\n\n# Requests\n\nCypress will automatically indicate when an XHR request happens in your application. These are logged in the Command Log regardless of whether or not you are using stubbing. This provides you a visual indicator when a request has started and when it is finished. Additionally, Cypress will take a snapshot of the DOM when the request is made and another snapshot when the response comes back.\n\nBy default, Cypress is configured to *ignore* requests that are used to fetch static content like `.js` or `.html` files. This keeps the Command Log less noisy. This option can be changed in the [configuration](https://on.cypress.io/guides/configuration).\n\nCypress automatically collects the request `headers` and the request `body` and will make this available to you.\n\n***\n\n# Server + Routing Table\n\n```javascript\ncy\n  // enable response stubbing\n  .server()\n\n  // Route all GET requests that have a\n  // URL that matches the RegExp /users/\n  // and force the response to be: []\n  .route({\n    method: \"GET\",\n    url: /users/,\n    response: []\n  })\n```\n\nEach [`cy.route`](https://on.cypress.io/api/route) you provide will automatically route those requests to specific responses and control their body, response headers, or even force additional network delay.\n\nWhen you start a server and provide a routing table, Cypress will display this under \"Routes\" in the Command Log.\n\n![Routing Table](https://cloud.githubusercontent.com/assets/1268976/10780221/91743ab8-7d11-11e5-9fe1-8bcbdf5e344c.png)\n\nOnce you start a server with [`cy.server`](https://on.cypress.io/api/server), all requests will be controllable for the remainder of the test. When a new test runs, Cypress will restore the default behavior and remove all routing and stubbing. For a complete reference of the API and options, refer to the documentation for each command.\n\n- [`cy.server`](https://on.cypress.io/api/server)\n- [`cy.route`](https://on.cypress.io/api/route)\n\n***\n\n# Fixtures\n\nWhen stubbing a response, you typically need to manage potentially large and complex JSON objects. Cypress has support for [fixtures](https://on.cypress.io/guides/creating-fixtures), and even allows you to integrate fixture syntax directly into responses.\n\n```javascript\ncy\n  .server()\n\n   // we set the response to be the activites.json fixture\n  .route(\"GET\", /activities/, \"fixture:activities.json\")\n```\n\nYou can additionally reference [aliases](https://on.cypress.io/guides/using-aliases) within responses. These aliases do not have to point to fixtures, but that is a common use case. Separating out a fixture enables you to work and mutate that object prior to handing it off to a response.\n\n```javascript\ncy\n  .server()\n\n  .fixture(\"activities.json\").as(\"activitiesJSON\")\n  .route(\"GET\", /activities/, \"@activitiesJSON\")\n```\n\n***\n\n# Waiting\n\nWhether or not you choose to stub responses, Cypress enables you to declaratively [`cy.wait`](https://on.cypress.io/api/wait) for requests and their responses.\n\n```javascript\ncy\n  .server()\n  .route(/activities/, \"fixture:activities\").as(\"getActivities\")\n  .route(/messages/, \"fixture:messages\").as(\"getMessages\")\n\n  // visit the dashboard, which should make requests that match\n  // the two routes above\n  .visit(\"http://localhost:8888/dashboard\")\n\n  // pass an array of Route Aliases which forces Cypress to wait\n  // until it sees a response for each request that matches\n  // each of these aliases\n  .wait([\"@getActivities\", \"@getMessages\"])\n\n  // these commands will not run until the wait command resolves above\n  .get(\"h1\").should(\"contain\", \"Dashboard\")\n```\n\nDeclaratively waiting for responses has many advantages:\n- You descrease test flake\n- Source of failure is clearer\n- You can make assertions about the XHR objects\n\n***\n\n## Removing Flake\n\nOne advantage of declaratively waiting for requests is that it decreases test flake. You can think of [`cy.wait`](https://on.cypress.io/api/wait) as a guard that indicates to Cypress when you expect a request to be made that matches a specific routing alias. This prevents commands from running until responses come back and it guards against situations where your requests are initially delayed.\n\n**Auto-complete Example:**\n\n```javascript\ncy\n  .server()\n  .route(/search/, [{item: \"Book 1\"}, {item: \"Book 2\"}]).as(\"getSearch\")\n\n  // our autocomplete field is throttled\n  // meaning it only makes a request after\n  // 500ms from the last keyPress\n  .get(\"#autocomplete\").type(\"Book\")\n\n  // wait for the request + response\n  // thus insulating us from the\n  // throttled request\n  .wait(\"@getSearch\")\n\n  .get(\"#results\")\n    .should(\"contain\", \"Book 1\")\n    .and(\"contain\", \"Book 2\")\n```\n\nWhat makes this example above so powerful is that Cypress will automatically wait for a request that matches the `getSearch` alias. Instead of forcing Cypress to test the *side effect* of a successful request (the display of the Book results), you can test the actual *cause* of the results.\n\n***\n\n## Clear Source of Failure\n\nIn our example above, we added an assertion to the display of the search results.\n\n**The search results working are coupled to a few things in our application:**\n\n1. Our application making a request to the correct URL.\n2. Our application correctly processing the response.\n3. Our application inserting the results into the DOM.\n\nIn this example, there are many possible sources of failure. In most testing tools, if our request failed to ever go out, we would normally only ever get an error once we attempt to find the results in the DOM and see that there is no matching element. This is problematic because it's unknown *why* the results failed to be displayed. Was there a problem with our rendering code? Did we modify or change an attribute such as an `id` or `class` on an element? Perhaps our server sent us different Book items.\n\nWith Cypress, by adding a [`cy.wait`](https://on.cypress.io/api/wait) guard, you can more easily pinpoint your specific problem. If the request never went out, you'll receive errors like this.\n\n![wait failure](https://cloud.githubusercontent.com/assets/1268976/10780062/a9c3245a-7d0f-11e5-9984-67d84650b0a0.png)\n\nNow we know exactly why our test failed. It had nothing to do with the DOM. Instead we can see that either our request never went out or a request went out to the wrong URL.\n\n***\n\n## Asserting about the XHR Object\n\nAnother benefit of using [`cy.wait`](https://on.cypress.io/api/wait) on requests is that it allows you to access the actual `XHR` object. This is useful when you want to make assertions about this object.\n\nIn our example above we can assert about the request object to verify that it sent data as a query string in the URL. Although we're mocking the response, we can still verify that our application sends the correct request.\n\n```javascript\ncy\n  .server()\n  .route(/search/, [{item: \"Book 1\"}, {item: \"Book 2\"}]).as(\"getSearch\")\n\n  .get(\"#autocomplete\").type(\"Book\")\n\n  // this yields us the XHR object which includes\n  // fields for request, response, url, method, etc\n  .wait(\"@getSearch\")\n    .its(\"url\").should(\"include\", \"/search?query=Book\")\n\n  .get(\"#results\")\n    .should(\"contain\", \"Book 1\")\n    .and(\"contain\", \"Book 2\")\n```\n\n**The XHR object that [`cy.wait`](https://on.cypress.io/api/wait) yields you has everything you need to make assertions including:**\n\n- URL\n- Method\n- Status Code\n- Request Body\n- Request Headers\n- Response Body\n- Response Headers","date":"2017-04-19T18:46:47.000Z","updated":"2017-04-19T18:46:47.000Z","path":"guides/guides/network-requests.html","comments":1,"layout":"page","_id":"cj1pby1kr002w68g84s60de6b","content":"<h1 id=\"Strategy\"><a href=\"#Strategy\" class=\"headerlink\" title=\"Strategy\"></a>Strategy</h1><p>Cypress makes it easy to manage the entire lifecyle of AJAX / XHR requests within your application. Cypress provides you direct access to the XHR objects, enabling you to make assertions about its properties. Additionally you can even stub and mock a request’s response.</p>\n<p><strong>Common testing scenarios:</strong></p>\n<ul>\n<li>Asserting on a request’s body</li>\n<li>Asserting on a request’s url</li>\n<li>Asserting on a request’s headers</li>\n<li>Stubbing a response’s body</li>\n<li>Stubbing a response’s status code</li>\n<li>Stubbing a response’s headers</li>\n<li>Delaying a response</li>\n<li>Waiting for a response to happen</li>\n</ul>\n<p>Within Cypress, you have the ability to choose whether to stub responses or allow them to actually hit your server. You can also mix and match within the same test by choosing to stub certain requests, while allowing others to hit your server.</p>\n<p>Let’s investigate both strategies, why you would use one versus the other, and why you should regularly use both.</p>\n<hr>\n<h2 id=\"1-Don’t-Stub-Responses\"><a href=\"#1-Don’t-Stub-Responses\" class=\"headerlink\" title=\"1: Don’t Stub Responses\"></a>1: Don’t Stub Responses</h2><p>Requests that aren’t stubbed will actually reach your server. By <em>not</em> stubbing your responses, you are writing true <strong>end to end</strong> tests. This means you are driving your application the same way a real user would.</p>\n<blockquote>\n<p>When requests are not stubbed, this gaurantees the <em>contract</em> between your client and server is working correctly.</p>\n</blockquote>\n<p>In other words, you can have confidence your server is sending the correct data in the correct structure for your client to consume. It is a good idea to have <strong>end to end</strong> tests around your application’s <em>critical paths</em>. These typically include user login, signup, and other critical paths such as billing.</p>\n<p><strong>There are downsides to not stubbing responses you should be aware of:</strong></p>\n<ul>\n<li>Since no responses are stubbed, that means your server has to <em>actually send real responses</em>. This can be problematic because you may have to <em>seed a database</em> before every test to generate state. For instance, if you were testing <strong>pagination</strong>, you’d have to seed the database with every object that it takes to replicate this feature in your application.</li>\n<li>Since real responses go through every single layer of your server (controllers / models / views) the tests are often <em>much</em> slower than stubbed responses.</li>\n</ul>\n<p>If you are writing a traditional server-side application where most of the responses are <code>HTML</code> you will likely have few stubbed responses. However, most modern applications that serve <code>JSON</code> can take advantage of stubbing.</p>\n<p>[block:callout]<br>{<br>  “type”: “success”,<br>  “body”: “- Guaranteed to work in production\\n- Test coverage around server endpoints\\n- Great for traditional server-side HTML rendering”,<br>  “title”: “Benefits”<br>}<br>[/block]</p>\n<p>[block:callout]<br>{<br>  “type”: “danger”,<br>  “body”: “- Requires seeding\\n- Much slower\\n- Hard to test edge cases”,<br>  “title”: “Downsides”<br>}<br>[/block]</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “- Use sparingly\\n- Great for the <em>critical paths</em> of your application\\n- Helpful to have one test around the <em>happy path</em> of a feature”,<br>  “title”: “Suggestions”<br>}<br>[/block]</p>\n<hr>\n<h2 id=\"2-Stub-Responses\"><a href=\"#2-Stub-Responses\" class=\"headerlink\" title=\"2: Stub Responses\"></a>2: Stub Responses</h2><p>Stubbing responses enables you to control every aspect of the response, including the response body, the status, headers, and even network delay. Stubbing is extremely fast, most responses will be returned in less than 20ms.</p>\n<blockquote>\n<p>Stubbing responses is a great way to control the data that is returned to your client.</p>\n</blockquote>\n<p>You don’t have to do any work on the server. Your application will have no idea it’s requests are being stubbed, so there are <strong>no code changes</strong> needed. In fact, stubbed requests will show up in the Network tab of your Developer Tools, and your application will continue to work after the test is finished.</p>\n<p>[block:callout]<br>{<br>  “type”: “success”,<br>  “body”: “- Easy control of response bodies, status, and headers\\n- Force responses to take longer to simulate network delay\\n- No code changes to your server or client code\\n- Fast, &lt; 20ms response times\\n- Perfect for JSON API’s”,<br>  “title”: “Benefits”<br>}<br>[/block]</p>\n<p>[block:callout]<br>{<br>  “type”: “danger”,<br>  “body”: “- No guarantee your stubbed responses match the actual data your server sends\\n- No test coverage on some server endpoints\\n- Not as useful if you’re using traditional server side HTML rendering”,<br>  “title”: “Downsides”<br>}<br>[/block]</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “- Use for the vast majority of your testing\\n- Mix and match, typically have one true end to end test, and then stub the rest”,<br>  “title”: “Suggestions”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"How-to-stub-responses\"><a href=\"#How-to-stub-responses\" class=\"headerlink\" title=\"How to stub responses\"></a>How to stub responses</h1><p>Cypress makes it easy to stub a response and control the <code>body</code>, <code>status</code>, <code>headers</code>, or even delay.</p>\n<p>To begin stubbing responses you have to do two things.</p>\n<ol>\n<li>Start a <a href=\"https://on.cypress.io/api/server\" target=\"_blank\" rel=\"external\"><code>cy.server</code></a></li>\n<li>Provide a <a href=\"https://on.cypress.io/api/route\" target=\"_blank\" rel=\"external\"><code>cy.route</code></a></li>\n</ol>\n<p>These two commands work together to control the behavior of your responses within the command’s options. See <a href=\"https://on.cypress.io/api/server#section-options\" target=\"_blank\" rel=\"external\"><code>cy.server</code> options</a> and <a href=\"https://on.cypress.io/api/route#section-options\" target=\"_blank\" rel=\"external\"><code>cy.route</code> options</a> for instructions on how to stub responses.</p>\n<p><a href=\"https://on.cypress.io/api/server\" target=\"_blank\" rel=\"external\"><code>cy.server</code></a> enables stubbing, while <a href=\"https://on.cypress.io/api/route\" target=\"_blank\" rel=\"external\"><code>cy.route</code></a> provides a routing table so Cypress understands which response should go with which request.</p>\n<hr>\n<h1 id=\"Requests\"><a href=\"#Requests\" class=\"headerlink\" title=\"Requests\"></a>Requests</h1><p>Cypress will automatically indicate when an XHR request happens in your application. These are logged in the Command Log regardless of whether or not you are using stubbing. This provides you a visual indicator when a request has started and when it is finished. Additionally, Cypress will take a snapshot of the DOM when the request is made and another snapshot when the response comes back.</p>\n<p>By default, Cypress is configured to <em>ignore</em> requests that are used to fetch static content like <code>.js</code> or <code>.html</code> files. This keeps the Command Log less noisy. This option can be changed in the <a href=\"https://on.cypress.io/guides/configuration\" target=\"_blank\" rel=\"external\">configuration</a>.</p>\n<p>Cypress automatically collects the request <code>headers</code> and the request <code>body</code> and will make this available to you.</p>\n<hr>\n<h1 id=\"Server-Routing-Table\"><a href=\"#Server-Routing-Table\" class=\"headerlink\" title=\"Server + Routing Table\"></a>Server + Routing Table</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  <span class=\"comment\">// enable response stubbing</span></div><div class=\"line\">  .server()</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Route all GET requests that have a</span></div><div class=\"line\">  <span class=\"comment\">// URL that matches the RegExp /users/</span></div><div class=\"line\">  <span class=\"comment\">// and force the response to be: []</span></div><div class=\"line\">  .route(&#123;</div><div class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">\"GET\"</span>,</div><div class=\"line\">    <span class=\"attr\">url</span>: <span class=\"regexp\">/users/</span>,</div><div class=\"line\">    <span class=\"attr\">response</span>: []</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<p>Each <a href=\"https://on.cypress.io/api/route\" target=\"_blank\" rel=\"external\"><code>cy.route</code></a> you provide will automatically route those requests to specific responses and control their body, response headers, or even force additional network delay.</p>\n<p>When you start a server and provide a routing table, Cypress will display this under “Routes” in the Command Log.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/10780221/91743ab8-7d11-11e5-9fe1-8bcbdf5e344c.png\" alt=\"Routing Table\"></p>\n<p>Once you start a server with <a href=\"https://on.cypress.io/api/server\" target=\"_blank\" rel=\"external\"><code>cy.server</code></a>, all requests will be controllable for the remainder of the test. When a new test runs, Cypress will restore the default behavior and remove all routing and stubbing. For a complete reference of the API and options, refer to the documentation for each command.</p>\n<ul>\n<li><a href=\"https://on.cypress.io/api/server\" target=\"_blank\" rel=\"external\"><code>cy.server</code></a></li>\n<li><a href=\"https://on.cypress.io/api/route\" target=\"_blank\" rel=\"external\"><code>cy.route</code></a></li>\n</ul>\n<hr>\n<h1 id=\"Fixtures\"><a href=\"#Fixtures\" class=\"headerlink\" title=\"Fixtures\"></a>Fixtures</h1><p>When stubbing a response, you typically need to manage potentially large and complex JSON objects. Cypress has support for <a href=\"https://on.cypress.io/guides/creating-fixtures\" target=\"_blank\" rel=\"external\">fixtures</a>, and even allows you to integrate fixture syntax directly into responses.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">// we set the response to be the activites.json fixture</span></div><div class=\"line\">  .route(<span class=\"string\">\"GET\"</span>, /activities/, <span class=\"string\">\"fixture:activities.json\"</span>)</div></pre></td></tr></table></figure>\n<p>You can additionally reference <a href=\"https://on.cypress.io/guides/using-aliases\" target=\"_blank\" rel=\"external\">aliases</a> within responses. These aliases do not have to point to fixtures, but that is a common use case. Separating out a fixture enables you to work and mutate that object prior to handing it off to a response.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\"></div><div class=\"line\">  .fixture(<span class=\"string\">\"activities.json\"</span>).as(<span class=\"string\">\"activitiesJSON\"</span>)</div><div class=\"line\">  .route(<span class=\"string\">\"GET\"</span>, /activities/, <span class=\"string\">\"@activitiesJSON\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Waiting\"><a href=\"#Waiting\" class=\"headerlink\" title=\"Waiting\"></a>Waiting</h1><p>Whether or not you choose to stub responses, Cypress enables you to declaratively <a href=\"https://on.cypress.io/api/wait\" target=\"_blank\" rel=\"external\"><code>cy.wait</code></a> for requests and their responses.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"regexp\">/activities/</span>, <span class=\"string\">\"fixture:activities\"</span>).as(<span class=\"string\">\"getActivities\"</span>)</div><div class=\"line\">  .route(<span class=\"regexp\">/messages/</span>, <span class=\"string\">\"fixture:messages\"</span>).as(<span class=\"string\">\"getMessages\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// visit the dashboard, which should make requests that match</span></div><div class=\"line\">  <span class=\"comment\">// the two routes above</span></div><div class=\"line\">  .visit(<span class=\"string\">\"http://localhost:8888/dashboard\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// pass an array of Route Aliases which forces Cypress to wait</span></div><div class=\"line\">  <span class=\"comment\">// until it sees a response for each request that matches</span></div><div class=\"line\">  <span class=\"comment\">// each of these aliases</span></div><div class=\"line\">  .wait([<span class=\"string\">\"@getActivities\"</span>, <span class=\"string\">\"@getMessages\"</span>])</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// these commands will not run until the wait command resolves above</span></div><div class=\"line\">  .get(<span class=\"string\">\"h1\"</span>).should(<span class=\"string\">\"contain\"</span>, <span class=\"string\">\"Dashboard\"</span>)</div></pre></td></tr></table></figure>\n<p>Declaratively waiting for responses has many advantages:</p>\n<ul>\n<li>You descrease test flake</li>\n<li>Source of failure is clearer</li>\n<li>You can make assertions about the XHR objects</li>\n</ul>\n<hr>\n<h2 id=\"Removing-Flake\"><a href=\"#Removing-Flake\" class=\"headerlink\" title=\"Removing Flake\"></a>Removing Flake</h2><p>One advantage of declaratively waiting for requests is that it decreases test flake. You can think of <a href=\"https://on.cypress.io/api/wait\" target=\"_blank\" rel=\"external\"><code>cy.wait</code></a> as a guard that indicates to Cypress when you expect a request to be made that matches a specific routing alias. This prevents commands from running until responses come back and it guards against situations where your requests are initially delayed.</p>\n<p><strong>Auto-complete Example:</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"regexp\">/search/</span>, [&#123;<span class=\"attr\">item</span>: <span class=\"string\">\"Book 1\"</span>&#125;, &#123;<span class=\"attr\">item</span>: <span class=\"string\">\"Book 2\"</span>&#125;]).as(<span class=\"string\">\"getSearch\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// our autocomplete field is throttled</span></div><div class=\"line\">  <span class=\"comment\">// meaning it only makes a request after</span></div><div class=\"line\">  <span class=\"comment\">// 500ms from the last keyPress</span></div><div class=\"line\">  .get(<span class=\"string\">\"#autocomplete\"</span>).type(<span class=\"string\">\"Book\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// wait for the request + response</span></div><div class=\"line\">  <span class=\"comment\">// thus insulating us from the</span></div><div class=\"line\">  <span class=\"comment\">// throttled request</span></div><div class=\"line\">  .wait(<span class=\"string\">\"@getSearch\"</span>)</div><div class=\"line\"></div><div class=\"line\">  .get(<span class=\"string\">\"#results\"</span>)</div><div class=\"line\">    .should(<span class=\"string\">\"contain\"</span>, <span class=\"string\">\"Book 1\"</span>)</div><div class=\"line\">    .and(<span class=\"string\">\"contain\"</span>, <span class=\"string\">\"Book 2\"</span>)</div></pre></td></tr></table></figure>\n<p>What makes this example above so powerful is that Cypress will automatically wait for a request that matches the <code>getSearch</code> alias. Instead of forcing Cypress to test the <em>side effect</em> of a successful request (the display of the Book results), you can test the actual <em>cause</em> of the results.</p>\n<hr>\n<h2 id=\"Clear-Source-of-Failure\"><a href=\"#Clear-Source-of-Failure\" class=\"headerlink\" title=\"Clear Source of Failure\"></a>Clear Source of Failure</h2><p>In our example above, we added an assertion to the display of the search results.</p>\n<p><strong>The search results working are coupled to a few things in our application:</strong></p>\n<ol>\n<li>Our application making a request to the correct URL.</li>\n<li>Our application correctly processing the response.</li>\n<li>Our application inserting the results into the DOM.</li>\n</ol>\n<p>In this example, there are many possible sources of failure. In most testing tools, if our request failed to ever go out, we would normally only ever get an error once we attempt to find the results in the DOM and see that there is no matching element. This is problematic because it’s unknown <em>why</em> the results failed to be displayed. Was there a problem with our rendering code? Did we modify or change an attribute such as an <code>id</code> or <code>class</code> on an element? Perhaps our server sent us different Book items.</p>\n<p>With Cypress, by adding a <a href=\"https://on.cypress.io/api/wait\" target=\"_blank\" rel=\"external\"><code>cy.wait</code></a> guard, you can more easily pinpoint your specific problem. If the request never went out, you’ll receive errors like this.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/10780062/a9c3245a-7d0f-11e5-9984-67d84650b0a0.png\" alt=\"wait failure\"></p>\n<p>Now we know exactly why our test failed. It had nothing to do with the DOM. Instead we can see that either our request never went out or a request went out to the wrong URL.</p>\n<hr>\n<h2 id=\"Asserting-about-the-XHR-Object\"><a href=\"#Asserting-about-the-XHR-Object\" class=\"headerlink\" title=\"Asserting about the XHR Object\"></a>Asserting about the XHR Object</h2><p>Another benefit of using <a href=\"https://on.cypress.io/api/wait\" target=\"_blank\" rel=\"external\"><code>cy.wait</code></a> on requests is that it allows you to access the actual <code>XHR</code> object. This is useful when you want to make assertions about this object.</p>\n<p>In our example above we can assert about the request object to verify that it sent data as a query string in the URL. Although we’re mocking the response, we can still verify that our application sends the correct request.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"regexp\">/search/</span>, [&#123;<span class=\"attr\">item</span>: <span class=\"string\">\"Book 1\"</span>&#125;, &#123;<span class=\"attr\">item</span>: <span class=\"string\">\"Book 2\"</span>&#125;]).as(<span class=\"string\">\"getSearch\"</span>)</div><div class=\"line\"></div><div class=\"line\">  .get(<span class=\"string\">\"#autocomplete\"</span>).type(<span class=\"string\">\"Book\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// this yields us the XHR object which includes</span></div><div class=\"line\">  <span class=\"comment\">// fields for request, response, url, method, etc</span></div><div class=\"line\">  .wait(<span class=\"string\">\"@getSearch\"</span>)</div><div class=\"line\">    .its(<span class=\"string\">\"url\"</span>).should(<span class=\"string\">\"include\"</span>, <span class=\"string\">\"/search?query=Book\"</span>)</div><div class=\"line\"></div><div class=\"line\">  .get(<span class=\"string\">\"#results\"</span>)</div><div class=\"line\">    .should(<span class=\"string\">\"contain\"</span>, <span class=\"string\">\"Book 1\"</span>)</div><div class=\"line\">    .and(<span class=\"string\">\"contain\"</span>, <span class=\"string\">\"Book 2\"</span>)</div></pre></td></tr></table></figure>\n<p><strong>The XHR object that <a href=\"https://on.cypress.io/api/wait\" target=\"_blank\" rel=\"external\"><code>cy.wait</code></a> yields you has everything you need to make assertions including:</strong></p>\n<ul>\n<li>URL</li>\n<li>Method</li>\n<li>Status Code</li>\n<li>Request Body</li>\n<li>Request Headers</li>\n<li>Response Body</li>\n<li>Response Headers</li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<h1 id=\"Strategy\"><a href=\"#Strategy\" class=\"headerlink\" title=\"Strategy\"></a>Strategy</h1><p>Cypress makes it easy to manage the entire lifecyle of AJAX / XHR requests within your application. Cypress provides you direct access to the XHR objects, enabling you to make assertions about its properties. Additionally you can even stub and mock a request’s response.</p>\n<p><strong>Common testing scenarios:</strong></p>\n<ul>\n<li>Asserting on a request’s body</li>\n<li>Asserting on a request’s url</li>\n<li>Asserting on a request’s headers</li>\n<li>Stubbing a response’s body</li>\n<li>Stubbing a response’s status code</li>\n<li>Stubbing a response’s headers</li>\n<li>Delaying a response</li>\n<li>Waiting for a response to happen</li>\n</ul>\n<p>Within Cypress, you have the ability to choose whether to stub responses or allow them to actually hit your server. You can also mix and match within the same test by choosing to stub certain requests, while allowing others to hit your server.</p>\n<p>Let’s investigate both strategies, why you would use one versus the other, and why you should regularly use both.</p>\n<hr>\n<h2 id=\"1-Don’t-Stub-Responses\"><a href=\"#1-Don’t-Stub-Responses\" class=\"headerlink\" title=\"1: Don’t Stub Responses\"></a>1: Don’t Stub Responses</h2><p>Requests that aren’t stubbed will actually reach your server. By <em>not</em> stubbing your responses, you are writing true <strong>end to end</strong> tests. This means you are driving your application the same way a real user would.</p>\n<blockquote>\n<p>When requests are not stubbed, this gaurantees the <em>contract</em> between your client and server is working correctly.</p>\n</blockquote>\n<p>In other words, you can have confidence your server is sending the correct data in the correct structure for your client to consume. It is a good idea to have <strong>end to end</strong> tests around your application’s <em>critical paths</em>. These typically include user login, signup, and other critical paths such as billing.</p>\n<p><strong>There are downsides to not stubbing responses you should be aware of:</strong></p>\n<ul>\n<li>Since no responses are stubbed, that means your server has to <em>actually send real responses</em>. This can be problematic because you may have to <em>seed a database</em> before every test to generate state. For instance, if you were testing <strong>pagination</strong>, you’d have to seed the database with every object that it takes to replicate this feature in your application.</li>\n<li>Since real responses go through every single layer of your server (controllers / models / views) the tests are often <em>much</em> slower than stubbed responses.</li>\n</ul>\n<p>If you are writing a traditional server-side application where most of the responses are <code>HTML</code> you will likely have few stubbed responses. However, most modern applications that serve <code>JSON</code> can take advantage of stubbing.</p>\n<p>[block:callout]<br>{<br>  “type”: “success”,<br>  “body”: “- Guaranteed to work in production\\n- Test coverage around server endpoints\\n- Great for traditional server-side HTML rendering”,<br>  “title”: “Benefits”<br>}<br>[/block]</p>\n<p>[block:callout]<br>{<br>  “type”: “danger”,<br>  “body”: “- Requires seeding\\n- Much slower\\n- Hard to test edge cases”,<br>  “title”: “Downsides”<br>}<br>[/block]</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “- Use sparingly\\n- Great for the <em>critical paths</em> of your application\\n- Helpful to have one test around the <em>happy path</em> of a feature”,<br>  “title”: “Suggestions”<br>}<br>[/block]</p>\n<hr>\n<h2 id=\"2-Stub-Responses\"><a href=\"#2-Stub-Responses\" class=\"headerlink\" title=\"2: Stub Responses\"></a>2: Stub Responses</h2><p>Stubbing responses enables you to control every aspect of the response, including the response body, the status, headers, and even network delay. Stubbing is extremely fast, most responses will be returned in less than 20ms.</p>\n<blockquote>\n<p>Stubbing responses is a great way to control the data that is returned to your client.</p>\n</blockquote>\n<p>You don’t have to do any work on the server. Your application will have no idea it’s requests are being stubbed, so there are <strong>no code changes</strong> needed. In fact, stubbed requests will show up in the Network tab of your Developer Tools, and your application will continue to work after the test is finished.</p>\n<p>[block:callout]<br>{<br>  “type”: “success”,<br>  “body”: “- Easy control of response bodies, status, and headers\\n- Force responses to take longer to simulate network delay\\n- No code changes to your server or client code\\n- Fast, &lt; 20ms response times\\n- Perfect for JSON API’s”,<br>  “title”: “Benefits”<br>}<br>[/block]</p>\n<p>[block:callout]<br>{<br>  “type”: “danger”,<br>  “body”: “- No guarantee your stubbed responses match the actual data your server sends\\n- No test coverage on some server endpoints\\n- Not as useful if you’re using traditional server side HTML rendering”,<br>  “title”: “Downsides”<br>}<br>[/block]</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “- Use for the vast majority of your testing\\n- Mix and match, typically have one true end to end test, and then stub the rest”,<br>  “title”: “Suggestions”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"How-to-stub-responses\"><a href=\"#How-to-stub-responses\" class=\"headerlink\" title=\"How to stub responses\"></a>How to stub responses</h1><p>Cypress makes it easy to stub a response and control the <code>body</code>, <code>status</code>, <code>headers</code>, or even delay.</p>\n<p>To begin stubbing responses you have to do two things.</p>\n<ol>\n<li>Start a <a href=\"https://on.cypress.io/api/server\"><code>cy.server</code></a></li>\n<li>Provide a <a href=\"https://on.cypress.io/api/route\"><code>cy.route</code></a></li>\n</ol>\n<p>These two commands work together to control the behavior of your responses within the command’s options. See <a href=\"https://on.cypress.io/api/server#section-options\"><code>cy.server</code> options</a> and <a href=\"https://on.cypress.io/api/route#section-options\"><code>cy.route</code> options</a> for instructions on how to stub responses.</p>\n<p><a href=\"https://on.cypress.io/api/server\"><code>cy.server</code></a> enables stubbing, while <a href=\"https://on.cypress.io/api/route\"><code>cy.route</code></a> provides a routing table so Cypress understands which response should go with which request.</p>\n<hr>\n<h1 id=\"Requests\"><a href=\"#Requests\" class=\"headerlink\" title=\"Requests\"></a>Requests</h1><p>Cypress will automatically indicate when an XHR request happens in your application. These are logged in the Command Log regardless of whether or not you are using stubbing. This provides you a visual indicator when a request has started and when it is finished. Additionally, Cypress will take a snapshot of the DOM when the request is made and another snapshot when the response comes back.</p>\n<p>By default, Cypress is configured to <em>ignore</em> requests that are used to fetch static content like <code>.js</code> or <code>.html</code> files. This keeps the Command Log less noisy. This option can be changed in the <a href=\"https://on.cypress.io/guides/configuration\">configuration</a>.</p>\n<p>Cypress automatically collects the request <code>headers</code> and the request <code>body</code> and will make this available to you.</p>\n<hr>\n<h1 id=\"Server-Routing-Table\"><a href=\"#Server-Routing-Table\" class=\"headerlink\" title=\"Server + Routing Table\"></a>Server + Routing Table</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  <span class=\"comment\">// enable response stubbing</span></div><div class=\"line\">  .server()</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Route all GET requests that have a</span></div><div class=\"line\">  <span class=\"comment\">// URL that matches the RegExp /users/</span></div><div class=\"line\">  <span class=\"comment\">// and force the response to be: []</span></div><div class=\"line\">  .route(&#123;</div><div class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">\"GET\"</span>,</div><div class=\"line\">    <span class=\"attr\">url</span>: <span class=\"regexp\">/users/</span>,</div><div class=\"line\">    <span class=\"attr\">response</span>: []</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<p>Each <a href=\"https://on.cypress.io/api/route\"><code>cy.route</code></a> you provide will automatically route those requests to specific responses and control their body, response headers, or even force additional network delay.</p>\n<p>When you start a server and provide a routing table, Cypress will display this under “Routes” in the Command Log.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/10780221/91743ab8-7d11-11e5-9fe1-8bcbdf5e344c.png\" alt=\"Routing Table\"></p>\n<p>Once you start a server with <a href=\"https://on.cypress.io/api/server\"><code>cy.server</code></a>, all requests will be controllable for the remainder of the test. When a new test runs, Cypress will restore the default behavior and remove all routing and stubbing. For a complete reference of the API and options, refer to the documentation for each command.</p>\n<ul>\n<li><a href=\"https://on.cypress.io/api/server\"><code>cy.server</code></a></li>\n<li><a href=\"https://on.cypress.io/api/route\"><code>cy.route</code></a></li>\n</ul>\n<hr>\n<h1 id=\"Fixtures\"><a href=\"#Fixtures\" class=\"headerlink\" title=\"Fixtures\"></a>Fixtures</h1><p>When stubbing a response, you typically need to manage potentially large and complex JSON objects. Cypress has support for <a href=\"https://on.cypress.io/guides/creating-fixtures\">fixtures</a>, and even allows you to integrate fixture syntax directly into responses.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">// we set the response to be the activites.json fixture</span></div><div class=\"line\">  .route(<span class=\"string\">\"GET\"</span>, /activities/, <span class=\"string\">\"fixture:activities.json\"</span>)</div></pre></td></tr></table></figure>\n<p>You can additionally reference <a href=\"https://on.cypress.io/guides/using-aliases\">aliases</a> within responses. These aliases do not have to point to fixtures, but that is a common use case. Separating out a fixture enables you to work and mutate that object prior to handing it off to a response.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\"></div><div class=\"line\">  .fixture(<span class=\"string\">\"activities.json\"</span>).as(<span class=\"string\">\"activitiesJSON\"</span>)</div><div class=\"line\">  .route(<span class=\"string\">\"GET\"</span>, /activities/, <span class=\"string\">\"@activitiesJSON\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Waiting\"><a href=\"#Waiting\" class=\"headerlink\" title=\"Waiting\"></a>Waiting</h1><p>Whether or not you choose to stub responses, Cypress enables you to declaratively <a href=\"https://on.cypress.io/api/wait\"><code>cy.wait</code></a> for requests and their responses.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"regexp\">/activities/</span>, <span class=\"string\">\"fixture:activities\"</span>).as(<span class=\"string\">\"getActivities\"</span>)</div><div class=\"line\">  .route(<span class=\"regexp\">/messages/</span>, <span class=\"string\">\"fixture:messages\"</span>).as(<span class=\"string\">\"getMessages\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// visit the dashboard, which should make requests that match</span></div><div class=\"line\">  <span class=\"comment\">// the two routes above</span></div><div class=\"line\">  .visit(<span class=\"string\">\"http://localhost:8888/dashboard\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// pass an array of Route Aliases which forces Cypress to wait</span></div><div class=\"line\">  <span class=\"comment\">// until it sees a response for each request that matches</span></div><div class=\"line\">  <span class=\"comment\">// each of these aliases</span></div><div class=\"line\">  .wait([<span class=\"string\">\"@getActivities\"</span>, <span class=\"string\">\"@getMessages\"</span>])</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// these commands will not run until the wait command resolves above</span></div><div class=\"line\">  .get(<span class=\"string\">\"h1\"</span>).should(<span class=\"string\">\"contain\"</span>, <span class=\"string\">\"Dashboard\"</span>)</div></pre></td></tr></table></figure>\n<p>Declaratively waiting for responses has many advantages:</p>\n<ul>\n<li>You descrease test flake</li>\n<li>Source of failure is clearer</li>\n<li>You can make assertions about the XHR objects</li>\n</ul>\n<hr>\n<h2 id=\"Removing-Flake\"><a href=\"#Removing-Flake\" class=\"headerlink\" title=\"Removing Flake\"></a>Removing Flake</h2><p>One advantage of declaratively waiting for requests is that it decreases test flake. You can think of <a href=\"https://on.cypress.io/api/wait\"><code>cy.wait</code></a> as a guard that indicates to Cypress when you expect a request to be made that matches a specific routing alias. This prevents commands from running until responses come back and it guards against situations where your requests are initially delayed.</p>\n<p><strong>Auto-complete Example:</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"regexp\">/search/</span>, [&#123;<span class=\"attr\">item</span>: <span class=\"string\">\"Book 1\"</span>&#125;, &#123;<span class=\"attr\">item</span>: <span class=\"string\">\"Book 2\"</span>&#125;]).as(<span class=\"string\">\"getSearch\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// our autocomplete field is throttled</span></div><div class=\"line\">  <span class=\"comment\">// meaning it only makes a request after</span></div><div class=\"line\">  <span class=\"comment\">// 500ms from the last keyPress</span></div><div class=\"line\">  .get(<span class=\"string\">\"#autocomplete\"</span>).type(<span class=\"string\">\"Book\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// wait for the request + response</span></div><div class=\"line\">  <span class=\"comment\">// thus insulating us from the</span></div><div class=\"line\">  <span class=\"comment\">// throttled request</span></div><div class=\"line\">  .wait(<span class=\"string\">\"@getSearch\"</span>)</div><div class=\"line\"></div><div class=\"line\">  .get(<span class=\"string\">\"#results\"</span>)</div><div class=\"line\">    .should(<span class=\"string\">\"contain\"</span>, <span class=\"string\">\"Book 1\"</span>)</div><div class=\"line\">    .and(<span class=\"string\">\"contain\"</span>, <span class=\"string\">\"Book 2\"</span>)</div></pre></td></tr></table></figure>\n<p>What makes this example above so powerful is that Cypress will automatically wait for a request that matches the <code>getSearch</code> alias. Instead of forcing Cypress to test the <em>side effect</em> of a successful request (the display of the Book results), you can test the actual <em>cause</em> of the results.</p>\n<hr>\n<h2 id=\"Clear-Source-of-Failure\"><a href=\"#Clear-Source-of-Failure\" class=\"headerlink\" title=\"Clear Source of Failure\"></a>Clear Source of Failure</h2><p>In our example above, we added an assertion to the display of the search results.</p>\n<p><strong>The search results working are coupled to a few things in our application:</strong></p>\n<ol>\n<li>Our application making a request to the correct URL.</li>\n<li>Our application correctly processing the response.</li>\n<li>Our application inserting the results into the DOM.</li>\n</ol>\n<p>In this example, there are many possible sources of failure. In most testing tools, if our request failed to ever go out, we would normally only ever get an error once we attempt to find the results in the DOM and see that there is no matching element. This is problematic because it’s unknown <em>why</em> the results failed to be displayed. Was there a problem with our rendering code? Did we modify or change an attribute such as an <code>id</code> or <code>class</code> on an element? Perhaps our server sent us different Book items.</p>\n<p>With Cypress, by adding a <a href=\"https://on.cypress.io/api/wait\"><code>cy.wait</code></a> guard, you can more easily pinpoint your specific problem. If the request never went out, you’ll receive errors like this.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/10780062/a9c3245a-7d0f-11e5-9984-67d84650b0a0.png\" alt=\"wait failure\"></p>\n<p>Now we know exactly why our test failed. It had nothing to do with the DOM. Instead we can see that either our request never went out or a request went out to the wrong URL.</p>\n<hr>\n<h2 id=\"Asserting-about-the-XHR-Object\"><a href=\"#Asserting-about-the-XHR-Object\" class=\"headerlink\" title=\"Asserting about the XHR Object\"></a>Asserting about the XHR Object</h2><p>Another benefit of using <a href=\"https://on.cypress.io/api/wait\"><code>cy.wait</code></a> on requests is that it allows you to access the actual <code>XHR</code> object. This is useful when you want to make assertions about this object.</p>\n<p>In our example above we can assert about the request object to verify that it sent data as a query string in the URL. Although we’re mocking the response, we can still verify that our application sends the correct request.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"regexp\">/search/</span>, [&#123;<span class=\"attr\">item</span>: <span class=\"string\">\"Book 1\"</span>&#125;, &#123;<span class=\"attr\">item</span>: <span class=\"string\">\"Book 2\"</span>&#125;]).as(<span class=\"string\">\"getSearch\"</span>)</div><div class=\"line\"></div><div class=\"line\">  .get(<span class=\"string\">\"#autocomplete\"</span>).type(<span class=\"string\">\"Book\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// this yields us the XHR object which includes</span></div><div class=\"line\">  <span class=\"comment\">// fields for request, response, url, method, etc</span></div><div class=\"line\">  .wait(<span class=\"string\">\"@getSearch\"</span>)</div><div class=\"line\">    .its(<span class=\"string\">\"url\"</span>).should(<span class=\"string\">\"include\"</span>, <span class=\"string\">\"/search?query=Book\"</span>)</div><div class=\"line\"></div><div class=\"line\">  .get(<span class=\"string\">\"#results\"</span>)</div><div class=\"line\">    .should(<span class=\"string\">\"contain\"</span>, <span class=\"string\">\"Book 1\"</span>)</div><div class=\"line\">    .and(<span class=\"string\">\"contain\"</span>, <span class=\"string\">\"Book 2\"</span>)</div></pre></td></tr></table></figure>\n<p><strong>The XHR object that <a href=\"https://on.cypress.io/api/wait\"><code>cy.wait</code></a> yields you has everything you need to make assertions including:</strong></p>\n<ul>\n<li>URL</li>\n<li>Method</li>\n<li>Status Code</li>\n<li>Request Body</li>\n<li>Request Headers</li>\n<li>Response Body</li>\n<li>Response Headers</li>\n</ul>\n"},{"title":"making-assertions","_content":"\n# Writing an Assertion\n\nThere are two ways to write an assertion in Cypress.\n\n1. **Implicit Subjects:** Using [`cy.should`](https://on.cypress.io/api/should) or [`cy.and`](https://on.cypress.io/api/and)\n2. **Explicit Subjects:** Using `expect`\n\n***\n\n## Implicit Subjects with [`cy.should`](https://on.cypress.io/api/should) or [`cy.and`](https://on.cypress.io/api/and)\n\nUsing [`cy.should`](https://on.cypress.io/api/should) or [`cy.and`](https://on.cypress.io/api/and) commands is the preferred way of making an assertion in Cypress. The subject of the assertion is inferred from the subject of the last Cypress command, which is why this is called an **implicit subject**.\n\n```javascript\n// the implicit subject here is the first <tr>\n// this asserts that the <tr> has an .active class\ncy.get(\"tbody tr:first\").should(\"have.class\", \"active\")\n```\n\n![implicit_assertion_class_active](https://cloud.githubusercontent.com/assets/1271364/12554600/4cb4115c-c34b-11e5-891c-84ff176ea38f.jpg)\n\n***\n\n## Explicit Subjects with `expect`\n\nUsing `expect` allows you to pass in a specific subject and make an assertion on the specified subject.\n\nThese assertions are more commonly used when writing unit tests, but can also be used when writing integration tests. Cypress comes bundled with some existing tools that handle assertions such as:\n\n* [Chai](https://on.cypress.io/guides/bundled-tools#section-chai)\n* [Chai-jQuery](https://on.cypress.io/guides/bundled-tools#section-chai-jquery)\n* [Chai-Sinon](https://on.cypress.io/guides/bundled-tools#section-sinon-chai)\n\n```javascript\n// the explicit subject here is the boolean: true\nexpect(true).to.be.true\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Check out our example recipes for [unit testing](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/unit_test_application_code_spec.js) and [unit testing React components](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/unit_test_react_enzyme_spec.js)\",\n  \"title\": \"Unit Testing\"\n}\n[/block]\n\nExplicit assertions are great when you want to perform custom logic prior to making the assertion.\n\nThere is an [open issue](https://github.com/cypress-io/cypress/issues/101) for supporting `assert`.\n\n```javascript\ncy\n  .get(\"p\")\n  .should(function($p){\n    // return an array of texts from all of the p's\n    var texts = $p.map(function(i, el){\n      return cy.$(el).text()\n    })\n\n    // jquery map returns jquery object\n    // and .get() convert this to simple array\n    var texts = texts.get()\n\n    // array should have length of 3\n    expect(texts).to.have.length(3)\n\n    // set this specific subject\n    expect(texts).to.deep.eq([\n      \"Some text from first p\",\n      \"More text from second p\",\n      \"And even more text from third p\"\n    ])\n})\n```\n\n***\n\n# Available Assertions\n\nAn assertion is comprised of a subject, chainer methods, and an optional value.\n\n```javascript\nexpect({foo: \"bar\"}).to.have.property(\"foo\")\n           ↲              ↲            ↲\n        subject        chainers      value\n```\n\nThe following chainers are available for your use:\n\n- [Chai](#section-chai)\n- [Chai-jQuery](#section-chai-jquery)\n- [Chai-Sinon](#section-chai-sinon)\n\n***\n\n## Chai\n\n[Chai](http://chaijs.com/) chainers are available for assertions.\n\n| Chainable getters |\n| --- |\n| to |\n| be |\n| been |\n| is |\n| that |\n| which |\n| and |\n| has |\n| have |\n| with |\n| at |\n| of |\n| same |\n\n| Assertion | Example |\n| --- | --- |\n| not | `expect(foo).to.not.equal('bar')` |\n| deep | `expect(foo).to.deep.equal({ bar: 'baz' })` |\n| any | `expect(foo).to.have.any.keys('bar', 'baz')` |\n| all | `expect(foo).to.have.all.keys('bar', 'baz')` |\n| a( *type* ) | `expect('test').to.be.a('string')` |\n| an( *type* ) | `expect(undefined).to.be.an('undefined')` |\n| include( *value* )  | `expect([1,2,3]).to.include(2)` |\n| contain( *value* )  | `expect('foobar').to.contain('foo')` |\n| includes( *value* )  | `expect([1,2,3]).includes(2)` |\n| contains( *value* ) | `expect('foobar').contains('foo')` |\n| ok | `expect(undefined).to.not.be.ok` |\n| true | `expect(true).to.be.true` |\n| false | `expect(false).to.be.false` |\n| null | `expect(null).to.be.null` |\n| undefined | `expect(undefined).to.be.undefined` |\n| exist | `expect(foo).to.exist` |\n| empty | `expect([]).to.be.empty` |\n| arguments | `expect(arguments).to.be.arguments` |\n| equal( *value* )  | `expect(42).to.equal(42)` |\n| equals( *value* )  | `expect(42).equals(42)` |\n| eq( *value* )  | `expect(42).to.eq(42)` |\n| deep.equal( *value* ) | `expect({ foo: 'bar' }).to.deep.equal({ foo: 'bar' })` |\n| eql( *value* )  | `expect({ foo: 'bar' }).to.eql({ foo: 'bar' })` |\n| eqls( *value* )  | `expect([ 1, 2, 3 ]).eqls([ 1, 2, 3 ])` |\n| above( *value* )  | `expect(10).to.be.above(5)` |\n| gt( *value* )  | `expect(10).to.be.gt(5)` |\n| greaterThan( *value* ) | `expect(10).to.be.greaterThan(5)` |\n| least( *value* ) | `expect(10).to.be.at.least(10)` |\n| gte( *value* ) | `expect(10).to.be.gte(10)` |\n| below( *value* ) | `expect('foo').to.have.length.below(4)` |\n| lt( *value* )  | `expect(3).to.be.ls(4)` |\n| lessThan( *value* ) | `expect(5).to.be.lessThan(10)` |\n| most( *value* ) | `expect('foo').to.have.length.of.at.most(4)` |\n| lte( *value* ) | `expect(5).to.be.lte(5)` |\n| within( *start*, *finish* ) | `expect(7).to.be.within(5,10)` |\n| instanceof( *constructor* )| `expect([ 1, 2, 3 ]).to.be.instanceof(Array)` |\n| instanceOf( *constructor* ) | `expect([ 1, 2, 3 ]).to.be.instanceOf(Array)` |\n| property( *name*, *[value]* ) | `expect(obj).to.have.property('foo')` |\n| deep.property( *name*, *[value]* ) | `expect(deepObj).to.have.deep.property('teas[1]', 'matcha')` |\n| ownProperty( *name* )  | `expect('test').to.have.ownProperty('length')` |\n| haveOwnProperty( *name* ) | `expect('test').to.haveOwnProperty('length')` |\n| length( *value* )  | `expect('foo').to.have.length.above(2)` |\n| lengthOf( *value* ) | `expect('foo').to.have.lengthOf(3)` |\n| match( *regexp* ) | `expect('foobar').to.match(/^foo/)` |\n| string( *string* ) | `expect('foobar').to.have.string('bar')` |\n| keys( *key1*, *[key2]*, *[...]* ) | `expect({ foo: 1, bar: 2 }).to.have.key('foo')` |\n| key( *key1*, *[key2]*, *[...]* ) | `expect({ foo: 1, bar: 2 }).to.have.any.keys('foo')` |\n| throw( *constructor* ) | `expect(fn).to.throw(Error)` |\n| throws( *constructor* ) | `expect(fn).throws(ReferenceError, /bad function/)` |\n| respondTo( *method* ) | `expect(obj).to.respondTo('bar')` |\n| itself | `expect(Foo).itself.to.respondTo('bar')` |\n| satisfy( *method* ) | `expect(1).to.satisfy(function(num) { return num > 0; })` |\n| closeTo( *expected*, *delta*) | `expect(1.5).to.be.closeTo(1, 0.5)` |\n| members( *set* ) | `expect([1, 2, 3]).to.include.members([3, 2])` |\n| change( *function* )  | `expect(fn).to.change(obj, 'val')` |\n| changes( *function* ) | `expect(fn).changes(obj, 'val')` |\n| increase( *function* )  | `expect(fn).to.increase(obj, 'val')` |\n| increases( *function* ) | `expect(fn).increases(obj, 'val')` |\n| decrease( *function* )  | `expect(fn).to.decrease(obj, 'val')` |\n| decreases( *function* ) | `expect(fn).decreases(obj, 'val')` |\n\n***\n\n## Chai-jQuery\n\n[Chai-jQuery](https://github.com/chaijs/chai-jquery) chainers are available when asserting about a DOM object.\n\n| Chainers | Assertion |\n| --- | --- |\n| attr( *name*, *[value]*) | `expect($('body')).to.have.attr('foo', 'bar')` |\n| prop( *name*, *[value]*) | `expect($('body')).to.have.prop('disabled', false)` |\n| css( *name*, *[value]*) | `expect($('body')).to.have.css('background-color', 'rgb(0, 0, 0)')` |\n| data( *name*, *[value]*) | `expect($('body')).to.have.data('foo', 'bar')` |\n| class( *className* ) | `expect($('body')).to.have.class('foo')` |\n| id( *id* ) | `expect($('body')).to.have.id('foo')` |\n| html( *html*)  | `expect($('#title')).to.have.html('Chai Tea')` |\n| text( *text* ) | `expect($('#title')).to.have.text('Chai Tea')` |\n| value( *value* ) | `expect($('.year')).to.have.value('2012')` |\n| visible | `expect($('.year')).to.be.visible` |\n| hidden | `expect($('.year')).to.be.hidden` |\n| selected | `expect($('option')).not.to.be.selected` |\n| checked | `expect($('input')).not.to.be.checked` |\n| enabled | `expect($('enabled')).to.be.enabled` |\n| disabled | `expect($('input')).not.to.be.disabled` |\n| empty | `expect($('body')).not.to.be.empty` |\n| exist | `expect($('#nonexistent')).not.to.exist` |\n| match( *selector* ) | `expect($('#empty')).to.match(':empty')` |\n| contain( *text* ) | `expect($('#content')).to.contain('text')` |\n| descendents( *selector* ) | `expect($('#content')).to.have.descendants('div')` |\n\nYou will commonly use these chainers after using DOM commands like: [`cy.get`](https://on.cypress.io/api/get), [`cy.contains`](https://on.cypress.io/api/contains), etc.\n\n***\n\n## Chai-Sinon\n\nAll Sinon assertions are available in [Sinon–Chai](https://github.com/domenic/sinon-chai).\n\n| Sinon.JS property/method | Assertion |\n| -- | -- |\n| called |  `expect(spy).to.be.called` |\n| callCount | `expect(spy).to.have.callCount(n)` |\n| calledOnce |  `expect(spy).to.be.calledOnce` |\n| calledTwice | `expect(spy).to.be.calledTwice` |\n| calledThrice |  `expect(spy).to.be.calledThrice` |\n| calledBefore |  `expect(spy1).to.be.calledBefore(spy2)` |\n| calledAfter | `expect(spy1).to.be.calledAfter(spy2)` |\n| calledWithNew | `expect(spy).to.be.calledWithNew` |\n| alwaysCalledWithNew | `expect(spy).to.always.be.calledWithNew` |\n| calledOn |  `expect(spy).to.be.calledOn(context)` |\n| alwaysCalledOn |  `expect(spy).to.always.be.calledOn(context)` |\n| calledWith |  `expect(spy).to.be.calledWith(...args)` |\n| alwaysCalledWith |  `expect(spy).to.always.be.calledWith(...args)` |\n| calledWithExactly | `expect(spy).to.be.calledWithExactly(...args)` |\n| alwaysCalledWithExactly | `expect(spy).to.always.be.calledWithExactly(...args)` |\n| calledWithMatch | `expect(spy).to.be.calledWithMatch(...args)` |\n| alwaysCalledWithMatch | `expect(spy).to.always.be.calledWithMatch(...args)` |\n| returned |  `expect(spy).to.have.returned(returnVal)` |\n| alwaysReturned |  `expect(spy).to.have.always.returned(returnVal)` |\n| threw | `expect(spy).to.have.thrown(errorObjOrErrorTypeStringOrNothing)` |\n| alwaysThrew | `expect(spy).to.have.always.thrown(errorObjOrErrorTypeStringOrNothing)` |\n\n***\n\n# Using Chainers with Implicit Subjects\n\nWhen utilizing [`cy.should`](https://on.cypress.io/api/should) or [`cy.and`](https://on.cypress.io/api/should), instead of writing chainers as properties and methods, they are instead transformed into a string argument.\n\nIf we convert the previous example to use [`cy.should`](https://on.cypress.io/api/should), it would look like:\n\n```javascript\ncy.wrap({foo: \"bar\"}).should(\"have.property\", \"foo\")\n           ↲                      ↲            ↲\n        subject                chainers       value\n```\n\nThe chainers are shifted and become the first argument to [`cy.should`](https://on.cypress.io/api/should), with values simply being passed in as additional arguments.\n\n```javascript\n// we can additionally continue to chain and add\n// multiple assertions about our <button> subject\ncy.get(\"button\").should(\"have.class\", \"active\").and(\"be.visible\")\n          ↲                  ↲          ↲             ↲\n        subject           chainers     value         chainers\n```\n\nIf we converted the above example to use an explicit subject, this is what it would look like:\n\n```javascript\ncy.get(\"button\").should(function($button){\n  expect($button).to.have.class(\"active\")\n  expect($button).to.be.visible\n})\n```\n\nThis example above may be more familiar to you if you've written tests in JavaScript before.\n\nIf you look closely, you'll see that we've passed a callback function to the [`cy.should`](https://on.cypress.io/api/should) method. This allows us to write expectations inside of that callback function, yet still receive all of the wonderful benefits of [`cy.should`](https://on.cypress.io/api/should).\n\nRead about [resolving assertions](https://on.cypress.io/guides/making-assertions#section-resolving-assertions) below to learn how [`cy.should`](https://on.cypress.io/api/should) works under the hood.\n\n***\n\n## Assertions that change the subject\n\nSometimes using a specific chainer will automatically change the assertion subject.\n\nFor instance in `chai`, the method [`have.property(\"...\")`](http://chaijs.com/api/bdd/) will automatically change the subject.\n\nAdditionally in [`Chai-jQuery`](https://github.com/chaijs/chai-jquery#attrname-value), the methods: `attr`, `prop`, `css`, and `data` also change the subject.\n\nThis allows you to utilize other `chainer` methods such as `match` when making assertions about values.\n\n```javascript\n// in this example our subject changed to the string 'sans-serif' because\n// have.css(\"font-family\") returned a string instead of the <body> element\ncy\n  // subject is <body>\n  .get(\"body\")\n\n  // subject changes to the string return value of 'font-family'\n  .should(\"have.css\", \"font-family\")\n\n  // use match to assert the string matches a regular expression\n  .and(\"match\", /sans-serif/)\n```\n\n```javascript\n// in this example our subject changed to the string '/users' because\n// have.attr, href, /users returned a string instead of the <a> element\ncy\n  // subject is <a>\n  .get(\"a\")\n\n  // subject changes to the string 'users'\n  .should(\"have.attr\", \"href\", \"/users\")\n```\n\n***\n\n## How do I know which assertions change the subject and which keep it the same?\n\nThe chainers that come from [Chai](https://on.cypress.io/guides/bundled-tools#section-chai) or [Chai-jQuery](https://on.cypress.io/guides/bundled-tools#section-chai-jquery) will always document what they return.\n\nAlternatively, it is very easy to use Cypress itself to figure this out.\n\nYou can [read more about debugging assertions](https://on.cypress.io/guides/making-assertions#sections-debugging-assertions) here.\n\n***\n\n# Negating assertions\n\nEvery assertion can be chained with `.not` to assert the opposite behavior on a subject.\n\n**Negating Assertion Examples**\n\n```javascript\ncy.get(\"button.disabled\").should(\"be.disabled\")             // assertion\ncy.get(\"button.active\").should(\"not.be.disabled\")           // negating assertion\n\ncy.title().should(\"eq\", \"My Awesome App\")                   // assertion\ncy.title().should(\"not.eq\", \"My Not So Awesome App\")        // negating assertion\n\ncy.get(\"a\").should(\"have.attr\", \"popover\", \"Help\")          // assertion\ncy.get(\"a\").should(\"not.have.attr\", \"popover\", \"I'm lost\")  // negating assertion\n```\n\n***\n\n# Resolving Assertions\n\nKnowing when and how to resolve assertions is can be challenging, made even more difficult by modern JavaScript frameworks. Yet accurately resolving assertions is the key for preventing flaky and brittle tests.\n\nCypress's API is built to consistently pass or fail every time. As part of this strategy, Cypress will automatically look downstream at assertions and modify its behavior based on upcoming assertions.\n\nInternally, Cypress will retry commands which are associated to assertions, and will not continue until **all** assertions pass. Using assertions as guards enables you to specify conditions that must be resolved prior to moving on.\n\nWhat conditions should you specify? Anything that guarantees your app is in the correct state.\n\n**Here are some scenarios of using assertions as guards:**\n\n* Clicking an `<a>` then verifying the url is correct after you expect your server to redirect.\n* Focusing, then blurring on an `<input>` and expecting an error message with a specific class to be visible.\n* Clicking a `<button>` and waiting for a modal to animate in.\n* Typing into a `<form>` and verifying an element should not exist or not be visible.\n\nEvery command that comes before a [`cy.should`](https://on.cypress.io/api/should) will not resolve until **all** of its associated assertions pass. This enables you to accurately test the following situation:\n\n```html\n<!-- Our App Code -->\n<form>\n  <input name=\"name\" placeholder=\"What is your name?\" />\n  <span id=\"error\" style=\"display: none;\"></span>\n</form>\n```\n\n```javascript\n// Our App Code\nfunction waitRandomlyThen(fn){\n  setTimeout(fn, Math.random() * 3000)\n}\n\n$(\"form\").submit(function(e){\n  e.preventDefault()\n\n  waitRandomlyThen(function(){\n    $(\"#error\").show()\n  })\n\n  waitRandomlyThen(function(){\n    $(\"#error\").addClass(\"alert-danger\")\n  })\n\n  waitRandomlyThen(function(){\n    $(\"#error\").html(\"Your <strong>name</strong> is required.\")\n  })\n})\n```\n\nThe above app code could can be tested with the following assertions:\n\n```javascript\ncy\n  .get(\"form\").submit()\n  .get(\"#error\")\n    .should(\"be.visible\")\n    .and(\"have.class\", \"alert-danger\")\n    .and(\"contain\", \"Your name is required.\")\n```\n\nOur tests' code is insulated from flaky failures because it is not coupled to any specific timing mechanism. If you look closely, our application code is written in such a way that introduces random wait times - yet Cypress will pass 100% of the time, without any explicit `wait` calls. The moment all 3 of the assertions pass, Cypress will resolve.\n\n![assertions](https://cloud.githubusercontent.com/assets/1268976/10004440/b1c53294-607f-11e5-8d7d-3f5694a1fb1a.gif)\n\nIn modern JavaScript frameworks, and in many common web-based actions, there is usually an *indeterminate* amount of time between an action and a side effect such as:\n\n* Network Requests\n* Redirects\n* Form Submissions\n* AJAX Requests\n* Websockets\n* Page Navigation\n* setTimeout's\n* DOM Events\n\nCypress makes it easy to test and make assertions about all of these.\n\n***\n\n## Increasing timeouts\n\nYou have two ways of increasing the amount of time Cypress waits for assertions to pass.\n\n1. Change the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) globally\n2. Override the timeout option on a previous command before the assertion command.\n\nOverriding the timeout option on a specific command looks like this:\n\n```javascript\ncy\n  .find(\"input\", {timeout: 10000}) // <-- wait up to 10 seconds for this 'input' to be found\n    .should(\"have.value\", \"foo\")   // <-- and to have the value 'foo'\n    .and(\"have.class\", \"radio\")    // <-- and to have the class 'radio'\n\n  .parents(\"#foo\", {timeout: 2000}) // <--\n    .should(\"not.exist\")            // <-- wait up to 2 seconds for this element NOT to be found\n```\n\nIt's important to note that timeouts will automatically flow down to their cooresponding assertions.\n\n**In the example we wait up to a total of 10 seconds to:**\n\n1. find the `<input>`\n2. ensure it has a value of `foo`\n3. ensure it has a class of `radio`\n\n```javascript\ncy.find(\"input\", {timeout: 10000}).should(\"have.value\", \"foo\").and(\"have.class\", \"radio\")\n                         ↲\n      // adding the timeout here will automatically\n      // flow down to the assertions, and they will\n      // be retried for up to 10 seconds\n```\n\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"Assuming you have two assertions, if one passes, and one fails, Cypress will continue to retry until they **both** pass. If Cypress eventually times out you'll get a visual indicator in your Command Log to know which specific assertion failed.\"\n}\n[/block]\n","source":"guides/guides/making-assertions.md","raw":"title: making-assertions\n---\n\n# Writing an Assertion\n\nThere are two ways to write an assertion in Cypress.\n\n1. **Implicit Subjects:** Using [`cy.should`](https://on.cypress.io/api/should) or [`cy.and`](https://on.cypress.io/api/and)\n2. **Explicit Subjects:** Using `expect`\n\n***\n\n## Implicit Subjects with [`cy.should`](https://on.cypress.io/api/should) or [`cy.and`](https://on.cypress.io/api/and)\n\nUsing [`cy.should`](https://on.cypress.io/api/should) or [`cy.and`](https://on.cypress.io/api/and) commands is the preferred way of making an assertion in Cypress. The subject of the assertion is inferred from the subject of the last Cypress command, which is why this is called an **implicit subject**.\n\n```javascript\n// the implicit subject here is the first <tr>\n// this asserts that the <tr> has an .active class\ncy.get(\"tbody tr:first\").should(\"have.class\", \"active\")\n```\n\n![implicit_assertion_class_active](https://cloud.githubusercontent.com/assets/1271364/12554600/4cb4115c-c34b-11e5-891c-84ff176ea38f.jpg)\n\n***\n\n## Explicit Subjects with `expect`\n\nUsing `expect` allows you to pass in a specific subject and make an assertion on the specified subject.\n\nThese assertions are more commonly used when writing unit tests, but can also be used when writing integration tests. Cypress comes bundled with some existing tools that handle assertions such as:\n\n* [Chai](https://on.cypress.io/guides/bundled-tools#section-chai)\n* [Chai-jQuery](https://on.cypress.io/guides/bundled-tools#section-chai-jquery)\n* [Chai-Sinon](https://on.cypress.io/guides/bundled-tools#section-sinon-chai)\n\n```javascript\n// the explicit subject here is the boolean: true\nexpect(true).to.be.true\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Check out our example recipes for [unit testing](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/unit_test_application_code_spec.js) and [unit testing React components](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/unit_test_react_enzyme_spec.js)\",\n  \"title\": \"Unit Testing\"\n}\n[/block]\n\nExplicit assertions are great when you want to perform custom logic prior to making the assertion.\n\nThere is an [open issue](https://github.com/cypress-io/cypress/issues/101) for supporting `assert`.\n\n```javascript\ncy\n  .get(\"p\")\n  .should(function($p){\n    // return an array of texts from all of the p's\n    var texts = $p.map(function(i, el){\n      return cy.$(el).text()\n    })\n\n    // jquery map returns jquery object\n    // and .get() convert this to simple array\n    var texts = texts.get()\n\n    // array should have length of 3\n    expect(texts).to.have.length(3)\n\n    // set this specific subject\n    expect(texts).to.deep.eq([\n      \"Some text from first p\",\n      \"More text from second p\",\n      \"And even more text from third p\"\n    ])\n})\n```\n\n***\n\n# Available Assertions\n\nAn assertion is comprised of a subject, chainer methods, and an optional value.\n\n```javascript\nexpect({foo: \"bar\"}).to.have.property(\"foo\")\n           ↲              ↲            ↲\n        subject        chainers      value\n```\n\nThe following chainers are available for your use:\n\n- [Chai](#section-chai)\n- [Chai-jQuery](#section-chai-jquery)\n- [Chai-Sinon](#section-chai-sinon)\n\n***\n\n## Chai\n\n[Chai](http://chaijs.com/) chainers are available for assertions.\n\n| Chainable getters |\n| --- |\n| to |\n| be |\n| been |\n| is |\n| that |\n| which |\n| and |\n| has |\n| have |\n| with |\n| at |\n| of |\n| same |\n\n| Assertion | Example |\n| --- | --- |\n| not | `expect(foo).to.not.equal('bar')` |\n| deep | `expect(foo).to.deep.equal({ bar: 'baz' })` |\n| any | `expect(foo).to.have.any.keys('bar', 'baz')` |\n| all | `expect(foo).to.have.all.keys('bar', 'baz')` |\n| a( *type* ) | `expect('test').to.be.a('string')` |\n| an( *type* ) | `expect(undefined).to.be.an('undefined')` |\n| include( *value* )  | `expect([1,2,3]).to.include(2)` |\n| contain( *value* )  | `expect('foobar').to.contain('foo')` |\n| includes( *value* )  | `expect([1,2,3]).includes(2)` |\n| contains( *value* ) | `expect('foobar').contains('foo')` |\n| ok | `expect(undefined).to.not.be.ok` |\n| true | `expect(true).to.be.true` |\n| false | `expect(false).to.be.false` |\n| null | `expect(null).to.be.null` |\n| undefined | `expect(undefined).to.be.undefined` |\n| exist | `expect(foo).to.exist` |\n| empty | `expect([]).to.be.empty` |\n| arguments | `expect(arguments).to.be.arguments` |\n| equal( *value* )  | `expect(42).to.equal(42)` |\n| equals( *value* )  | `expect(42).equals(42)` |\n| eq( *value* )  | `expect(42).to.eq(42)` |\n| deep.equal( *value* ) | `expect({ foo: 'bar' }).to.deep.equal({ foo: 'bar' })` |\n| eql( *value* )  | `expect({ foo: 'bar' }).to.eql({ foo: 'bar' })` |\n| eqls( *value* )  | `expect([ 1, 2, 3 ]).eqls([ 1, 2, 3 ])` |\n| above( *value* )  | `expect(10).to.be.above(5)` |\n| gt( *value* )  | `expect(10).to.be.gt(5)` |\n| greaterThan( *value* ) | `expect(10).to.be.greaterThan(5)` |\n| least( *value* ) | `expect(10).to.be.at.least(10)` |\n| gte( *value* ) | `expect(10).to.be.gte(10)` |\n| below( *value* ) | `expect('foo').to.have.length.below(4)` |\n| lt( *value* )  | `expect(3).to.be.ls(4)` |\n| lessThan( *value* ) | `expect(5).to.be.lessThan(10)` |\n| most( *value* ) | `expect('foo').to.have.length.of.at.most(4)` |\n| lte( *value* ) | `expect(5).to.be.lte(5)` |\n| within( *start*, *finish* ) | `expect(7).to.be.within(5,10)` |\n| instanceof( *constructor* )| `expect([ 1, 2, 3 ]).to.be.instanceof(Array)` |\n| instanceOf( *constructor* ) | `expect([ 1, 2, 3 ]).to.be.instanceOf(Array)` |\n| property( *name*, *[value]* ) | `expect(obj).to.have.property('foo')` |\n| deep.property( *name*, *[value]* ) | `expect(deepObj).to.have.deep.property('teas[1]', 'matcha')` |\n| ownProperty( *name* )  | `expect('test').to.have.ownProperty('length')` |\n| haveOwnProperty( *name* ) | `expect('test').to.haveOwnProperty('length')` |\n| length( *value* )  | `expect('foo').to.have.length.above(2)` |\n| lengthOf( *value* ) | `expect('foo').to.have.lengthOf(3)` |\n| match( *regexp* ) | `expect('foobar').to.match(/^foo/)` |\n| string( *string* ) | `expect('foobar').to.have.string('bar')` |\n| keys( *key1*, *[key2]*, *[...]* ) | `expect({ foo: 1, bar: 2 }).to.have.key('foo')` |\n| key( *key1*, *[key2]*, *[...]* ) | `expect({ foo: 1, bar: 2 }).to.have.any.keys('foo')` |\n| throw( *constructor* ) | `expect(fn).to.throw(Error)` |\n| throws( *constructor* ) | `expect(fn).throws(ReferenceError, /bad function/)` |\n| respondTo( *method* ) | `expect(obj).to.respondTo('bar')` |\n| itself | `expect(Foo).itself.to.respondTo('bar')` |\n| satisfy( *method* ) | `expect(1).to.satisfy(function(num) { return num > 0; })` |\n| closeTo( *expected*, *delta*) | `expect(1.5).to.be.closeTo(1, 0.5)` |\n| members( *set* ) | `expect([1, 2, 3]).to.include.members([3, 2])` |\n| change( *function* )  | `expect(fn).to.change(obj, 'val')` |\n| changes( *function* ) | `expect(fn).changes(obj, 'val')` |\n| increase( *function* )  | `expect(fn).to.increase(obj, 'val')` |\n| increases( *function* ) | `expect(fn).increases(obj, 'val')` |\n| decrease( *function* )  | `expect(fn).to.decrease(obj, 'val')` |\n| decreases( *function* ) | `expect(fn).decreases(obj, 'val')` |\n\n***\n\n## Chai-jQuery\n\n[Chai-jQuery](https://github.com/chaijs/chai-jquery) chainers are available when asserting about a DOM object.\n\n| Chainers | Assertion |\n| --- | --- |\n| attr( *name*, *[value]*) | `expect($('body')).to.have.attr('foo', 'bar')` |\n| prop( *name*, *[value]*) | `expect($('body')).to.have.prop('disabled', false)` |\n| css( *name*, *[value]*) | `expect($('body')).to.have.css('background-color', 'rgb(0, 0, 0)')` |\n| data( *name*, *[value]*) | `expect($('body')).to.have.data('foo', 'bar')` |\n| class( *className* ) | `expect($('body')).to.have.class('foo')` |\n| id( *id* ) | `expect($('body')).to.have.id('foo')` |\n| html( *html*)  | `expect($('#title')).to.have.html('Chai Tea')` |\n| text( *text* ) | `expect($('#title')).to.have.text('Chai Tea')` |\n| value( *value* ) | `expect($('.year')).to.have.value('2012')` |\n| visible | `expect($('.year')).to.be.visible` |\n| hidden | `expect($('.year')).to.be.hidden` |\n| selected | `expect($('option')).not.to.be.selected` |\n| checked | `expect($('input')).not.to.be.checked` |\n| enabled | `expect($('enabled')).to.be.enabled` |\n| disabled | `expect($('input')).not.to.be.disabled` |\n| empty | `expect($('body')).not.to.be.empty` |\n| exist | `expect($('#nonexistent')).not.to.exist` |\n| match( *selector* ) | `expect($('#empty')).to.match(':empty')` |\n| contain( *text* ) | `expect($('#content')).to.contain('text')` |\n| descendents( *selector* ) | `expect($('#content')).to.have.descendants('div')` |\n\nYou will commonly use these chainers after using DOM commands like: [`cy.get`](https://on.cypress.io/api/get), [`cy.contains`](https://on.cypress.io/api/contains), etc.\n\n***\n\n## Chai-Sinon\n\nAll Sinon assertions are available in [Sinon–Chai](https://github.com/domenic/sinon-chai).\n\n| Sinon.JS property/method | Assertion |\n| -- | -- |\n| called |  `expect(spy).to.be.called` |\n| callCount | `expect(spy).to.have.callCount(n)` |\n| calledOnce |  `expect(spy).to.be.calledOnce` |\n| calledTwice | `expect(spy).to.be.calledTwice` |\n| calledThrice |  `expect(spy).to.be.calledThrice` |\n| calledBefore |  `expect(spy1).to.be.calledBefore(spy2)` |\n| calledAfter | `expect(spy1).to.be.calledAfter(spy2)` |\n| calledWithNew | `expect(spy).to.be.calledWithNew` |\n| alwaysCalledWithNew | `expect(spy).to.always.be.calledWithNew` |\n| calledOn |  `expect(spy).to.be.calledOn(context)` |\n| alwaysCalledOn |  `expect(spy).to.always.be.calledOn(context)` |\n| calledWith |  `expect(spy).to.be.calledWith(...args)` |\n| alwaysCalledWith |  `expect(spy).to.always.be.calledWith(...args)` |\n| calledWithExactly | `expect(spy).to.be.calledWithExactly(...args)` |\n| alwaysCalledWithExactly | `expect(spy).to.always.be.calledWithExactly(...args)` |\n| calledWithMatch | `expect(spy).to.be.calledWithMatch(...args)` |\n| alwaysCalledWithMatch | `expect(spy).to.always.be.calledWithMatch(...args)` |\n| returned |  `expect(spy).to.have.returned(returnVal)` |\n| alwaysReturned |  `expect(spy).to.have.always.returned(returnVal)` |\n| threw | `expect(spy).to.have.thrown(errorObjOrErrorTypeStringOrNothing)` |\n| alwaysThrew | `expect(spy).to.have.always.thrown(errorObjOrErrorTypeStringOrNothing)` |\n\n***\n\n# Using Chainers with Implicit Subjects\n\nWhen utilizing [`cy.should`](https://on.cypress.io/api/should) or [`cy.and`](https://on.cypress.io/api/should), instead of writing chainers as properties and methods, they are instead transformed into a string argument.\n\nIf we convert the previous example to use [`cy.should`](https://on.cypress.io/api/should), it would look like:\n\n```javascript\ncy.wrap({foo: \"bar\"}).should(\"have.property\", \"foo\")\n           ↲                      ↲            ↲\n        subject                chainers       value\n```\n\nThe chainers are shifted and become the first argument to [`cy.should`](https://on.cypress.io/api/should), with values simply being passed in as additional arguments.\n\n```javascript\n// we can additionally continue to chain and add\n// multiple assertions about our <button> subject\ncy.get(\"button\").should(\"have.class\", \"active\").and(\"be.visible\")\n          ↲                  ↲          ↲             ↲\n        subject           chainers     value         chainers\n```\n\nIf we converted the above example to use an explicit subject, this is what it would look like:\n\n```javascript\ncy.get(\"button\").should(function($button){\n  expect($button).to.have.class(\"active\")\n  expect($button).to.be.visible\n})\n```\n\nThis example above may be more familiar to you if you've written tests in JavaScript before.\n\nIf you look closely, you'll see that we've passed a callback function to the [`cy.should`](https://on.cypress.io/api/should) method. This allows us to write expectations inside of that callback function, yet still receive all of the wonderful benefits of [`cy.should`](https://on.cypress.io/api/should).\n\nRead about [resolving assertions](https://on.cypress.io/guides/making-assertions#section-resolving-assertions) below to learn how [`cy.should`](https://on.cypress.io/api/should) works under the hood.\n\n***\n\n## Assertions that change the subject\n\nSometimes using a specific chainer will automatically change the assertion subject.\n\nFor instance in `chai`, the method [`have.property(\"...\")`](http://chaijs.com/api/bdd/) will automatically change the subject.\n\nAdditionally in [`Chai-jQuery`](https://github.com/chaijs/chai-jquery#attrname-value), the methods: `attr`, `prop`, `css`, and `data` also change the subject.\n\nThis allows you to utilize other `chainer` methods such as `match` when making assertions about values.\n\n```javascript\n// in this example our subject changed to the string 'sans-serif' because\n// have.css(\"font-family\") returned a string instead of the <body> element\ncy\n  // subject is <body>\n  .get(\"body\")\n\n  // subject changes to the string return value of 'font-family'\n  .should(\"have.css\", \"font-family\")\n\n  // use match to assert the string matches a regular expression\n  .and(\"match\", /sans-serif/)\n```\n\n```javascript\n// in this example our subject changed to the string '/users' because\n// have.attr, href, /users returned a string instead of the <a> element\ncy\n  // subject is <a>\n  .get(\"a\")\n\n  // subject changes to the string 'users'\n  .should(\"have.attr\", \"href\", \"/users\")\n```\n\n***\n\n## How do I know which assertions change the subject and which keep it the same?\n\nThe chainers that come from [Chai](https://on.cypress.io/guides/bundled-tools#section-chai) or [Chai-jQuery](https://on.cypress.io/guides/bundled-tools#section-chai-jquery) will always document what they return.\n\nAlternatively, it is very easy to use Cypress itself to figure this out.\n\nYou can [read more about debugging assertions](https://on.cypress.io/guides/making-assertions#sections-debugging-assertions) here.\n\n***\n\n# Negating assertions\n\nEvery assertion can be chained with `.not` to assert the opposite behavior on a subject.\n\n**Negating Assertion Examples**\n\n```javascript\ncy.get(\"button.disabled\").should(\"be.disabled\")             // assertion\ncy.get(\"button.active\").should(\"not.be.disabled\")           // negating assertion\n\ncy.title().should(\"eq\", \"My Awesome App\")                   // assertion\ncy.title().should(\"not.eq\", \"My Not So Awesome App\")        // negating assertion\n\ncy.get(\"a\").should(\"have.attr\", \"popover\", \"Help\")          // assertion\ncy.get(\"a\").should(\"not.have.attr\", \"popover\", \"I'm lost\")  // negating assertion\n```\n\n***\n\n# Resolving Assertions\n\nKnowing when and how to resolve assertions is can be challenging, made even more difficult by modern JavaScript frameworks. Yet accurately resolving assertions is the key for preventing flaky and brittle tests.\n\nCypress's API is built to consistently pass or fail every time. As part of this strategy, Cypress will automatically look downstream at assertions and modify its behavior based on upcoming assertions.\n\nInternally, Cypress will retry commands which are associated to assertions, and will not continue until **all** assertions pass. Using assertions as guards enables you to specify conditions that must be resolved prior to moving on.\n\nWhat conditions should you specify? Anything that guarantees your app is in the correct state.\n\n**Here are some scenarios of using assertions as guards:**\n\n* Clicking an `<a>` then verifying the url is correct after you expect your server to redirect.\n* Focusing, then blurring on an `<input>` and expecting an error message with a specific class to be visible.\n* Clicking a `<button>` and waiting for a modal to animate in.\n* Typing into a `<form>` and verifying an element should not exist or not be visible.\n\nEvery command that comes before a [`cy.should`](https://on.cypress.io/api/should) will not resolve until **all** of its associated assertions pass. This enables you to accurately test the following situation:\n\n```html\n<!-- Our App Code -->\n<form>\n  <input name=\"name\" placeholder=\"What is your name?\" />\n  <span id=\"error\" style=\"display: none;\"></span>\n</form>\n```\n\n```javascript\n// Our App Code\nfunction waitRandomlyThen(fn){\n  setTimeout(fn, Math.random() * 3000)\n}\n\n$(\"form\").submit(function(e){\n  e.preventDefault()\n\n  waitRandomlyThen(function(){\n    $(\"#error\").show()\n  })\n\n  waitRandomlyThen(function(){\n    $(\"#error\").addClass(\"alert-danger\")\n  })\n\n  waitRandomlyThen(function(){\n    $(\"#error\").html(\"Your <strong>name</strong> is required.\")\n  })\n})\n```\n\nThe above app code could can be tested with the following assertions:\n\n```javascript\ncy\n  .get(\"form\").submit()\n  .get(\"#error\")\n    .should(\"be.visible\")\n    .and(\"have.class\", \"alert-danger\")\n    .and(\"contain\", \"Your name is required.\")\n```\n\nOur tests' code is insulated from flaky failures because it is not coupled to any specific timing mechanism. If you look closely, our application code is written in such a way that introduces random wait times - yet Cypress will pass 100% of the time, without any explicit `wait` calls. The moment all 3 of the assertions pass, Cypress will resolve.\n\n![assertions](https://cloud.githubusercontent.com/assets/1268976/10004440/b1c53294-607f-11e5-8d7d-3f5694a1fb1a.gif)\n\nIn modern JavaScript frameworks, and in many common web-based actions, there is usually an *indeterminate* amount of time between an action and a side effect such as:\n\n* Network Requests\n* Redirects\n* Form Submissions\n* AJAX Requests\n* Websockets\n* Page Navigation\n* setTimeout's\n* DOM Events\n\nCypress makes it easy to test and make assertions about all of these.\n\n***\n\n## Increasing timeouts\n\nYou have two ways of increasing the amount of time Cypress waits for assertions to pass.\n\n1. Change the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) globally\n2. Override the timeout option on a previous command before the assertion command.\n\nOverriding the timeout option on a specific command looks like this:\n\n```javascript\ncy\n  .find(\"input\", {timeout: 10000}) // <-- wait up to 10 seconds for this 'input' to be found\n    .should(\"have.value\", \"foo\")   // <-- and to have the value 'foo'\n    .and(\"have.class\", \"radio\")    // <-- and to have the class 'radio'\n\n  .parents(\"#foo\", {timeout: 2000}) // <--\n    .should(\"not.exist\")            // <-- wait up to 2 seconds for this element NOT to be found\n```\n\nIt's important to note that timeouts will automatically flow down to their cooresponding assertions.\n\n**In the example we wait up to a total of 10 seconds to:**\n\n1. find the `<input>`\n2. ensure it has a value of `foo`\n3. ensure it has a class of `radio`\n\n```javascript\ncy.find(\"input\", {timeout: 10000}).should(\"have.value\", \"foo\").and(\"have.class\", \"radio\")\n                         ↲\n      // adding the timeout here will automatically\n      // flow down to the assertions, and they will\n      // be retried for up to 10 seconds\n```\n\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"Assuming you have two assertions, if one passes, and one fails, Cypress will continue to retry until they **both** pass. If Cypress eventually times out you'll get a visual indicator in your Command Log to know which specific assertion failed.\"\n}\n[/block]\n","date":"2017-04-19T18:46:47.000Z","updated":"2017-04-19T18:46:47.000Z","path":"guides/guides/making-assertions.html","comments":1,"layout":"page","_id":"cj1pby1kr002x68g8gelra5nf","content":"<h1 id=\"Writing-an-Assertion\"><a href=\"#Writing-an-Assertion\" class=\"headerlink\" title=\"Writing an Assertion\"></a>Writing an Assertion</h1><p>There are two ways to write an assertion in Cypress.</p>\n<ol>\n<li><strong>Implicit Subjects:</strong> Using <a href=\"https://on.cypress.io/api/should\" target=\"_blank\" rel=\"external\"><code>cy.should</code></a> or <a href=\"https://on.cypress.io/api/and\" target=\"_blank\" rel=\"external\"><code>cy.and</code></a></li>\n<li><strong>Explicit Subjects:</strong> Using <code>expect</code></li>\n</ol>\n<hr>\n<h2 id=\"Implicit-Subjects-with-cy-should-or-cy-and\"><a href=\"#Implicit-Subjects-with-cy-should-or-cy-and\" class=\"headerlink\" title=\"Implicit Subjects with cy.should or cy.and\"></a>Implicit Subjects with <a href=\"https://on.cypress.io/api/should\" target=\"_blank\" rel=\"external\"><code>cy.should</code></a> or <a href=\"https://on.cypress.io/api/and\" target=\"_blank\" rel=\"external\"><code>cy.and</code></a></h2><p>Using <a href=\"https://on.cypress.io/api/should\" target=\"_blank\" rel=\"external\"><code>cy.should</code></a> or <a href=\"https://on.cypress.io/api/and\" target=\"_blank\" rel=\"external\"><code>cy.and</code></a> commands is the preferred way of making an assertion in Cypress. The subject of the assertion is inferred from the subject of the last Cypress command, which is why this is called an <strong>implicit subject</strong>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// the implicit subject here is the first &lt;tr&gt;</span></div><div class=\"line\"><span class=\"comment\">// this asserts that the &lt;tr&gt; has an .active class</span></div><div class=\"line\">cy.get(<span class=\"string\">\"tbody tr:first\"</span>).should(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"active\"</span>)</div></pre></td></tr></table></figure>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/12554600/4cb4115c-c34b-11e5-891c-84ff176ea38f.jpg\" alt=\"implicit_assertion_class_active\"></p>\n<hr>\n<h2 id=\"Explicit-Subjects-with-expect\"><a href=\"#Explicit-Subjects-with-expect\" class=\"headerlink\" title=\"Explicit Subjects with expect\"></a>Explicit Subjects with <code>expect</code></h2><p>Using <code>expect</code> allows you to pass in a specific subject and make an assertion on the specified subject.</p>\n<p>These assertions are more commonly used when writing unit tests, but can also be used when writing integration tests. Cypress comes bundled with some existing tools that handle assertions such as:</p>\n<ul>\n<li><a href=\"https://on.cypress.io/guides/bundled-tools#section-chai\" target=\"_blank\" rel=\"external\">Chai</a></li>\n<li><a href=\"https://on.cypress.io/guides/bundled-tools#section-chai-jquery\" target=\"_blank\" rel=\"external\">Chai-jQuery</a></li>\n<li><a href=\"https://on.cypress.io/guides/bundled-tools#section-sinon-chai\" target=\"_blank\" rel=\"external\">Chai-Sinon</a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// the explicit subject here is the boolean: true</span></div><div class=\"line\">expect(<span class=\"literal\">true</span>).to.be.true</div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “Check out our example recipes for <a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/unit_test_application_code_spec.js\" target=\"_blank\" rel=\"external\">unit testing</a> and <a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/unit_test_react_enzyme_spec.js\" target=\"_blank\" rel=\"external\">unit testing React components</a>“,<br>  “title”: “Unit Testing”<br>}<br>[/block]</p>\n<p>Explicit assertions are great when you want to perform custom logic prior to making the assertion.</p>\n<p>There is an <a href=\"https://github.com/cypress-io/cypress/issues/101\" target=\"_blank\" rel=\"external\">open issue</a> for supporting <code>assert</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"p\"</span>)</div><div class=\"line\">  .should(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$p</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// return an array of texts from all of the p's</span></div><div class=\"line\">    <span class=\"keyword\">var</span> texts = $p.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i, el</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> cy.$(el).text()</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// jquery map returns jquery object</span></div><div class=\"line\">    <span class=\"comment\">// and .get() convert this to simple array</span></div><div class=\"line\">    <span class=\"keyword\">var</span> texts = texts.get()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// array should have length of 3</span></div><div class=\"line\">    expect(texts).to.have.length(<span class=\"number\">3</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// set this specific subject</span></div><div class=\"line\">    expect(texts).to.deep.eq([</div><div class=\"line\">      <span class=\"string\">\"Some text from first p\"</span>,</div><div class=\"line\">      <span class=\"string\">\"More text from second p\"</span>,</div><div class=\"line\">      <span class=\"string\">\"And even more text from third p\"</span></div><div class=\"line\">    ])</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Available-Assertions\"><a href=\"#Available-Assertions\" class=\"headerlink\" title=\"Available Assertions\"></a>Available Assertions</h1><p>An assertion is comprised of a subject, chainer methods, and an optional value.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">expect(&#123;<span class=\"attr\">foo</span>: <span class=\"string\">\"bar\"</span>&#125;).to.have.property(<span class=\"string\">\"foo\"</span>)</div><div class=\"line\">           ↲              ↲            ↲</div><div class=\"line\">        subject        chainers      value</div></pre></td></tr></table></figure>\n<p>The following chainers are available for your use:</p>\n<ul>\n<li><a href=\"#section-chai\">Chai</a></li>\n<li><a href=\"#section-chai-jquery\">Chai-jQuery</a></li>\n<li><a href=\"#section-chai-sinon\">Chai-Sinon</a></li>\n</ul>\n<hr>\n<h2 id=\"Chai\"><a href=\"#Chai\" class=\"headerlink\" title=\"Chai\"></a>Chai</h2><p><a href=\"http://chaijs.com/\" target=\"_blank\" rel=\"external\">Chai</a> chainers are available for assertions.</p>\n<table>\n<thead>\n<tr>\n<th>Chainable getters</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>to</td>\n</tr>\n<tr>\n<td>be</td>\n</tr>\n<tr>\n<td>been</td>\n</tr>\n<tr>\n<td>is</td>\n</tr>\n<tr>\n<td>that</td>\n</tr>\n<tr>\n<td>which</td>\n</tr>\n<tr>\n<td>and</td>\n</tr>\n<tr>\n<td>has</td>\n</tr>\n<tr>\n<td>have</td>\n</tr>\n<tr>\n<td>with</td>\n</tr>\n<tr>\n<td>at</td>\n</tr>\n<tr>\n<td>of</td>\n</tr>\n<tr>\n<td>same</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Assertion</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>not</td>\n<td><code>expect(foo).to.not.equal(&#39;bar&#39;)</code></td>\n</tr>\n<tr>\n<td>deep</td>\n<td><code>expect(foo).to.deep.equal({ bar: &#39;baz&#39; })</code></td>\n</tr>\n<tr>\n<td>any</td>\n<td><code>expect(foo).to.have.any.keys(&#39;bar&#39;, &#39;baz&#39;)</code></td>\n</tr>\n<tr>\n<td>all</td>\n<td><code>expect(foo).to.have.all.keys(&#39;bar&#39;, &#39;baz&#39;)</code></td>\n</tr>\n<tr>\n<td>a( <em>type</em> )</td>\n<td><code>expect(&#39;test&#39;).to.be.a(&#39;string&#39;)</code></td>\n</tr>\n<tr>\n<td>an( <em>type</em> )</td>\n<td><code>expect(undefined).to.be.an(&#39;undefined&#39;)</code></td>\n</tr>\n<tr>\n<td>include( <em>value</em> )</td>\n<td><code>expect([1,2,3]).to.include(2)</code></td>\n</tr>\n<tr>\n<td>contain( <em>value</em> )</td>\n<td><code>expect(&#39;foobar&#39;).to.contain(&#39;foo&#39;)</code></td>\n</tr>\n<tr>\n<td>includes( <em>value</em> )</td>\n<td><code>expect([1,2,3]).includes(2)</code></td>\n</tr>\n<tr>\n<td>contains( <em>value</em> )</td>\n<td><code>expect(&#39;foobar&#39;).contains(&#39;foo&#39;)</code></td>\n</tr>\n<tr>\n<td>ok</td>\n<td><code>expect(undefined).to.not.be.ok</code></td>\n</tr>\n<tr>\n<td>true</td>\n<td><code>expect(true).to.be.true</code></td>\n</tr>\n<tr>\n<td>false</td>\n<td><code>expect(false).to.be.false</code></td>\n</tr>\n<tr>\n<td>null</td>\n<td><code>expect(null).to.be.null</code></td>\n</tr>\n<tr>\n<td>undefined</td>\n<td><code>expect(undefined).to.be.undefined</code></td>\n</tr>\n<tr>\n<td>exist</td>\n<td><code>expect(foo).to.exist</code></td>\n</tr>\n<tr>\n<td>empty</td>\n<td><code>expect([]).to.be.empty</code></td>\n</tr>\n<tr>\n<td>arguments</td>\n<td><code>expect(arguments).to.be.arguments</code></td>\n</tr>\n<tr>\n<td>equal( <em>value</em> )</td>\n<td><code>expect(42).to.equal(42)</code></td>\n</tr>\n<tr>\n<td>equals( <em>value</em> )</td>\n<td><code>expect(42).equals(42)</code></td>\n</tr>\n<tr>\n<td>eq( <em>value</em> )</td>\n<td><code>expect(42).to.eq(42)</code></td>\n</tr>\n<tr>\n<td>deep.equal( <em>value</em> )</td>\n<td><code>expect({ foo: &#39;bar&#39; }).to.deep.equal({ foo: &#39;bar&#39; })</code></td>\n</tr>\n<tr>\n<td>eql( <em>value</em> )</td>\n<td><code>expect({ foo: &#39;bar&#39; }).to.eql({ foo: &#39;bar&#39; })</code></td>\n</tr>\n<tr>\n<td>eqls( <em>value</em> )</td>\n<td><code>expect([ 1, 2, 3 ]).eqls([ 1, 2, 3 ])</code></td>\n</tr>\n<tr>\n<td>above( <em>value</em> )</td>\n<td><code>expect(10).to.be.above(5)</code></td>\n</tr>\n<tr>\n<td>gt( <em>value</em> )</td>\n<td><code>expect(10).to.be.gt(5)</code></td>\n</tr>\n<tr>\n<td>greaterThan( <em>value</em> )</td>\n<td><code>expect(10).to.be.greaterThan(5)</code></td>\n</tr>\n<tr>\n<td>least( <em>value</em> )</td>\n<td><code>expect(10).to.be.at.least(10)</code></td>\n</tr>\n<tr>\n<td>gte( <em>value</em> )</td>\n<td><code>expect(10).to.be.gte(10)</code></td>\n</tr>\n<tr>\n<td>below( <em>value</em> )</td>\n<td><code>expect(&#39;foo&#39;).to.have.length.below(4)</code></td>\n</tr>\n<tr>\n<td>lt( <em>value</em> )</td>\n<td><code>expect(3).to.be.ls(4)</code></td>\n</tr>\n<tr>\n<td>lessThan( <em>value</em> )</td>\n<td><code>expect(5).to.be.lessThan(10)</code></td>\n</tr>\n<tr>\n<td>most( <em>value</em> )</td>\n<td><code>expect(&#39;foo&#39;).to.have.length.of.at.most(4)</code></td>\n</tr>\n<tr>\n<td>lte( <em>value</em> )</td>\n<td><code>expect(5).to.be.lte(5)</code></td>\n</tr>\n<tr>\n<td>within( <em>start</em>, <em>finish</em> )</td>\n<td><code>expect(7).to.be.within(5,10)</code></td>\n</tr>\n<tr>\n<td>instanceof( <em>constructor</em> )</td>\n<td><code>expect([ 1, 2, 3 ]).to.be.instanceof(Array)</code></td>\n</tr>\n<tr>\n<td>instanceOf( <em>constructor</em> )</td>\n<td><code>expect([ 1, 2, 3 ]).to.be.instanceOf(Array)</code></td>\n</tr>\n<tr>\n<td>property( <em>name</em>, <em>[value]</em> )</td>\n<td><code>expect(obj).to.have.property(&#39;foo&#39;)</code></td>\n</tr>\n<tr>\n<td>deep.property( <em>name</em>, <em>[value]</em> )</td>\n<td><code>expect(deepObj).to.have.deep.property(&#39;teas[1]&#39;, &#39;matcha&#39;)</code></td>\n</tr>\n<tr>\n<td>ownProperty( <em>name</em> )</td>\n<td><code>expect(&#39;test&#39;).to.have.ownProperty(&#39;length&#39;)</code></td>\n</tr>\n<tr>\n<td>haveOwnProperty( <em>name</em> )</td>\n<td><code>expect(&#39;test&#39;).to.haveOwnProperty(&#39;length&#39;)</code></td>\n</tr>\n<tr>\n<td>length( <em>value</em> )</td>\n<td><code>expect(&#39;foo&#39;).to.have.length.above(2)</code></td>\n</tr>\n<tr>\n<td>lengthOf( <em>value</em> )</td>\n<td><code>expect(&#39;foo&#39;).to.have.lengthOf(3)</code></td>\n</tr>\n<tr>\n<td>match( <em>regexp</em> )</td>\n<td><code>expect(&#39;foobar&#39;).to.match(/^foo/)</code></td>\n</tr>\n<tr>\n<td>string( <em>string</em> )</td>\n<td><code>expect(&#39;foobar&#39;).to.have.string(&#39;bar&#39;)</code></td>\n</tr>\n<tr>\n<td>keys( <em>key1</em>, <em>[key2]</em>, <em>[…]</em> )</td>\n<td><code>expect({ foo: 1, bar: 2 }).to.have.key(&#39;foo&#39;)</code></td>\n</tr>\n<tr>\n<td>key( <em>key1</em>, <em>[key2]</em>, <em>[…]</em> )</td>\n<td><code>expect({ foo: 1, bar: 2 }).to.have.any.keys(&#39;foo&#39;)</code></td>\n</tr>\n<tr>\n<td>throw( <em>constructor</em> )</td>\n<td><code>expect(fn).to.throw(Error)</code></td>\n</tr>\n<tr>\n<td>throws( <em>constructor</em> )</td>\n<td><code>expect(fn).throws(ReferenceError, /bad function/)</code></td>\n</tr>\n<tr>\n<td>respondTo( <em>method</em> )</td>\n<td><code>expect(obj).to.respondTo(&#39;bar&#39;)</code></td>\n</tr>\n<tr>\n<td>itself</td>\n<td><code>expect(Foo).itself.to.respondTo(&#39;bar&#39;)</code></td>\n</tr>\n<tr>\n<td>satisfy( <em>method</em> )</td>\n<td><code>expect(1).to.satisfy(function(num) { return num &gt; 0; })</code></td>\n</tr>\n<tr>\n<td>closeTo( <em>expected</em>, <em>delta</em>)</td>\n<td><code>expect(1.5).to.be.closeTo(1, 0.5)</code></td>\n</tr>\n<tr>\n<td>members( <em>set</em> )</td>\n<td><code>expect([1, 2, 3]).to.include.members([3, 2])</code></td>\n</tr>\n<tr>\n<td>change( <em>function</em> )</td>\n<td><code>expect(fn).to.change(obj, &#39;val&#39;)</code></td>\n</tr>\n<tr>\n<td>changes( <em>function</em> )</td>\n<td><code>expect(fn).changes(obj, &#39;val&#39;)</code></td>\n</tr>\n<tr>\n<td>increase( <em>function</em> )</td>\n<td><code>expect(fn).to.increase(obj, &#39;val&#39;)</code></td>\n</tr>\n<tr>\n<td>increases( <em>function</em> )</td>\n<td><code>expect(fn).increases(obj, &#39;val&#39;)</code></td>\n</tr>\n<tr>\n<td>decrease( <em>function</em> )</td>\n<td><code>expect(fn).to.decrease(obj, &#39;val&#39;)</code></td>\n</tr>\n<tr>\n<td>decreases( <em>function</em> )</td>\n<td><code>expect(fn).decreases(obj, &#39;val&#39;)</code></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"Chai-jQuery\"><a href=\"#Chai-jQuery\" class=\"headerlink\" title=\"Chai-jQuery\"></a>Chai-jQuery</h2><p><a href=\"https://github.com/chaijs/chai-jquery\" target=\"_blank\" rel=\"external\">Chai-jQuery</a> chainers are available when asserting about a DOM object.</p>\n<table>\n<thead>\n<tr>\n<th>Chainers</th>\n<th>Assertion</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>attr( <em>name</em>, <em>[value]</em>)</td>\n<td><code>expect($(&#39;body&#39;)).to.have.attr(&#39;foo&#39;, &#39;bar&#39;)</code></td>\n</tr>\n<tr>\n<td>prop( <em>name</em>, <em>[value]</em>)</td>\n<td><code>expect($(&#39;body&#39;)).to.have.prop(&#39;disabled&#39;, false)</code></td>\n</tr>\n<tr>\n<td>css( <em>name</em>, <em>[value]</em>)</td>\n<td><code>expect($(&#39;body&#39;)).to.have.css(&#39;background-color&#39;, &#39;rgb(0, 0, 0)&#39;)</code></td>\n</tr>\n<tr>\n<td>data( <em>name</em>, <em>[value]</em>)</td>\n<td><code>expect($(&#39;body&#39;)).to.have.data(&#39;foo&#39;, &#39;bar&#39;)</code></td>\n</tr>\n<tr>\n<td>class( <em>className</em> )</td>\n<td><code>expect($(&#39;body&#39;)).to.have.class(&#39;foo&#39;)</code></td>\n</tr>\n<tr>\n<td>id( <em>id</em> )</td>\n<td><code>expect($(&#39;body&#39;)).to.have.id(&#39;foo&#39;)</code></td>\n</tr>\n<tr>\n<td>html( <em>html</em>)</td>\n<td><code>expect($(&#39;#title&#39;)).to.have.html(&#39;Chai Tea&#39;)</code></td>\n</tr>\n<tr>\n<td>text( <em>text</em> )</td>\n<td><code>expect($(&#39;#title&#39;)).to.have.text(&#39;Chai Tea&#39;)</code></td>\n</tr>\n<tr>\n<td>value( <em>value</em> )</td>\n<td><code>expect($(&#39;.year&#39;)).to.have.value(&#39;2012&#39;)</code></td>\n</tr>\n<tr>\n<td>visible</td>\n<td><code>expect($(&#39;.year&#39;)).to.be.visible</code></td>\n</tr>\n<tr>\n<td>hidden</td>\n<td><code>expect($(&#39;.year&#39;)).to.be.hidden</code></td>\n</tr>\n<tr>\n<td>selected</td>\n<td><code>expect($(&#39;option&#39;)).not.to.be.selected</code></td>\n</tr>\n<tr>\n<td>checked</td>\n<td><code>expect($(&#39;input&#39;)).not.to.be.checked</code></td>\n</tr>\n<tr>\n<td>enabled</td>\n<td><code>expect($(&#39;enabled&#39;)).to.be.enabled</code></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td><code>expect($(&#39;input&#39;)).not.to.be.disabled</code></td>\n</tr>\n<tr>\n<td>empty</td>\n<td><code>expect($(&#39;body&#39;)).not.to.be.empty</code></td>\n</tr>\n<tr>\n<td>exist</td>\n<td><code>expect($(&#39;#nonexistent&#39;)).not.to.exist</code></td>\n</tr>\n<tr>\n<td>match( <em>selector</em> )</td>\n<td><code>expect($(&#39;#empty&#39;)).to.match(&#39;:empty&#39;)</code></td>\n</tr>\n<tr>\n<td>contain( <em>text</em> )</td>\n<td><code>expect($(&#39;#content&#39;)).to.contain(&#39;text&#39;)</code></td>\n</tr>\n<tr>\n<td>descendents( <em>selector</em> )</td>\n<td><code>expect($(&#39;#content&#39;)).to.have.descendants(&#39;div&#39;)</code></td>\n</tr>\n</tbody>\n</table>\n<p>You will commonly use these chainers after using DOM commands like: <a href=\"https://on.cypress.io/api/get\" target=\"_blank\" rel=\"external\"><code>cy.get</code></a>, <a href=\"https://on.cypress.io/api/contains\" target=\"_blank\" rel=\"external\"><code>cy.contains</code></a>, etc.</p>\n<hr>\n<h2 id=\"Chai-Sinon\"><a href=\"#Chai-Sinon\" class=\"headerlink\" title=\"Chai-Sinon\"></a>Chai-Sinon</h2><p>All Sinon assertions are available in <a href=\"https://github.com/domenic/sinon-chai\" target=\"_blank\" rel=\"external\">Sinon–Chai</a>.</p>\n<table>\n<thead>\n<tr>\n<th>Sinon.JS property/method</th>\n<th>Assertion</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>called</td>\n<td><code>expect(spy).to.be.called</code></td>\n</tr>\n<tr>\n<td>callCount</td>\n<td><code>expect(spy).to.have.callCount(n)</code></td>\n</tr>\n<tr>\n<td>calledOnce</td>\n<td><code>expect(spy).to.be.calledOnce</code></td>\n</tr>\n<tr>\n<td>calledTwice</td>\n<td><code>expect(spy).to.be.calledTwice</code></td>\n</tr>\n<tr>\n<td>calledThrice</td>\n<td><code>expect(spy).to.be.calledThrice</code></td>\n</tr>\n<tr>\n<td>calledBefore</td>\n<td><code>expect(spy1).to.be.calledBefore(spy2)</code></td>\n</tr>\n<tr>\n<td>calledAfter</td>\n<td><code>expect(spy1).to.be.calledAfter(spy2)</code></td>\n</tr>\n<tr>\n<td>calledWithNew</td>\n<td><code>expect(spy).to.be.calledWithNew</code></td>\n</tr>\n<tr>\n<td>alwaysCalledWithNew</td>\n<td><code>expect(spy).to.always.be.calledWithNew</code></td>\n</tr>\n<tr>\n<td>calledOn</td>\n<td><code>expect(spy).to.be.calledOn(context)</code></td>\n</tr>\n<tr>\n<td>alwaysCalledOn</td>\n<td><code>expect(spy).to.always.be.calledOn(context)</code></td>\n</tr>\n<tr>\n<td>calledWith</td>\n<td><code>expect(spy).to.be.calledWith(...args)</code></td>\n</tr>\n<tr>\n<td>alwaysCalledWith</td>\n<td><code>expect(spy).to.always.be.calledWith(...args)</code></td>\n</tr>\n<tr>\n<td>calledWithExactly</td>\n<td><code>expect(spy).to.be.calledWithExactly(...args)</code></td>\n</tr>\n<tr>\n<td>alwaysCalledWithExactly</td>\n<td><code>expect(spy).to.always.be.calledWithExactly(...args)</code></td>\n</tr>\n<tr>\n<td>calledWithMatch</td>\n<td><code>expect(spy).to.be.calledWithMatch(...args)</code></td>\n</tr>\n<tr>\n<td>alwaysCalledWithMatch</td>\n<td><code>expect(spy).to.always.be.calledWithMatch(...args)</code></td>\n</tr>\n<tr>\n<td>returned</td>\n<td><code>expect(spy).to.have.returned(returnVal)</code></td>\n</tr>\n<tr>\n<td>alwaysReturned</td>\n<td><code>expect(spy).to.have.always.returned(returnVal)</code></td>\n</tr>\n<tr>\n<td>threw</td>\n<td><code>expect(spy).to.have.thrown(errorObjOrErrorTypeStringOrNothing)</code></td>\n</tr>\n<tr>\n<td>alwaysThrew</td>\n<td><code>expect(spy).to.have.always.thrown(errorObjOrErrorTypeStringOrNothing)</code></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Using-Chainers-with-Implicit-Subjects\"><a href=\"#Using-Chainers-with-Implicit-Subjects\" class=\"headerlink\" title=\"Using Chainers with Implicit Subjects\"></a>Using Chainers with Implicit Subjects</h1><p>When utilizing <a href=\"https://on.cypress.io/api/should\" target=\"_blank\" rel=\"external\"><code>cy.should</code></a> or <a href=\"https://on.cypress.io/api/should\" target=\"_blank\" rel=\"external\"><code>cy.and</code></a>, instead of writing chainers as properties and methods, they are instead transformed into a string argument.</p>\n<p>If we convert the previous example to use <a href=\"https://on.cypress.io/api/should\" target=\"_blank\" rel=\"external\"><code>cy.should</code></a>, it would look like:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.wrap(&#123;<span class=\"attr\">foo</span>: <span class=\"string\">\"bar\"</span>&#125;).should(<span class=\"string\">\"have.property\"</span>, <span class=\"string\">\"foo\"</span>)</div><div class=\"line\">           ↲                      ↲            ↲</div><div class=\"line\">        subject                chainers       value</div></pre></td></tr></table></figure>\n<p>The chainers are shifted and become the first argument to <a href=\"https://on.cypress.io/api/should\" target=\"_blank\" rel=\"external\"><code>cy.should</code></a>, with values simply being passed in as additional arguments.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// we can additionally continue to chain and add</span></div><div class=\"line\"><span class=\"comment\">// multiple assertions about our &lt;button&gt; subject</span></div><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).should(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"active\"</span>).and(<span class=\"string\">\"be.visible\"</span>)</div><div class=\"line\">          ↲                  ↲          ↲             ↲</div><div class=\"line\">        subject           chainers     value         chainers</div></pre></td></tr></table></figure>\n<p>If we converted the above example to use an explicit subject, this is what it would look like:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).should(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$button</span>)</span>&#123;</div><div class=\"line\">  expect($button).to.have.class(<span class=\"string\">\"active\"</span>)</div><div class=\"line\">  expect($button).to.be.visible</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>This example above may be more familiar to you if you’ve written tests in JavaScript before.</p>\n<p>If you look closely, you’ll see that we’ve passed a callback function to the <a href=\"https://on.cypress.io/api/should\" target=\"_blank\" rel=\"external\"><code>cy.should</code></a> method. This allows us to write expectations inside of that callback function, yet still receive all of the wonderful benefits of <a href=\"https://on.cypress.io/api/should\" target=\"_blank\" rel=\"external\"><code>cy.should</code></a>.</p>\n<p>Read about <a href=\"https://on.cypress.io/guides/making-assertions#section-resolving-assertions\" target=\"_blank\" rel=\"external\">resolving assertions</a> below to learn how <a href=\"https://on.cypress.io/api/should\" target=\"_blank\" rel=\"external\"><code>cy.should</code></a> works under the hood.</p>\n<hr>\n<h2 id=\"Assertions-that-change-the-subject\"><a href=\"#Assertions-that-change-the-subject\" class=\"headerlink\" title=\"Assertions that change the subject\"></a>Assertions that change the subject</h2><p>Sometimes using a specific chainer will automatically change the assertion subject.</p>\n<p>For instance in <code>chai</code>, the method <a href=\"http://chaijs.com/api/bdd/\" target=\"_blank\" rel=\"external\"><code>have.property(&quot;...&quot;)</code></a> will automatically change the subject.</p>\n<p>Additionally in <a href=\"https://github.com/chaijs/chai-jquery#attrname-value\" target=\"_blank\" rel=\"external\"><code>Chai-jQuery</code></a>, the methods: <code>attr</code>, <code>prop</code>, <code>css</code>, and <code>data</code> also change the subject.</p>\n<p>This allows you to utilize other <code>chainer</code> methods such as <code>match</code> when making assertions about values.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in this example our subject changed to the string 'sans-serif' because</span></div><div class=\"line\"><span class=\"comment\">// have.css(\"font-family\") returned a string instead of the &lt;body&gt; element</span></div><div class=\"line\">cy</div><div class=\"line\">  <span class=\"comment\">// subject is &lt;body&gt;</span></div><div class=\"line\">  .get(<span class=\"string\">\"body\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// subject changes to the string return value of 'font-family'</span></div><div class=\"line\">  .should(<span class=\"string\">\"have.css\"</span>, <span class=\"string\">\"font-family\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// use match to assert the string matches a regular expression</span></div><div class=\"line\">  .and(<span class=\"string\">\"match\"</span>, /sans-serif/)</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in this example our subject changed to the string '/users' because</span></div><div class=\"line\"><span class=\"comment\">// have.attr, href, /users returned a string instead of the &lt;a&gt; element</span></div><div class=\"line\">cy</div><div class=\"line\">  <span class=\"comment\">// subject is &lt;a&gt;</span></div><div class=\"line\">  .get(<span class=\"string\">\"a\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// subject changes to the string 'users'</span></div><div class=\"line\">  .should(<span class=\"string\">\"have.attr\"</span>, <span class=\"string\">\"href\"</span>, <span class=\"string\">\"/users\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"How-do-I-know-which-assertions-change-the-subject-and-which-keep-it-the-same\"><a href=\"#How-do-I-know-which-assertions-change-the-subject-and-which-keep-it-the-same\" class=\"headerlink\" title=\"How do I know which assertions change the subject and which keep it the same?\"></a>How do I know which assertions change the subject and which keep it the same?</h2><p>The chainers that come from <a href=\"https://on.cypress.io/guides/bundled-tools#section-chai\" target=\"_blank\" rel=\"external\">Chai</a> or <a href=\"https://on.cypress.io/guides/bundled-tools#section-chai-jquery\" target=\"_blank\" rel=\"external\">Chai-jQuery</a> will always document what they return.</p>\n<p>Alternatively, it is very easy to use Cypress itself to figure this out.</p>\n<p>You can <a href=\"https://on.cypress.io/guides/making-assertions#sections-debugging-assertions\" target=\"_blank\" rel=\"external\">read more about debugging assertions</a> here.</p>\n<hr>\n<h1 id=\"Negating-assertions\"><a href=\"#Negating-assertions\" class=\"headerlink\" title=\"Negating assertions\"></a>Negating assertions</h1><p>Every assertion can be chained with <code>.not</code> to assert the opposite behavior on a subject.</p>\n<p><strong>Negating Assertion Examples</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"button.disabled\"</span>).should(<span class=\"string\">\"be.disabled\"</span>)             <span class=\"comment\">// assertion</span></div><div class=\"line\">cy.get(<span class=\"string\">\"button.active\"</span>).should(<span class=\"string\">\"not.be.disabled\"</span>)           <span class=\"comment\">// negating assertion</span></div><div class=\"line\"></div><div class=\"line\">cy.title().should(<span class=\"string\">\"eq\"</span>, <span class=\"string\">\"My Awesome App\"</span>)                   <span class=\"comment\">// assertion</span></div><div class=\"line\">cy.title().should(<span class=\"string\">\"not.eq\"</span>, <span class=\"string\">\"My Not So Awesome App\"</span>)        <span class=\"comment\">// negating assertion</span></div><div class=\"line\"></div><div class=\"line\">cy.get(<span class=\"string\">\"a\"</span>).should(<span class=\"string\">\"have.attr\"</span>, <span class=\"string\">\"popover\"</span>, <span class=\"string\">\"Help\"</span>)          <span class=\"comment\">// assertion</span></div><div class=\"line\">cy.get(<span class=\"string\">\"a\"</span>).should(<span class=\"string\">\"not.have.attr\"</span>, <span class=\"string\">\"popover\"</span>, <span class=\"string\">\"I'm lost\"</span>)  <span class=\"comment\">// negating assertion</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Resolving-Assertions\"><a href=\"#Resolving-Assertions\" class=\"headerlink\" title=\"Resolving Assertions\"></a>Resolving Assertions</h1><p>Knowing when and how to resolve assertions is can be challenging, made even more difficult by modern JavaScript frameworks. Yet accurately resolving assertions is the key for preventing flaky and brittle tests.</p>\n<p>Cypress’s API is built to consistently pass or fail every time. As part of this strategy, Cypress will automatically look downstream at assertions and modify its behavior based on upcoming assertions.</p>\n<p>Internally, Cypress will retry commands which are associated to assertions, and will not continue until <strong>all</strong> assertions pass. Using assertions as guards enables you to specify conditions that must be resolved prior to moving on.</p>\n<p>What conditions should you specify? Anything that guarantees your app is in the correct state.</p>\n<p><strong>Here are some scenarios of using assertions as guards:</strong></p>\n<ul>\n<li>Clicking an <code>&lt;a&gt;</code> then verifying the url is correct after you expect your server to redirect.</li>\n<li>Focusing, then blurring on an <code>&lt;input&gt;</code> and expecting an error message with a specific class to be visible.</li>\n<li>Clicking a <code>&lt;button&gt;</code> and waiting for a modal to animate in.</li>\n<li>Typing into a <code>&lt;form&gt;</code> and verifying an element should not exist or not be visible.</li>\n</ul>\n<p>Every command that comes before a <a href=\"https://on.cypress.io/api/should\" target=\"_blank\" rel=\"external\"><code>cy.should</code></a> will not resolve until <strong>all</strong> of its associated assertions pass. This enables you to accurately test the following situation:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- Our App Code --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"What is your name?\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"error\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display: none;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Our App Code</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">waitRandomlyThen</span>(<span class=\"params\">fn</span>)</span>&#123;</div><div class=\"line\">  setTimeout(fn, <span class=\"built_in\">Math</span>.random() * <span class=\"number\">3000</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"form\"</span>).submit(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</div><div class=\"line\">  e.preventDefault()</div><div class=\"line\"></div><div class=\"line\">  waitRandomlyThen(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">\"#error\"</span>).show()</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  waitRandomlyThen(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">\"#error\"</span>).addClass(<span class=\"string\">\"alert-danger\"</span>)</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  waitRandomlyThen(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">\"#error\"</span>).html(<span class=\"string\">\"Your &lt;strong&gt;name&lt;/strong&gt; is required.\"</span>)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>The above app code could can be tested with the following assertions:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"form\"</span>).submit()</div><div class=\"line\">  .get(<span class=\"string\">\"#error\"</span>)</div><div class=\"line\">    .should(<span class=\"string\">\"be.visible\"</span>)</div><div class=\"line\">    .and(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"alert-danger\"</span>)</div><div class=\"line\">    .and(<span class=\"string\">\"contain\"</span>, <span class=\"string\">\"Your name is required.\"</span>)</div></pre></td></tr></table></figure>\n<p>Our tests’ code is insulated from flaky failures because it is not coupled to any specific timing mechanism. If you look closely, our application code is written in such a way that introduces random wait times - yet Cypress will pass 100% of the time, without any explicit <code>wait</code> calls. The moment all 3 of the assertions pass, Cypress will resolve.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/10004440/b1c53294-607f-11e5-8d7d-3f5694a1fb1a.gif\" alt=\"assertions\"></p>\n<p>In modern JavaScript frameworks, and in many common web-based actions, there is usually an <em>indeterminate</em> amount of time between an action and a side effect such as:</p>\n<ul>\n<li>Network Requests</li>\n<li>Redirects</li>\n<li>Form Submissions</li>\n<li>AJAX Requests</li>\n<li>Websockets</li>\n<li>Page Navigation</li>\n<li>setTimeout’s</li>\n<li>DOM Events</li>\n</ul>\n<p>Cypress makes it easy to test and make assertions about all of these.</p>\n<hr>\n<h2 id=\"Increasing-timeouts\"><a href=\"#Increasing-timeouts\" class=\"headerlink\" title=\"Increasing timeouts\"></a>Increasing timeouts</h2><p>You have two ways of increasing the amount of time Cypress waits for assertions to pass.</p>\n<ol>\n<li>Change the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a> globally</li>\n<li>Override the timeout option on a previous command before the assertion command.</li>\n</ol>\n<p>Overriding the timeout option on a specific command looks like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .find(<span class=\"string\">\"input\"</span>, &#123;<span class=\"attr\">timeout</span>: <span class=\"number\">10000</span>&#125;) <span class=\"comment\">// &lt;-- wait up to 10 seconds for this 'input' to be found</span></div><div class=\"line\">    .should(<span class=\"string\">\"have.value\"</span>, <span class=\"string\">\"foo\"</span>)   <span class=\"comment\">// &lt;-- and to have the value 'foo'</span></div><div class=\"line\">    .and(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"radio\"</span>)    <span class=\"comment\">// &lt;-- and to have the class 'radio'</span></div><div class=\"line\"></div><div class=\"line\">  .parents(<span class=\"string\">\"#foo\"</span>, &#123;<span class=\"attr\">timeout</span>: <span class=\"number\">2000</span>&#125;) <span class=\"comment\">// &lt;--</span></div><div class=\"line\">    .should(<span class=\"string\">\"not.exist\"</span>)            <span class=\"comment\">// &lt;-- wait up to 2 seconds for this element NOT to be found</span></div></pre></td></tr></table></figure>\n<p>It’s important to note that timeouts will automatically flow down to their cooresponding assertions.</p>\n<p><strong>In the example we wait up to a total of 10 seconds to:</strong></p>\n<ol>\n<li>find the <code>&lt;input&gt;</code></li>\n<li>ensure it has a value of <code>foo</code></li>\n<li>ensure it has a class of <code>radio</code></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.find(<span class=\"string\">\"input\"</span>, &#123;<span class=\"attr\">timeout</span>: <span class=\"number\">10000</span>&#125;).should(<span class=\"string\">\"have.value\"</span>, <span class=\"string\">\"foo\"</span>).and(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"radio\"</span>)</div><div class=\"line\">                         ↲</div><div class=\"line\">      <span class=\"comment\">// adding the timeout here will automatically</span></div><div class=\"line\">      <span class=\"comment\">// flow down to the assertions, and they will</span></div><div class=\"line\">      <span class=\"comment\">// be retried for up to 10 seconds</span></div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “warning”,<br>  “body”: “Assuming you have two assertions, if one passes, and one fails, Cypress will continue to retry until they <strong>both</strong> pass. If Cypress eventually times out you’ll get a visual indicator in your Command Log to know which specific assertion failed.”<br>}<br>[/block]</p>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<h1 id=\"Writing-an-Assertion\"><a href=\"#Writing-an-Assertion\" class=\"headerlink\" title=\"Writing an Assertion\"></a>Writing an Assertion</h1><p>There are two ways to write an assertion in Cypress.</p>\n<ol>\n<li><strong>Implicit Subjects:</strong> Using <a href=\"https://on.cypress.io/api/should\"><code>cy.should</code></a> or <a href=\"https://on.cypress.io/api/and\"><code>cy.and</code></a></li>\n<li><strong>Explicit Subjects:</strong> Using <code>expect</code></li>\n</ol>\n<hr>\n<h2 id=\"Implicit-Subjects-with-cy-should-or-cy-and\"><a href=\"#Implicit-Subjects-with-cy-should-or-cy-and\" class=\"headerlink\" title=\"Implicit Subjects with cy.should or cy.and\"></a>Implicit Subjects with <a href=\"https://on.cypress.io/api/should\"><code>cy.should</code></a> or <a href=\"https://on.cypress.io/api/and\"><code>cy.and</code></a></h2><p>Using <a href=\"https://on.cypress.io/api/should\"><code>cy.should</code></a> or <a href=\"https://on.cypress.io/api/and\"><code>cy.and</code></a> commands is the preferred way of making an assertion in Cypress. The subject of the assertion is inferred from the subject of the last Cypress command, which is why this is called an <strong>implicit subject</strong>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// the implicit subject here is the first &lt;tr&gt;</span></div><div class=\"line\"><span class=\"comment\">// this asserts that the &lt;tr&gt; has an .active class</span></div><div class=\"line\">cy.get(<span class=\"string\">\"tbody tr:first\"</span>).should(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"active\"</span>)</div></pre></td></tr></table></figure>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/12554600/4cb4115c-c34b-11e5-891c-84ff176ea38f.jpg\" alt=\"implicit_assertion_class_active\"></p>\n<hr>\n<h2 id=\"Explicit-Subjects-with-expect\"><a href=\"#Explicit-Subjects-with-expect\" class=\"headerlink\" title=\"Explicit Subjects with expect\"></a>Explicit Subjects with <code>expect</code></h2><p>Using <code>expect</code> allows you to pass in a specific subject and make an assertion on the specified subject.</p>\n<p>These assertions are more commonly used when writing unit tests, but can also be used when writing integration tests. Cypress comes bundled with some existing tools that handle assertions such as:</p>\n<ul>\n<li><a href=\"https://on.cypress.io/guides/bundled-tools#section-chai\">Chai</a></li>\n<li><a href=\"https://on.cypress.io/guides/bundled-tools#section-chai-jquery\">Chai-jQuery</a></li>\n<li><a href=\"https://on.cypress.io/guides/bundled-tools#section-sinon-chai\">Chai-Sinon</a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// the explicit subject here is the boolean: true</span></div><div class=\"line\">expect(<span class=\"literal\">true</span>).to.be.true</div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “Check out our example recipes for <a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/unit_test_application_code_spec.js\">unit testing</a> and <a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/unit_test_react_enzyme_spec.js\">unit testing React components</a>“,<br>  “title”: “Unit Testing”<br>}<br>[/block]</p>\n<p>Explicit assertions are great when you want to perform custom logic prior to making the assertion.</p>\n<p>There is an <a href=\"https://github.com/cypress-io/cypress/issues/101\">open issue</a> for supporting <code>assert</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"p\"</span>)</div><div class=\"line\">  .should(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$p</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// return an array of texts from all of the p's</span></div><div class=\"line\">    <span class=\"keyword\">var</span> texts = $p.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i, el</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> cy.$(el).text()</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// jquery map returns jquery object</span></div><div class=\"line\">    <span class=\"comment\">// and .get() convert this to simple array</span></div><div class=\"line\">    <span class=\"keyword\">var</span> texts = texts.get()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// array should have length of 3</span></div><div class=\"line\">    expect(texts).to.have.length(<span class=\"number\">3</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// set this specific subject</span></div><div class=\"line\">    expect(texts).to.deep.eq([</div><div class=\"line\">      <span class=\"string\">\"Some text from first p\"</span>,</div><div class=\"line\">      <span class=\"string\">\"More text from second p\"</span>,</div><div class=\"line\">      <span class=\"string\">\"And even more text from third p\"</span></div><div class=\"line\">    ])</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Available-Assertions\"><a href=\"#Available-Assertions\" class=\"headerlink\" title=\"Available Assertions\"></a>Available Assertions</h1><p>An assertion is comprised of a subject, chainer methods, and an optional value.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">expect(&#123;<span class=\"attr\">foo</span>: <span class=\"string\">\"bar\"</span>&#125;).to.have.property(<span class=\"string\">\"foo\"</span>)</div><div class=\"line\">           ↲              ↲            ↲</div><div class=\"line\">        subject        chainers      value</div></pre></td></tr></table></figure>\n<p>The following chainers are available for your use:</p>\n<ul>\n<li><a href=\"#section-chai\">Chai</a></li>\n<li><a href=\"#section-chai-jquery\">Chai-jQuery</a></li>\n<li><a href=\"#section-chai-sinon\">Chai-Sinon</a></li>\n</ul>\n<hr>\n<h2 id=\"Chai\"><a href=\"#Chai\" class=\"headerlink\" title=\"Chai\"></a>Chai</h2><p><a href=\"http://chaijs.com/\">Chai</a> chainers are available for assertions.</p>\n<table>\n<thead>\n<tr>\n<th>Chainable getters</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>to</td>\n</tr>\n<tr>\n<td>be</td>\n</tr>\n<tr>\n<td>been</td>\n</tr>\n<tr>\n<td>is</td>\n</tr>\n<tr>\n<td>that</td>\n</tr>\n<tr>\n<td>which</td>\n</tr>\n<tr>\n<td>and</td>\n</tr>\n<tr>\n<td>has</td>\n</tr>\n<tr>\n<td>have</td>\n</tr>\n<tr>\n<td>with</td>\n</tr>\n<tr>\n<td>at</td>\n</tr>\n<tr>\n<td>of</td>\n</tr>\n<tr>\n<td>same</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Assertion</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>not</td>\n<td><code>expect(foo).to.not.equal(&#39;bar&#39;)</code></td>\n</tr>\n<tr>\n<td>deep</td>\n<td><code>expect(foo).to.deep.equal({ bar: &#39;baz&#39; })</code></td>\n</tr>\n<tr>\n<td>any</td>\n<td><code>expect(foo).to.have.any.keys(&#39;bar&#39;, &#39;baz&#39;)</code></td>\n</tr>\n<tr>\n<td>all</td>\n<td><code>expect(foo).to.have.all.keys(&#39;bar&#39;, &#39;baz&#39;)</code></td>\n</tr>\n<tr>\n<td>a( <em>type</em> )</td>\n<td><code>expect(&#39;test&#39;).to.be.a(&#39;string&#39;)</code></td>\n</tr>\n<tr>\n<td>an( <em>type</em> )</td>\n<td><code>expect(undefined).to.be.an(&#39;undefined&#39;)</code></td>\n</tr>\n<tr>\n<td>include( <em>value</em> )</td>\n<td><code>expect([1,2,3]).to.include(2)</code></td>\n</tr>\n<tr>\n<td>contain( <em>value</em> )</td>\n<td><code>expect(&#39;foobar&#39;).to.contain(&#39;foo&#39;)</code></td>\n</tr>\n<tr>\n<td>includes( <em>value</em> )</td>\n<td><code>expect([1,2,3]).includes(2)</code></td>\n</tr>\n<tr>\n<td>contains( <em>value</em> )</td>\n<td><code>expect(&#39;foobar&#39;).contains(&#39;foo&#39;)</code></td>\n</tr>\n<tr>\n<td>ok</td>\n<td><code>expect(undefined).to.not.be.ok</code></td>\n</tr>\n<tr>\n<td>true</td>\n<td><code>expect(true).to.be.true</code></td>\n</tr>\n<tr>\n<td>false</td>\n<td><code>expect(false).to.be.false</code></td>\n</tr>\n<tr>\n<td>null</td>\n<td><code>expect(null).to.be.null</code></td>\n</tr>\n<tr>\n<td>undefined</td>\n<td><code>expect(undefined).to.be.undefined</code></td>\n</tr>\n<tr>\n<td>exist</td>\n<td><code>expect(foo).to.exist</code></td>\n</tr>\n<tr>\n<td>empty</td>\n<td><code>expect([]).to.be.empty</code></td>\n</tr>\n<tr>\n<td>arguments</td>\n<td><code>expect(arguments).to.be.arguments</code></td>\n</tr>\n<tr>\n<td>equal( <em>value</em> )</td>\n<td><code>expect(42).to.equal(42)</code></td>\n</tr>\n<tr>\n<td>equals( <em>value</em> )</td>\n<td><code>expect(42).equals(42)</code></td>\n</tr>\n<tr>\n<td>eq( <em>value</em> )</td>\n<td><code>expect(42).to.eq(42)</code></td>\n</tr>\n<tr>\n<td>deep.equal( <em>value</em> )</td>\n<td><code>expect({ foo: &#39;bar&#39; }).to.deep.equal({ foo: &#39;bar&#39; })</code></td>\n</tr>\n<tr>\n<td>eql( <em>value</em> )</td>\n<td><code>expect({ foo: &#39;bar&#39; }).to.eql({ foo: &#39;bar&#39; })</code></td>\n</tr>\n<tr>\n<td>eqls( <em>value</em> )</td>\n<td><code>expect([ 1, 2, 3 ]).eqls([ 1, 2, 3 ])</code></td>\n</tr>\n<tr>\n<td>above( <em>value</em> )</td>\n<td><code>expect(10).to.be.above(5)</code></td>\n</tr>\n<tr>\n<td>gt( <em>value</em> )</td>\n<td><code>expect(10).to.be.gt(5)</code></td>\n</tr>\n<tr>\n<td>greaterThan( <em>value</em> )</td>\n<td><code>expect(10).to.be.greaterThan(5)</code></td>\n</tr>\n<tr>\n<td>least( <em>value</em> )</td>\n<td><code>expect(10).to.be.at.least(10)</code></td>\n</tr>\n<tr>\n<td>gte( <em>value</em> )</td>\n<td><code>expect(10).to.be.gte(10)</code></td>\n</tr>\n<tr>\n<td>below( <em>value</em> )</td>\n<td><code>expect(&#39;foo&#39;).to.have.length.below(4)</code></td>\n</tr>\n<tr>\n<td>lt( <em>value</em> )</td>\n<td><code>expect(3).to.be.ls(4)</code></td>\n</tr>\n<tr>\n<td>lessThan( <em>value</em> )</td>\n<td><code>expect(5).to.be.lessThan(10)</code></td>\n</tr>\n<tr>\n<td>most( <em>value</em> )</td>\n<td><code>expect(&#39;foo&#39;).to.have.length.of.at.most(4)</code></td>\n</tr>\n<tr>\n<td>lte( <em>value</em> )</td>\n<td><code>expect(5).to.be.lte(5)</code></td>\n</tr>\n<tr>\n<td>within( <em>start</em>, <em>finish</em> )</td>\n<td><code>expect(7).to.be.within(5,10)</code></td>\n</tr>\n<tr>\n<td>instanceof( <em>constructor</em> )</td>\n<td><code>expect([ 1, 2, 3 ]).to.be.instanceof(Array)</code></td>\n</tr>\n<tr>\n<td>instanceOf( <em>constructor</em> )</td>\n<td><code>expect([ 1, 2, 3 ]).to.be.instanceOf(Array)</code></td>\n</tr>\n<tr>\n<td>property( <em>name</em>, <em>[value]</em> )</td>\n<td><code>expect(obj).to.have.property(&#39;foo&#39;)</code></td>\n</tr>\n<tr>\n<td>deep.property( <em>name</em>, <em>[value]</em> )</td>\n<td><code>expect(deepObj).to.have.deep.property(&#39;teas[1]&#39;, &#39;matcha&#39;)</code></td>\n</tr>\n<tr>\n<td>ownProperty( <em>name</em> )</td>\n<td><code>expect(&#39;test&#39;).to.have.ownProperty(&#39;length&#39;)</code></td>\n</tr>\n<tr>\n<td>haveOwnProperty( <em>name</em> )</td>\n<td><code>expect(&#39;test&#39;).to.haveOwnProperty(&#39;length&#39;)</code></td>\n</tr>\n<tr>\n<td>length( <em>value</em> )</td>\n<td><code>expect(&#39;foo&#39;).to.have.length.above(2)</code></td>\n</tr>\n<tr>\n<td>lengthOf( <em>value</em> )</td>\n<td><code>expect(&#39;foo&#39;).to.have.lengthOf(3)</code></td>\n</tr>\n<tr>\n<td>match( <em>regexp</em> )</td>\n<td><code>expect(&#39;foobar&#39;).to.match(/^foo/)</code></td>\n</tr>\n<tr>\n<td>string( <em>string</em> )</td>\n<td><code>expect(&#39;foobar&#39;).to.have.string(&#39;bar&#39;)</code></td>\n</tr>\n<tr>\n<td>keys( <em>key1</em>, <em>[key2]</em>, <em>[…]</em> )</td>\n<td><code>expect({ foo: 1, bar: 2 }).to.have.key(&#39;foo&#39;)</code></td>\n</tr>\n<tr>\n<td>key( <em>key1</em>, <em>[key2]</em>, <em>[…]</em> )</td>\n<td><code>expect({ foo: 1, bar: 2 }).to.have.any.keys(&#39;foo&#39;)</code></td>\n</tr>\n<tr>\n<td>throw( <em>constructor</em> )</td>\n<td><code>expect(fn).to.throw(Error)</code></td>\n</tr>\n<tr>\n<td>throws( <em>constructor</em> )</td>\n<td><code>expect(fn).throws(ReferenceError, /bad function/)</code></td>\n</tr>\n<tr>\n<td>respondTo( <em>method</em> )</td>\n<td><code>expect(obj).to.respondTo(&#39;bar&#39;)</code></td>\n</tr>\n<tr>\n<td>itself</td>\n<td><code>expect(Foo).itself.to.respondTo(&#39;bar&#39;)</code></td>\n</tr>\n<tr>\n<td>satisfy( <em>method</em> )</td>\n<td><code>expect(1).to.satisfy(function(num) { return num &gt; 0; })</code></td>\n</tr>\n<tr>\n<td>closeTo( <em>expected</em>, <em>delta</em>)</td>\n<td><code>expect(1.5).to.be.closeTo(1, 0.5)</code></td>\n</tr>\n<tr>\n<td>members( <em>set</em> )</td>\n<td><code>expect([1, 2, 3]).to.include.members([3, 2])</code></td>\n</tr>\n<tr>\n<td>change( <em>function</em> )</td>\n<td><code>expect(fn).to.change(obj, &#39;val&#39;)</code></td>\n</tr>\n<tr>\n<td>changes( <em>function</em> )</td>\n<td><code>expect(fn).changes(obj, &#39;val&#39;)</code></td>\n</tr>\n<tr>\n<td>increase( <em>function</em> )</td>\n<td><code>expect(fn).to.increase(obj, &#39;val&#39;)</code></td>\n</tr>\n<tr>\n<td>increases( <em>function</em> )</td>\n<td><code>expect(fn).increases(obj, &#39;val&#39;)</code></td>\n</tr>\n<tr>\n<td>decrease( <em>function</em> )</td>\n<td><code>expect(fn).to.decrease(obj, &#39;val&#39;)</code></td>\n</tr>\n<tr>\n<td>decreases( <em>function</em> )</td>\n<td><code>expect(fn).decreases(obj, &#39;val&#39;)</code></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"Chai-jQuery\"><a href=\"#Chai-jQuery\" class=\"headerlink\" title=\"Chai-jQuery\"></a>Chai-jQuery</h2><p><a href=\"https://github.com/chaijs/chai-jquery\">Chai-jQuery</a> chainers are available when asserting about a DOM object.</p>\n<table>\n<thead>\n<tr>\n<th>Chainers</th>\n<th>Assertion</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>attr( <em>name</em>, <em>[value]</em>)</td>\n<td><code>expect($(&#39;body&#39;)).to.have.attr(&#39;foo&#39;, &#39;bar&#39;)</code></td>\n</tr>\n<tr>\n<td>prop( <em>name</em>, <em>[value]</em>)</td>\n<td><code>expect($(&#39;body&#39;)).to.have.prop(&#39;disabled&#39;, false)</code></td>\n</tr>\n<tr>\n<td>css( <em>name</em>, <em>[value]</em>)</td>\n<td><code>expect($(&#39;body&#39;)).to.have.css(&#39;background-color&#39;, &#39;rgb(0, 0, 0)&#39;)</code></td>\n</tr>\n<tr>\n<td>data( <em>name</em>, <em>[value]</em>)</td>\n<td><code>expect($(&#39;body&#39;)).to.have.data(&#39;foo&#39;, &#39;bar&#39;)</code></td>\n</tr>\n<tr>\n<td>class( <em>className</em> )</td>\n<td><code>expect($(&#39;body&#39;)).to.have.class(&#39;foo&#39;)</code></td>\n</tr>\n<tr>\n<td>id( <em>id</em> )</td>\n<td><code>expect($(&#39;body&#39;)).to.have.id(&#39;foo&#39;)</code></td>\n</tr>\n<tr>\n<td>html( <em>html</em>)</td>\n<td><code>expect($(&#39;#title&#39;)).to.have.html(&#39;Chai Tea&#39;)</code></td>\n</tr>\n<tr>\n<td>text( <em>text</em> )</td>\n<td><code>expect($(&#39;#title&#39;)).to.have.text(&#39;Chai Tea&#39;)</code></td>\n</tr>\n<tr>\n<td>value( <em>value</em> )</td>\n<td><code>expect($(&#39;.year&#39;)).to.have.value(&#39;2012&#39;)</code></td>\n</tr>\n<tr>\n<td>visible</td>\n<td><code>expect($(&#39;.year&#39;)).to.be.visible</code></td>\n</tr>\n<tr>\n<td>hidden</td>\n<td><code>expect($(&#39;.year&#39;)).to.be.hidden</code></td>\n</tr>\n<tr>\n<td>selected</td>\n<td><code>expect($(&#39;option&#39;)).not.to.be.selected</code></td>\n</tr>\n<tr>\n<td>checked</td>\n<td><code>expect($(&#39;input&#39;)).not.to.be.checked</code></td>\n</tr>\n<tr>\n<td>enabled</td>\n<td><code>expect($(&#39;enabled&#39;)).to.be.enabled</code></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td><code>expect($(&#39;input&#39;)).not.to.be.disabled</code></td>\n</tr>\n<tr>\n<td>empty</td>\n<td><code>expect($(&#39;body&#39;)).not.to.be.empty</code></td>\n</tr>\n<tr>\n<td>exist</td>\n<td><code>expect($(&#39;#nonexistent&#39;)).not.to.exist</code></td>\n</tr>\n<tr>\n<td>match( <em>selector</em> )</td>\n<td><code>expect($(&#39;#empty&#39;)).to.match(&#39;:empty&#39;)</code></td>\n</tr>\n<tr>\n<td>contain( <em>text</em> )</td>\n<td><code>expect($(&#39;#content&#39;)).to.contain(&#39;text&#39;)</code></td>\n</tr>\n<tr>\n<td>descendents( <em>selector</em> )</td>\n<td><code>expect($(&#39;#content&#39;)).to.have.descendants(&#39;div&#39;)</code></td>\n</tr>\n</tbody>\n</table>\n<p>You will commonly use these chainers after using DOM commands like: <a href=\"https://on.cypress.io/api/get\"><code>cy.get</code></a>, <a href=\"https://on.cypress.io/api/contains\"><code>cy.contains</code></a>, etc.</p>\n<hr>\n<h2 id=\"Chai-Sinon\"><a href=\"#Chai-Sinon\" class=\"headerlink\" title=\"Chai-Sinon\"></a>Chai-Sinon</h2><p>All Sinon assertions are available in <a href=\"https://github.com/domenic/sinon-chai\">Sinon–Chai</a>.</p>\n<table>\n<thead>\n<tr>\n<th>Sinon.JS property/method</th>\n<th>Assertion</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>called</td>\n<td><code>expect(spy).to.be.called</code></td>\n</tr>\n<tr>\n<td>callCount</td>\n<td><code>expect(spy).to.have.callCount(n)</code></td>\n</tr>\n<tr>\n<td>calledOnce</td>\n<td><code>expect(spy).to.be.calledOnce</code></td>\n</tr>\n<tr>\n<td>calledTwice</td>\n<td><code>expect(spy).to.be.calledTwice</code></td>\n</tr>\n<tr>\n<td>calledThrice</td>\n<td><code>expect(spy).to.be.calledThrice</code></td>\n</tr>\n<tr>\n<td>calledBefore</td>\n<td><code>expect(spy1).to.be.calledBefore(spy2)</code></td>\n</tr>\n<tr>\n<td>calledAfter</td>\n<td><code>expect(spy1).to.be.calledAfter(spy2)</code></td>\n</tr>\n<tr>\n<td>calledWithNew</td>\n<td><code>expect(spy).to.be.calledWithNew</code></td>\n</tr>\n<tr>\n<td>alwaysCalledWithNew</td>\n<td><code>expect(spy).to.always.be.calledWithNew</code></td>\n</tr>\n<tr>\n<td>calledOn</td>\n<td><code>expect(spy).to.be.calledOn(context)</code></td>\n</tr>\n<tr>\n<td>alwaysCalledOn</td>\n<td><code>expect(spy).to.always.be.calledOn(context)</code></td>\n</tr>\n<tr>\n<td>calledWith</td>\n<td><code>expect(spy).to.be.calledWith(...args)</code></td>\n</tr>\n<tr>\n<td>alwaysCalledWith</td>\n<td><code>expect(spy).to.always.be.calledWith(...args)</code></td>\n</tr>\n<tr>\n<td>calledWithExactly</td>\n<td><code>expect(spy).to.be.calledWithExactly(...args)</code></td>\n</tr>\n<tr>\n<td>alwaysCalledWithExactly</td>\n<td><code>expect(spy).to.always.be.calledWithExactly(...args)</code></td>\n</tr>\n<tr>\n<td>calledWithMatch</td>\n<td><code>expect(spy).to.be.calledWithMatch(...args)</code></td>\n</tr>\n<tr>\n<td>alwaysCalledWithMatch</td>\n<td><code>expect(spy).to.always.be.calledWithMatch(...args)</code></td>\n</tr>\n<tr>\n<td>returned</td>\n<td><code>expect(spy).to.have.returned(returnVal)</code></td>\n</tr>\n<tr>\n<td>alwaysReturned</td>\n<td><code>expect(spy).to.have.always.returned(returnVal)</code></td>\n</tr>\n<tr>\n<td>threw</td>\n<td><code>expect(spy).to.have.thrown(errorObjOrErrorTypeStringOrNothing)</code></td>\n</tr>\n<tr>\n<td>alwaysThrew</td>\n<td><code>expect(spy).to.have.always.thrown(errorObjOrErrorTypeStringOrNothing)</code></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Using-Chainers-with-Implicit-Subjects\"><a href=\"#Using-Chainers-with-Implicit-Subjects\" class=\"headerlink\" title=\"Using Chainers with Implicit Subjects\"></a>Using Chainers with Implicit Subjects</h1><p>When utilizing <a href=\"https://on.cypress.io/api/should\"><code>cy.should</code></a> or <a href=\"https://on.cypress.io/api/should\"><code>cy.and</code></a>, instead of writing chainers as properties and methods, they are instead transformed into a string argument.</p>\n<p>If we convert the previous example to use <a href=\"https://on.cypress.io/api/should\"><code>cy.should</code></a>, it would look like:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.wrap(&#123;<span class=\"attr\">foo</span>: <span class=\"string\">\"bar\"</span>&#125;).should(<span class=\"string\">\"have.property\"</span>, <span class=\"string\">\"foo\"</span>)</div><div class=\"line\">           ↲                      ↲            ↲</div><div class=\"line\">        subject                chainers       value</div></pre></td></tr></table></figure>\n<p>The chainers are shifted and become the first argument to <a href=\"https://on.cypress.io/api/should\"><code>cy.should</code></a>, with values simply being passed in as additional arguments.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// we can additionally continue to chain and add</span></div><div class=\"line\"><span class=\"comment\">// multiple assertions about our &lt;button&gt; subject</span></div><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).should(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"active\"</span>).and(<span class=\"string\">\"be.visible\"</span>)</div><div class=\"line\">          ↲                  ↲          ↲             ↲</div><div class=\"line\">        subject           chainers     value         chainers</div></pre></td></tr></table></figure>\n<p>If we converted the above example to use an explicit subject, this is what it would look like:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).should(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$button</span>)</span>&#123;</div><div class=\"line\">  expect($button).to.have.class(<span class=\"string\">\"active\"</span>)</div><div class=\"line\">  expect($button).to.be.visible</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>This example above may be more familiar to you if you’ve written tests in JavaScript before.</p>\n<p>If you look closely, you’ll see that we’ve passed a callback function to the <a href=\"https://on.cypress.io/api/should\"><code>cy.should</code></a> method. This allows us to write expectations inside of that callback function, yet still receive all of the wonderful benefits of <a href=\"https://on.cypress.io/api/should\"><code>cy.should</code></a>.</p>\n<p>Read about <a href=\"https://on.cypress.io/guides/making-assertions#section-resolving-assertions\">resolving assertions</a> below to learn how <a href=\"https://on.cypress.io/api/should\"><code>cy.should</code></a> works under the hood.</p>\n<hr>\n<h2 id=\"Assertions-that-change-the-subject\"><a href=\"#Assertions-that-change-the-subject\" class=\"headerlink\" title=\"Assertions that change the subject\"></a>Assertions that change the subject</h2><p>Sometimes using a specific chainer will automatically change the assertion subject.</p>\n<p>For instance in <code>chai</code>, the method <a href=\"http://chaijs.com/api/bdd/\"><code>have.property(&quot;...&quot;)</code></a> will automatically change the subject.</p>\n<p>Additionally in <a href=\"https://github.com/chaijs/chai-jquery#attrname-value\"><code>Chai-jQuery</code></a>, the methods: <code>attr</code>, <code>prop</code>, <code>css</code>, and <code>data</code> also change the subject.</p>\n<p>This allows you to utilize other <code>chainer</code> methods such as <code>match</code> when making assertions about values.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in this example our subject changed to the string 'sans-serif' because</span></div><div class=\"line\"><span class=\"comment\">// have.css(\"font-family\") returned a string instead of the &lt;body&gt; element</span></div><div class=\"line\">cy</div><div class=\"line\">  <span class=\"comment\">// subject is &lt;body&gt;</span></div><div class=\"line\">  .get(<span class=\"string\">\"body\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// subject changes to the string return value of 'font-family'</span></div><div class=\"line\">  .should(<span class=\"string\">\"have.css\"</span>, <span class=\"string\">\"font-family\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// use match to assert the string matches a regular expression</span></div><div class=\"line\">  .and(<span class=\"string\">\"match\"</span>, /sans-serif/)</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in this example our subject changed to the string '/users' because</span></div><div class=\"line\"><span class=\"comment\">// have.attr, href, /users returned a string instead of the &lt;a&gt; element</span></div><div class=\"line\">cy</div><div class=\"line\">  <span class=\"comment\">// subject is &lt;a&gt;</span></div><div class=\"line\">  .get(<span class=\"string\">\"a\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// subject changes to the string 'users'</span></div><div class=\"line\">  .should(<span class=\"string\">\"have.attr\"</span>, <span class=\"string\">\"href\"</span>, <span class=\"string\">\"/users\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"How-do-I-know-which-assertions-change-the-subject-and-which-keep-it-the-same\"><a href=\"#How-do-I-know-which-assertions-change-the-subject-and-which-keep-it-the-same\" class=\"headerlink\" title=\"How do I know which assertions change the subject and which keep it the same?\"></a>How do I know which assertions change the subject and which keep it the same?</h2><p>The chainers that come from <a href=\"https://on.cypress.io/guides/bundled-tools#section-chai\">Chai</a> or <a href=\"https://on.cypress.io/guides/bundled-tools#section-chai-jquery\">Chai-jQuery</a> will always document what they return.</p>\n<p>Alternatively, it is very easy to use Cypress itself to figure this out.</p>\n<p>You can <a href=\"https://on.cypress.io/guides/making-assertions#sections-debugging-assertions\">read more about debugging assertions</a> here.</p>\n<hr>\n<h1 id=\"Negating-assertions\"><a href=\"#Negating-assertions\" class=\"headerlink\" title=\"Negating assertions\"></a>Negating assertions</h1><p>Every assertion can be chained with <code>.not</code> to assert the opposite behavior on a subject.</p>\n<p><strong>Negating Assertion Examples</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"button.disabled\"</span>).should(<span class=\"string\">\"be.disabled\"</span>)             <span class=\"comment\">// assertion</span></div><div class=\"line\">cy.get(<span class=\"string\">\"button.active\"</span>).should(<span class=\"string\">\"not.be.disabled\"</span>)           <span class=\"comment\">// negating assertion</span></div><div class=\"line\"></div><div class=\"line\">cy.title().should(<span class=\"string\">\"eq\"</span>, <span class=\"string\">\"My Awesome App\"</span>)                   <span class=\"comment\">// assertion</span></div><div class=\"line\">cy.title().should(<span class=\"string\">\"not.eq\"</span>, <span class=\"string\">\"My Not So Awesome App\"</span>)        <span class=\"comment\">// negating assertion</span></div><div class=\"line\"></div><div class=\"line\">cy.get(<span class=\"string\">\"a\"</span>).should(<span class=\"string\">\"have.attr\"</span>, <span class=\"string\">\"popover\"</span>, <span class=\"string\">\"Help\"</span>)          <span class=\"comment\">// assertion</span></div><div class=\"line\">cy.get(<span class=\"string\">\"a\"</span>).should(<span class=\"string\">\"not.have.attr\"</span>, <span class=\"string\">\"popover\"</span>, <span class=\"string\">\"I'm lost\"</span>)  <span class=\"comment\">// negating assertion</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Resolving-Assertions\"><a href=\"#Resolving-Assertions\" class=\"headerlink\" title=\"Resolving Assertions\"></a>Resolving Assertions</h1><p>Knowing when and how to resolve assertions is can be challenging, made even more difficult by modern JavaScript frameworks. Yet accurately resolving assertions is the key for preventing flaky and brittle tests.</p>\n<p>Cypress’s API is built to consistently pass or fail every time. As part of this strategy, Cypress will automatically look downstream at assertions and modify its behavior based on upcoming assertions.</p>\n<p>Internally, Cypress will retry commands which are associated to assertions, and will not continue until <strong>all</strong> assertions pass. Using assertions as guards enables you to specify conditions that must be resolved prior to moving on.</p>\n<p>What conditions should you specify? Anything that guarantees your app is in the correct state.</p>\n<p><strong>Here are some scenarios of using assertions as guards:</strong></p>\n<ul>\n<li>Clicking an <code>&lt;a&gt;</code> then verifying the url is correct after you expect your server to redirect.</li>\n<li>Focusing, then blurring on an <code>&lt;input&gt;</code> and expecting an error message with a specific class to be visible.</li>\n<li>Clicking a <code>&lt;button&gt;</code> and waiting for a modal to animate in.</li>\n<li>Typing into a <code>&lt;form&gt;</code> and verifying an element should not exist or not be visible.</li>\n</ul>\n<p>Every command that comes before a <a href=\"https://on.cypress.io/api/should\"><code>cy.should</code></a> will not resolve until <strong>all</strong> of its associated assertions pass. This enables you to accurately test the following situation:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- Our App Code --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"What is your name?\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"error\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display: none;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Our App Code</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">waitRandomlyThen</span>(<span class=\"params\">fn</span>)</span>&#123;</div><div class=\"line\">  setTimeout(fn, <span class=\"built_in\">Math</span>.random() * <span class=\"number\">3000</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"form\"</span>).submit(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</div><div class=\"line\">  e.preventDefault()</div><div class=\"line\"></div><div class=\"line\">  waitRandomlyThen(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">\"#error\"</span>).show()</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  waitRandomlyThen(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">\"#error\"</span>).addClass(<span class=\"string\">\"alert-danger\"</span>)</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  waitRandomlyThen(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">\"#error\"</span>).html(<span class=\"string\">\"Your &lt;strong&gt;name&lt;/strong&gt; is required.\"</span>)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>The above app code could can be tested with the following assertions:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"form\"</span>).submit()</div><div class=\"line\">  .get(<span class=\"string\">\"#error\"</span>)</div><div class=\"line\">    .should(<span class=\"string\">\"be.visible\"</span>)</div><div class=\"line\">    .and(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"alert-danger\"</span>)</div><div class=\"line\">    .and(<span class=\"string\">\"contain\"</span>, <span class=\"string\">\"Your name is required.\"</span>)</div></pre></td></tr></table></figure>\n<p>Our tests’ code is insulated from flaky failures because it is not coupled to any specific timing mechanism. If you look closely, our application code is written in such a way that introduces random wait times - yet Cypress will pass 100% of the time, without any explicit <code>wait</code> calls. The moment all 3 of the assertions pass, Cypress will resolve.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/10004440/b1c53294-607f-11e5-8d7d-3f5694a1fb1a.gif\" alt=\"assertions\"></p>\n<p>In modern JavaScript frameworks, and in many common web-based actions, there is usually an <em>indeterminate</em> amount of time between an action and a side effect such as:</p>\n<ul>\n<li>Network Requests</li>\n<li>Redirects</li>\n<li>Form Submissions</li>\n<li>AJAX Requests</li>\n<li>Websockets</li>\n<li>Page Navigation</li>\n<li>setTimeout’s</li>\n<li>DOM Events</li>\n</ul>\n<p>Cypress makes it easy to test and make assertions about all of these.</p>\n<hr>\n<h2 id=\"Increasing-timeouts\"><a href=\"#Increasing-timeouts\" class=\"headerlink\" title=\"Increasing timeouts\"></a>Increasing timeouts</h2><p>You have two ways of increasing the amount of time Cypress waits for assertions to pass.</p>\n<ol>\n<li>Change the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a> globally</li>\n<li>Override the timeout option on a previous command before the assertion command.</li>\n</ol>\n<p>Overriding the timeout option on a specific command looks like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .find(<span class=\"string\">\"input\"</span>, &#123;<span class=\"attr\">timeout</span>: <span class=\"number\">10000</span>&#125;) <span class=\"comment\">// &lt;-- wait up to 10 seconds for this 'input' to be found</span></div><div class=\"line\">    .should(<span class=\"string\">\"have.value\"</span>, <span class=\"string\">\"foo\"</span>)   <span class=\"comment\">// &lt;-- and to have the value 'foo'</span></div><div class=\"line\">    .and(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"radio\"</span>)    <span class=\"comment\">// &lt;-- and to have the class 'radio'</span></div><div class=\"line\"></div><div class=\"line\">  .parents(<span class=\"string\">\"#foo\"</span>, &#123;<span class=\"attr\">timeout</span>: <span class=\"number\">2000</span>&#125;) <span class=\"comment\">// &lt;--</span></div><div class=\"line\">    .should(<span class=\"string\">\"not.exist\"</span>)            <span class=\"comment\">// &lt;-- wait up to 2 seconds for this element NOT to be found</span></div></pre></td></tr></table></figure>\n<p>It’s important to note that timeouts will automatically flow down to their cooresponding assertions.</p>\n<p><strong>In the example we wait up to a total of 10 seconds to:</strong></p>\n<ol>\n<li>find the <code>&lt;input&gt;</code></li>\n<li>ensure it has a value of <code>foo</code></li>\n<li>ensure it has a class of <code>radio</code></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.find(<span class=\"string\">\"input\"</span>, &#123;<span class=\"attr\">timeout</span>: <span class=\"number\">10000</span>&#125;).should(<span class=\"string\">\"have.value\"</span>, <span class=\"string\">\"foo\"</span>).and(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"radio\"</span>)</div><div class=\"line\">                         ↲</div><div class=\"line\">      <span class=\"comment\">// adding the timeout here will automatically</span></div><div class=\"line\">      <span class=\"comment\">// flow down to the assertions, and they will</span></div><div class=\"line\">      <span class=\"comment\">// be retried for up to 10 seconds</span></div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “warning”,<br>  “body”: “Assuming you have two assertions, if one passes, and one fails, Cypress will continue to retry until they <strong>both</strong> pass. If Cypress eventually times out you’ll get a visual indicator in your Command Log to know which specific assertion failed.”<br>}<br>[/block]</p>\n"},{"title":"reporters","_content":"\n# Supported Reporters\n\nCypress supports the following reporters:\n\n* [Mocha's built-in reporters](https://mochajs.org/#reporters).\n* [`teamcity`](https://github.com/cypress-io/mocha-teamcity-reporter)\n* [`junit`](https://github.com/michaelleeallen/mocha-junit-reporter)\n* Custom reporters ([see below](#section-custom-reporters))\n\n***\n\n# Custom Reporters\n\nCypress supports custom reporters, whether local to your project or installed through npm.\n\n## Local Reporters\n\nSay you have the following directory structure:\n\n```txt\n> my-project\n  > cypress\n  > src\n  > reporters\n    - custom.js\n```\n\nSpecify the path to your custom reporter to use it:\n\n`cypress.json`:\n\n```javascript\n{\n  \"reporter\": \"reporters/custom.js\"\n}\n```\n\nCommand line:\n\n```shell\ncypress run --reporter reporters/custom.js\n```\n\n***\n\n## npm Reporters\n\nIf you have installed a custom reporter through npm, specify the package name:\n\n```javascript\n// cypress.json\n{\n  \"reporter\": \"mochawesome\"\n}\n```\n\nCommand line:\n\n```shell\ncypress run --reporter mochawesome\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Peer Dependencies\",\n  \"body\": \"You need to install any peer dependencies the reporter requires, even if they're bundled with Cypress. For example, [mochawesome](https://github.com/adamgruber/mochawesome) requires `mocha` as a peer dependency. You will need to install mocha as a dev dependency of your own project for it to work (`npm install mocha --save-dev`).\"\n}\n[/block]\n\n***\n\n# Reporter Options\n\nSome reporters accept options to customize their behavior. These can be specified in your `cypress.json` or via the command line:\n\n```javascript\n// cypress.json\n{\n  \"reporter\": \"junit\",\n  \"reporterOptions\": {\n    \"mochaFile\": \"results/my-test-output.xml\",\n    \"toConsole\": true\n  }\n}\n```\n\nCommand line:\n\n```shell\ncypress run --reporter junit --reporter-options \"mochaFile=results/my-test-output.xml,toConsole=true\"\n```\n\nReporter options differ depending on the reporter (and may not be supported at all). Refer to the documentation for the reporter you are using for details on which options are supported.\n","source":"guides/guides/reporters.md","raw":"title: reporters\n---\n\n# Supported Reporters\n\nCypress supports the following reporters:\n\n* [Mocha's built-in reporters](https://mochajs.org/#reporters).\n* [`teamcity`](https://github.com/cypress-io/mocha-teamcity-reporter)\n* [`junit`](https://github.com/michaelleeallen/mocha-junit-reporter)\n* Custom reporters ([see below](#section-custom-reporters))\n\n***\n\n# Custom Reporters\n\nCypress supports custom reporters, whether local to your project or installed through npm.\n\n## Local Reporters\n\nSay you have the following directory structure:\n\n```txt\n> my-project\n  > cypress\n  > src\n  > reporters\n    - custom.js\n```\n\nSpecify the path to your custom reporter to use it:\n\n`cypress.json`:\n\n```javascript\n{\n  \"reporter\": \"reporters/custom.js\"\n}\n```\n\nCommand line:\n\n```shell\ncypress run --reporter reporters/custom.js\n```\n\n***\n\n## npm Reporters\n\nIf you have installed a custom reporter through npm, specify the package name:\n\n```javascript\n// cypress.json\n{\n  \"reporter\": \"mochawesome\"\n}\n```\n\nCommand line:\n\n```shell\ncypress run --reporter mochawesome\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"Peer Dependencies\",\n  \"body\": \"You need to install any peer dependencies the reporter requires, even if they're bundled with Cypress. For example, [mochawesome](https://github.com/adamgruber/mochawesome) requires `mocha` as a peer dependency. You will need to install mocha as a dev dependency of your own project for it to work (`npm install mocha --save-dev`).\"\n}\n[/block]\n\n***\n\n# Reporter Options\n\nSome reporters accept options to customize their behavior. These can be specified in your `cypress.json` or via the command line:\n\n```javascript\n// cypress.json\n{\n  \"reporter\": \"junit\",\n  \"reporterOptions\": {\n    \"mochaFile\": \"results/my-test-output.xml\",\n    \"toConsole\": true\n  }\n}\n```\n\nCommand line:\n\n```shell\ncypress run --reporter junit --reporter-options \"mochaFile=results/my-test-output.xml,toConsole=true\"\n```\n\nReporter options differ depending on the reporter (and may not be supported at all). Refer to the documentation for the reporter you are using for details on which options are supported.\n","date":"2017-04-19T18:46:47.000Z","updated":"2017-04-19T18:46:47.000Z","path":"guides/guides/reporters.html","comments":1,"layout":"page","_id":"cj1pby1kr002y68g8uvfoprnd","content":"<h1 id=\"Supported-Reporters\"><a href=\"#Supported-Reporters\" class=\"headerlink\" title=\"Supported Reporters\"></a>Supported Reporters</h1><p>Cypress supports the following reporters:</p>\n<ul>\n<li><a href=\"https://mochajs.org/#reporters\" target=\"_blank\" rel=\"external\">Mocha’s built-in reporters</a>.</li>\n<li><a href=\"https://github.com/cypress-io/mocha-teamcity-reporter\" target=\"_blank\" rel=\"external\"><code>teamcity</code></a></li>\n<li><a href=\"https://github.com/michaelleeallen/mocha-junit-reporter\" target=\"_blank\" rel=\"external\"><code>junit</code></a></li>\n<li>Custom reporters (<a href=\"#section-custom-reporters\">see below</a>)</li>\n</ul>\n<hr>\n<h1 id=\"Custom-Reporters\"><a href=\"#Custom-Reporters\" class=\"headerlink\" title=\"Custom Reporters\"></a>Custom Reporters</h1><p>Cypress supports custom reporters, whether local to your project or installed through npm.</p>\n<h2 id=\"Local-Reporters\"><a href=\"#Local-Reporters\" class=\"headerlink\" title=\"Local Reporters\"></a>Local Reporters</h2><p>Say you have the following directory structure:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; my-project</div><div class=\"line\">  &gt; cypress</div><div class=\"line\">  &gt; src</div><div class=\"line\">  &gt; reporters</div><div class=\"line\">    - custom.js</div></pre></td></tr></table></figure>\n<p>Specify the path to your custom reporter to use it:</p>\n<p><code>cypress.json</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"reporter\"</span>: <span class=\"string\">\"reporters/custom.js\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Command line:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cypress run --reporter reporters/custom.js</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"npm-Reporters\"><a href=\"#npm-Reporters\" class=\"headerlink\" title=\"npm Reporters\"></a>npm Reporters</h2><p>If you have installed a custom reporter through npm, specify the package name:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// cypress.json</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"reporter\"</span>: <span class=\"string\">\"mochawesome\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Command line:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cypress run --reporter mochawesome</div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “title”: “Peer Dependencies”,<br>  “body”: “You need to install any peer dependencies the reporter requires, even if they’re bundled with Cypress. For example, <a href=\"https://github.com/adamgruber/mochawesome\" target=\"_blank\" rel=\"external\">mochawesome</a> requires <code>mocha</code> as a peer dependency. You will need to install mocha as a dev dependency of your own project for it to work (<code>npm install mocha --save-dev</code>).”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Reporter-Options\"><a href=\"#Reporter-Options\" class=\"headerlink\" title=\"Reporter Options\"></a>Reporter Options</h1><p>Some reporters accept options to customize their behavior. These can be specified in your <code>cypress.json</code> or via the command line:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// cypress.json</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"reporter\"</span>: <span class=\"string\">\"junit\"</span>,</div><div class=\"line\">  <span class=\"string\">\"reporterOptions\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"mochaFile\"</span>: <span class=\"string\">\"results/my-test-output.xml\"</span>,</div><div class=\"line\">    <span class=\"string\">\"toConsole\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Command line:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cypress run --reporter junit --reporter-options \"mochaFile=results/my-test-output.xml,toConsole=true\"</div></pre></td></tr></table></figure>\n<p>Reporter options differ depending on the reporter (and may not be supported at all). Refer to the documentation for the reporter you are using for details on which options are supported.</p>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<h1 id=\"Supported-Reporters\"><a href=\"#Supported-Reporters\" class=\"headerlink\" title=\"Supported Reporters\"></a>Supported Reporters</h1><p>Cypress supports the following reporters:</p>\n<ul>\n<li><a href=\"https://mochajs.org/#reporters\">Mocha’s built-in reporters</a>.</li>\n<li><a href=\"https://github.com/cypress-io/mocha-teamcity-reporter\"><code>teamcity</code></a></li>\n<li><a href=\"https://github.com/michaelleeallen/mocha-junit-reporter\"><code>junit</code></a></li>\n<li>Custom reporters (<a href=\"#section-custom-reporters\">see below</a>)</li>\n</ul>\n<hr>\n<h1 id=\"Custom-Reporters\"><a href=\"#Custom-Reporters\" class=\"headerlink\" title=\"Custom Reporters\"></a>Custom Reporters</h1><p>Cypress supports custom reporters, whether local to your project or installed through npm.</p>\n<h2 id=\"Local-Reporters\"><a href=\"#Local-Reporters\" class=\"headerlink\" title=\"Local Reporters\"></a>Local Reporters</h2><p>Say you have the following directory structure:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; my-project</div><div class=\"line\">  &gt; cypress</div><div class=\"line\">  &gt; src</div><div class=\"line\">  &gt; reporters</div><div class=\"line\">    - custom.js</div></pre></td></tr></table></figure>\n<p>Specify the path to your custom reporter to use it:</p>\n<p><code>cypress.json</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"reporter\"</span>: <span class=\"string\">\"reporters/custom.js\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Command line:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cypress run --reporter reporters/custom.js</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"npm-Reporters\"><a href=\"#npm-Reporters\" class=\"headerlink\" title=\"npm Reporters\"></a>npm Reporters</h2><p>If you have installed a custom reporter through npm, specify the package name:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// cypress.json</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"reporter\"</span>: <span class=\"string\">\"mochawesome\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Command line:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cypress run --reporter mochawesome</div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “title”: “Peer Dependencies”,<br>  “body”: “You need to install any peer dependencies the reporter requires, even if they’re bundled with Cypress. For example, <a href=\"https://github.com/adamgruber/mochawesome\">mochawesome</a> requires <code>mocha</code> as a peer dependency. You will need to install mocha as a dev dependency of your own project for it to work (<code>npm install mocha --save-dev</code>).”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Reporter-Options\"><a href=\"#Reporter-Options\" class=\"headerlink\" title=\"Reporter Options\"></a>Reporter Options</h1><p>Some reporters accept options to customize their behavior. These can be specified in your <code>cypress.json</code> or via the command line:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// cypress.json</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"reporter\"</span>: <span class=\"string\">\"junit\"</span>,</div><div class=\"line\">  <span class=\"string\">\"reporterOptions\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"mochaFile\"</span>: <span class=\"string\">\"results/my-test-output.xml\"</span>,</div><div class=\"line\">    <span class=\"string\">\"toConsole\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Command line:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cypress run --reporter junit --reporter-options \"mochaFile=results/my-test-output.xml,toConsole=true\"</div></pre></td></tr></table></figure>\n<p>Reporter options differ depending on the reporter (and may not be supported at all). Refer to the documentation for the reporter you are using for details on which options are supported.</p>\n"},{"title":"screenshots-and-videos","_content":"\n# Screenshots\n\nCypress comes with the ability to take screenshots whether you are running in a real headed browser (such as Chrome) or when you are running headlessly or in CI.\n\nTo take a manual screenshot just use the [`cy.screenshot`](https://on.cypress.io/api/screenshot) command.\n\nAdditionally, Cypress will automatically capture screenshots when a failure happens but only during a headless run.\n\nThis behavior can be turned off by setting [`screenshotOnHeadlessFailure`](https://on.cypress.io/configuration#section-screenshots) to `false`.\n\nScreenshots are stored in the [`screenshotsFolder`](https://on.cypress.io/configuration#section-screenshots) which is set to `cypress/screenshots` by default.\n\nBy default, Cypress trashes the previous screenshots before a headless run. If don't want to clear your screenshots folder before a headless run, you can set [`trashAssetsBeforeHeadlessRun`](https://on.cypress.io/configuration#section-screenshots) to `false`.\n\n***\n\n# Videos\n\nCypress also records videos when running headlessly.\n\nThis behavior can be turned off by setting [`videoRecording`](https://on.cypress.io/configuration#section-videos) to `false`.\n\nVideos are stored in the [`videosFolder`](https://on.cypress.io/configuration#section-videos) which is set to `cypress/videos` by default.\n\nAfter a headless run completes, Cypress will automatically compress the video to save on file size. By default it compresses to a `32 CRF` but this is configurable with the [`videoCompression`](https://on.cypress.io/configuration#section-videos) property.\n\nBy default, Cypress trashes the previous videos before a headless run. If don't want to clear your videos folder before a headless run, you can set [`trashAssetsBeforeHeadlessRun`](https://on.cypress.io/configuration#section-videos) to `false`.\n","source":"guides/guides/screenshots-and-videos.md","raw":"title: screenshots-and-videos\n---\n\n# Screenshots\n\nCypress comes with the ability to take screenshots whether you are running in a real headed browser (such as Chrome) or when you are running headlessly or in CI.\n\nTo take a manual screenshot just use the [`cy.screenshot`](https://on.cypress.io/api/screenshot) command.\n\nAdditionally, Cypress will automatically capture screenshots when a failure happens but only during a headless run.\n\nThis behavior can be turned off by setting [`screenshotOnHeadlessFailure`](https://on.cypress.io/configuration#section-screenshots) to `false`.\n\nScreenshots are stored in the [`screenshotsFolder`](https://on.cypress.io/configuration#section-screenshots) which is set to `cypress/screenshots` by default.\n\nBy default, Cypress trashes the previous screenshots before a headless run. If don't want to clear your screenshots folder before a headless run, you can set [`trashAssetsBeforeHeadlessRun`](https://on.cypress.io/configuration#section-screenshots) to `false`.\n\n***\n\n# Videos\n\nCypress also records videos when running headlessly.\n\nThis behavior can be turned off by setting [`videoRecording`](https://on.cypress.io/configuration#section-videos) to `false`.\n\nVideos are stored in the [`videosFolder`](https://on.cypress.io/configuration#section-videos) which is set to `cypress/videos` by default.\n\nAfter a headless run completes, Cypress will automatically compress the video to save on file size. By default it compresses to a `32 CRF` but this is configurable with the [`videoCompression`](https://on.cypress.io/configuration#section-videos) property.\n\nBy default, Cypress trashes the previous videos before a headless run. If don't want to clear your videos folder before a headless run, you can set [`trashAssetsBeforeHeadlessRun`](https://on.cypress.io/configuration#section-videos) to `false`.\n","date":"2017-04-19T18:46:47.000Z","updated":"2017-04-19T18:46:47.000Z","path":"guides/guides/screenshots-and-videos.html","comments":1,"layout":"page","_id":"cj1pby1kr002z68g8n5g7wnby","content":"<h1 id=\"Screenshots\"><a href=\"#Screenshots\" class=\"headerlink\" title=\"Screenshots\"></a>Screenshots</h1><p>Cypress comes with the ability to take screenshots whether you are running in a real headed browser (such as Chrome) or when you are running headlessly or in CI.</p>\n<p>To take a manual screenshot just use the <a href=\"https://on.cypress.io/api/screenshot\" target=\"_blank\" rel=\"external\"><code>cy.screenshot</code></a> command.</p>\n<p>Additionally, Cypress will automatically capture screenshots when a failure happens but only during a headless run.</p>\n<p>This behavior can be turned off by setting <a href=\"https://on.cypress.io/configuration#section-screenshots\" target=\"_blank\" rel=\"external\"><code>screenshotOnHeadlessFailure</code></a> to <code>false</code>.</p>\n<p>Screenshots are stored in the <a href=\"https://on.cypress.io/configuration#section-screenshots\" target=\"_blank\" rel=\"external\"><code>screenshotsFolder</code></a> which is set to <code>cypress/screenshots</code> by default.</p>\n<p>By default, Cypress trashes the previous screenshots before a headless run. If don’t want to clear your screenshots folder before a headless run, you can set <a href=\"https://on.cypress.io/configuration#section-screenshots\" target=\"_blank\" rel=\"external\"><code>trashAssetsBeforeHeadlessRun</code></a> to <code>false</code>.</p>\n<hr>\n<h1 id=\"Videos\"><a href=\"#Videos\" class=\"headerlink\" title=\"Videos\"></a>Videos</h1><p>Cypress also records videos when running headlessly.</p>\n<p>This behavior can be turned off by setting <a href=\"https://on.cypress.io/configuration#section-videos\" target=\"_blank\" rel=\"external\"><code>videoRecording</code></a> to <code>false</code>.</p>\n<p>Videos are stored in the <a href=\"https://on.cypress.io/configuration#section-videos\" target=\"_blank\" rel=\"external\"><code>videosFolder</code></a> which is set to <code>cypress/videos</code> by default.</p>\n<p>After a headless run completes, Cypress will automatically compress the video to save on file size. By default it compresses to a <code>32 CRF</code> but this is configurable with the <a href=\"https://on.cypress.io/configuration#section-videos\" target=\"_blank\" rel=\"external\"><code>videoCompression</code></a> property.</p>\n<p>By default, Cypress trashes the previous videos before a headless run. If don’t want to clear your videos folder before a headless run, you can set <a href=\"https://on.cypress.io/configuration#section-videos\" target=\"_blank\" rel=\"external\"><code>trashAssetsBeforeHeadlessRun</code></a> to <code>false</code>.</p>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<h1 id=\"Screenshots\"><a href=\"#Screenshots\" class=\"headerlink\" title=\"Screenshots\"></a>Screenshots</h1><p>Cypress comes with the ability to take screenshots whether you are running in a real headed browser (such as Chrome) or when you are running headlessly or in CI.</p>\n<p>To take a manual screenshot just use the <a href=\"https://on.cypress.io/api/screenshot\"><code>cy.screenshot</code></a> command.</p>\n<p>Additionally, Cypress will automatically capture screenshots when a failure happens but only during a headless run.</p>\n<p>This behavior can be turned off by setting <a href=\"https://on.cypress.io/configuration#section-screenshots\"><code>screenshotOnHeadlessFailure</code></a> to <code>false</code>.</p>\n<p>Screenshots are stored in the <a href=\"https://on.cypress.io/configuration#section-screenshots\"><code>screenshotsFolder</code></a> which is set to <code>cypress/screenshots</code> by default.</p>\n<p>By default, Cypress trashes the previous screenshots before a headless run. If don’t want to clear your screenshots folder before a headless run, you can set <a href=\"https://on.cypress.io/configuration#section-screenshots\"><code>trashAssetsBeforeHeadlessRun</code></a> to <code>false</code>.</p>\n<hr>\n<h1 id=\"Videos\"><a href=\"#Videos\" class=\"headerlink\" title=\"Videos\"></a>Videos</h1><p>Cypress also records videos when running headlessly.</p>\n<p>This behavior can be turned off by setting <a href=\"https://on.cypress.io/configuration#section-videos\"><code>videoRecording</code></a> to <code>false</code>.</p>\n<p>Videos are stored in the <a href=\"https://on.cypress.io/configuration#section-videos\"><code>videosFolder</code></a> which is set to <code>cypress/videos</code> by default.</p>\n<p>After a headless run completes, Cypress will automatically compress the video to save on file size. By default it compresses to a <code>32 CRF</code> but this is configurable with the <a href=\"https://on.cypress.io/configuration#section-videos\"><code>videoCompression</code></a> property.</p>\n<p>By default, Cypress trashes the previous videos before a headless run. If don’t want to clear your videos folder before a headless run, you can set <a href=\"https://on.cypress.io/configuration#section-videos\"><code>trashAssetsBeforeHeadlessRun</code></a> to <code>false</code>.</p>\n"},{"title":"stubs-spies-clocks","_content":"\n# Capabilities\n\nCypress comes built in with the ability to [`stub`](https://on.cypress.io/api/stub), [`spy`](https://on.cypress.io/api/spy) or modify your applications [`clock`](https://on.cypress.io/api/clock) - such as controlling `Date`, `setTimeout`, and `setInterval`.\n\nThese commands are useful when writing both **unit tests** and **integration tests**.\n\n***\n\n# Libraries and Tools\n\nCypress automatically bundles and wraps these libraries:\n\n| Name | What it does |\n| --- | ---- |\n| [`sinon`](http://sinonjs.org) | provides the [`stub`](https://on.cypress.io/api/stub) and [`spy`](https://on.cypress.io/api/spy) API's |\n| [`lolex`](https://github.com/sinonjs/lolex) | provides the [`clock`](https://on.cypress.io/api/clock) and [`tick`](https://on.cypress.io/api/tick) API's |\n| [`sinon-as-promised`](https://github.com/bendrucker/sinon-as-promised) | makes it easy to stub `Promise` returning functions |\n| [`sinon-chai`](https://github.com/domenic/sinon-chai) | adds `chai` assertions for stubs and spies |\n\nYou can refer to each of these libraries documentation for more examples and explanations.\n\n***\n\n# Common Scenarios\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe testing spying, stubbing and time](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/spy_stub_clock_spec.js)\",\n  \"title\": \"Example test!\"\n}\n[/block]\n\n## Stubs\n\nA stub is a way to modify a function and force its behavior to be controlled by you (the programmer).\n\nA stub is most commonly used in a unit test but is still useful during some integration / e2e tests.\n\n```javascript\n// create a standalone stub (generally for use in unit test)\ncy.stub()\n\n// replace obj.method() with a stubbed function\ncy.stub(obj, \"method\")\n\n// force obj.method() to return \"foo\"\ncy.stub(obj, \"method\").returns(\"foo\")\n\n// force obj.method() when called with \"bar\" argument to return \"foo\"\ncy.stub(obj, \"method\").withArgs(\"bar\").returns(\"foo\")\n\n// force obj.method() to return a promise which resolves to \"foo\"\ncy.stub(obj, \"method\").resolves(\"foo\")\n\n// force obj.method() to return a promise rejected with an error\ncy.stub(obj, \"method\").rejects(new Error(\"foo\"))\n```\n\nYou generally stub a function when it has side effects you are trying to control.\n\n**Common Scenarios:**\n\n- You have a function that accepts a callback, and want to invoke the callback.\n- Your function returns a `Promise`, and you want to automatically resolve or reject it.\n- You have a function that wraps `window.location` and don't want your application to be navigated.\n- You're trying to test your applications \"failure path\" by forcing things to fail.\n- You're trying to test your applications \"happy path\" by forcing things to pass.\n- You want to \"trick\" your application into thinking its logged in or logged out.\n- You're using `oauth` and want to stub login methods.\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Read more about how to use cy.stub](https://on.cypress.io/api/stub)\",\n  \"title\": \"cy.stub()\"\n}\n[/block]\n\n***\n\n## Spies\n\nA spy gives you the ability to \"spy\" on a function, by being able to capture and then assert that the function was calling with the right arguments, or that the function was called a certain number of times, or even what the return value or context the function was called with.\n\nA spy does **not** modify the behavior of the function - it is left perfectly intact. A spy is most useful when you are testing the contract between multiple functions and you don't care about the side effects the real function may create (if any).\n\n```javascript\ncy.spy(obj, \"method\")\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Read more about how to use cy.spy](https://on.cypress.io/api/spy)\",\n  \"title\": \"cy.spy()\"\n}\n[/block]\n\n***\n\n## Clock\n\nThere are situations when it is useful to control your applications `date` and `time` in order to force its behavior or avoid slow tests.\n\n[`cy.clock`](https://on.cypress.io/api/clock) gives you the ability to control:\n\n- `Date`\n- `setTimeout`\n- `setInterval`\n\n**Common Scenarios:**\n\n- You're polling something in your application with `setInterval` and want to control that.\n- You have **throttled** or **debounced** functions which you want to control.\n\nOnce you've enabled [`cy.clock`](https://on.cypress.io/api/clock) you can then control time by **ticking** it ahead by milliseconds.\n\n```javascript\ncy\n  .clock()\n  .visit(\"http://localhost:3333\")\n  .get(\"#search\").type(\"foobarbaz\")\n  .tick(1000)\n```\n\n[`cy.clock`](https://on.cypress.io/api/clock) is special in that it can be called **prior** to visiting your application, and we will automatically bind it to the application on the next [`cy.visit`](https://on.cypress.io/api/visit). We bind **before** any timers from your application can be invoked. This works identically to [`cy.server`](https://on.cypress.io/api/server) + [`cy.route`](https://on.cypress.io/api/route).\n\n***\n\n## Assertions\n\nOnce you have a `stub` or a `spy` in hand, you can then create assertions about them.\n\n```javascript\nconst user = {\n  getName: function(arg){\n    return arg\n  },\n\n  updateEmail: function(arg){\n    return arg\n  },\n\n  fail: function(){\n    throw new Error(\"fail whale\")\n  }\n}\n\n// force user.getName() to return \"Jane\"\ncy.stub(user, \"getName\").returns(\"Jane Lane\")\n\n// spy on updateEmail but do not change its behavior\ncy.spy(user, \"updateEmail\")\n\n// spy on fail but do not change its behavior\ncy.spy(user, \"fail\")\n\n// invoke getName\nconst name  = user.getName(123)\n\n// invoke updateEmail\nconst email = user.updateEmail(\"jane@devs.com\")\n\ntry {\n  // invoke fail\n  user.fail()\n  } catch (e) {\n\n}\n\nexpect(name).to.eq(\"Jane Lane\")                            // true\nexpect(user.getName).to.be.calledOnce                      // true\nexpect(user.getName).not.to.be.calledTwice                 // true\nexpect(user.getName).to.be.calledWith(123)\nexpect(user.getName).to.be.calledWithExactly(123)          // true\nexpect(user.getName).to.be.calledOn(user)                  // true\n\nexpect(email).to.eq(\"jane@devs.com\")                       // true\nexpect(user.updateEmail).to.be.calledWith(\"jane@devs.com\") // true\nexpect(user.updateEmail).to.have.returned(\"jane@devs.com\") // true\n\nexpect(user.fail).to.have.thrown(\"Error\")                  // true\n```\n\n***\n\n# Integration and Extensions\n\nBeyond just integrating these tools together we have also extended and improved the collaboration of these tools.\n\nSome examples:\n\n- We replaced Sinon's argument stringifier for a much less noisy, more performant, custom version.\n- We improved the `sinon-chai` assertion output by changing what displays during a passing vs failing test.\n- We've added aliasing support to `stub` and `spy` API's.\n- We automatically restore and teardown `stub`, `spy`, and `clock` between tests.\n\nWe also integrated all of these API's directly into the Command Log so you can visually see what's happening in your application.\n\nWe visually indicate when:\n\n- A `stub` is called\n- A `spy` is called\n- A `clock` is ticked\n\nWhen you use aliasing with the [`.as(alias)`](https://on.cypress.io/api/as) command, we also coorelate those aliases with the calls. This works identically to aliasing a [`cy.route`](https://on.cypress.io/api/route).\n\nWhen stubs are created by calling the method `.withArgs(...)` we also visually link these together.\n\nWhen you click on a stub or spy we also output **incredibly** helpful debugging information.\n\nFor instance we automatically display:\n\n- The call count (and total number of calls)\n- The arguments without transforming them (they are the real arguments)\n- The return value of the function\n- The context the function was invoked with\n","source":"guides/guides/stubs-spies-and-clocks.md","raw":"title: stubs-spies-clocks\n---\n\n# Capabilities\n\nCypress comes built in with the ability to [`stub`](https://on.cypress.io/api/stub), [`spy`](https://on.cypress.io/api/spy) or modify your applications [`clock`](https://on.cypress.io/api/clock) - such as controlling `Date`, `setTimeout`, and `setInterval`.\n\nThese commands are useful when writing both **unit tests** and **integration tests**.\n\n***\n\n# Libraries and Tools\n\nCypress automatically bundles and wraps these libraries:\n\n| Name | What it does |\n| --- | ---- |\n| [`sinon`](http://sinonjs.org) | provides the [`stub`](https://on.cypress.io/api/stub) and [`spy`](https://on.cypress.io/api/spy) API's |\n| [`lolex`](https://github.com/sinonjs/lolex) | provides the [`clock`](https://on.cypress.io/api/clock) and [`tick`](https://on.cypress.io/api/tick) API's |\n| [`sinon-as-promised`](https://github.com/bendrucker/sinon-as-promised) | makes it easy to stub `Promise` returning functions |\n| [`sinon-chai`](https://github.com/domenic/sinon-chai) | adds `chai` assertions for stubs and spies |\n\nYou can refer to each of these libraries documentation for more examples and explanations.\n\n***\n\n# Common Scenarios\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe testing spying, stubbing and time](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/spy_stub_clock_spec.js)\",\n  \"title\": \"Example test!\"\n}\n[/block]\n\n## Stubs\n\nA stub is a way to modify a function and force its behavior to be controlled by you (the programmer).\n\nA stub is most commonly used in a unit test but is still useful during some integration / e2e tests.\n\n```javascript\n// create a standalone stub (generally for use in unit test)\ncy.stub()\n\n// replace obj.method() with a stubbed function\ncy.stub(obj, \"method\")\n\n// force obj.method() to return \"foo\"\ncy.stub(obj, \"method\").returns(\"foo\")\n\n// force obj.method() when called with \"bar\" argument to return \"foo\"\ncy.stub(obj, \"method\").withArgs(\"bar\").returns(\"foo\")\n\n// force obj.method() to return a promise which resolves to \"foo\"\ncy.stub(obj, \"method\").resolves(\"foo\")\n\n// force obj.method() to return a promise rejected with an error\ncy.stub(obj, \"method\").rejects(new Error(\"foo\"))\n```\n\nYou generally stub a function when it has side effects you are trying to control.\n\n**Common Scenarios:**\n\n- You have a function that accepts a callback, and want to invoke the callback.\n- Your function returns a `Promise`, and you want to automatically resolve or reject it.\n- You have a function that wraps `window.location` and don't want your application to be navigated.\n- You're trying to test your applications \"failure path\" by forcing things to fail.\n- You're trying to test your applications \"happy path\" by forcing things to pass.\n- You want to \"trick\" your application into thinking its logged in or logged out.\n- You're using `oauth` and want to stub login methods.\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Read more about how to use cy.stub](https://on.cypress.io/api/stub)\",\n  \"title\": \"cy.stub()\"\n}\n[/block]\n\n***\n\n## Spies\n\nA spy gives you the ability to \"spy\" on a function, by being able to capture and then assert that the function was calling with the right arguments, or that the function was called a certain number of times, or even what the return value or context the function was called with.\n\nA spy does **not** modify the behavior of the function - it is left perfectly intact. A spy is most useful when you are testing the contract between multiple functions and you don't care about the side effects the real function may create (if any).\n\n```javascript\ncy.spy(obj, \"method\")\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Read more about how to use cy.spy](https://on.cypress.io/api/spy)\",\n  \"title\": \"cy.spy()\"\n}\n[/block]\n\n***\n\n## Clock\n\nThere are situations when it is useful to control your applications `date` and `time` in order to force its behavior or avoid slow tests.\n\n[`cy.clock`](https://on.cypress.io/api/clock) gives you the ability to control:\n\n- `Date`\n- `setTimeout`\n- `setInterval`\n\n**Common Scenarios:**\n\n- You're polling something in your application with `setInterval` and want to control that.\n- You have **throttled** or **debounced** functions which you want to control.\n\nOnce you've enabled [`cy.clock`](https://on.cypress.io/api/clock) you can then control time by **ticking** it ahead by milliseconds.\n\n```javascript\ncy\n  .clock()\n  .visit(\"http://localhost:3333\")\n  .get(\"#search\").type(\"foobarbaz\")\n  .tick(1000)\n```\n\n[`cy.clock`](https://on.cypress.io/api/clock) is special in that it can be called **prior** to visiting your application, and we will automatically bind it to the application on the next [`cy.visit`](https://on.cypress.io/api/visit). We bind **before** any timers from your application can be invoked. This works identically to [`cy.server`](https://on.cypress.io/api/server) + [`cy.route`](https://on.cypress.io/api/route).\n\n***\n\n## Assertions\n\nOnce you have a `stub` or a `spy` in hand, you can then create assertions about them.\n\n```javascript\nconst user = {\n  getName: function(arg){\n    return arg\n  },\n\n  updateEmail: function(arg){\n    return arg\n  },\n\n  fail: function(){\n    throw new Error(\"fail whale\")\n  }\n}\n\n// force user.getName() to return \"Jane\"\ncy.stub(user, \"getName\").returns(\"Jane Lane\")\n\n// spy on updateEmail but do not change its behavior\ncy.spy(user, \"updateEmail\")\n\n// spy on fail but do not change its behavior\ncy.spy(user, \"fail\")\n\n// invoke getName\nconst name  = user.getName(123)\n\n// invoke updateEmail\nconst email = user.updateEmail(\"jane@devs.com\")\n\ntry {\n  // invoke fail\n  user.fail()\n  } catch (e) {\n\n}\n\nexpect(name).to.eq(\"Jane Lane\")                            // true\nexpect(user.getName).to.be.calledOnce                      // true\nexpect(user.getName).not.to.be.calledTwice                 // true\nexpect(user.getName).to.be.calledWith(123)\nexpect(user.getName).to.be.calledWithExactly(123)          // true\nexpect(user.getName).to.be.calledOn(user)                  // true\n\nexpect(email).to.eq(\"jane@devs.com\")                       // true\nexpect(user.updateEmail).to.be.calledWith(\"jane@devs.com\") // true\nexpect(user.updateEmail).to.have.returned(\"jane@devs.com\") // true\n\nexpect(user.fail).to.have.thrown(\"Error\")                  // true\n```\n\n***\n\n# Integration and Extensions\n\nBeyond just integrating these tools together we have also extended and improved the collaboration of these tools.\n\nSome examples:\n\n- We replaced Sinon's argument stringifier for a much less noisy, more performant, custom version.\n- We improved the `sinon-chai` assertion output by changing what displays during a passing vs failing test.\n- We've added aliasing support to `stub` and `spy` API's.\n- We automatically restore and teardown `stub`, `spy`, and `clock` between tests.\n\nWe also integrated all of these API's directly into the Command Log so you can visually see what's happening in your application.\n\nWe visually indicate when:\n\n- A `stub` is called\n- A `spy` is called\n- A `clock` is ticked\n\nWhen you use aliasing with the [`.as(alias)`](https://on.cypress.io/api/as) command, we also coorelate those aliases with the calls. This works identically to aliasing a [`cy.route`](https://on.cypress.io/api/route).\n\nWhen stubs are created by calling the method `.withArgs(...)` we also visually link these together.\n\nWhen you click on a stub or spy we also output **incredibly** helpful debugging information.\n\nFor instance we automatically display:\n\n- The call count (and total number of calls)\n- The arguments without transforming them (they are the real arguments)\n- The return value of the function\n- The context the function was invoked with\n","date":"2017-04-19T18:46:47.000Z","updated":"2017-04-19T18:46:47.000Z","path":"guides/guides/stubs-spies-and-clocks.html","comments":1,"layout":"page","_id":"cj1pby1kt003068g8dxjyblwr","content":"<h1 id=\"Capabilities\"><a href=\"#Capabilities\" class=\"headerlink\" title=\"Capabilities\"></a>Capabilities</h1><p>Cypress comes built in with the ability to <a href=\"https://on.cypress.io/api/stub\" target=\"_blank\" rel=\"external\"><code>stub</code></a>, <a href=\"https://on.cypress.io/api/spy\" target=\"_blank\" rel=\"external\"><code>spy</code></a> or modify your applications <a href=\"https://on.cypress.io/api/clock\" target=\"_blank\" rel=\"external\"><code>clock</code></a> - such as controlling <code>Date</code>, <code>setTimeout</code>, and <code>setInterval</code>.</p>\n<p>These commands are useful when writing both <strong>unit tests</strong> and <strong>integration tests</strong>.</p>\n<hr>\n<h1 id=\"Libraries-and-Tools\"><a href=\"#Libraries-and-Tools\" class=\"headerlink\" title=\"Libraries and Tools\"></a>Libraries and Tools</h1><p>Cypress automatically bundles and wraps these libraries:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>What it does</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://sinonjs.org\" target=\"_blank\" rel=\"external\"><code>sinon</code></a></td>\n<td>provides the <a href=\"https://on.cypress.io/api/stub\" target=\"_blank\" rel=\"external\"><code>stub</code></a> and <a href=\"https://on.cypress.io/api/spy\" target=\"_blank\" rel=\"external\"><code>spy</code></a> API’s</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/sinonjs/lolex\" target=\"_blank\" rel=\"external\"><code>lolex</code></a></td>\n<td>provides the <a href=\"https://on.cypress.io/api/clock\" target=\"_blank\" rel=\"external\"><code>clock</code></a> and <a href=\"https://on.cypress.io/api/tick\" target=\"_blank\" rel=\"external\"><code>tick</code></a> API’s</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/bendrucker/sinon-as-promised\" target=\"_blank\" rel=\"external\"><code>sinon-as-promised</code></a></td>\n<td>makes it easy to stub <code>Promise</code> returning functions</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/domenic/sinon-chai\" target=\"_blank\" rel=\"external\"><code>sinon-chai</code></a></td>\n<td>adds <code>chai</code> assertions for stubs and spies</td>\n</tr>\n</tbody>\n</table>\n<p>You can refer to each of these libraries documentation for more examples and explanations.</p>\n<hr>\n<h1 id=\"Common-Scenarios\"><a href=\"#Common-Scenarios\" class=\"headerlink\" title=\"Common Scenarios\"></a>Common Scenarios</h1><p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/spy_stub_clock_spec.js\" target=\"_blank\" rel=\"external\">Check out our example recipe testing spying, stubbing and time</a>“,<br>  “title”: “Example test!”<br>}<br>[/block]</p>\n<h2 id=\"Stubs\"><a href=\"#Stubs\" class=\"headerlink\" title=\"Stubs\"></a>Stubs</h2><p>A stub is a way to modify a function and force its behavior to be controlled by you (the programmer).</p>\n<p>A stub is most commonly used in a unit test but is still useful during some integration / e2e tests.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// create a standalone stub (generally for use in unit test)</span></div><div class=\"line\">cy.stub()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// replace obj.method() with a stubbed function</span></div><div class=\"line\">cy.stub(obj, <span class=\"string\">\"method\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// force obj.method() to return \"foo\"</span></div><div class=\"line\">cy.stub(obj, <span class=\"string\">\"method\"</span>).returns(<span class=\"string\">\"foo\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// force obj.method() when called with \"bar\" argument to return \"foo\"</span></div><div class=\"line\">cy.stub(obj, <span class=\"string\">\"method\"</span>).withArgs(<span class=\"string\">\"bar\"</span>).returns(<span class=\"string\">\"foo\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// force obj.method() to return a promise which resolves to \"foo\"</span></div><div class=\"line\">cy.stub(obj, <span class=\"string\">\"method\"</span>).resolves(<span class=\"string\">\"foo\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// force obj.method() to return a promise rejected with an error</span></div><div class=\"line\">cy.stub(obj, <span class=\"string\">\"method\"</span>).rejects(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"foo\"</span>))</div></pre></td></tr></table></figure>\n<p>You generally stub a function when it has side effects you are trying to control.</p>\n<p><strong>Common Scenarios:</strong></p>\n<ul>\n<li>You have a function that accepts a callback, and want to invoke the callback.</li>\n<li>Your function returns a <code>Promise</code>, and you want to automatically resolve or reject it.</li>\n<li>You have a function that wraps <code>window.location</code> and don’t want your application to be navigated.</li>\n<li>You’re trying to test your applications “failure path” by forcing things to fail.</li>\n<li>You’re trying to test your applications “happy path” by forcing things to pass.</li>\n<li>You want to “trick” your application into thinking its logged in or logged out.</li>\n<li>You’re using <code>oauth</code> and want to stub login methods.</li>\n</ul>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://on.cypress.io/api/stub\" target=\"_blank\" rel=\"external\">Read more about how to use cy.stub</a>“,<br>  “title”: “cy.stub()”<br>}<br>[/block]</p>\n<hr>\n<h2 id=\"Spies\"><a href=\"#Spies\" class=\"headerlink\" title=\"Spies\"></a>Spies</h2><p>A spy gives you the ability to “spy” on a function, by being able to capture and then assert that the function was calling with the right arguments, or that the function was called a certain number of times, or even what the return value or context the function was called with.</p>\n<p>A spy does <strong>not</strong> modify the behavior of the function - it is left perfectly intact. A spy is most useful when you are testing the contract between multiple functions and you don’t care about the side effects the real function may create (if any).</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.spy(obj, <span class=\"string\">\"method\"</span>)</div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://on.cypress.io/api/spy\" target=\"_blank\" rel=\"external\">Read more about how to use cy.spy</a>“,<br>  “title”: “cy.spy()”<br>}<br>[/block]</p>\n<hr>\n<h2 id=\"Clock\"><a href=\"#Clock\" class=\"headerlink\" title=\"Clock\"></a>Clock</h2><p>There are situations when it is useful to control your applications <code>date</code> and <code>time</code> in order to force its behavior or avoid slow tests.</p>\n<p><a href=\"https://on.cypress.io/api/clock\" target=\"_blank\" rel=\"external\"><code>cy.clock</code></a> gives you the ability to control:</p>\n<ul>\n<li><code>Date</code></li>\n<li><code>setTimeout</code></li>\n<li><code>setInterval</code></li>\n</ul>\n<p><strong>Common Scenarios:</strong></p>\n<ul>\n<li>You’re polling something in your application with <code>setInterval</code> and want to control that.</li>\n<li>You have <strong>throttled</strong> or <strong>debounced</strong> functions which you want to control.</li>\n</ul>\n<p>Once you’ve enabled <a href=\"https://on.cypress.io/api/clock\" target=\"_blank\" rel=\"external\"><code>cy.clock</code></a> you can then control time by <strong>ticking</strong> it ahead by milliseconds.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .clock()</div><div class=\"line\">  .visit(<span class=\"string\">\"http://localhost:3333\"</span>)</div><div class=\"line\">  .get(<span class=\"string\">\"#search\"</span>).type(<span class=\"string\">\"foobarbaz\"</span>)</div><div class=\"line\">  .tick(<span class=\"number\">1000</span>)</div></pre></td></tr></table></figure>\n<p><a href=\"https://on.cypress.io/api/clock\" target=\"_blank\" rel=\"external\"><code>cy.clock</code></a> is special in that it can be called <strong>prior</strong> to visiting your application, and we will automatically bind it to the application on the next <a href=\"https://on.cypress.io/api/visit\" target=\"_blank\" rel=\"external\"><code>cy.visit</code></a>. We bind <strong>before</strong> any timers from your application can be invoked. This works identically to <a href=\"https://on.cypress.io/api/server\" target=\"_blank\" rel=\"external\"><code>cy.server</code></a> + <a href=\"https://on.cypress.io/api/route\" target=\"_blank\" rel=\"external\"><code>cy.route</code></a>.</p>\n<hr>\n<h2 id=\"Assertions\"><a href=\"#Assertions\" class=\"headerlink\" title=\"Assertions\"></a>Assertions</h2><p>Once you have a <code>stub</code> or a <code>spy</code> in hand, you can then create assertions about them.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> user = &#123;</div><div class=\"line\">  <span class=\"attr\">getName</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> arg</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"attr\">updateEmail</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> arg</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"attr\">fail</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"fail whale\"</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// force user.getName() to return \"Jane\"</span></div><div class=\"line\">cy.stub(user, <span class=\"string\">\"getName\"</span>).returns(<span class=\"string\">\"Jane Lane\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// spy on updateEmail but do not change its behavior</span></div><div class=\"line\">cy.spy(user, <span class=\"string\">\"updateEmail\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// spy on fail but do not change its behavior</span></div><div class=\"line\">cy.spy(user, <span class=\"string\">\"fail\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// invoke getName</span></div><div class=\"line\"><span class=\"keyword\">const</span> name  = user.getName(<span class=\"number\">123</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// invoke updateEmail</span></div><div class=\"line\"><span class=\"keyword\">const</span> email = user.updateEmail(<span class=\"string\">\"jane@devs.com\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// invoke fail</span></div><div class=\"line\">  user.fail()</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">expect(name).to.eq(<span class=\"string\">\"Jane Lane\"</span>)                            <span class=\"comment\">// true</span></div><div class=\"line\">expect(user.getName).to.be.calledOnce                      <span class=\"comment\">// true</span></div><div class=\"line\">expect(user.getName).not.to.be.calledTwice                 <span class=\"comment\">// true</span></div><div class=\"line\">expect(user.getName).to.be.calledWith(<span class=\"number\">123</span>)</div><div class=\"line\">expect(user.getName).to.be.calledWithExactly(<span class=\"number\">123</span>)          <span class=\"comment\">// true</span></div><div class=\"line\">expect(user.getName).to.be.calledOn(user)                  <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\">expect(email).to.eq(<span class=\"string\">\"jane@devs.com\"</span>)                       <span class=\"comment\">// true</span></div><div class=\"line\">expect(user.updateEmail).to.be.calledWith(<span class=\"string\">\"jane@devs.com\"</span>) <span class=\"comment\">// true</span></div><div class=\"line\">expect(user.updateEmail).to.have.returned(<span class=\"string\">\"jane@devs.com\"</span>) <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\">expect(user.fail).to.have.thrown(<span class=\"string\">\"Error\"</span>)                  <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Integration-and-Extensions\"><a href=\"#Integration-and-Extensions\" class=\"headerlink\" title=\"Integration and Extensions\"></a>Integration and Extensions</h1><p>Beyond just integrating these tools together we have also extended and improved the collaboration of these tools.</p>\n<p>Some examples:</p>\n<ul>\n<li>We replaced Sinon’s argument stringifier for a much less noisy, more performant, custom version.</li>\n<li>We improved the <code>sinon-chai</code> assertion output by changing what displays during a passing vs failing test.</li>\n<li>We’ve added aliasing support to <code>stub</code> and <code>spy</code> API’s.</li>\n<li>We automatically restore and teardown <code>stub</code>, <code>spy</code>, and <code>clock</code> between tests.</li>\n</ul>\n<p>We also integrated all of these API’s directly into the Command Log so you can visually see what’s happening in your application.</p>\n<p>We visually indicate when:</p>\n<ul>\n<li>A <code>stub</code> is called</li>\n<li>A <code>spy</code> is called</li>\n<li>A <code>clock</code> is ticked</li>\n</ul>\n<p>When you use aliasing with the <a href=\"https://on.cypress.io/api/as\" target=\"_blank\" rel=\"external\"><code>.as(alias)</code></a> command, we also coorelate those aliases with the calls. This works identically to aliasing a <a href=\"https://on.cypress.io/api/route\" target=\"_blank\" rel=\"external\"><code>cy.route</code></a>.</p>\n<p>When stubs are created by calling the method <code>.withArgs(...)</code> we also visually link these together.</p>\n<p>When you click on a stub or spy we also output <strong>incredibly</strong> helpful debugging information.</p>\n<p>For instance we automatically display:</p>\n<ul>\n<li>The call count (and total number of calls)</li>\n<li>The arguments without transforming them (they are the real arguments)</li>\n<li>The return value of the function</li>\n<li>The context the function was invoked with</li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<h1 id=\"Capabilities\"><a href=\"#Capabilities\" class=\"headerlink\" title=\"Capabilities\"></a>Capabilities</h1><p>Cypress comes built in with the ability to <a href=\"https://on.cypress.io/api/stub\"><code>stub</code></a>, <a href=\"https://on.cypress.io/api/spy\"><code>spy</code></a> or modify your applications <a href=\"https://on.cypress.io/api/clock\"><code>clock</code></a> - such as controlling <code>Date</code>, <code>setTimeout</code>, and <code>setInterval</code>.</p>\n<p>These commands are useful when writing both <strong>unit tests</strong> and <strong>integration tests</strong>.</p>\n<hr>\n<h1 id=\"Libraries-and-Tools\"><a href=\"#Libraries-and-Tools\" class=\"headerlink\" title=\"Libraries and Tools\"></a>Libraries and Tools</h1><p>Cypress automatically bundles and wraps these libraries:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>What it does</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://sinonjs.org\"><code>sinon</code></a></td>\n<td>provides the <a href=\"https://on.cypress.io/api/stub\"><code>stub</code></a> and <a href=\"https://on.cypress.io/api/spy\"><code>spy</code></a> API’s</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/sinonjs/lolex\"><code>lolex</code></a></td>\n<td>provides the <a href=\"https://on.cypress.io/api/clock\"><code>clock</code></a> and <a href=\"https://on.cypress.io/api/tick\"><code>tick</code></a> API’s</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/bendrucker/sinon-as-promised\"><code>sinon-as-promised</code></a></td>\n<td>makes it easy to stub <code>Promise</code> returning functions</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/domenic/sinon-chai\"><code>sinon-chai</code></a></td>\n<td>adds <code>chai</code> assertions for stubs and spies</td>\n</tr>\n</tbody>\n</table>\n<p>You can refer to each of these libraries documentation for more examples and explanations.</p>\n<hr>\n<h1 id=\"Common-Scenarios\"><a href=\"#Common-Scenarios\" class=\"headerlink\" title=\"Common Scenarios\"></a>Common Scenarios</h1><p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/spy_stub_clock_spec.js\">Check out our example recipe testing spying, stubbing and time</a>“,<br>  “title”: “Example test!”<br>}<br>[/block]</p>\n<h2 id=\"Stubs\"><a href=\"#Stubs\" class=\"headerlink\" title=\"Stubs\"></a>Stubs</h2><p>A stub is a way to modify a function and force its behavior to be controlled by you (the programmer).</p>\n<p>A stub is most commonly used in a unit test but is still useful during some integration / e2e tests.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// create a standalone stub (generally for use in unit test)</span></div><div class=\"line\">cy.stub()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// replace obj.method() with a stubbed function</span></div><div class=\"line\">cy.stub(obj, <span class=\"string\">\"method\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// force obj.method() to return \"foo\"</span></div><div class=\"line\">cy.stub(obj, <span class=\"string\">\"method\"</span>).returns(<span class=\"string\">\"foo\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// force obj.method() when called with \"bar\" argument to return \"foo\"</span></div><div class=\"line\">cy.stub(obj, <span class=\"string\">\"method\"</span>).withArgs(<span class=\"string\">\"bar\"</span>).returns(<span class=\"string\">\"foo\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// force obj.method() to return a promise which resolves to \"foo\"</span></div><div class=\"line\">cy.stub(obj, <span class=\"string\">\"method\"</span>).resolves(<span class=\"string\">\"foo\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// force obj.method() to return a promise rejected with an error</span></div><div class=\"line\">cy.stub(obj, <span class=\"string\">\"method\"</span>).rejects(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"foo\"</span>))</div></pre></td></tr></table></figure>\n<p>You generally stub a function when it has side effects you are trying to control.</p>\n<p><strong>Common Scenarios:</strong></p>\n<ul>\n<li>You have a function that accepts a callback, and want to invoke the callback.</li>\n<li>Your function returns a <code>Promise</code>, and you want to automatically resolve or reject it.</li>\n<li>You have a function that wraps <code>window.location</code> and don’t want your application to be navigated.</li>\n<li>You’re trying to test your applications “failure path” by forcing things to fail.</li>\n<li>You’re trying to test your applications “happy path” by forcing things to pass.</li>\n<li>You want to “trick” your application into thinking its logged in or logged out.</li>\n<li>You’re using <code>oauth</code> and want to stub login methods.</li>\n</ul>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://on.cypress.io/api/stub\">Read more about how to use cy.stub</a>“,<br>  “title”: “cy.stub()”<br>}<br>[/block]</p>\n<hr>\n<h2 id=\"Spies\"><a href=\"#Spies\" class=\"headerlink\" title=\"Spies\"></a>Spies</h2><p>A spy gives you the ability to “spy” on a function, by being able to capture and then assert that the function was calling with the right arguments, or that the function was called a certain number of times, or even what the return value or context the function was called with.</p>\n<p>A spy does <strong>not</strong> modify the behavior of the function - it is left perfectly intact. A spy is most useful when you are testing the contract between multiple functions and you don’t care about the side effects the real function may create (if any).</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.spy(obj, <span class=\"string\">\"method\"</span>)</div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://on.cypress.io/api/spy\">Read more about how to use cy.spy</a>“,<br>  “title”: “cy.spy()”<br>}<br>[/block]</p>\n<hr>\n<h2 id=\"Clock\"><a href=\"#Clock\" class=\"headerlink\" title=\"Clock\"></a>Clock</h2><p>There are situations when it is useful to control your applications <code>date</code> and <code>time</code> in order to force its behavior or avoid slow tests.</p>\n<p><a href=\"https://on.cypress.io/api/clock\"><code>cy.clock</code></a> gives you the ability to control:</p>\n<ul>\n<li><code>Date</code></li>\n<li><code>setTimeout</code></li>\n<li><code>setInterval</code></li>\n</ul>\n<p><strong>Common Scenarios:</strong></p>\n<ul>\n<li>You’re polling something in your application with <code>setInterval</code> and want to control that.</li>\n<li>You have <strong>throttled</strong> or <strong>debounced</strong> functions which you want to control.</li>\n</ul>\n<p>Once you’ve enabled <a href=\"https://on.cypress.io/api/clock\"><code>cy.clock</code></a> you can then control time by <strong>ticking</strong> it ahead by milliseconds.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .clock()</div><div class=\"line\">  .visit(<span class=\"string\">\"http://localhost:3333\"</span>)</div><div class=\"line\">  .get(<span class=\"string\">\"#search\"</span>).type(<span class=\"string\">\"foobarbaz\"</span>)</div><div class=\"line\">  .tick(<span class=\"number\">1000</span>)</div></pre></td></tr></table></figure>\n<p><a href=\"https://on.cypress.io/api/clock\"><code>cy.clock</code></a> is special in that it can be called <strong>prior</strong> to visiting your application, and we will automatically bind it to the application on the next <a href=\"https://on.cypress.io/api/visit\"><code>cy.visit</code></a>. We bind <strong>before</strong> any timers from your application can be invoked. This works identically to <a href=\"https://on.cypress.io/api/server\"><code>cy.server</code></a> + <a href=\"https://on.cypress.io/api/route\"><code>cy.route</code></a>.</p>\n<hr>\n<h2 id=\"Assertions\"><a href=\"#Assertions\" class=\"headerlink\" title=\"Assertions\"></a>Assertions</h2><p>Once you have a <code>stub</code> or a <code>spy</code> in hand, you can then create assertions about them.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> user = &#123;</div><div class=\"line\">  <span class=\"attr\">getName</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> arg</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"attr\">updateEmail</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> arg</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"attr\">fail</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"fail whale\"</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// force user.getName() to return \"Jane\"</span></div><div class=\"line\">cy.stub(user, <span class=\"string\">\"getName\"</span>).returns(<span class=\"string\">\"Jane Lane\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// spy on updateEmail but do not change its behavior</span></div><div class=\"line\">cy.spy(user, <span class=\"string\">\"updateEmail\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// spy on fail but do not change its behavior</span></div><div class=\"line\">cy.spy(user, <span class=\"string\">\"fail\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// invoke getName</span></div><div class=\"line\"><span class=\"keyword\">const</span> name  = user.getName(<span class=\"number\">123</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// invoke updateEmail</span></div><div class=\"line\"><span class=\"keyword\">const</span> email = user.updateEmail(<span class=\"string\">\"jane@devs.com\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// invoke fail</span></div><div class=\"line\">  user.fail()</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">expect(name).to.eq(<span class=\"string\">\"Jane Lane\"</span>)                            <span class=\"comment\">// true</span></div><div class=\"line\">expect(user.getName).to.be.calledOnce                      <span class=\"comment\">// true</span></div><div class=\"line\">expect(user.getName).not.to.be.calledTwice                 <span class=\"comment\">// true</span></div><div class=\"line\">expect(user.getName).to.be.calledWith(<span class=\"number\">123</span>)</div><div class=\"line\">expect(user.getName).to.be.calledWithExactly(<span class=\"number\">123</span>)          <span class=\"comment\">// true</span></div><div class=\"line\">expect(user.getName).to.be.calledOn(user)                  <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\">expect(email).to.eq(<span class=\"string\">\"jane@devs.com\"</span>)                       <span class=\"comment\">// true</span></div><div class=\"line\">expect(user.updateEmail).to.be.calledWith(<span class=\"string\">\"jane@devs.com\"</span>) <span class=\"comment\">// true</span></div><div class=\"line\">expect(user.updateEmail).to.have.returned(<span class=\"string\">\"jane@devs.com\"</span>) <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\">expect(user.fail).to.have.thrown(<span class=\"string\">\"Error\"</span>)                  <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Integration-and-Extensions\"><a href=\"#Integration-and-Extensions\" class=\"headerlink\" title=\"Integration and Extensions\"></a>Integration and Extensions</h1><p>Beyond just integrating these tools together we have also extended and improved the collaboration of these tools.</p>\n<p>Some examples:</p>\n<ul>\n<li>We replaced Sinon’s argument stringifier for a much less noisy, more performant, custom version.</li>\n<li>We improved the <code>sinon-chai</code> assertion output by changing what displays during a passing vs failing test.</li>\n<li>We’ve added aliasing support to <code>stub</code> and <code>spy</code> API’s.</li>\n<li>We automatically restore and teardown <code>stub</code>, <code>spy</code>, and <code>clock</code> between tests.</li>\n</ul>\n<p>We also integrated all of these API’s directly into the Command Log so you can visually see what’s happening in your application.</p>\n<p>We visually indicate when:</p>\n<ul>\n<li>A <code>stub</code> is called</li>\n<li>A <code>spy</code> is called</li>\n<li>A <code>clock</code> is ticked</li>\n</ul>\n<p>When you use aliasing with the <a href=\"https://on.cypress.io/api/as\"><code>.as(alias)</code></a> command, we also coorelate those aliases with the calls. This works identically to aliasing a <a href=\"https://on.cypress.io/api/route\"><code>cy.route</code></a>.</p>\n<p>When stubs are created by calling the method <code>.withArgs(...)</code> we also visually link these together.</p>\n<p>When you click on a stub or spy we also output <strong>incredibly</strong> helpful debugging information.</p>\n<p>For instance we automatically display:</p>\n<ul>\n<li>The call count (and total number of calls)</li>\n<li>The arguments without transforming them (they are the real arguments)</li>\n<li>The return value of the function</li>\n<li>The context the function was invoked with</li>\n</ul>\n"},{"title":"using-aliases","_content":"\n# Async Challenges\n\nBecause all commands in Cypress are asynchronous, it makes referencing commands challenging. Aliasing is a DSL that solves referencing work done in previous commands.\n\n**Imagine the following synchronous example in jQuery:**\n\n```javascript\nvar body = $(\"body\")\n\n// do more work here\n\n// later use this body reference\nbody.find(\"button\")\n```\n\n> In Cypress, every command is asynchronous.\n\nIn jQuery we can assign regular values because work is performed synchronously. But in Cypress, every command is asynchronous, so there is no immediate return value. You'd have to do something like this to get access to previously resolved values:\n\n```javascript\n// A not good example of referencing in Cypress\n\nvar _this = this\n\ncy.get(\"body\").then(function($body){\n  _this.body = $body\n})\n\n// more work here\n\ncy.then(function(){\n  cy.wrap(_this.body).find(\"button\")\n})\n```\n\nOf course this is *not good*. It's clunky and difficult to figure out what is going on. Plus, with complex JavaScript applications, the element references may no longer be in the DOM by the time you're ready to use them.\n\n***\n\n# Introducing Aliasing\n\n**Aliasing** was designed to solve async referencing issues and DOM Element re-querying, routing requests and responses, server integration, and automated error handling. Aliasing also gives you a human readable word for a potentially complex series of events. Aliasing is prominently displayed in the Cypress Command Log making it even easier to understand relationships.\n\n**Aliasing is incredibly powerful but very simple to use:**\n\n* Create an alias with the [`cy.as`](https://on.cypress.io/api/as) command.\n* Reference an alias with the [`cy.get`](https://on.cypress.io/api/get) or [`cy.wait`](https://on.cypress.io/api/wait) command.\n\nEvery time you reference an alias, it should be prefixed with `@`. You can think of this character as \"a\" for alias or you can think of an alias as a pointer (like how variables point to memory).\n\n# Aliasing DOM Elements\n\nOne use case for aliasing is for referencing a DOM Element.\n\n```javascript\n// alias all of the tr's found in the table as 'rows'\ncy.get(\"table\").find(\"tr\").as(\"rows\")\n```\n\nInternally Cypress has made a reference to the `<tr>` collection returned as the alias \"rows\". To reference these same \"rows\" later, you can use the [`cy.get`](https://on.cypress.io/api/get) command.\n\n```javascript\n// Cypress returns the reference to the <tr>'s\n// which allows us to continue to chain commands\n// finding the 1st row.\ncy.get(\"@rows\").first().click()\n```\n\nBecause we've used the `@` character in [`cy.get`](https://on.cypress.io/api/get), instead of querying the DOM for elements, [`cy.get`](https://on.cypress.io/api/get) looks for an existing alias called `rows` and returns the reference (if it finds it).\n\n***\n\n## When alias references no longer exist in the DOM\n\nCypress automatically decides when it should reference existing elements or re-query for new elements.\n\nIn many single-page JavaScript applications, the DOM re-renders parts of the application constantly. If you alias DOM elements that have been removed from the DOM by the time you call [`cy.get`](https://on.cypress.io/api/get) with the alias, Cypress automatically re-querys the DOM to find these elements again.\n\n```html\n<ul id=\"todos\">\n  <li>\n    Walk the dog\n    <button class=\"edit\">edit</button>\n  </li>\n  <li>\n    Feed the cat\n    <button class=\"edit\">edit</button>\n  </li>\n</ul>\n```\n\nLet's imagine when we click the `.edit` button that our `<li>` is re-rendered in the DOM. Instead of displaying the edit button, it instead displays an `<input />` text field allowing you to edit the todo. The previous `<li>` has been *completely* removed from the DOM, and a new `<li>` is rendered in its place.\n\n**Cypress calculates stale alias references.**\n\n```javascript\ncy\n  .get(\"#todos li\").first().as(\"firstTodo\")\n  .get(\"@firstTodo\").find(\".edit\").click()\n  .get(\"@firstTodo\").should(\"have.class\", \"editing\")\n    .find(\"input\").type(\"Clean the kitchen\")\n```\n\nWhen we reference `@firstTodo`, Cypress checks to see if all elements its referencing are still in the DOM. If they are, it returns those existing elements. If they aren't, Cypress replays the commands leading up to the alias definition.\n\nIn our case it would re-issue the commands: `cy.get(\"#todos li\").first()`. Everything just works because the new `<li>` is found.\n\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"*Usually* replaying previous commands will return what you expect, but not always. Cypress' calculations are complicated and we may improve this algorithm at a later time. It is recommended to not alias DOM elements very far down a chain of commands - **alias elements as soon as possible with as few commands as possible**. When in doubt, you can *always* issue a regular `cy.get` to query for the elements again.\"\n}\n[/block]\n\n***\n\n# Aliasing Routes\n\nAnother use case for aliasing is with routes. Using aliases with [`cy.route`](https://on.cypress.io/api/route) makes dealing with AJAX requests much easier.\n\n![alias-routes](https://cloud.githubusercontent.com/assets/1271364/12363262/cf6fee26-bb95-11e5-8592-4f8cd3a6520e.jpg)\n\n```javascript\ncy\n  .server()\n  // alias this route as 'postUser'\n  .route(\"POST\", /users/, {id: 123}).as(\"postUser\")\n```\n\nOnce you've given a route an alias, you can use it later to indicate what you expect to have happen in your application. Imagine your application's code is as follows:\n\n```javascript\n$(\"form\").submit(function(){\n  var data = $(this).serializeData()\n\n  // simple example of an async\n  // request that only goes out\n  // after an indeterminate period of time\n  setTimeout(function(){\n    $.post(\"/users\", {data: data})\n  }, 1000)\n})\n```\n\nYou can tell Cypress to wait until it sees a request that matches your aliased route using the [`cy.wait`](https://on.cypress.io/api/wait) command.\n\n```javascript\ncy\n  .get(\"form\").submit()\n  .wait(\"@postUser\")\n  .get(\".success\").contains(\"User successfully created!\")\n```\n\n**Telling Cypress to wait for an AJAX request that matches an aliased route has enormous advantages.**\n\n1. Waiting for an explicit route reference is less flaky. Instead of waiting for an arbitrary period of time, waiting for a specific aliased route is much more predictable.\n2. Cypress will resolve if there's already been a request that matches the alias.\n3. The actual XHR request object will be yielded to you as the next subject.\n4. Errors are more obvious.\n","source":"guides/guides/using-aliases.md","raw":"title: using-aliases\n---\n\n# Async Challenges\n\nBecause all commands in Cypress are asynchronous, it makes referencing commands challenging. Aliasing is a DSL that solves referencing work done in previous commands.\n\n**Imagine the following synchronous example in jQuery:**\n\n```javascript\nvar body = $(\"body\")\n\n// do more work here\n\n// later use this body reference\nbody.find(\"button\")\n```\n\n> In Cypress, every command is asynchronous.\n\nIn jQuery we can assign regular values because work is performed synchronously. But in Cypress, every command is asynchronous, so there is no immediate return value. You'd have to do something like this to get access to previously resolved values:\n\n```javascript\n// A not good example of referencing in Cypress\n\nvar _this = this\n\ncy.get(\"body\").then(function($body){\n  _this.body = $body\n})\n\n// more work here\n\ncy.then(function(){\n  cy.wrap(_this.body).find(\"button\")\n})\n```\n\nOf course this is *not good*. It's clunky and difficult to figure out what is going on. Plus, with complex JavaScript applications, the element references may no longer be in the DOM by the time you're ready to use them.\n\n***\n\n# Introducing Aliasing\n\n**Aliasing** was designed to solve async referencing issues and DOM Element re-querying, routing requests and responses, server integration, and automated error handling. Aliasing also gives you a human readable word for a potentially complex series of events. Aliasing is prominently displayed in the Cypress Command Log making it even easier to understand relationships.\n\n**Aliasing is incredibly powerful but very simple to use:**\n\n* Create an alias with the [`cy.as`](https://on.cypress.io/api/as) command.\n* Reference an alias with the [`cy.get`](https://on.cypress.io/api/get) or [`cy.wait`](https://on.cypress.io/api/wait) command.\n\nEvery time you reference an alias, it should be prefixed with `@`. You can think of this character as \"a\" for alias or you can think of an alias as a pointer (like how variables point to memory).\n\n# Aliasing DOM Elements\n\nOne use case for aliasing is for referencing a DOM Element.\n\n```javascript\n// alias all of the tr's found in the table as 'rows'\ncy.get(\"table\").find(\"tr\").as(\"rows\")\n```\n\nInternally Cypress has made a reference to the `<tr>` collection returned as the alias \"rows\". To reference these same \"rows\" later, you can use the [`cy.get`](https://on.cypress.io/api/get) command.\n\n```javascript\n// Cypress returns the reference to the <tr>'s\n// which allows us to continue to chain commands\n// finding the 1st row.\ncy.get(\"@rows\").first().click()\n```\n\nBecause we've used the `@` character in [`cy.get`](https://on.cypress.io/api/get), instead of querying the DOM for elements, [`cy.get`](https://on.cypress.io/api/get) looks for an existing alias called `rows` and returns the reference (if it finds it).\n\n***\n\n## When alias references no longer exist in the DOM\n\nCypress automatically decides when it should reference existing elements or re-query for new elements.\n\nIn many single-page JavaScript applications, the DOM re-renders parts of the application constantly. If you alias DOM elements that have been removed from the DOM by the time you call [`cy.get`](https://on.cypress.io/api/get) with the alias, Cypress automatically re-querys the DOM to find these elements again.\n\n```html\n<ul id=\"todos\">\n  <li>\n    Walk the dog\n    <button class=\"edit\">edit</button>\n  </li>\n  <li>\n    Feed the cat\n    <button class=\"edit\">edit</button>\n  </li>\n</ul>\n```\n\nLet's imagine when we click the `.edit` button that our `<li>` is re-rendered in the DOM. Instead of displaying the edit button, it instead displays an `<input />` text field allowing you to edit the todo. The previous `<li>` has been *completely* removed from the DOM, and a new `<li>` is rendered in its place.\n\n**Cypress calculates stale alias references.**\n\n```javascript\ncy\n  .get(\"#todos li\").first().as(\"firstTodo\")\n  .get(\"@firstTodo\").find(\".edit\").click()\n  .get(\"@firstTodo\").should(\"have.class\", \"editing\")\n    .find(\"input\").type(\"Clean the kitchen\")\n```\n\nWhen we reference `@firstTodo`, Cypress checks to see if all elements its referencing are still in the DOM. If they are, it returns those existing elements. If they aren't, Cypress replays the commands leading up to the alias definition.\n\nIn our case it would re-issue the commands: `cy.get(\"#todos li\").first()`. Everything just works because the new `<li>` is found.\n\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"*Usually* replaying previous commands will return what you expect, but not always. Cypress' calculations are complicated and we may improve this algorithm at a later time. It is recommended to not alias DOM elements very far down a chain of commands - **alias elements as soon as possible with as few commands as possible**. When in doubt, you can *always* issue a regular `cy.get` to query for the elements again.\"\n}\n[/block]\n\n***\n\n# Aliasing Routes\n\nAnother use case for aliasing is with routes. Using aliases with [`cy.route`](https://on.cypress.io/api/route) makes dealing with AJAX requests much easier.\n\n![alias-routes](https://cloud.githubusercontent.com/assets/1271364/12363262/cf6fee26-bb95-11e5-8592-4f8cd3a6520e.jpg)\n\n```javascript\ncy\n  .server()\n  // alias this route as 'postUser'\n  .route(\"POST\", /users/, {id: 123}).as(\"postUser\")\n```\n\nOnce you've given a route an alias, you can use it later to indicate what you expect to have happen in your application. Imagine your application's code is as follows:\n\n```javascript\n$(\"form\").submit(function(){\n  var data = $(this).serializeData()\n\n  // simple example of an async\n  // request that only goes out\n  // after an indeterminate period of time\n  setTimeout(function(){\n    $.post(\"/users\", {data: data})\n  }, 1000)\n})\n```\n\nYou can tell Cypress to wait until it sees a request that matches your aliased route using the [`cy.wait`](https://on.cypress.io/api/wait) command.\n\n```javascript\ncy\n  .get(\"form\").submit()\n  .wait(\"@postUser\")\n  .get(\".success\").contains(\"User successfully created!\")\n```\n\n**Telling Cypress to wait for an AJAX request that matches an aliased route has enormous advantages.**\n\n1. Waiting for an explicit route reference is less flaky. Instead of waiting for an arbitrary period of time, waiting for a specific aliased route is much more predictable.\n2. Cypress will resolve if there's already been a request that matches the alias.\n3. The actual XHR request object will be yielded to you as the next subject.\n4. Errors are more obvious.\n","date":"2017-04-19T18:46:47.000Z","updated":"2017-04-19T18:46:47.000Z","path":"guides/guides/using-aliases.html","comments":1,"layout":"page","_id":"cj1pby1kt003168g8h601jeo2","content":"<h1 id=\"Async-Challenges\"><a href=\"#Async-Challenges\" class=\"headerlink\" title=\"Async Challenges\"></a>Async Challenges</h1><p>Because all commands in Cypress are asynchronous, it makes referencing commands challenging. Aliasing is a DSL that solves referencing work done in previous commands.</p>\n<p><strong>Imagine the following synchronous example in jQuery:</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> body = $(<span class=\"string\">\"body\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// do more work here</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// later use this body reference</span></div><div class=\"line\">body.find(<span class=\"string\">\"button\"</span>)</div></pre></td></tr></table></figure>\n<blockquote>\n<p>In Cypress, every command is asynchronous.</p>\n</blockquote>\n<p>In jQuery we can assign regular values because work is performed synchronously. But in Cypress, every command is asynchronous, so there is no immediate return value. You’d have to do something like this to get access to previously resolved values:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// A not good example of referencing in Cypress</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span></div><div class=\"line\"></div><div class=\"line\">cy.get(<span class=\"string\">\"body\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$body</span>)</span>&#123;</div><div class=\"line\">  _this.body = $body</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// more work here</span></div><div class=\"line\"></div><div class=\"line\">cy.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  cy.wrap(_this.body).find(<span class=\"string\">\"button\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Of course this is <em>not good</em>. It’s clunky and difficult to figure out what is going on. Plus, with complex JavaScript applications, the element references may no longer be in the DOM by the time you’re ready to use them.</p>\n<hr>\n<h1 id=\"Introducing-Aliasing\"><a href=\"#Introducing-Aliasing\" class=\"headerlink\" title=\"Introducing Aliasing\"></a>Introducing Aliasing</h1><p><strong>Aliasing</strong> was designed to solve async referencing issues and DOM Element re-querying, routing requests and responses, server integration, and automated error handling. Aliasing also gives you a human readable word for a potentially complex series of events. Aliasing is prominently displayed in the Cypress Command Log making it even easier to understand relationships.</p>\n<p><strong>Aliasing is incredibly powerful but very simple to use:</strong></p>\n<ul>\n<li>Create an alias with the <a href=\"https://on.cypress.io/api/as\" target=\"_blank\" rel=\"external\"><code>cy.as</code></a> command.</li>\n<li>Reference an alias with the <a href=\"https://on.cypress.io/api/get\" target=\"_blank\" rel=\"external\"><code>cy.get</code></a> or <a href=\"https://on.cypress.io/api/wait\" target=\"_blank\" rel=\"external\"><code>cy.wait</code></a> command.</li>\n</ul>\n<p>Every time you reference an alias, it should be prefixed with <code>@</code>. You can think of this character as “a” for alias or you can think of an alias as a pointer (like how variables point to memory).</p>\n<h1 id=\"Aliasing-DOM-Elements\"><a href=\"#Aliasing-DOM-Elements\" class=\"headerlink\" title=\"Aliasing DOM Elements\"></a>Aliasing DOM Elements</h1><p>One use case for aliasing is for referencing a DOM Element.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// alias all of the tr's found in the table as 'rows'</span></div><div class=\"line\">cy.get(<span class=\"string\">\"table\"</span>).find(<span class=\"string\">\"tr\"</span>).as(<span class=\"string\">\"rows\"</span>)</div></pre></td></tr></table></figure>\n<p>Internally Cypress has made a reference to the <code>&lt;tr&gt;</code> collection returned as the alias “rows”. To reference these same “rows” later, you can use the <a href=\"https://on.cypress.io/api/get\" target=\"_blank\" rel=\"external\"><code>cy.get</code></a> command.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Cypress returns the reference to the &lt;tr&gt;'s</span></div><div class=\"line\"><span class=\"comment\">// which allows us to continue to chain commands</span></div><div class=\"line\"><span class=\"comment\">// finding the 1st row.</span></div><div class=\"line\">cy.get(<span class=\"string\">\"@rows\"</span>).first().click()</div></pre></td></tr></table></figure>\n<p>Because we’ve used the <code>@</code> character in <a href=\"https://on.cypress.io/api/get\" target=\"_blank\" rel=\"external\"><code>cy.get</code></a>, instead of querying the DOM for elements, <a href=\"https://on.cypress.io/api/get\" target=\"_blank\" rel=\"external\"><code>cy.get</code></a> looks for an existing alias called <code>rows</code> and returns the reference (if it finds it).</p>\n<hr>\n<h2 id=\"When-alias-references-no-longer-exist-in-the-DOM\"><a href=\"#When-alias-references-no-longer-exist-in-the-DOM\" class=\"headerlink\" title=\"When alias references no longer exist in the DOM\"></a>When alias references no longer exist in the DOM</h2><p>Cypress automatically decides when it should reference existing elements or re-query for new elements.</p>\n<p>In many single-page JavaScript applications, the DOM re-renders parts of the application constantly. If you alias DOM elements that have been removed from the DOM by the time you call <a href=\"https://on.cypress.io/api/get\" target=\"_blank\" rel=\"external\"><code>cy.get</code></a> with the alias, Cypress automatically re-querys the DOM to find these elements again.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"todos\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    Walk the dog</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"edit\"</span>&gt;</span>edit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    Feed the cat</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"edit\"</span>&gt;</span>edit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Let’s imagine when we click the <code>.edit</code> button that our <code>&lt;li&gt;</code> is re-rendered in the DOM. Instead of displaying the edit button, it instead displays an <code>&lt;input /&gt;</code> text field allowing you to edit the todo. The previous <code>&lt;li&gt;</code> has been <em>completely</em> removed from the DOM, and a new <code>&lt;li&gt;</code> is rendered in its place.</p>\n<p><strong>Cypress calculates stale alias references.</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"#todos li\"</span>).first().as(<span class=\"string\">\"firstTodo\"</span>)</div><div class=\"line\">  .get(<span class=\"string\">\"@firstTodo\"</span>).find(<span class=\"string\">\".edit\"</span>).click()</div><div class=\"line\">  .get(<span class=\"string\">\"@firstTodo\"</span>).should(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"editing\"</span>)</div><div class=\"line\">    .find(<span class=\"string\">\"input\"</span>).type(<span class=\"string\">\"Clean the kitchen\"</span>)</div></pre></td></tr></table></figure>\n<p>When we reference <code>@firstTodo</code>, Cypress checks to see if all elements its referencing are still in the DOM. If they are, it returns those existing elements. If they aren’t, Cypress replays the commands leading up to the alias definition.</p>\n<p>In our case it would re-issue the commands: <code>cy.get(&quot;#todos li&quot;).first()</code>. Everything just works because the new <code>&lt;li&gt;</code> is found.</p>\n<p>[block:callout]<br>{<br>  “type”: “warning”,<br>  “body”: “<em>Usually</em> replaying previous commands will return what you expect, but not always. Cypress’ calculations are complicated and we may improve this algorithm at a later time. It is recommended to not alias DOM elements very far down a chain of commands - <strong>alias elements as soon as possible with as few commands as possible</strong>. When in doubt, you can <em>always</em> issue a regular <code>cy.get</code> to query for the elements again.”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Aliasing-Routes\"><a href=\"#Aliasing-Routes\" class=\"headerlink\" title=\"Aliasing Routes\"></a>Aliasing Routes</h1><p>Another use case for aliasing is with routes. Using aliases with <a href=\"https://on.cypress.io/api/route\" target=\"_blank\" rel=\"external\"><code>cy.route</code></a> makes dealing with AJAX requests much easier.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/12363262/cf6fee26-bb95-11e5-8592-4f8cd3a6520e.jpg\" alt=\"alias-routes\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  <span class=\"comment\">// alias this route as 'postUser'</span></div><div class=\"line\">  .route(<span class=\"string\">\"POST\"</span>, /users/, &#123;<span class=\"attr\">id</span>: <span class=\"number\">123</span>&#125;).as(<span class=\"string\">\"postUser\"</span>)</div></pre></td></tr></table></figure>\n<p>Once you’ve given a route an alias, you can use it later to indicate what you expect to have happen in your application. Imagine your application’s code is as follows:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"form\"</span>).submit(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> data = $(<span class=\"keyword\">this</span>).serializeData()</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// simple example of an async</span></div><div class=\"line\">  <span class=\"comment\">// request that only goes out</span></div><div class=\"line\">  <span class=\"comment\">// after an indeterminate period of time</span></div><div class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $.post(<span class=\"string\">\"/users\"</span>, &#123;<span class=\"attr\">data</span>: data&#125;)</div><div class=\"line\">  &#125;, <span class=\"number\">1000</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>You can tell Cypress to wait until it sees a request that matches your aliased route using the <a href=\"https://on.cypress.io/api/wait\" target=\"_blank\" rel=\"external\"><code>cy.wait</code></a> command.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"form\"</span>).submit()</div><div class=\"line\">  .wait(<span class=\"string\">\"@postUser\"</span>)</div><div class=\"line\">  .get(<span class=\"string\">\".success\"</span>).contains(<span class=\"string\">\"User successfully created!\"</span>)</div></pre></td></tr></table></figure>\n<p><strong>Telling Cypress to wait for an AJAX request that matches an aliased route has enormous advantages.</strong></p>\n<ol>\n<li>Waiting for an explicit route reference is less flaky. Instead of waiting for an arbitrary period of time, waiting for a specific aliased route is much more predictable.</li>\n<li>Cypress will resolve if there’s already been a request that matches the alias.</li>\n<li>The actual XHR request object will be yielded to you as the next subject.</li>\n<li>Errors are more obvious.</li>\n</ol>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<h1 id=\"Async-Challenges\"><a href=\"#Async-Challenges\" class=\"headerlink\" title=\"Async Challenges\"></a>Async Challenges</h1><p>Because all commands in Cypress are asynchronous, it makes referencing commands challenging. Aliasing is a DSL that solves referencing work done in previous commands.</p>\n<p><strong>Imagine the following synchronous example in jQuery:</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> body = $(<span class=\"string\">\"body\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// do more work here</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// later use this body reference</span></div><div class=\"line\">body.find(<span class=\"string\">\"button\"</span>)</div></pre></td></tr></table></figure>\n<blockquote>\n<p>In Cypress, every command is asynchronous.</p>\n</blockquote>\n<p>In jQuery we can assign regular values because work is performed synchronously. But in Cypress, every command is asynchronous, so there is no immediate return value. You’d have to do something like this to get access to previously resolved values:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// A not good example of referencing in Cypress</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span></div><div class=\"line\"></div><div class=\"line\">cy.get(<span class=\"string\">\"body\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$body</span>)</span>&#123;</div><div class=\"line\">  _this.body = $body</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// more work here</span></div><div class=\"line\"></div><div class=\"line\">cy.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  cy.wrap(_this.body).find(<span class=\"string\">\"button\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Of course this is <em>not good</em>. It’s clunky and difficult to figure out what is going on. Plus, with complex JavaScript applications, the element references may no longer be in the DOM by the time you’re ready to use them.</p>\n<hr>\n<h1 id=\"Introducing-Aliasing\"><a href=\"#Introducing-Aliasing\" class=\"headerlink\" title=\"Introducing Aliasing\"></a>Introducing Aliasing</h1><p><strong>Aliasing</strong> was designed to solve async referencing issues and DOM Element re-querying, routing requests and responses, server integration, and automated error handling. Aliasing also gives you a human readable word for a potentially complex series of events. Aliasing is prominently displayed in the Cypress Command Log making it even easier to understand relationships.</p>\n<p><strong>Aliasing is incredibly powerful but very simple to use:</strong></p>\n<ul>\n<li>Create an alias with the <a href=\"https://on.cypress.io/api/as\"><code>cy.as</code></a> command.</li>\n<li>Reference an alias with the <a href=\"https://on.cypress.io/api/get\"><code>cy.get</code></a> or <a href=\"https://on.cypress.io/api/wait\"><code>cy.wait</code></a> command.</li>\n</ul>\n<p>Every time you reference an alias, it should be prefixed with <code>@</code>. You can think of this character as “a” for alias or you can think of an alias as a pointer (like how variables point to memory).</p>\n<h1 id=\"Aliasing-DOM-Elements\"><a href=\"#Aliasing-DOM-Elements\" class=\"headerlink\" title=\"Aliasing DOM Elements\"></a>Aliasing DOM Elements</h1><p>One use case for aliasing is for referencing a DOM Element.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// alias all of the tr's found in the table as 'rows'</span></div><div class=\"line\">cy.get(<span class=\"string\">\"table\"</span>).find(<span class=\"string\">\"tr\"</span>).as(<span class=\"string\">\"rows\"</span>)</div></pre></td></tr></table></figure>\n<p>Internally Cypress has made a reference to the <code>&lt;tr&gt;</code> collection returned as the alias “rows”. To reference these same “rows” later, you can use the <a href=\"https://on.cypress.io/api/get\"><code>cy.get</code></a> command.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Cypress returns the reference to the &lt;tr&gt;'s</span></div><div class=\"line\"><span class=\"comment\">// which allows us to continue to chain commands</span></div><div class=\"line\"><span class=\"comment\">// finding the 1st row.</span></div><div class=\"line\">cy.get(<span class=\"string\">\"@rows\"</span>).first().click()</div></pre></td></tr></table></figure>\n<p>Because we’ve used the <code>@</code> character in <a href=\"https://on.cypress.io/api/get\"><code>cy.get</code></a>, instead of querying the DOM for elements, <a href=\"https://on.cypress.io/api/get\"><code>cy.get</code></a> looks for an existing alias called <code>rows</code> and returns the reference (if it finds it).</p>\n<hr>\n<h2 id=\"When-alias-references-no-longer-exist-in-the-DOM\"><a href=\"#When-alias-references-no-longer-exist-in-the-DOM\" class=\"headerlink\" title=\"When alias references no longer exist in the DOM\"></a>When alias references no longer exist in the DOM</h2><p>Cypress automatically decides when it should reference existing elements or re-query for new elements.</p>\n<p>In many single-page JavaScript applications, the DOM re-renders parts of the application constantly. If you alias DOM elements that have been removed from the DOM by the time you call <a href=\"https://on.cypress.io/api/get\"><code>cy.get</code></a> with the alias, Cypress automatically re-querys the DOM to find these elements again.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"todos\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    Walk the dog</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"edit\"</span>&gt;</span>edit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    Feed the cat</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"edit\"</span>&gt;</span>edit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Let’s imagine when we click the <code>.edit</code> button that our <code>&lt;li&gt;</code> is re-rendered in the DOM. Instead of displaying the edit button, it instead displays an <code>&lt;input /&gt;</code> text field allowing you to edit the todo. The previous <code>&lt;li&gt;</code> has been <em>completely</em> removed from the DOM, and a new <code>&lt;li&gt;</code> is rendered in its place.</p>\n<p><strong>Cypress calculates stale alias references.</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"#todos li\"</span>).first().as(<span class=\"string\">\"firstTodo\"</span>)</div><div class=\"line\">  .get(<span class=\"string\">\"@firstTodo\"</span>).find(<span class=\"string\">\".edit\"</span>).click()</div><div class=\"line\">  .get(<span class=\"string\">\"@firstTodo\"</span>).should(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"editing\"</span>)</div><div class=\"line\">    .find(<span class=\"string\">\"input\"</span>).type(<span class=\"string\">\"Clean the kitchen\"</span>)</div></pre></td></tr></table></figure>\n<p>When we reference <code>@firstTodo</code>, Cypress checks to see if all elements its referencing are still in the DOM. If they are, it returns those existing elements. If they aren’t, Cypress replays the commands leading up to the alias definition.</p>\n<p>In our case it would re-issue the commands: <code>cy.get(&quot;#todos li&quot;).first()</code>. Everything just works because the new <code>&lt;li&gt;</code> is found.</p>\n<p>[block:callout]<br>{<br>  “type”: “warning”,<br>  “body”: “<em>Usually</em> replaying previous commands will return what you expect, but not always. Cypress’ calculations are complicated and we may improve this algorithm at a later time. It is recommended to not alias DOM elements very far down a chain of commands - <strong>alias elements as soon as possible with as few commands as possible</strong>. When in doubt, you can <em>always</em> issue a regular <code>cy.get</code> to query for the elements again.”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Aliasing-Routes\"><a href=\"#Aliasing-Routes\" class=\"headerlink\" title=\"Aliasing Routes\"></a>Aliasing Routes</h1><p>Another use case for aliasing is with routes. Using aliases with <a href=\"https://on.cypress.io/api/route\"><code>cy.route</code></a> makes dealing with AJAX requests much easier.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/12363262/cf6fee26-bb95-11e5-8592-4f8cd3a6520e.jpg\" alt=\"alias-routes\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  <span class=\"comment\">// alias this route as 'postUser'</span></div><div class=\"line\">  .route(<span class=\"string\">\"POST\"</span>, /users/, &#123;<span class=\"attr\">id</span>: <span class=\"number\">123</span>&#125;).as(<span class=\"string\">\"postUser\"</span>)</div></pre></td></tr></table></figure>\n<p>Once you’ve given a route an alias, you can use it later to indicate what you expect to have happen in your application. Imagine your application’s code is as follows:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"form\"</span>).submit(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> data = $(<span class=\"keyword\">this</span>).serializeData()</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// simple example of an async</span></div><div class=\"line\">  <span class=\"comment\">// request that only goes out</span></div><div class=\"line\">  <span class=\"comment\">// after an indeterminate period of time</span></div><div class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $.post(<span class=\"string\">\"/users\"</span>, &#123;<span class=\"attr\">data</span>: data&#125;)</div><div class=\"line\">  &#125;, <span class=\"number\">1000</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>You can tell Cypress to wait until it sees a request that matches your aliased route using the <a href=\"https://on.cypress.io/api/wait\"><code>cy.wait</code></a> command.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"form\"</span>).submit()</div><div class=\"line\">  .wait(<span class=\"string\">\"@postUser\"</span>)</div><div class=\"line\">  .get(<span class=\"string\">\".success\"</span>).contains(<span class=\"string\">\"User successfully created!\"</span>)</div></pre></td></tr></table></figure>\n<p><strong>Telling Cypress to wait for an AJAX request that matches an aliased route has enormous advantages.</strong></p>\n<ol>\n<li>Waiting for an explicit route reference is less flaky. Instead of waiting for an arbitrary period of time, waiting for a specific aliased route is much more predictable.</li>\n<li>Cypress will resolve if there’s already been a request that matches the alias.</li>\n<li>The actual XHR request object will be yielded to you as the next subject.</li>\n<li>Errors are more obvious.</li>\n</ol>\n"},{"title":"anti-patterns","_content":"\n# Adding unncessary waits\n\nIn Cypress, you almost **never** need to `cy.wait` for an arbitrary period of time. If you are finding yourself do this, there is likely a much better, simpler way.\n\nLet's imagine the following example:\n\n```javascript\ncy\n  .request(\"http://localhost:8080/db/seed\")\n  .wait(5000)     // <--- this is unnecessary\n  .visit(\"http://localhost/8080\")\n  .wait(5000)     // <--- this is unnecessary\n  .server()\n  .route(\"GET\", /users/, [{\"name\": \"Maggy\"}, {\"name\": \"Joan\"}])\n  .get(\"#fetch\").click()\n  .wait(4000)     // <--- this is unnecessary\n  .get(\"table tr\").should(\"have.length\", 2)\n```\n\nEach arbitrary wait is unnecessary in the example above.\n\n1. [`cy.request`](https://on.cypress.io/api/request) - waiting for this is unnecessary because this command will not resolve **until** it receives a response from your server. Adding the wait here only adds **5 seconds** after the `cy.request` has *already* resolved.\n2. [`cy.visit`](https://on.cypress.io/api/visit) - waiting for this is unnecessary because this command will resolve once the page fires its `load` event. By that time all of your assets have been loaded including `javascript`, `stylesheets`, and `html`.\n3. [`cy.get`](https://on.cypress.io/api/route) - waiting for the `cy.get` is unncessary because `cy.get` will automatically continue to retry until the `table tr` has a length of 2. Whenever commands have an assertion they will not resolve until their associated assertions pass. This enables you to simply describe the **state** of your application without having to worry about *when* it gets there. Alternatively a better solution to this problem is by waiting explictly for an aliased route.\n\nThe following is the least brittle way of writing the following:\n\n```javascript\ncy\n  .request(\"http://localhost:8080/db/seed\")\n  .visit(\"http://localhost/8080\")\n  .server()\n  .route(\"GET\", /users/, [{\"name\": \"Maggy\"}, {\"name\": \"Joan\"}]).as(\"getUsers\")\n  .get(\"#fetch\").click()\n  .wait(\"@getUsers\")     // <--- wait explicitly for this route to finish\n  .get(\"table tr\").should(\"have.length\", 2)\n```\n\nBy waiting for the `getUsers` route, Cypress is smart enough to not only wait for a request to go out, but also for a response to come back in.","source":"guides/references/anti-patterns.md","raw":"title: anti-patterns\n---\n\n# Adding unncessary waits\n\nIn Cypress, you almost **never** need to `cy.wait` for an arbitrary period of time. If you are finding yourself do this, there is likely a much better, simpler way.\n\nLet's imagine the following example:\n\n```javascript\ncy\n  .request(\"http://localhost:8080/db/seed\")\n  .wait(5000)     // <--- this is unnecessary\n  .visit(\"http://localhost/8080\")\n  .wait(5000)     // <--- this is unnecessary\n  .server()\n  .route(\"GET\", /users/, [{\"name\": \"Maggy\"}, {\"name\": \"Joan\"}])\n  .get(\"#fetch\").click()\n  .wait(4000)     // <--- this is unnecessary\n  .get(\"table tr\").should(\"have.length\", 2)\n```\n\nEach arbitrary wait is unnecessary in the example above.\n\n1. [`cy.request`](https://on.cypress.io/api/request) - waiting for this is unnecessary because this command will not resolve **until** it receives a response from your server. Adding the wait here only adds **5 seconds** after the `cy.request` has *already* resolved.\n2. [`cy.visit`](https://on.cypress.io/api/visit) - waiting for this is unnecessary because this command will resolve once the page fires its `load` event. By that time all of your assets have been loaded including `javascript`, `stylesheets`, and `html`.\n3. [`cy.get`](https://on.cypress.io/api/route) - waiting for the `cy.get` is unncessary because `cy.get` will automatically continue to retry until the `table tr` has a length of 2. Whenever commands have an assertion they will not resolve until their associated assertions pass. This enables you to simply describe the **state** of your application without having to worry about *when* it gets there. Alternatively a better solution to this problem is by waiting explictly for an aliased route.\n\nThe following is the least brittle way of writing the following:\n\n```javascript\ncy\n  .request(\"http://localhost:8080/db/seed\")\n  .visit(\"http://localhost/8080\")\n  .server()\n  .route(\"GET\", /users/, [{\"name\": \"Maggy\"}, {\"name\": \"Joan\"}]).as(\"getUsers\")\n  .get(\"#fetch\").click()\n  .wait(\"@getUsers\")     // <--- wait explicitly for this route to finish\n  .get(\"table tr\").should(\"have.length\", 2)\n```\n\nBy waiting for the `getUsers` route, Cypress is smart enough to not only wait for a request to go out, but also for a response to come back in.","date":"2017-04-19T18:46:47.000Z","updated":"2017-04-19T18:46:47.000Z","path":"guides/references/anti-patterns.html","comments":1,"layout":"page","_id":"cj1pby1kt003268g81656i96z","content":"<h1 id=\"Adding-unncessary-waits\"><a href=\"#Adding-unncessary-waits\" class=\"headerlink\" title=\"Adding unncessary waits\"></a>Adding unncessary waits</h1><p>In Cypress, you almost <strong>never</strong> need to <code>cy.wait</code> for an arbitrary period of time. If you are finding yourself do this, there is likely a much better, simpler way.</p>\n<p>Let’s imagine the following example:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .request(<span class=\"string\">\"http://localhost:8080/db/seed\"</span>)</div><div class=\"line\">  .wait(<span class=\"number\">5000</span>)     <span class=\"comment\">// &lt;--- this is unnecessary</span></div><div class=\"line\">  .visit(<span class=\"string\">\"http://localhost/8080\"</span>)</div><div class=\"line\">  .wait(<span class=\"number\">5000</span>)     <span class=\"comment\">// &lt;--- this is unnecessary</span></div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"string\">\"GET\"</span>, /users/, [&#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"Maggy\"</span>&#125;, &#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"Joan\"</span>&#125;])</div><div class=\"line\">  .get(<span class=\"string\">\"#fetch\"</span>).click()</div><div class=\"line\">  .wait(<span class=\"number\">4000</span>)     <span class=\"comment\">// &lt;--- this is unnecessary</span></div><div class=\"line\">  .get(<span class=\"string\">\"table tr\"</span>).should(<span class=\"string\">\"have.length\"</span>, <span class=\"number\">2</span>)</div></pre></td></tr></table></figure>\n<p>Each arbitrary wait is unnecessary in the example above.</p>\n<ol>\n<li><a href=\"https://on.cypress.io/api/request\" target=\"_blank\" rel=\"external\"><code>cy.request</code></a> - waiting for this is unnecessary because this command will not resolve <strong>until</strong> it receives a response from your server. Adding the wait here only adds <strong>5 seconds</strong> after the <code>cy.request</code> has <em>already</em> resolved.</li>\n<li><a href=\"https://on.cypress.io/api/visit\" target=\"_blank\" rel=\"external\"><code>cy.visit</code></a> - waiting for this is unnecessary because this command will resolve once the page fires its <code>load</code> event. By that time all of your assets have been loaded including <code>javascript</code>, <code>stylesheets</code>, and <code>html</code>.</li>\n<li><a href=\"https://on.cypress.io/api/route\" target=\"_blank\" rel=\"external\"><code>cy.get</code></a> - waiting for the <code>cy.get</code> is unncessary because <code>cy.get</code> will automatically continue to retry until the <code>table tr</code> has a length of 2. Whenever commands have an assertion they will not resolve until their associated assertions pass. This enables you to simply describe the <strong>state</strong> of your application without having to worry about <em>when</em> it gets there. Alternatively a better solution to this problem is by waiting explictly for an aliased route.</li>\n</ol>\n<p>The following is the least brittle way of writing the following:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .request(<span class=\"string\">\"http://localhost:8080/db/seed\"</span>)</div><div class=\"line\">  .visit(<span class=\"string\">\"http://localhost/8080\"</span>)</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"string\">\"GET\"</span>, /users/, [&#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"Maggy\"</span>&#125;, &#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"Joan\"</span>&#125;]).as(<span class=\"string\">\"getUsers\"</span>)</div><div class=\"line\">  .get(<span class=\"string\">\"#fetch\"</span>).click()</div><div class=\"line\">  .wait(<span class=\"string\">\"@getUsers\"</span>)     <span class=\"comment\">// &lt;--- wait explicitly for this route to finish</span></div><div class=\"line\">  .get(<span class=\"string\">\"table tr\"</span>).should(<span class=\"string\">\"have.length\"</span>, <span class=\"number\">2</span>)</div></pre></td></tr></table></figure>\n<p>By waiting for the <code>getUsers</code> route, Cypress is smart enough to not only wait for a request to go out, but also for a response to come back in.</p>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<h1 id=\"Adding-unncessary-waits\"><a href=\"#Adding-unncessary-waits\" class=\"headerlink\" title=\"Adding unncessary waits\"></a>Adding unncessary waits</h1><p>In Cypress, you almost <strong>never</strong> need to <code>cy.wait</code> for an arbitrary period of time. If you are finding yourself do this, there is likely a much better, simpler way.</p>\n<p>Let’s imagine the following example:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .request(<span class=\"string\">\"http://localhost:8080/db/seed\"</span>)</div><div class=\"line\">  .wait(<span class=\"number\">5000</span>)     <span class=\"comment\">// &lt;--- this is unnecessary</span></div><div class=\"line\">  .visit(<span class=\"string\">\"http://localhost/8080\"</span>)</div><div class=\"line\">  .wait(<span class=\"number\">5000</span>)     <span class=\"comment\">// &lt;--- this is unnecessary</span></div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"string\">\"GET\"</span>, /users/, [&#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"Maggy\"</span>&#125;, &#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"Joan\"</span>&#125;])</div><div class=\"line\">  .get(<span class=\"string\">\"#fetch\"</span>).click()</div><div class=\"line\">  .wait(<span class=\"number\">4000</span>)     <span class=\"comment\">// &lt;--- this is unnecessary</span></div><div class=\"line\">  .get(<span class=\"string\">\"table tr\"</span>).should(<span class=\"string\">\"have.length\"</span>, <span class=\"number\">2</span>)</div></pre></td></tr></table></figure>\n<p>Each arbitrary wait is unnecessary in the example above.</p>\n<ol>\n<li><a href=\"https://on.cypress.io/api/request\"><code>cy.request</code></a> - waiting for this is unnecessary because this command will not resolve <strong>until</strong> it receives a response from your server. Adding the wait here only adds <strong>5 seconds</strong> after the <code>cy.request</code> has <em>already</em> resolved.</li>\n<li><a href=\"https://on.cypress.io/api/visit\"><code>cy.visit</code></a> - waiting for this is unnecessary because this command will resolve once the page fires its <code>load</code> event. By that time all of your assets have been loaded including <code>javascript</code>, <code>stylesheets</code>, and <code>html</code>.</li>\n<li><a href=\"https://on.cypress.io/api/route\"><code>cy.get</code></a> - waiting for the <code>cy.get</code> is unncessary because <code>cy.get</code> will automatically continue to retry until the <code>table tr</code> has a length of 2. Whenever commands have an assertion they will not resolve until their associated assertions pass. This enables you to simply describe the <strong>state</strong> of your application without having to worry about <em>when</em> it gets there. Alternatively a better solution to this problem is by waiting explictly for an aliased route.</li>\n</ol>\n<p>The following is the least brittle way of writing the following:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .request(<span class=\"string\">\"http://localhost:8080/db/seed\"</span>)</div><div class=\"line\">  .visit(<span class=\"string\">\"http://localhost/8080\"</span>)</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"string\">\"GET\"</span>, /users/, [&#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"Maggy\"</span>&#125;, &#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"Joan\"</span>&#125;]).as(<span class=\"string\">\"getUsers\"</span>)</div><div class=\"line\">  .get(<span class=\"string\">\"#fetch\"</span>).click()</div><div class=\"line\">  .wait(<span class=\"string\">\"@getUsers\"</span>)     <span class=\"comment\">// &lt;--- wait explicitly for this route to finish</span></div><div class=\"line\">  .get(<span class=\"string\">\"table tr\"</span>).should(<span class=\"string\">\"have.length\"</span>, <span class=\"number\">2</span>)</div></pre></td></tr></table></figure>\n<p>By waiting for the <code>getUsers</code> route, Cypress is smart enough to not only wait for a request to go out, but also for a response to come back in.</p>\n"},{"title":"browser-management","_content":"\n# Managing Browsers\n\nWhen you're ready to start testing, Cypress launches the browser for you. It does this for two main reasons:\n\n1. To create a clean, pristine testing environment.\n2. To access the exclusive browser API's for automation.\n\n***\n\n# Launching Browsers\n\nWhen Cypress is initially [run from the Desktop application](https://on.cypress.io/guides/installing-and-running#section-running-tests-from-the-gui), you can choose to run Cypress in a select number of browsers including:\n\n- Chrome\n- Chromium\n- Canary\n\n![open browsers](https://cloud.githubusercontent.com/assets/1268976/15519992/11fa3c36-21d2-11e6-9557-9b0f4139ac70.gif)\n\nWe'll automatically detect available browsers based on your OS. In `Linux` we detect browsers by their executable binary, and in `OSX` we'll automatically find them even if they aren't in your `/Applications` folder.\n\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"I'm confused which is the Cypress browser and which is my own browser!\"\n}\n[/block]\n\nYou might notice that if you already have the browser open you will see two icons of the same browser in your Dock.\n\n![switching browsers](https://cloud.githubusercontent.com/assets/1268976/15520492/b812cfe6-21d4-11e6-8764-831f33bd0acf.gif)\n\nWe understand that when Cypress is running in its own profile it can be confusing telling the difference from your normal browser and Cypress. For this reason we recommend [downloading Chromium](https://download-chromium.appspot.com/) or [downloading Canary](https://www.google.com/chrome/browser/canary.html). These browsers both have different icons from the standard Chrome browser and it'll be much easier to tell the difference. You can also use the bundled [Electron browser](#section-electron-browser), which does not have a Dock icon.\n\n![switch canary](https://cloud.githubusercontent.com/assets/1268976/15520491/b812bfe2-21d4-11e6-99ea-c77dae947b26.gif)\n\nAdditionally, we've made the browsers spawned by Cypress look different than regular sessions. You'll see a darker theme around the chrome of the browser. You'll always be able to visually distinguish these.\n\n![screen shot 2016-05-24 at 5 25 19 pm](https://cloud.githubusercontent.com/assets/1268976/15520464/936b3976-21d4-11e6-8aca-33d05f2c2a8b.png)\n\n***\n\n## Electron Browser\n\nIn addition to the browsers found on your system, you'll notice that `Electron` is another available browser (it may be the only browser if Cypress does not detect any compatible browsers on your system). The `Electron` browser is a version of Chrome that is bundled with [Electron](https://electron.atom.io/) (the platform underlying the Cypress app). Cypress uses it when running headless via `cypress run`. It may be useful for debugging issues that only occur when running headless.\n\nThe `Electron` browser does not have its own Dock icon or any chrome (address bar, tabs, bookmarks, etc).\n\n***\n\n## Unsupported Browsers\n\n![screen shot 2016-05-24 at 5 29 05 pm](https://cloud.githubusercontent.com/assets/1268976/15520572/12b158a0-21d5-11e6-92e0-2e75e42fa517.png)\n\n***\n\n# Clean Testing Environment\n\nWhen we launch browsers we open them in a way that makes testing more reliable and accessible. We do this in three ways:\n\n1. Creating an isolated testing profile\n2. Disabling virtually everything that gets in the way of testing\n3. Enabling access to browser automation API's\n\n***\n\n## Cypress Profile\n\nCypress generates its own isolated profile away from your regular browsing profile. This means things like `history` entries, `cookies`, and `3rd party extensions` from your regular browsing session will not affect Cypress.\n\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"Wait, I need my developer extensions such as React Dev Tools, Batarang, or Ember Inspector!\"\n}\n[/block]\n\nThat's no problem - you simply have to reinstall them **once**. We'll continue to use this Cypress testing profile on subsequent launches so all of your configuration will automatically be preserved. Note that in the [Electron browser](#section-electron-browser), while it's possible to use the dev tools, it's not possible to install developer extensions.\n\n***\n\n## Testing Barriers\n\nCypress automatically disables certain functionality in your browser which can get in the way of automated testing.\n\nFor instance we will automatically:\n\n- Ignore certificate errors\n- Allow blocked pop-ups\n- Disable 'Saving passwords'\n- Disable 'Autofill forms and passwords'\n- Disable asking to become your primary browser\n- Disable language translations\n- Disable restoring sessions\n- Disable a ton of background network traffic\n- Disable background and renderer throttling\n\n***\n\n## Tabbed Browsing\n\n***\n\n# Automation API's\n\n## Cypress Extension\n<talk about not using the debugger protocol>\n\n***\n\n## Browser Drivers\n\n***\n\n## No Selenium Server\n","source":"guides/references/browser-management.md","raw":"title: browser-management\n---\n\n# Managing Browsers\n\nWhen you're ready to start testing, Cypress launches the browser for you. It does this for two main reasons:\n\n1. To create a clean, pristine testing environment.\n2. To access the exclusive browser API's for automation.\n\n***\n\n# Launching Browsers\n\nWhen Cypress is initially [run from the Desktop application](https://on.cypress.io/guides/installing-and-running#section-running-tests-from-the-gui), you can choose to run Cypress in a select number of browsers including:\n\n- Chrome\n- Chromium\n- Canary\n\n![open browsers](https://cloud.githubusercontent.com/assets/1268976/15519992/11fa3c36-21d2-11e6-9557-9b0f4139ac70.gif)\n\nWe'll automatically detect available browsers based on your OS. In `Linux` we detect browsers by their executable binary, and in `OSX` we'll automatically find them even if they aren't in your `/Applications` folder.\n\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"I'm confused which is the Cypress browser and which is my own browser!\"\n}\n[/block]\n\nYou might notice that if you already have the browser open you will see two icons of the same browser in your Dock.\n\n![switching browsers](https://cloud.githubusercontent.com/assets/1268976/15520492/b812cfe6-21d4-11e6-8764-831f33bd0acf.gif)\n\nWe understand that when Cypress is running in its own profile it can be confusing telling the difference from your normal browser and Cypress. For this reason we recommend [downloading Chromium](https://download-chromium.appspot.com/) or [downloading Canary](https://www.google.com/chrome/browser/canary.html). These browsers both have different icons from the standard Chrome browser and it'll be much easier to tell the difference. You can also use the bundled [Electron browser](#section-electron-browser), which does not have a Dock icon.\n\n![switch canary](https://cloud.githubusercontent.com/assets/1268976/15520491/b812bfe2-21d4-11e6-99ea-c77dae947b26.gif)\n\nAdditionally, we've made the browsers spawned by Cypress look different than regular sessions. You'll see a darker theme around the chrome of the browser. You'll always be able to visually distinguish these.\n\n![screen shot 2016-05-24 at 5 25 19 pm](https://cloud.githubusercontent.com/assets/1268976/15520464/936b3976-21d4-11e6-8aca-33d05f2c2a8b.png)\n\n***\n\n## Electron Browser\n\nIn addition to the browsers found on your system, you'll notice that `Electron` is another available browser (it may be the only browser if Cypress does not detect any compatible browsers on your system). The `Electron` browser is a version of Chrome that is bundled with [Electron](https://electron.atom.io/) (the platform underlying the Cypress app). Cypress uses it when running headless via `cypress run`. It may be useful for debugging issues that only occur when running headless.\n\nThe `Electron` browser does not have its own Dock icon or any chrome (address bar, tabs, bookmarks, etc).\n\n***\n\n## Unsupported Browsers\n\n![screen shot 2016-05-24 at 5 29 05 pm](https://cloud.githubusercontent.com/assets/1268976/15520572/12b158a0-21d5-11e6-92e0-2e75e42fa517.png)\n\n***\n\n# Clean Testing Environment\n\nWhen we launch browsers we open them in a way that makes testing more reliable and accessible. We do this in three ways:\n\n1. Creating an isolated testing profile\n2. Disabling virtually everything that gets in the way of testing\n3. Enabling access to browser automation API's\n\n***\n\n## Cypress Profile\n\nCypress generates its own isolated profile away from your regular browsing profile. This means things like `history` entries, `cookies`, and `3rd party extensions` from your regular browsing session will not affect Cypress.\n\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"Wait, I need my developer extensions such as React Dev Tools, Batarang, or Ember Inspector!\"\n}\n[/block]\n\nThat's no problem - you simply have to reinstall them **once**. We'll continue to use this Cypress testing profile on subsequent launches so all of your configuration will automatically be preserved. Note that in the [Electron browser](#section-electron-browser), while it's possible to use the dev tools, it's not possible to install developer extensions.\n\n***\n\n## Testing Barriers\n\nCypress automatically disables certain functionality in your browser which can get in the way of automated testing.\n\nFor instance we will automatically:\n\n- Ignore certificate errors\n- Allow blocked pop-ups\n- Disable 'Saving passwords'\n- Disable 'Autofill forms and passwords'\n- Disable asking to become your primary browser\n- Disable language translations\n- Disable restoring sessions\n- Disable a ton of background network traffic\n- Disable background and renderer throttling\n\n***\n\n## Tabbed Browsing\n\n***\n\n# Automation API's\n\n## Cypress Extension\n<talk about not using the debugger protocol>\n\n***\n\n## Browser Drivers\n\n***\n\n## No Selenium Server\n","date":"2017-04-19T18:46:47.000Z","updated":"2017-04-19T18:46:47.000Z","path":"guides/references/browser-management.html","comments":1,"layout":"page","_id":"cj1pby1ku003368g8ef3hatwq","content":"<h1 id=\"Managing-Browsers\"><a href=\"#Managing-Browsers\" class=\"headerlink\" title=\"Managing Browsers\"></a>Managing Browsers</h1><p>When you’re ready to start testing, Cypress launches the browser for you. It does this for two main reasons:</p>\n<ol>\n<li>To create a clean, pristine testing environment.</li>\n<li>To access the exclusive browser API’s for automation.</li>\n</ol>\n<hr>\n<h1 id=\"Launching-Browsers\"><a href=\"#Launching-Browsers\" class=\"headerlink\" title=\"Launching Browsers\"></a>Launching Browsers</h1><p>When Cypress is initially <a href=\"https://on.cypress.io/guides/installing-and-running#section-running-tests-from-the-gui\" target=\"_blank\" rel=\"external\">run from the Desktop application</a>, you can choose to run Cypress in a select number of browsers including:</p>\n<ul>\n<li>Chrome</li>\n<li>Chromium</li>\n<li>Canary</li>\n</ul>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/15519992/11fa3c36-21d2-11e6-9557-9b0f4139ac70.gif\" alt=\"open browsers\"></p>\n<p>We’ll automatically detect available browsers based on your OS. In <code>Linux</code> we detect browsers by their executable binary, and in <code>OSX</code> we’ll automatically find them even if they aren’t in your <code>/Applications</code> folder.</p>\n<p>[block:callout]<br>{<br>  “type”: “warning”,<br>  “body”: “I’m confused which is the Cypress browser and which is my own browser!”<br>}<br>[/block]</p>\n<p>You might notice that if you already have the browser open you will see two icons of the same browser in your Dock.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/15520492/b812cfe6-21d4-11e6-8764-831f33bd0acf.gif\" alt=\"switching browsers\"></p>\n<p>We understand that when Cypress is running in its own profile it can be confusing telling the difference from your normal browser and Cypress. For this reason we recommend <a href=\"https://download-chromium.appspot.com/\" target=\"_blank\" rel=\"external\">downloading Chromium</a> or <a href=\"https://www.google.com/chrome/browser/canary.html\" target=\"_blank\" rel=\"external\">downloading Canary</a>. These browsers both have different icons from the standard Chrome browser and it’ll be much easier to tell the difference. You can also use the bundled <a href=\"#section-electron-browser\">Electron browser</a>, which does not have a Dock icon.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/15520491/b812bfe2-21d4-11e6-99ea-c77dae947b26.gif\" alt=\"switch canary\"></p>\n<p>Additionally, we’ve made the browsers spawned by Cypress look different than regular sessions. You’ll see a darker theme around the chrome of the browser. You’ll always be able to visually distinguish these.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/15520464/936b3976-21d4-11e6-8aca-33d05f2c2a8b.png\" alt=\"screen shot 2016-05-24 at 5 25 19 pm\"></p>\n<hr>\n<h2 id=\"Electron-Browser\"><a href=\"#Electron-Browser\" class=\"headerlink\" title=\"Electron Browser\"></a>Electron Browser</h2><p>In addition to the browsers found on your system, you’ll notice that <code>Electron</code> is another available browser (it may be the only browser if Cypress does not detect any compatible browsers on your system). The <code>Electron</code> browser is a version of Chrome that is bundled with <a href=\"https://electron.atom.io/\" target=\"_blank\" rel=\"external\">Electron</a> (the platform underlying the Cypress app). Cypress uses it when running headless via <code>cypress run</code>. It may be useful for debugging issues that only occur when running headless.</p>\n<p>The <code>Electron</code> browser does not have its own Dock icon or any chrome (address bar, tabs, bookmarks, etc).</p>\n<hr>\n<h2 id=\"Unsupported-Browsers\"><a href=\"#Unsupported-Browsers\" class=\"headerlink\" title=\"Unsupported Browsers\"></a>Unsupported Browsers</h2><p><img src=\"https://cloud.githubusercontent.com/assets/1268976/15520572/12b158a0-21d5-11e6-92e0-2e75e42fa517.png\" alt=\"screen shot 2016-05-24 at 5 29 05 pm\"></p>\n<hr>\n<h1 id=\"Clean-Testing-Environment\"><a href=\"#Clean-Testing-Environment\" class=\"headerlink\" title=\"Clean Testing Environment\"></a>Clean Testing Environment</h1><p>When we launch browsers we open them in a way that makes testing more reliable and accessible. We do this in three ways:</p>\n<ol>\n<li>Creating an isolated testing profile</li>\n<li>Disabling virtually everything that gets in the way of testing</li>\n<li>Enabling access to browser automation API’s</li>\n</ol>\n<hr>\n<h2 id=\"Cypress-Profile\"><a href=\"#Cypress-Profile\" class=\"headerlink\" title=\"Cypress Profile\"></a>Cypress Profile</h2><p>Cypress generates its own isolated profile away from your regular browsing profile. This means things like <code>history</code> entries, <code>cookies</code>, and <code>3rd party extensions</code> from your regular browsing session will not affect Cypress.</p>\n<p>[block:callout]<br>{<br>  “type”: “warning”,<br>  “body”: “Wait, I need my developer extensions such as React Dev Tools, Batarang, or Ember Inspector!”<br>}<br>[/block]</p>\n<p>That’s no problem - you simply have to reinstall them <strong>once</strong>. We’ll continue to use this Cypress testing profile on subsequent launches so all of your configuration will automatically be preserved. Note that in the <a href=\"#section-electron-browser\">Electron browser</a>, while it’s possible to use the dev tools, it’s not possible to install developer extensions.</p>\n<hr>\n<h2 id=\"Testing-Barriers\"><a href=\"#Testing-Barriers\" class=\"headerlink\" title=\"Testing Barriers\"></a>Testing Barriers</h2><p>Cypress automatically disables certain functionality in your browser which can get in the way of automated testing.</p>\n<p>For instance we will automatically:</p>\n<ul>\n<li>Ignore certificate errors</li>\n<li>Allow blocked pop-ups</li>\n<li>Disable ‘Saving passwords’</li>\n<li>Disable ‘Autofill forms and passwords’</li>\n<li>Disable asking to become your primary browser</li>\n<li>Disable language translations</li>\n<li>Disable restoring sessions</li>\n<li>Disable a ton of background network traffic</li>\n<li>Disable background and renderer throttling</li>\n</ul>\n<hr>\n<h2 id=\"Tabbed-Browsing\"><a href=\"#Tabbed-Browsing\" class=\"headerlink\" title=\"Tabbed Browsing\"></a>Tabbed Browsing</h2><hr>\n<h1 id=\"Automation-API’s\"><a href=\"#Automation-API’s\" class=\"headerlink\" title=\"Automation API’s\"></a>Automation API’s</h1><h2 id=\"Cypress-Extension\"><a href=\"#Cypress-Extension\" class=\"headerlink\" title=\"Cypress Extension\"></a>Cypress Extension</h2><talk about=\"\" not=\"\" using=\"\" the=\"\" debugger=\"\" protocol=\"\">\n\n<hr>\n<h2 id=\"Browser-Drivers\"><a href=\"#Browser-Drivers\" class=\"headerlink\" title=\"Browser Drivers\"></a>Browser Drivers</h2><hr>\n<h2 id=\"No-Selenium-Server\"><a href=\"#No-Selenium-Server\" class=\"headerlink\" title=\"No Selenium Server\"></a>No Selenium Server</h2></talk>","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<h1 id=\"Managing-Browsers\"><a href=\"#Managing-Browsers\" class=\"headerlink\" title=\"Managing Browsers\"></a>Managing Browsers</h1><p>When you’re ready to start testing, Cypress launches the browser for you. It does this for two main reasons:</p>\n<ol>\n<li>To create a clean, pristine testing environment.</li>\n<li>To access the exclusive browser API’s for automation.</li>\n</ol>\n<hr>\n<h1 id=\"Launching-Browsers\"><a href=\"#Launching-Browsers\" class=\"headerlink\" title=\"Launching Browsers\"></a>Launching Browsers</h1><p>When Cypress is initially <a href=\"https://on.cypress.io/guides/installing-and-running#section-running-tests-from-the-gui\">run from the Desktop application</a>, you can choose to run Cypress in a select number of browsers including:</p>\n<ul>\n<li>Chrome</li>\n<li>Chromium</li>\n<li>Canary</li>\n</ul>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/15519992/11fa3c36-21d2-11e6-9557-9b0f4139ac70.gif\" alt=\"open browsers\"></p>\n<p>We’ll automatically detect available browsers based on your OS. In <code>Linux</code> we detect browsers by their executable binary, and in <code>OSX</code> we’ll automatically find them even if they aren’t in your <code>/Applications</code> folder.</p>\n<p>[block:callout]<br>{<br>  “type”: “warning”,<br>  “body”: “I’m confused which is the Cypress browser and which is my own browser!”<br>}<br>[/block]</p>\n<p>You might notice that if you already have the browser open you will see two icons of the same browser in your Dock.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/15520492/b812cfe6-21d4-11e6-8764-831f33bd0acf.gif\" alt=\"switching browsers\"></p>\n<p>We understand that when Cypress is running in its own profile it can be confusing telling the difference from your normal browser and Cypress. For this reason we recommend <a href=\"https://download-chromium.appspot.com/\">downloading Chromium</a> or <a href=\"https://www.google.com/chrome/browser/canary.html\">downloading Canary</a>. These browsers both have different icons from the standard Chrome browser and it’ll be much easier to tell the difference. You can also use the bundled <a href=\"#section-electron-browser\">Electron browser</a>, which does not have a Dock icon.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/15520491/b812bfe2-21d4-11e6-99ea-c77dae947b26.gif\" alt=\"switch canary\"></p>\n<p>Additionally, we’ve made the browsers spawned by Cypress look different than regular sessions. You’ll see a darker theme around the chrome of the browser. You’ll always be able to visually distinguish these.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/15520464/936b3976-21d4-11e6-8aca-33d05f2c2a8b.png\" alt=\"screen shot 2016-05-24 at 5 25 19 pm\"></p>\n<hr>\n<h2 id=\"Electron-Browser\"><a href=\"#Electron-Browser\" class=\"headerlink\" title=\"Electron Browser\"></a>Electron Browser</h2><p>In addition to the browsers found on your system, you’ll notice that <code>Electron</code> is another available browser (it may be the only browser if Cypress does not detect any compatible browsers on your system). The <code>Electron</code> browser is a version of Chrome that is bundled with <a href=\"https://electron.atom.io/\">Electron</a> (the platform underlying the Cypress app). Cypress uses it when running headless via <code>cypress run</code>. It may be useful for debugging issues that only occur when running headless.</p>\n<p>The <code>Electron</code> browser does not have its own Dock icon or any chrome (address bar, tabs, bookmarks, etc).</p>\n<hr>\n<h2 id=\"Unsupported-Browsers\"><a href=\"#Unsupported-Browsers\" class=\"headerlink\" title=\"Unsupported Browsers\"></a>Unsupported Browsers</h2><p><img src=\"https://cloud.githubusercontent.com/assets/1268976/15520572/12b158a0-21d5-11e6-92e0-2e75e42fa517.png\" alt=\"screen shot 2016-05-24 at 5 29 05 pm\"></p>\n<hr>\n<h1 id=\"Clean-Testing-Environment\"><a href=\"#Clean-Testing-Environment\" class=\"headerlink\" title=\"Clean Testing Environment\"></a>Clean Testing Environment</h1><p>When we launch browsers we open them in a way that makes testing more reliable and accessible. We do this in three ways:</p>\n<ol>\n<li>Creating an isolated testing profile</li>\n<li>Disabling virtually everything that gets in the way of testing</li>\n<li>Enabling access to browser automation API’s</li>\n</ol>\n<hr>\n<h2 id=\"Cypress-Profile\"><a href=\"#Cypress-Profile\" class=\"headerlink\" title=\"Cypress Profile\"></a>Cypress Profile</h2><p>Cypress generates its own isolated profile away from your regular browsing profile. This means things like <code>history</code> entries, <code>cookies</code>, and <code>3rd party extensions</code> from your regular browsing session will not affect Cypress.</p>\n<p>[block:callout]<br>{<br>  “type”: “warning”,<br>  “body”: “Wait, I need my developer extensions such as React Dev Tools, Batarang, or Ember Inspector!”<br>}<br>[/block]</p>\n<p>That’s no problem - you simply have to reinstall them <strong>once</strong>. We’ll continue to use this Cypress testing profile on subsequent launches so all of your configuration will automatically be preserved. Note that in the <a href=\"#section-electron-browser\">Electron browser</a>, while it’s possible to use the dev tools, it’s not possible to install developer extensions.</p>\n<hr>\n<h2 id=\"Testing-Barriers\"><a href=\"#Testing-Barriers\" class=\"headerlink\" title=\"Testing Barriers\"></a>Testing Barriers</h2><p>Cypress automatically disables certain functionality in your browser which can get in the way of automated testing.</p>\n<p>For instance we will automatically:</p>\n<ul>\n<li>Ignore certificate errors</li>\n<li>Allow blocked pop-ups</li>\n<li>Disable ‘Saving passwords’</li>\n<li>Disable ‘Autofill forms and passwords’</li>\n<li>Disable asking to become your primary browser</li>\n<li>Disable language translations</li>\n<li>Disable restoring sessions</li>\n<li>Disable a ton of background network traffic</li>\n<li>Disable background and renderer throttling</li>\n</ul>\n<hr>\n<h2 id=\"Tabbed-Browsing\"><a href=\"#Tabbed-Browsing\" class=\"headerlink\" title=\"Tabbed Browsing\"></a>Tabbed Browsing</h2><hr>\n<h1 id=\"Automation-API’s\"><a href=\"#Automation-API’s\" class=\"headerlink\" title=\"Automation API’s\"></a>Automation API’s</h1><h2 id=\"Cypress-Extension\"><a href=\"#Cypress-Extension\" class=\"headerlink\" title=\"Cypress Extension\"></a>Cypress Extension</h2><talk about not using the debugger protocol>\n\n<hr>\n<h2 id=\"Browser-Drivers\"><a href=\"#Browser-Drivers\" class=\"headerlink\" title=\"Browser Drivers\"></a>Browser Drivers</h2><hr>\n<h2 id=\"No-Selenium-Server\"><a href=\"#No-Selenium-Server\" class=\"headerlink\" title=\"No Selenium Server\"></a>No Selenium Server</h2>"},{"title":"cli","_content":"\n# What is the CLI Tool?\n\nThe CLI Tool is an [`npm package`](https://github.com/cypress-io/cypress-cli) that wraps the Desktop Application.\n\nIt provides a set of commands that can be used to do things like:\n\n- Install Cypress\n- Run Cypress headlessly\n- Record your test runs\n- Output the current installed version\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"You generally install the CLI tool so you can progamatically install and run Cypress. This is commonly used when running Cypress from your CI provider.\"\n}\n[/block]\n\n***\n\n# Installation\n\n```shell\nnpm install -g cypress-cli\n```\n\nThis will make the `cypress` command globally available from your command line.\n\nYou can now execute the following commands:\n\n***\n\n# Available Commands\n\n## `cypress install`\n\nInstalls the **Cypress Desktop Application** to the default location for each Operating System.\n\nOS | Path\n:--- | :---\nMac  | `/Applications/Cypress.app`\nLinux  | `/home/<user>/.cypress/Cypress`\n\n```shell\n## by default will install the latest version\ncypress install\n```\n\n```shell\n## install a specific version\ncypress install --cypress-version 0.13.0\n```\n\nAdditionally if you have a `CYPRESS_VERSION` environment variable set, it will automatically download that version. This is most useful when running Cypress in CI.\n\n![cypress-cli](https://cloud.githubusercontent.com/assets/1268976/14435124/4f632278-ffe4-11e5-9dab-0a2d493551b3.gif)\n\n***\n\n## `cypress update`\n\nUpdates Cypress to the latest version. This does the same thing as `cypress install`.\n\n```shell\n## now we have the latest version\ncypress update\n```\n\n***\n\n## `cypress run`\n\nRuns Cypress headlessly without spawning a browser.\n\nYou can use this command when working locally or when running in [Continuous Integration](https://on.cypress.io/guides/continuous-integration).\n\nCypress will first check to see that the Desktop Application is installed and will automatically install it prior to running (if necessary).\n\n[block:callout]\n{\n  \"type\": \"success\",\n  \"title\": \"Want your test runs recorded?\",\n  \"body\": \"You can also have Cypress record your test runs and make them available on our [Dashboard](https://on.cypress.io/guides/dashboard-features).\"\n}\n[/block]\n\n```shell\n## by default will use your current path\ncypress run\n```\n\n```shell\n## or you can specify a path to the project\ncypress run /users/john/projects/TodoMVC\n```\n\n```shell\n## specify a port to use which overrides values in cypress.json\ncypress run --port 8080\n```\n\n```shell\n## specify a mocha reporter to use\ncypress run --reporter json\n```\n\n```shell\n## specify options for the mocha reporter\ncypress run --reporter-options mochaFile=result.xml,toConsole=true\n```\n\n```shell\n## specify a file to run instead of running all the tests files\ncypress run --spec cypress/integration/app_spec.js\n```\n\n```shell\n## specify environment variables\ncypress run --env host=api.dev.local\n```\n\n```shell\n## specify configuration values to override cypress.json\ncypress run --config pageLoadTimeout=100000,watchForFileChanges=false\n```\n\nYou can read more about [environment variables](https://on.cypress.io/environment-variables) and [configuration](https://on.cypress.io/configuration) here.\n\n***\n\n## `cypress run --record`\n\nYou can also have your test runs recorded [once your project is setup to record](https://on.cypress.io/guides/projects).\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"You'd typically record your runs in [Continuous Integration](https://on.cypress.io/guides/continuous-integration), but you can also record when running locally.\"\n}\n[/block]\n\nAfter setting up your project you will recieve a **Record Key**.\n\n```shell\ncypress run --record --key <record_key>\n```\n\nIf you set this **Record Key** as an environment variable you can omit the `--key` flag.\n\n```shell\n## you'd typically set this in your CI provider\nexport CYPRESS_RECORD_KEY=abc-key-123\n\n## we can now omit --key\ncypress run --record\n```\n\nYou can [read more](https://on.cypress.io/how-do-i-record-runs) about recording runs here.\n\n***\n\n## `cypress open`\n\nOpens the Cypress application. This is the same thing as double-clicking the application.\n\nIn Mac you'll see the **cy** icon in the dock and in Linux you'll see the Cypress application window open.\n\nArguments you pass to `cypress open` will automatically be applied to the projects you open. These persist onto all projects until you quit the Cypress Desktop Application.\n\n```shell\n## specify a port to use which overrides values in cypress.json\ncypress open --port 8080\n```\n\n```shell\n## specify configuration values which override cypress.json\ncypress open --config pageLoadTimeout=100000,watchForFileChanges=false\n```\n\n```shell\n## specify environment variables\ncypress open --env host=api.dev.local\n```\n\n***\n\n## `cypress get:path`\n\nReturns the path Cypress will be installed to. Additionally checks to see if Cypress already exists at that path.\n\n***\n\n## `cypress verify`\n\nVerifies that the Cypress application is found.\n\n***\n\n## `cypress version`\n\nOutputs both the version of the CLI Tool and the installed Cypress application.\n","source":"guides/references/cli-tool.md","raw":"title: cli\n---\n\n# What is the CLI Tool?\n\nThe CLI Tool is an [`npm package`](https://github.com/cypress-io/cypress-cli) that wraps the Desktop Application.\n\nIt provides a set of commands that can be used to do things like:\n\n- Install Cypress\n- Run Cypress headlessly\n- Record your test runs\n- Output the current installed version\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"You generally install the CLI tool so you can progamatically install and run Cypress. This is commonly used when running Cypress from your CI provider.\"\n}\n[/block]\n\n***\n\n# Installation\n\n```shell\nnpm install -g cypress-cli\n```\n\nThis will make the `cypress` command globally available from your command line.\n\nYou can now execute the following commands:\n\n***\n\n# Available Commands\n\n## `cypress install`\n\nInstalls the **Cypress Desktop Application** to the default location for each Operating System.\n\nOS | Path\n:--- | :---\nMac  | `/Applications/Cypress.app`\nLinux  | `/home/<user>/.cypress/Cypress`\n\n```shell\n## by default will install the latest version\ncypress install\n```\n\n```shell\n## install a specific version\ncypress install --cypress-version 0.13.0\n```\n\nAdditionally if you have a `CYPRESS_VERSION` environment variable set, it will automatically download that version. This is most useful when running Cypress in CI.\n\n![cypress-cli](https://cloud.githubusercontent.com/assets/1268976/14435124/4f632278-ffe4-11e5-9dab-0a2d493551b3.gif)\n\n***\n\n## `cypress update`\n\nUpdates Cypress to the latest version. This does the same thing as `cypress install`.\n\n```shell\n## now we have the latest version\ncypress update\n```\n\n***\n\n## `cypress run`\n\nRuns Cypress headlessly without spawning a browser.\n\nYou can use this command when working locally or when running in [Continuous Integration](https://on.cypress.io/guides/continuous-integration).\n\nCypress will first check to see that the Desktop Application is installed and will automatically install it prior to running (if necessary).\n\n[block:callout]\n{\n  \"type\": \"success\",\n  \"title\": \"Want your test runs recorded?\",\n  \"body\": \"You can also have Cypress record your test runs and make them available on our [Dashboard](https://on.cypress.io/guides/dashboard-features).\"\n}\n[/block]\n\n```shell\n## by default will use your current path\ncypress run\n```\n\n```shell\n## or you can specify a path to the project\ncypress run /users/john/projects/TodoMVC\n```\n\n```shell\n## specify a port to use which overrides values in cypress.json\ncypress run --port 8080\n```\n\n```shell\n## specify a mocha reporter to use\ncypress run --reporter json\n```\n\n```shell\n## specify options for the mocha reporter\ncypress run --reporter-options mochaFile=result.xml,toConsole=true\n```\n\n```shell\n## specify a file to run instead of running all the tests files\ncypress run --spec cypress/integration/app_spec.js\n```\n\n```shell\n## specify environment variables\ncypress run --env host=api.dev.local\n```\n\n```shell\n## specify configuration values to override cypress.json\ncypress run --config pageLoadTimeout=100000,watchForFileChanges=false\n```\n\nYou can read more about [environment variables](https://on.cypress.io/environment-variables) and [configuration](https://on.cypress.io/configuration) here.\n\n***\n\n## `cypress run --record`\n\nYou can also have your test runs recorded [once your project is setup to record](https://on.cypress.io/guides/projects).\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"You'd typically record your runs in [Continuous Integration](https://on.cypress.io/guides/continuous-integration), but you can also record when running locally.\"\n}\n[/block]\n\nAfter setting up your project you will recieve a **Record Key**.\n\n```shell\ncypress run --record --key <record_key>\n```\n\nIf you set this **Record Key** as an environment variable you can omit the `--key` flag.\n\n```shell\n## you'd typically set this in your CI provider\nexport CYPRESS_RECORD_KEY=abc-key-123\n\n## we can now omit --key\ncypress run --record\n```\n\nYou can [read more](https://on.cypress.io/how-do-i-record-runs) about recording runs here.\n\n***\n\n## `cypress open`\n\nOpens the Cypress application. This is the same thing as double-clicking the application.\n\nIn Mac you'll see the **cy** icon in the dock and in Linux you'll see the Cypress application window open.\n\nArguments you pass to `cypress open` will automatically be applied to the projects you open. These persist onto all projects until you quit the Cypress Desktop Application.\n\n```shell\n## specify a port to use which overrides values in cypress.json\ncypress open --port 8080\n```\n\n```shell\n## specify configuration values which override cypress.json\ncypress open --config pageLoadTimeout=100000,watchForFileChanges=false\n```\n\n```shell\n## specify environment variables\ncypress open --env host=api.dev.local\n```\n\n***\n\n## `cypress get:path`\n\nReturns the path Cypress will be installed to. Additionally checks to see if Cypress already exists at that path.\n\n***\n\n## `cypress verify`\n\nVerifies that the Cypress application is found.\n\n***\n\n## `cypress version`\n\nOutputs both the version of the CLI Tool and the installed Cypress application.\n","date":"2017-04-19T18:46:47.000Z","updated":"2017-04-19T18:46:47.000Z","path":"guides/references/cli-tool.html","comments":1,"layout":"page","_id":"cj1pby1ku003468g8habflqyf","content":"<h1 id=\"What-is-the-CLI-Tool\"><a href=\"#What-is-the-CLI-Tool\" class=\"headerlink\" title=\"What is the CLI Tool?\"></a>What is the CLI Tool?</h1><p>The CLI Tool is an <a href=\"https://github.com/cypress-io/cypress-cli\" target=\"_blank\" rel=\"external\"><code>npm package</code></a> that wraps the Desktop Application.</p>\n<p>It provides a set of commands that can be used to do things like:</p>\n<ul>\n<li>Install Cypress</li>\n<li>Run Cypress headlessly</li>\n<li>Record your test runs</li>\n<li>Output the current installed version</li>\n</ul>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “You generally install the CLI tool so you can progamatically install and run Cypress. This is commonly used when running Cypress from your CI provider.”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g cypress-cli</div></pre></td></tr></table></figure>\n<p>This will make the <code>cypress</code> command globally available from your command line.</p>\n<p>You can now execute the following commands:</p>\n<hr>\n<h1 id=\"Available-Commands\"><a href=\"#Available-Commands\" class=\"headerlink\" title=\"Available Commands\"></a>Available Commands</h1><h2 id=\"cypress-install\"><a href=\"#cypress-install\" class=\"headerlink\" title=\"cypress install\"></a><code>cypress install</code></h2><p>Installs the <strong>Cypress Desktop Application</strong> to the default location for each Operating System.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">OS</th>\n<th style=\"text-align:left\">Path</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Mac</td>\n<td style=\"text-align:left\"><code>/Applications/Cypress.app</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Linux</td>\n<td style=\"text-align:left\"><code>/home/&lt;user&gt;/.cypress/Cypress</code></td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># by default will install the latest version</span></span></div><div class=\"line\">cypress install</div></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># install a specific version</span></span></div><div class=\"line\">cypress install --cypress-version 0.13.0</div></pre></td></tr></table></figure>\n<p>Additionally if you have a <code>CYPRESS_VERSION</code> environment variable set, it will automatically download that version. This is most useful when running Cypress in CI.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/14435124/4f632278-ffe4-11e5-9dab-0a2d493551b3.gif\" alt=\"cypress-cli\"></p>\n<hr>\n<h2 id=\"cypress-update\"><a href=\"#cypress-update\" class=\"headerlink\" title=\"cypress update\"></a><code>cypress update</code></h2><p>Updates Cypress to the latest version. This does the same thing as <code>cypress install</code>.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># now we have the latest version</span></span></div><div class=\"line\">cypress update</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"cypress-run\"><a href=\"#cypress-run\" class=\"headerlink\" title=\"cypress run\"></a><code>cypress run</code></h2><p>Runs Cypress headlessly without spawning a browser.</p>\n<p>You can use this command when working locally or when running in <a href=\"https://on.cypress.io/guides/continuous-integration\" target=\"_blank\" rel=\"external\">Continuous Integration</a>.</p>\n<p>Cypress will first check to see that the Desktop Application is installed and will automatically install it prior to running (if necessary).</p>\n<p>[block:callout]<br>{<br>  “type”: “success”,<br>  “title”: “Want your test runs recorded?”,<br>  “body”: “You can also have Cypress record your test runs and make them available on our <a href=\"https://on.cypress.io/guides/dashboard-features\" target=\"_blank\" rel=\"external\">Dashboard</a>.”<br>}<br>[/block]</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># by default will use your current path</span></span></div><div class=\"line\">cypress run</div></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># or you can specify a path to the project</span></span></div><div class=\"line\">cypress run /users/john/projects/TodoMVC</div></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># specify a port to use which overrides values in cypress.json</span></span></div><div class=\"line\">cypress run --port 8080</div></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># specify a mocha reporter to use</span></span></div><div class=\"line\">cypress run --reporter json</div></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># specify options for the mocha reporter</span></span></div><div class=\"line\">cypress run --reporter-options mochaFile=result.xml,toConsole=true</div></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># specify a file to run instead of running all the tests files</span></span></div><div class=\"line\">cypress run --spec cypress/integration/app_spec.js</div></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># specify environment variables</span></span></div><div class=\"line\">cypress run --env host=api.dev.local</div></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># specify configuration values to override cypress.json</span></span></div><div class=\"line\">cypress run --config pageLoadTimeout=100000,watchForFileChanges=false</div></pre></td></tr></table></figure>\n<p>You can read more about <a href=\"https://on.cypress.io/environment-variables\" target=\"_blank\" rel=\"external\">environment variables</a> and <a href=\"https://on.cypress.io/configuration\" target=\"_blank\" rel=\"external\">configuration</a> here.</p>\n<hr>\n<h2 id=\"cypress-run-record\"><a href=\"#cypress-run-record\" class=\"headerlink\" title=\"cypress run --record\"></a><code>cypress run --record</code></h2><p>You can also have your test runs recorded <a href=\"https://on.cypress.io/guides/projects\" target=\"_blank\" rel=\"external\">once your project is setup to record</a>.</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “You’d typically record your runs in <a href=\"https://on.cypress.io/guides/continuous-integration\" target=\"_blank\" rel=\"external\">Continuous Integration</a>, but you can also record when running locally.”<br>}<br>[/block]</p>\n<p>After setting up your project you will recieve a <strong>Record Key</strong>.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cypress run --record --key &lt;record_key&gt;</div></pre></td></tr></table></figure>\n<p>If you set this <strong>Record Key</strong> as an environment variable you can omit the <code>--key</code> flag.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># you'd typically set this in your CI provider</span></span></div><div class=\"line\">export CYPRESS_RECORD_KEY=abc-key-123</div><div class=\"line\"><span class=\"meta\"></span></div><div class=\"line\">#<span class=\"bash\"><span class=\"comment\"># we can now omit --key</span></span></div><div class=\"line\">cypress run --record</div></pre></td></tr></table></figure>\n<p>You can <a href=\"https://on.cypress.io/how-do-i-record-runs\" target=\"_blank\" rel=\"external\">read more</a> about recording runs here.</p>\n<hr>\n<h2 id=\"cypress-open\"><a href=\"#cypress-open\" class=\"headerlink\" title=\"cypress open\"></a><code>cypress open</code></h2><p>Opens the Cypress application. This is the same thing as double-clicking the application.</p>\n<p>In Mac you’ll see the <strong>cy</strong> icon in the dock and in Linux you’ll see the Cypress application window open.</p>\n<p>Arguments you pass to <code>cypress open</code> will automatically be applied to the projects you open. These persist onto all projects until you quit the Cypress Desktop Application.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># specify a port to use which overrides values in cypress.json</span></span></div><div class=\"line\">cypress open --port 8080</div></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># specify configuration values which override cypress.json</span></span></div><div class=\"line\">cypress open --config pageLoadTimeout=100000,watchForFileChanges=false</div></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># specify environment variables</span></span></div><div class=\"line\">cypress open --env host=api.dev.local</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"cypress-get-path\"><a href=\"#cypress-get-path\" class=\"headerlink\" title=\"cypress get:path\"></a><code>cypress get:path</code></h2><p>Returns the path Cypress will be installed to. Additionally checks to see if Cypress already exists at that path.</p>\n<hr>\n<h2 id=\"cypress-verify\"><a href=\"#cypress-verify\" class=\"headerlink\" title=\"cypress verify\"></a><code>cypress verify</code></h2><p>Verifies that the Cypress application is found.</p>\n<hr>\n<h2 id=\"cypress-version\"><a href=\"#cypress-version\" class=\"headerlink\" title=\"cypress version\"></a><code>cypress version</code></h2><p>Outputs both the version of the CLI Tool and the installed Cypress application.</p>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<h1 id=\"What-is-the-CLI-Tool\"><a href=\"#What-is-the-CLI-Tool\" class=\"headerlink\" title=\"What is the CLI Tool?\"></a>What is the CLI Tool?</h1><p>The CLI Tool is an <a href=\"https://github.com/cypress-io/cypress-cli\"><code>npm package</code></a> that wraps the Desktop Application.</p>\n<p>It provides a set of commands that can be used to do things like:</p>\n<ul>\n<li>Install Cypress</li>\n<li>Run Cypress headlessly</li>\n<li>Record your test runs</li>\n<li>Output the current installed version</li>\n</ul>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “You generally install the CLI tool so you can progamatically install and run Cypress. This is commonly used when running Cypress from your CI provider.”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g cypress-cli</div></pre></td></tr></table></figure>\n<p>This will make the <code>cypress</code> command globally available from your command line.</p>\n<p>You can now execute the following commands:</p>\n<hr>\n<h1 id=\"Available-Commands\"><a href=\"#Available-Commands\" class=\"headerlink\" title=\"Available Commands\"></a>Available Commands</h1><h2 id=\"cypress-install\"><a href=\"#cypress-install\" class=\"headerlink\" title=\"cypress install\"></a><code>cypress install</code></h2><p>Installs the <strong>Cypress Desktop Application</strong> to the default location for each Operating System.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">OS</th>\n<th style=\"text-align:left\">Path</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Mac</td>\n<td style=\"text-align:left\"><code>/Applications/Cypress.app</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Linux</td>\n<td style=\"text-align:left\"><code>/home/&lt;user&gt;/.cypress/Cypress</code></td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># by default will install the latest version</span></span></div><div class=\"line\">cypress install</div></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># install a specific version</span></span></div><div class=\"line\">cypress install --cypress-version 0.13.0</div></pre></td></tr></table></figure>\n<p>Additionally if you have a <code>CYPRESS_VERSION</code> environment variable set, it will automatically download that version. This is most useful when running Cypress in CI.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/14435124/4f632278-ffe4-11e5-9dab-0a2d493551b3.gif\" alt=\"cypress-cli\"></p>\n<hr>\n<h2 id=\"cypress-update\"><a href=\"#cypress-update\" class=\"headerlink\" title=\"cypress update\"></a><code>cypress update</code></h2><p>Updates Cypress to the latest version. This does the same thing as <code>cypress install</code>.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># now we have the latest version</span></span></div><div class=\"line\">cypress update</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"cypress-run\"><a href=\"#cypress-run\" class=\"headerlink\" title=\"cypress run\"></a><code>cypress run</code></h2><p>Runs Cypress headlessly without spawning a browser.</p>\n<p>You can use this command when working locally or when running in <a href=\"https://on.cypress.io/guides/continuous-integration\">Continuous Integration</a>.</p>\n<p>Cypress will first check to see that the Desktop Application is installed and will automatically install it prior to running (if necessary).</p>\n<p>[block:callout]<br>{<br>  “type”: “success”,<br>  “title”: “Want your test runs recorded?”,<br>  “body”: “You can also have Cypress record your test runs and make them available on our <a href=\"https://on.cypress.io/guides/dashboard-features\">Dashboard</a>.”<br>}<br>[/block]</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># by default will use your current path</span></span></div><div class=\"line\">cypress run</div></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># or you can specify a path to the project</span></span></div><div class=\"line\">cypress run /users/john/projects/TodoMVC</div></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># specify a port to use which overrides values in cypress.json</span></span></div><div class=\"line\">cypress run --port 8080</div></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># specify a mocha reporter to use</span></span></div><div class=\"line\">cypress run --reporter json</div></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># specify options for the mocha reporter</span></span></div><div class=\"line\">cypress run --reporter-options mochaFile=result.xml,toConsole=true</div></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># specify a file to run instead of running all the tests files</span></span></div><div class=\"line\">cypress run --spec cypress/integration/app_spec.js</div></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># specify environment variables</span></span></div><div class=\"line\">cypress run --env host=api.dev.local</div></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># specify configuration values to override cypress.json</span></span></div><div class=\"line\">cypress run --config pageLoadTimeout=100000,watchForFileChanges=false</div></pre></td></tr></table></figure>\n<p>You can read more about <a href=\"https://on.cypress.io/environment-variables\">environment variables</a> and <a href=\"https://on.cypress.io/configuration\">configuration</a> here.</p>\n<hr>\n<h2 id=\"cypress-run-record\"><a href=\"#cypress-run-record\" class=\"headerlink\" title=\"cypress run --record\"></a><code>cypress run --record</code></h2><p>You can also have your test runs recorded <a href=\"https://on.cypress.io/guides/projects\">once your project is setup to record</a>.</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “You’d typically record your runs in <a href=\"https://on.cypress.io/guides/continuous-integration\">Continuous Integration</a>, but you can also record when running locally.”<br>}<br>[/block]</p>\n<p>After setting up your project you will recieve a <strong>Record Key</strong>.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cypress run --record --key &lt;record_key&gt;</div></pre></td></tr></table></figure>\n<p>If you set this <strong>Record Key</strong> as an environment variable you can omit the <code>--key</code> flag.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># you'd typically set this in your CI provider</span></span></div><div class=\"line\">export CYPRESS_RECORD_KEY=abc-key-123</div><div class=\"line\"><span class=\"meta\"></div><div class=\"line\">#</span><span class=\"bash\"><span class=\"comment\"># we can now omit --key</span></span></div><div class=\"line\">cypress run --record</div></pre></td></tr></table></figure>\n<p>You can <a href=\"https://on.cypress.io/how-do-i-record-runs\">read more</a> about recording runs here.</p>\n<hr>\n<h2 id=\"cypress-open\"><a href=\"#cypress-open\" class=\"headerlink\" title=\"cypress open\"></a><code>cypress open</code></h2><p>Opens the Cypress application. This is the same thing as double-clicking the application.</p>\n<p>In Mac you’ll see the <strong>cy</strong> icon in the dock and in Linux you’ll see the Cypress application window open.</p>\n<p>Arguments you pass to <code>cypress open</code> will automatically be applied to the projects you open. These persist onto all projects until you quit the Cypress Desktop Application.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># specify a port to use which overrides values in cypress.json</span></span></div><div class=\"line\">cypress open --port 8080</div></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># specify configuration values which override cypress.json</span></span></div><div class=\"line\">cypress open --config pageLoadTimeout=100000,watchForFileChanges=false</div></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># specify environment variables</span></span></div><div class=\"line\">cypress open --env host=api.dev.local</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"cypress-get-path\"><a href=\"#cypress-get-path\" class=\"headerlink\" title=\"cypress get:path\"></a><code>cypress get:path</code></h2><p>Returns the path Cypress will be installed to. Additionally checks to see if Cypress already exists at that path.</p>\n<hr>\n<h2 id=\"cypress-verify\"><a href=\"#cypress-verify\" class=\"headerlink\" title=\"cypress verify\"></a><code>cypress verify</code></h2><p>Verifies that the Cypress application is found.</p>\n<hr>\n<h2 id=\"cypress-version\"><a href=\"#cypress-version\" class=\"headerlink\" title=\"cypress version\"></a><code>cypress version</code></h2><p>Outputs both the version of the CLI Tool and the installed Cypress application.</p>\n"},{"title":"known-issues","_content":"\n# Missing Commands\n\nSome commands have not been implemented in Cypress. Some commands will be implemented in the future and some do not make sense to implement in Cypress.\n\n***\n\n## Right click\n\n[Issue #53](https://github.com/cypress-io/cypress/issues/53)\n\n**Workaround**\n\nOftentimes you can use [`cy.invoke`](https://on.cypress.io/api/invoke) or [`cy.wrap`](https://on.cypress.io/api/wrap) to trigger the event or execute the action in the DOM.\n\n**Example of right clicking on an element using jQuery**\n```javascript\ncy.get(\"#nav\").first().invoke(\"trigger\", \"contextmenu\")\n```\n\n**Example of right clicking on an element without jQuery**\n```javascript\n// need to create the event to later dispatch\nvar e = new Event('contextmenu', {bubbles: true, cancelable: true})\n// set coordinates of click\ne.clientX = 451\ne.clientY = 68\n\ncy\n  .get(\"#nav\").first().then(function($el) {\n    $el[0].dispatchEvent(e)\n  })\n```\n\n***\n\n## Hover\n\n[Issue #10](https://github.com/cypress-io/cypress/issues/10)\n\nSometimes an element has specific logic on hover. Maybe the element doesn't even display to be clickable until you hover over a specific element.\n\n**Workaround**\n\nOftentimes you can use [`cy.invoke`](https://on.cypress.io/api/invoke) or [`cy.wrap`](https://on.cypress.io/api/wrap) to show the element before you perform the action.\n\n**Example of showing an element in order to perform action**\n```javascript\ncy.get(\".content\").invoke(\"show\").click()\n```\n\nYou can also force the action to be performed on the element regardless of whether the element is visible or not.\n\n**Example of clicking on a hidden element**\n```javascript\ncy.get(\".content\").click({force: true})\n```\n\n**Example of checking a hidden element**\n```javascript\ncy.get(\".checkbox\").check({force: true})\n```\n\n***\n\n# Difficult use cases\n\nCypress does not support the following use cases.\n\n## Iframes\n\n[Issue #136](https://github.com/cypress-io/cypress/issues/136)\n\nYou cannot target elements or interact with anything in an iframe - regardless of it being a same domain or cross domain iframe.\n\nThis is actively being worked on in Cypress and you'll first see support for same domain iframes, followed by cross domain (they are much harder to do).\n\n**Workaround**\n\nSit tight, comment on the issue so we know you care about this support, and be patient.\n\n***\n\n## OAuth\n\nThis is related to the iframe issue above, but basically `oauth` usually will not work. This is one of the hardest things for Cypress to be able to handle as there are so many different implementations and mechanisms.\n\nLikely we will be able to support server side oauth redirects, but for client side popups you'll simply use `sinon` and `stub` the oauth response directly in your code. This is actually possible to do right now but we don't have any good docs or tutorials on it.\n\n**Workaround**\n\n[Come into Gitter](https://gitter.im/cypress-io/cypress) and talk to us about what you're trying to do. We'll tell you if you're able to mock this and how to do it.\n\n***\n\n## window.fetch routing and stubbing\n\n[Issue #95](https://github.com/cypress-io/cypress/issues/95)\n\nSupport for `fetch` has not been added but it's possible to handle in the same way as we handle `XHRs`. This biggest challenge here is that you can use `fetch` in `Service Workers` outside of the global context. We'll likely have to move routing to the server and handle it in the proxy layer but it should be possible.\n\nWhile we currently provide things like the stack trace and initiator line for XHR's we will not be able to provide that for `fetch`.\n\n**Workaround**\n\nSit tight, comment on the issue so we know you care about this support, and be patient.\n","source":"guides/references/known-issues.md","raw":"title: known-issues\n---\n\n# Missing Commands\n\nSome commands have not been implemented in Cypress. Some commands will be implemented in the future and some do not make sense to implement in Cypress.\n\n***\n\n## Right click\n\n[Issue #53](https://github.com/cypress-io/cypress/issues/53)\n\n**Workaround**\n\nOftentimes you can use [`cy.invoke`](https://on.cypress.io/api/invoke) or [`cy.wrap`](https://on.cypress.io/api/wrap) to trigger the event or execute the action in the DOM.\n\n**Example of right clicking on an element using jQuery**\n```javascript\ncy.get(\"#nav\").first().invoke(\"trigger\", \"contextmenu\")\n```\n\n**Example of right clicking on an element without jQuery**\n```javascript\n// need to create the event to later dispatch\nvar e = new Event('contextmenu', {bubbles: true, cancelable: true})\n// set coordinates of click\ne.clientX = 451\ne.clientY = 68\n\ncy\n  .get(\"#nav\").first().then(function($el) {\n    $el[0].dispatchEvent(e)\n  })\n```\n\n***\n\n## Hover\n\n[Issue #10](https://github.com/cypress-io/cypress/issues/10)\n\nSometimes an element has specific logic on hover. Maybe the element doesn't even display to be clickable until you hover over a specific element.\n\n**Workaround**\n\nOftentimes you can use [`cy.invoke`](https://on.cypress.io/api/invoke) or [`cy.wrap`](https://on.cypress.io/api/wrap) to show the element before you perform the action.\n\n**Example of showing an element in order to perform action**\n```javascript\ncy.get(\".content\").invoke(\"show\").click()\n```\n\nYou can also force the action to be performed on the element regardless of whether the element is visible or not.\n\n**Example of clicking on a hidden element**\n```javascript\ncy.get(\".content\").click({force: true})\n```\n\n**Example of checking a hidden element**\n```javascript\ncy.get(\".checkbox\").check({force: true})\n```\n\n***\n\n# Difficult use cases\n\nCypress does not support the following use cases.\n\n## Iframes\n\n[Issue #136](https://github.com/cypress-io/cypress/issues/136)\n\nYou cannot target elements or interact with anything in an iframe - regardless of it being a same domain or cross domain iframe.\n\nThis is actively being worked on in Cypress and you'll first see support for same domain iframes, followed by cross domain (they are much harder to do).\n\n**Workaround**\n\nSit tight, comment on the issue so we know you care about this support, and be patient.\n\n***\n\n## OAuth\n\nThis is related to the iframe issue above, but basically `oauth` usually will not work. This is one of the hardest things for Cypress to be able to handle as there are so many different implementations and mechanisms.\n\nLikely we will be able to support server side oauth redirects, but for client side popups you'll simply use `sinon` and `stub` the oauth response directly in your code. This is actually possible to do right now but we don't have any good docs or tutorials on it.\n\n**Workaround**\n\n[Come into Gitter](https://gitter.im/cypress-io/cypress) and talk to us about what you're trying to do. We'll tell you if you're able to mock this and how to do it.\n\n***\n\n## window.fetch routing and stubbing\n\n[Issue #95](https://github.com/cypress-io/cypress/issues/95)\n\nSupport for `fetch` has not been added but it's possible to handle in the same way as we handle `XHRs`. This biggest challenge here is that you can use `fetch` in `Service Workers` outside of the global context. We'll likely have to move routing to the server and handle it in the proxy layer but it should be possible.\n\nWhile we currently provide things like the stack trace and initiator line for XHR's we will not be able to provide that for `fetch`.\n\n**Workaround**\n\nSit tight, comment on the issue so we know you care about this support, and be patient.\n","date":"2017-04-19T18:46:47.000Z","updated":"2017-04-19T18:46:47.000Z","path":"guides/references/known-issues.html","comments":1,"layout":"page","_id":"cj1pby1kv003568g8ls8kj9ex","content":"<h1 id=\"Missing-Commands\"><a href=\"#Missing-Commands\" class=\"headerlink\" title=\"Missing Commands\"></a>Missing Commands</h1><p>Some commands have not been implemented in Cypress. Some commands will be implemented in the future and some do not make sense to implement in Cypress.</p>\n<hr>\n<h2 id=\"Right-click\"><a href=\"#Right-click\" class=\"headerlink\" title=\"Right click\"></a>Right click</h2><p><a href=\"https://github.com/cypress-io/cypress/issues/53\" target=\"_blank\" rel=\"external\">Issue #53</a></p>\n<p><strong>Workaround</strong></p>\n<p>Oftentimes you can use <a href=\"https://on.cypress.io/api/invoke\" target=\"_blank\" rel=\"external\"><code>cy.invoke</code></a> or <a href=\"https://on.cypress.io/api/wrap\" target=\"_blank\" rel=\"external\"><code>cy.wrap</code></a> to trigger the event or execute the action in the DOM.</p>\n<p><strong>Example of right clicking on an element using jQuery</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"#nav\"</span>).first().invoke(<span class=\"string\">\"trigger\"</span>, <span class=\"string\">\"contextmenu\"</span>)</div></pre></td></tr></table></figure></p>\n<p><strong>Example of right clicking on an element without jQuery</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// need to create the event to later dispatch</span></div><div class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"keyword\">new</span> Event(<span class=\"string\">'contextmenu'</span>, &#123;<span class=\"attr\">bubbles</span>: <span class=\"literal\">true</span>, <span class=\"attr\">cancelable</span>: <span class=\"literal\">true</span>&#125;)</div><div class=\"line\"><span class=\"comment\">// set coordinates of click</span></div><div class=\"line\">e.clientX = <span class=\"number\">451</span></div><div class=\"line\">e.clientY = <span class=\"number\">68</span></div><div class=\"line\"></div><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"#nav\"</span>).first().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$el</span>) </span>&#123;</div><div class=\"line\">    $el[<span class=\"number\">0</span>].dispatchEvent(e)</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"Hover\"><a href=\"#Hover\" class=\"headerlink\" title=\"Hover\"></a>Hover</h2><p><a href=\"https://github.com/cypress-io/cypress/issues/10\" target=\"_blank\" rel=\"external\">Issue #10</a></p>\n<p>Sometimes an element has specific logic on hover. Maybe the element doesn’t even display to be clickable until you hover over a specific element.</p>\n<p><strong>Workaround</strong></p>\n<p>Oftentimes you can use <a href=\"https://on.cypress.io/api/invoke\" target=\"_blank\" rel=\"external\"><code>cy.invoke</code></a> or <a href=\"https://on.cypress.io/api/wrap\" target=\"_blank\" rel=\"external\"><code>cy.wrap</code></a> to show the element before you perform the action.</p>\n<p><strong>Example of showing an element in order to perform action</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\".content\"</span>).invoke(<span class=\"string\">\"show\"</span>).click()</div></pre></td></tr></table></figure></p>\n<p>You can also force the action to be performed on the element regardless of whether the element is visible or not.</p>\n<p><strong>Example of clicking on a hidden element</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\".content\"</span>).click(&#123;<span class=\"attr\">force</span>: <span class=\"literal\">true</span>&#125;)</div></pre></td></tr></table></figure></p>\n<p><strong>Example of checking a hidden element</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\".checkbox\"</span>).check(&#123;<span class=\"attr\">force</span>: <span class=\"literal\">true</span>&#125;)</div></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"Difficult-use-cases\"><a href=\"#Difficult-use-cases\" class=\"headerlink\" title=\"Difficult use cases\"></a>Difficult use cases</h1><p>Cypress does not support the following use cases.</p>\n<h2 id=\"Iframes\"><a href=\"#Iframes\" class=\"headerlink\" title=\"Iframes\"></a>Iframes</h2><p><a href=\"https://github.com/cypress-io/cypress/issues/136\" target=\"_blank\" rel=\"external\">Issue #136</a></p>\n<p>You cannot target elements or interact with anything in an iframe - regardless of it being a same domain or cross domain iframe.</p>\n<p>This is actively being worked on in Cypress and you’ll first see support for same domain iframes, followed by cross domain (they are much harder to do).</p>\n<p><strong>Workaround</strong></p>\n<p>Sit tight, comment on the issue so we know you care about this support, and be patient.</p>\n<hr>\n<h2 id=\"OAuth\"><a href=\"#OAuth\" class=\"headerlink\" title=\"OAuth\"></a>OAuth</h2><p>This is related to the iframe issue above, but basically <code>oauth</code> usually will not work. This is one of the hardest things for Cypress to be able to handle as there are so many different implementations and mechanisms.</p>\n<p>Likely we will be able to support server side oauth redirects, but for client side popups you’ll simply use <code>sinon</code> and <code>stub</code> the oauth response directly in your code. This is actually possible to do right now but we don’t have any good docs or tutorials on it.</p>\n<p><strong>Workaround</strong></p>\n<p><a href=\"https://gitter.im/cypress-io/cypress\" target=\"_blank\" rel=\"external\">Come into Gitter</a> and talk to us about what you’re trying to do. We’ll tell you if you’re able to mock this and how to do it.</p>\n<hr>\n<h2 id=\"window-fetch-routing-and-stubbing\"><a href=\"#window-fetch-routing-and-stubbing\" class=\"headerlink\" title=\"window.fetch routing and stubbing\"></a>window.fetch routing and stubbing</h2><p><a href=\"https://github.com/cypress-io/cypress/issues/95\" target=\"_blank\" rel=\"external\">Issue #95</a></p>\n<p>Support for <code>fetch</code> has not been added but it’s possible to handle in the same way as we handle <code>XHRs</code>. This biggest challenge here is that you can use <code>fetch</code> in <code>Service Workers</code> outside of the global context. We’ll likely have to move routing to the server and handle it in the proxy layer but it should be possible.</p>\n<p>While we currently provide things like the stack trace and initiator line for XHR’s we will not be able to provide that for <code>fetch</code>.</p>\n<p><strong>Workaround</strong></p>\n<p>Sit tight, comment on the issue so we know you care about this support, and be patient.</p>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<h1 id=\"Missing-Commands\"><a href=\"#Missing-Commands\" class=\"headerlink\" title=\"Missing Commands\"></a>Missing Commands</h1><p>Some commands have not been implemented in Cypress. Some commands will be implemented in the future and some do not make sense to implement in Cypress.</p>\n<hr>\n<h2 id=\"Right-click\"><a href=\"#Right-click\" class=\"headerlink\" title=\"Right click\"></a>Right click</h2><p><a href=\"https://github.com/cypress-io/cypress/issues/53\">Issue #53</a></p>\n<p><strong>Workaround</strong></p>\n<p>Oftentimes you can use <a href=\"https://on.cypress.io/api/invoke\"><code>cy.invoke</code></a> or <a href=\"https://on.cypress.io/api/wrap\"><code>cy.wrap</code></a> to trigger the event or execute the action in the DOM.</p>\n<p><strong>Example of right clicking on an element using jQuery</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"#nav\"</span>).first().invoke(<span class=\"string\">\"trigger\"</span>, <span class=\"string\">\"contextmenu\"</span>)</div></pre></td></tr></table></figure></p>\n<p><strong>Example of right clicking on an element without jQuery</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// need to create the event to later dispatch</span></div><div class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"keyword\">new</span> Event(<span class=\"string\">'contextmenu'</span>, &#123;<span class=\"attr\">bubbles</span>: <span class=\"literal\">true</span>, <span class=\"attr\">cancelable</span>: <span class=\"literal\">true</span>&#125;)</div><div class=\"line\"><span class=\"comment\">// set coordinates of click</span></div><div class=\"line\">e.clientX = <span class=\"number\">451</span></div><div class=\"line\">e.clientY = <span class=\"number\">68</span></div><div class=\"line\"></div><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"#nav\"</span>).first().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$el</span>) </span>&#123;</div><div class=\"line\">    $el[<span class=\"number\">0</span>].dispatchEvent(e)</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"Hover\"><a href=\"#Hover\" class=\"headerlink\" title=\"Hover\"></a>Hover</h2><p><a href=\"https://github.com/cypress-io/cypress/issues/10\">Issue #10</a></p>\n<p>Sometimes an element has specific logic on hover. Maybe the element doesn’t even display to be clickable until you hover over a specific element.</p>\n<p><strong>Workaround</strong></p>\n<p>Oftentimes you can use <a href=\"https://on.cypress.io/api/invoke\"><code>cy.invoke</code></a> or <a href=\"https://on.cypress.io/api/wrap\"><code>cy.wrap</code></a> to show the element before you perform the action.</p>\n<p><strong>Example of showing an element in order to perform action</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\".content\"</span>).invoke(<span class=\"string\">\"show\"</span>).click()</div></pre></td></tr></table></figure></p>\n<p>You can also force the action to be performed on the element regardless of whether the element is visible or not.</p>\n<p><strong>Example of clicking on a hidden element</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\".content\"</span>).click(&#123;<span class=\"attr\">force</span>: <span class=\"literal\">true</span>&#125;)</div></pre></td></tr></table></figure></p>\n<p><strong>Example of checking a hidden element</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\".checkbox\"</span>).check(&#123;<span class=\"attr\">force</span>: <span class=\"literal\">true</span>&#125;)</div></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"Difficult-use-cases\"><a href=\"#Difficult-use-cases\" class=\"headerlink\" title=\"Difficult use cases\"></a>Difficult use cases</h1><p>Cypress does not support the following use cases.</p>\n<h2 id=\"Iframes\"><a href=\"#Iframes\" class=\"headerlink\" title=\"Iframes\"></a>Iframes</h2><p><a href=\"https://github.com/cypress-io/cypress/issues/136\">Issue #136</a></p>\n<p>You cannot target elements or interact with anything in an iframe - regardless of it being a same domain or cross domain iframe.</p>\n<p>This is actively being worked on in Cypress and you’ll first see support for same domain iframes, followed by cross domain (they are much harder to do).</p>\n<p><strong>Workaround</strong></p>\n<p>Sit tight, comment on the issue so we know you care about this support, and be patient.</p>\n<hr>\n<h2 id=\"OAuth\"><a href=\"#OAuth\" class=\"headerlink\" title=\"OAuth\"></a>OAuth</h2><p>This is related to the iframe issue above, but basically <code>oauth</code> usually will not work. This is one of the hardest things for Cypress to be able to handle as there are so many different implementations and mechanisms.</p>\n<p>Likely we will be able to support server side oauth redirects, but for client side popups you’ll simply use <code>sinon</code> and <code>stub</code> the oauth response directly in your code. This is actually possible to do right now but we don’t have any good docs or tutorials on it.</p>\n<p><strong>Workaround</strong></p>\n<p><a href=\"https://gitter.im/cypress-io/cypress\">Come into Gitter</a> and talk to us about what you’re trying to do. We’ll tell you if you’re able to mock this and how to do it.</p>\n<hr>\n<h2 id=\"window-fetch-routing-and-stubbing\"><a href=\"#window-fetch-routing-and-stubbing\" class=\"headerlink\" title=\"window.fetch routing and stubbing\"></a>window.fetch routing and stubbing</h2><p><a href=\"https://github.com/cypress-io/cypress/issues/95\">Issue #95</a></p>\n<p>Support for <code>fetch</code> has not been added but it’s possible to handle in the same way as we handle <code>XHRs</code>. This biggest challenge here is that you can use <code>fetch</code> in <code>Service Workers</code> outside of the global context. We’ll likely have to move routing to the server and handle it in the proxy layer but it should be possible.</p>\n<p>While we currently provide things like the stack trace and initiator line for XHR’s we will not be able to provide that for <code>fetch</code>.</p>\n<p><strong>Workaround</strong></p>\n<p>Sit tight, comment on the issue so we know you care about this support, and be patient.</p>\n"},{"title":"errors","_content":"\n# No tests found in your file\n\n![screen shot 2015-12-01 at 12 29 06 pm](https://cloud.githubusercontent.com/assets/1157043/20714968/aae41e0c-b61b-11e6-8e84-00da944fde04.png)\n\nThis message means that Cypress was unable to find tests in the specified file. You'll likely get this message if you have an empty test file and have not yet written any tests.\n\n***\n\n# We found an error preparing your test file\n\nThis message means that Cypress encountered an error when compiling and/or bundling your test file.\n\nCypress automatically compiles and bundles your test code so you can use ES2015, CoffeeScript, modules, etc.\n\nYou'll typically receive this message due to:\n\n- The file missing\n- A syntax error in the file or one of its dependencies\n- A missing dependency\n\nThe error will be printed on the right side, usually showing the part of the code in which the error occurred.\n\nWhen you fix the error in your code, your tests will automatically re-run.\n\n***\n\n# Cypress cannot execute commands outside a running test\n\n![screen shot 2015-12-02 at 9 57 23 pm](https://cloud.githubusercontent.com/assets/1268976/11550645/b9b8bd42-993f-11e5-896e-f6a6ca43acb4.png)\n\nThis message means you tried to execute one or more Cypress commands outside of a currently running test. Cypress has to be able to associate commands to a specific test.\n\nTypically this happens accidentally, like in the following situation.\n\n```javascript\ndescribe(\"Some Tests\", function(){\n  it(\"is true\", function(){\n    expect(true).to.be.true // yup, fine\n  })\n\n  it(\"is false\", function(){\n    expect(false).to.be.false // yup, also fine\n  })\n\n  context(\"some nested tests\", function(){\n    // oops you forgot to write an it(...) here!\n    // these cypress commands below\n    // are run outside of a test and cypress\n    // throws an error\n    cy\n      .visit(\"http://localhost:8080\")\n      .get(\"h1\").should(\"contain\", \"todos\")\n  })\n})\n```\n\nSimply move those Cypress commands into an `it(...)` and everything will work correctly.\n\nIf you are purposefully writing commands outside of a test, there is probably a better way to accomplish whatever you're trying to do. Read through the [Example Repos](https://on.cypress.io/guides/all-example-apps), [open an issue](https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A), or [come talk to someone in Gitter](https://gitter.im/cypress-io/cypress).\n\n***\n\n# cy.method() failed because the element you are chaining off of has become detached or removed from the dom\n\n![screen shot 2015-12-02 at 9 55 29 pm](https://cloud.githubusercontent.com/assets/1268976/11550618/79d68542-993f-11e5-8b5f-9418dfa964c1.png)\n\nThis message means you are trying to interact with a \"dead\" DOM element - meaning it is either detached or completely removed from the DOM.\n\nCypress errors because it cannot operate or interact with \"dead\" elements - just like a real user could not do this either.\n\nUnderstanding how this happens is very important - and it is often easy to prevent. Let's investigate.\n\n```html\n<!-- your app HTML -->\n<body>\n  <div id=\"parent\">\n    <button>delete</button>\n  </div>\n</body>\n```\n\n```javascript\n// your app code\n$(\"button\").click(function(){\n  // when the <button> is clicked\n  // we remove the button from the DOM\n  $(this).remove()\n})\n```\n\n```javascript\n// buggy test code\ncy\n   // as soon as this click event happens the <button>\n   // becomes removed from the DOM\n  .get(\"button\").click()\n\n  // When cypress begins processing the 'parent' command\n  // it will immediately detect that the current subject\n  // which is the <button> is detached from the DOM and\n  // will throw the error\n  .parent()\n```\n\nWe can prevent Cypress from throwing this error by rewriting our test code:\n\n```javascript\n// fixed test code\ncy\n  .get(\"button\").click()\n\n  // simply query for the parent directly here\n  // instead of chaining off the <button> subject\n  .get(\"#parent\")\n```\n\nThe above example is an oversimplification. Let's look at a more complex example.\n\nIn modern JavaScript frameworks, DOM elements are regularly `re-rendered` - meaning that the old element is thrown away and a new one is put in its place. Because this happens so fast, it may *appear* as if nothing has visibly changed. But if you are in the middle of executing commands it's possible the element you're interacting with has become \"dead\". To deal with this situation you must:\n\n- understand when your application re-renders\n- re-query for newly added DOM elements\n- **guard** Cypress from executing commands until a condition is met\n\nWhen we say **guard** we mean writing commands in such a way that prevents Cypress from going on before a specific condition is met. This usually means:\n\n- writing an assertion\n- waiting on an XHR\n\n***\n\n# cy.method() failed because the element cannot be interacted with\n\nYou may see a variation of this message for 4 different reasons:\n\n1. the element is not visible\n2. the element is being covered by another element\n3. the element's center is hidden from view\n4. the element is disabled\n\nCypress runs several calculations to ensure an element can *actually* be interacted with like a real user would.\n\nIf you're seeing this error, the solution is often obvious. You may need to add  **command guards** due to a timing or animation issue.\n\nThere have been situations where Cypress does not correctly allow you to interact with an element which should be interactive. If that's the case, [open an issue](https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A) or force the action to happen.\n\nIf you'd like to override these built-in checks, provide the `{force: true}` option to the action itself. Refer to each command for their available options, additional use cases and argument usage.\n\n```javascript\n// we ignore the built in error checking\n// and force the action to happen\n// regardless of whether the button is\n// visible, disabled, or covered by another element\ncy.get(\"button\").click({force: true}).\n```\n\n*Be careful with this option. It's possible to force your tests to pass but your feature may actually be failing.*\n\n***\n\n# cy.method() failed because the element is currently animating\n\n![screen shot 2015-12-30 at 11 44 22 pm](https://cloud.githubusercontent.com/assets/1268976/12061262/4f9a252e-af4f-11e5-9139-9c8bdb08ae58.png)\n\nBy default Cypress detects if an element you're trying to interact with is animating. This check ensures that an element is not animating too quickly for a real user to interact with the element. This also prevents some edge cases where actions such as [`type`](https://on.cypress.io/api/type) or [`click`](https://on.cypress.io/api/click) happenening too fast during a transition.\n\nCypress will continuously attempt to interact with the element until it eventually times out.\n\nIf you'd like to force Cypress to interact with the element there are a few options:\n\n- Pass `{force: true}` and disables **all** error checking\n- Pass `{waitForAnimations: false}` to disable animation error checking only\n- Pass `{animationDistanceThreshold: 20}` to decrease the sensitivity to detecting if an element is animating too quickly for a user to interact with. By increasing the threshold this enables your element to move farther on the page without causing Cypress to continuously retry.\n\n```javascript\ncy.get(\"#modal button\").click({waitForAnimations: false})\n```\n\nYou can globally disable animation error checking, or increase the threshold by modifying your [`cypress.json`](https://on.cypress.io/guides/configuration).\n\n```json\n// cypress.json\n{\n  \"waitForAnimations\": false,\n  \"animationDistanceThreshold\": 50\n}\n```\n\n***\n\n# Running Cypress in CI requires a secret project key\n\nYou may receive this error when trying to run Cypress tests in Continuous Integration. This means that you did not pass a specific key to: `cypress ci` in your CI configuration file.\n\nSince no key was passed, Cypress then checks for any environment variable with the name `CYPRESS_CI_KEY`, but still didn't find any.\n\nYou can get your project's secret key by running the terminal command: `cypress get:key`\n\nThen [add the key to your config file or as an environment variable](https://on.cypress.io/guides/continuous-integration#section-acquire-a-cypress-secret-key).\n\n***\n\n# The test has finished but Cypress still has commands in its queue\n\n![screen shot 2016-04-04 at 12 07 40 pm](https://cloud.githubusercontent.com/assets/1268976/14254496/fa15f8da-fa5d-11e5-91b8-cdc8387e4dc8.png)\n\nLet's examine several different ways you may get this error message. In every situation, you'll need to change something in your code to prevent this error.\n\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"title\": \"Flaky tests below!\",\n  \"body\": \"Several of these tests are dependent on race conditions. You may have to run these tests multiple times before they will actually fail. You can also try tweaking some of the delays.\"\n}\n[/block]\n\n## Simple Example\n\n```javascript\ndescribe(\"simple example\", function(){\n  // this first test will actually pass and shows you that\n  // Cypress attempts to prevent this problem in every test\n  it(\"Cypress is smart and this does not fail\", function(){\n    // queue up some commands\n    // without returning the cy object\n    // which is ok!\n    cy\n      .get(\"body\")\n      .children()\n      .should(\"not.contain\", \"foo\")\n\n    // even though we return the string here\n    // Cypress automatically figures out that you've\n    // queued commands above and does not end the test\n    // until all commands have finished\n    return \"foobarbaz\"\n  })\n\n  it(\"but you can forcibly end the test early which does fail\", function(done){\n    // this example will fail because you've forcibly terminated\n    // the test early with mocha\n    cy\n      .get(\"body\")\n      .then(function(){\n        // forcibly end the test\n        // even though there are still\n        // pending queued commands below\n        done()\n      })\n      .children()\n      .should(\"not.contain\", \"foo\")\n  })\n})\n```\n\n## Complex Async Example\n\n```javascript\ndescribe(\"a complex example with async code\", function(){\n  it(\"you can cause commands to bleed into the next test\", function(){\n    // what's happening here is that because we have NOT told mocha this is an async test\n    // this test will pass immediately and move onto the next test...\n    //\n    // ...then, when the setTimeout callback function runs\n    // new commands will get queued on the wrong test\n    //\n    // Cypress will detect this and fail the next test\n    setTimeout(function(){\n      cy.get(\"body\").children().should(\"not.contain\", \"foo\")\n    }, 10)\n\n    // the correct way to write the above test code would be this:\n    // it(\"does not cause commands to bleed into the next test\", function(done){\n    //   setTimeout(function(){\n    //     cy.get(\"body\").children().should(\"not.contain\", \"foo\").then(function(){\n    //       now all the commands are correctly processed on this test\n    //       and do not bleed into the next test\n    //       done()\n    //     })\n    //   }, 10)\n    // })\n\n  })\n\n  it(\"this test will fail due to the previous poorly written test\", function(){\n    // we will get the error here that Cypress detected\n    // it still had commands in its command queue\n    //\n    // Cypress will print the commands out which should\n    // help us figure out that the previous test is\n    // causing this error message\n    cy.wait(10)\n  })\n})\n```\n\n## Complex Promise Example\n\n```javascript\ndescribe(\"another complex example using a forgotten 'return'\", function(){\n  it(\"forgets to return a promise\", function(){\n    // we forget to return the promise to our test\n    // which means the test passes synchronously but\n    // our promise resolves during the next test.\n    //\n    // this causes the commands to be queued on the\n    // wrong test\n    Cypress.Promise.delay(10).then(function(){\n      cy.get(\"body\").children().should(\"not.contain\", \"foo\")\n    })\n\n    // the correct way to write the above test code would be this:\n    // it(\"does not forget to return a promise\", function(){\n    //   return Cypress.Promise.delay(10).then(function(){\n    //     return cy.get(\"body\").children().should(\"not.contain\", \"foo\")\n    //   })\n    // }\n  })\n\n  it(\"this test will fail due to the previous poorly written test\", function(){\n    // we will get the error here that Cypress detected\n    // it still had commands in its command queue\n    //\n    // Cypress will print the commands out which should\n    // help us figure out that the previous test is\n    // causing this error message\n    cy.wait(10)\n  })\n})\n```\n\n***\n\n# cy.visit() failed because you are attempting to visit a second unique domain\n\nTBD.\n\n***\n\n# Cypress detected a cross origin error happened on page load\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"This is a simple overview...\",\n  \"body\": \"For a more thorough explanation of Cypress's Web Security model, [please read our dedicated guide to it](https://on.cypress.io/guides/web-security).\"\n}\n[/block]\n\nThis error means that your application navigated to a superdomain that Cypress was not bound to.\n\nInitially when you `cy.visit` Cypress changes the url to match what you are visiting. This enables Cypress to communicate with your appliation to control it, and bypasses all same-origin security policies built into the browsers.\n\nWhen your application navigates to a superdomain outside of the current origin-policy Cypress is unable to communicate with it, and thus fails.\n\nThere are generally fairly simple workarounds for these common situations:\n\n1. Don't click `<a>` links that navigate you outside of your apps. Likely this isn't worth testing anyway. You should ask yourself: *What's the point of clicking and going to another app?* Likely all you care about is that the `href` attribute matches what you expect. So simply make an assertion about that.\n\n2. You are testing a page that uses `Single sign-on (SSO)`. In this case your webserver is likely redirecting you between superdomains, and thus you receive this error message. You can likely get around this redirect problem by using [`cy.request`](https://on.cypress.io/api/request) and manually handling the session yourself.\n\nIf you find yourself stuck and cannot work around these issues you can just set this in your `cypress.json` file:\n\n```javascript\n// cypress.json\n{\n  chromeWebSecurity: false\n}\n```\n\nBut before doing so you should really understand and [read about the reasoning here](https://on.cypress.io/guides/web-security).\n\n***\n\n# Support file missing or invalid\n\nThe `supportFolder` option has been removed from Cypress and has been replaced by module support and the `supportFile` option. Cypress used to automatically include any scripts in the `supportFolder` before your test files, and that was the best way to include custom Cypress commands and utility functions. However, automatically including all the files in a certain directory is somewhat magical and unintuitive, and requires creating globals for the purpose of utility functions. This behavior has been succeeded by module support and the `supportFile` option.\n\n## Use modules for utility functions\n\nCypress supports both ES2015 modules and CommonJS modules. You can import/require npm modules as well as local modules:\n\n```javascript\nimport _ from \"lodash\"\nimport util from \"./util\"\n\nit(\"uses modules\", function () {\n  expect(_.kebabCase(\"FooBar\")).to.equal(\"foo-bar\")\n  expect(util.secretCode()).to.equal(\"1-2-3-4\")\n})\n```\n\n## Use supportFile to load scripts before your test code\n\nIt's still useful to load a setup file before your test code. If you are setting Cypress defaults or utilizing custom Cypress commands, instead of needing to import/require those defaults/commands in every test file, you can use the `supportFile` configuration option. This works similar to the former `supportFolder` option, but is more explicit.\n\n`supportFile` is a path to a file to include before your test files. By default, `supportFile` is set to look for one of the following files:\n\n* `cypress/support/index.js`\n* `cypress/support/index.coffee`\n\nJust like with your test files, the `supportFile` can use ES2015+ (or CoffeeScript) and modules, so you can import/require other files as needed.\n\n## Migrating from supportFolder to supportFile\n\nYou're seeing this error because you have the `supportFolder` option explicitly set, either to a different directory or as `false`, meaning you didn't utilize the support folder functionality.\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"I have `supportFolder` set to `false`\"\n}\n[/block]\n\nSet the `supportFile` option to `false` instead:\n\n```javascript\n// cypress.json\n\n// before\n{\n  \"supportFolder\": false\n}\n\n// after\n{\n  \"supportFile\": false\n}\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"I have `supportFolder` set to a different directory\"\n}\n[/block]\n\nWhen you open a project with Cypress, we look for a file named `index.js` in the `supportFolder` you have set. If one is not present, we generate a file that imports all the other files in your `supportFolder`.\n\nYou simply need to set the `supportFile` option to point to that file, and everything should work as before.\n\nIf, for example, you had the `supportFolder` set to `utilities`, change its name to `supportFile` and its value to `utilities/index.js`:\n\n```javascript\n// cypress.json\n\n// before\n{\n  \"supportFolder\": \"utilities\"\n}\n\n// after\n{\n  \"supportFile\": \"utilities/index.js\"\n}\n```\n\n***\n\n# The Chromium Renderer process just crashed\n\n![screen shot 2016-12-16 at 10 52 08 pm](https://cloud.githubusercontent.com/assets/1268976/21284187/5374b152-c3e2-11e6-9811-c79ead05930b.png)\n\nBrowsers are enormously complex pieces of software, and from time to time they will inconsistently crash *for no good reason*. Crashes are just a part of running automated tests.\n\nAt the moment, we haven't implemented an automatic way to recover from them, but it is actually possible for us to do so. We have an [open issue documenting the steps](https://github.com/cypress-io/cypress/issues/349) we could take to restart the renderer process and continue the run. If you're seeing consistent crashes and would like this implemented, please leave a note in the issue.\n\nIf you are running `Docker` [there is a simple one line fix for this problem documented here](https://github.com/cypress-io/cypress/issues/350).\n\n***\n\n# The 'cypress ci' command has been deprecated\n\nAs of version `0.19.0` and CLI versions `0.13.0`, we have deprecated the `cypress ci` command.\n\nWe did this to make it clearer what the difference was between a **regular run** and a **recorded run**.\n\nPreviously to record runs runs you wrote:\n\n```shell\ncypress ci <key>\n```\n\nOr if you had the environment variable: `CYPRESS_CI_KEY`\n\n```shell\ncypress ci\n```\n\nYou need to rewrite this as:\n\n```shell\ncypress run --record --key <record_key>\n```\n\nIf you were using the environment variable `CYPRESS_CI_KEY`, rename it to`CYPRESS_RECORD_KEY`.\n\nYou can now run and omit the `--key` flag:\n\n```shell\ncypress run --record\n```\n\nWe will automatically apply the record key environment variable.\n","source":"guides/references/error-messages.md","raw":"title: errors\n---\n\n# No tests found in your file\n\n![screen shot 2015-12-01 at 12 29 06 pm](https://cloud.githubusercontent.com/assets/1157043/20714968/aae41e0c-b61b-11e6-8e84-00da944fde04.png)\n\nThis message means that Cypress was unable to find tests in the specified file. You'll likely get this message if you have an empty test file and have not yet written any tests.\n\n***\n\n# We found an error preparing your test file\n\nThis message means that Cypress encountered an error when compiling and/or bundling your test file.\n\nCypress automatically compiles and bundles your test code so you can use ES2015, CoffeeScript, modules, etc.\n\nYou'll typically receive this message due to:\n\n- The file missing\n- A syntax error in the file or one of its dependencies\n- A missing dependency\n\nThe error will be printed on the right side, usually showing the part of the code in which the error occurred.\n\nWhen you fix the error in your code, your tests will automatically re-run.\n\n***\n\n# Cypress cannot execute commands outside a running test\n\n![screen shot 2015-12-02 at 9 57 23 pm](https://cloud.githubusercontent.com/assets/1268976/11550645/b9b8bd42-993f-11e5-896e-f6a6ca43acb4.png)\n\nThis message means you tried to execute one or more Cypress commands outside of a currently running test. Cypress has to be able to associate commands to a specific test.\n\nTypically this happens accidentally, like in the following situation.\n\n```javascript\ndescribe(\"Some Tests\", function(){\n  it(\"is true\", function(){\n    expect(true).to.be.true // yup, fine\n  })\n\n  it(\"is false\", function(){\n    expect(false).to.be.false // yup, also fine\n  })\n\n  context(\"some nested tests\", function(){\n    // oops you forgot to write an it(...) here!\n    // these cypress commands below\n    // are run outside of a test and cypress\n    // throws an error\n    cy\n      .visit(\"http://localhost:8080\")\n      .get(\"h1\").should(\"contain\", \"todos\")\n  })\n})\n```\n\nSimply move those Cypress commands into an `it(...)` and everything will work correctly.\n\nIf you are purposefully writing commands outside of a test, there is probably a better way to accomplish whatever you're trying to do. Read through the [Example Repos](https://on.cypress.io/guides/all-example-apps), [open an issue](https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A), or [come talk to someone in Gitter](https://gitter.im/cypress-io/cypress).\n\n***\n\n# cy.method() failed because the element you are chaining off of has become detached or removed from the dom\n\n![screen shot 2015-12-02 at 9 55 29 pm](https://cloud.githubusercontent.com/assets/1268976/11550618/79d68542-993f-11e5-8b5f-9418dfa964c1.png)\n\nThis message means you are trying to interact with a \"dead\" DOM element - meaning it is either detached or completely removed from the DOM.\n\nCypress errors because it cannot operate or interact with \"dead\" elements - just like a real user could not do this either.\n\nUnderstanding how this happens is very important - and it is often easy to prevent. Let's investigate.\n\n```html\n<!-- your app HTML -->\n<body>\n  <div id=\"parent\">\n    <button>delete</button>\n  </div>\n</body>\n```\n\n```javascript\n// your app code\n$(\"button\").click(function(){\n  // when the <button> is clicked\n  // we remove the button from the DOM\n  $(this).remove()\n})\n```\n\n```javascript\n// buggy test code\ncy\n   // as soon as this click event happens the <button>\n   // becomes removed from the DOM\n  .get(\"button\").click()\n\n  // When cypress begins processing the 'parent' command\n  // it will immediately detect that the current subject\n  // which is the <button> is detached from the DOM and\n  // will throw the error\n  .parent()\n```\n\nWe can prevent Cypress from throwing this error by rewriting our test code:\n\n```javascript\n// fixed test code\ncy\n  .get(\"button\").click()\n\n  // simply query for the parent directly here\n  // instead of chaining off the <button> subject\n  .get(\"#parent\")\n```\n\nThe above example is an oversimplification. Let's look at a more complex example.\n\nIn modern JavaScript frameworks, DOM elements are regularly `re-rendered` - meaning that the old element is thrown away and a new one is put in its place. Because this happens so fast, it may *appear* as if nothing has visibly changed. But if you are in the middle of executing commands it's possible the element you're interacting with has become \"dead\". To deal with this situation you must:\n\n- understand when your application re-renders\n- re-query for newly added DOM elements\n- **guard** Cypress from executing commands until a condition is met\n\nWhen we say **guard** we mean writing commands in such a way that prevents Cypress from going on before a specific condition is met. This usually means:\n\n- writing an assertion\n- waiting on an XHR\n\n***\n\n# cy.method() failed because the element cannot be interacted with\n\nYou may see a variation of this message for 4 different reasons:\n\n1. the element is not visible\n2. the element is being covered by another element\n3. the element's center is hidden from view\n4. the element is disabled\n\nCypress runs several calculations to ensure an element can *actually* be interacted with like a real user would.\n\nIf you're seeing this error, the solution is often obvious. You may need to add  **command guards** due to a timing or animation issue.\n\nThere have been situations where Cypress does not correctly allow you to interact with an element which should be interactive. If that's the case, [open an issue](https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A) or force the action to happen.\n\nIf you'd like to override these built-in checks, provide the `{force: true}` option to the action itself. Refer to each command for their available options, additional use cases and argument usage.\n\n```javascript\n// we ignore the built in error checking\n// and force the action to happen\n// regardless of whether the button is\n// visible, disabled, or covered by another element\ncy.get(\"button\").click({force: true}).\n```\n\n*Be careful with this option. It's possible to force your tests to pass but your feature may actually be failing.*\n\n***\n\n# cy.method() failed because the element is currently animating\n\n![screen shot 2015-12-30 at 11 44 22 pm](https://cloud.githubusercontent.com/assets/1268976/12061262/4f9a252e-af4f-11e5-9139-9c8bdb08ae58.png)\n\nBy default Cypress detects if an element you're trying to interact with is animating. This check ensures that an element is not animating too quickly for a real user to interact with the element. This also prevents some edge cases where actions such as [`type`](https://on.cypress.io/api/type) or [`click`](https://on.cypress.io/api/click) happenening too fast during a transition.\n\nCypress will continuously attempt to interact with the element until it eventually times out.\n\nIf you'd like to force Cypress to interact with the element there are a few options:\n\n- Pass `{force: true}` and disables **all** error checking\n- Pass `{waitForAnimations: false}` to disable animation error checking only\n- Pass `{animationDistanceThreshold: 20}` to decrease the sensitivity to detecting if an element is animating too quickly for a user to interact with. By increasing the threshold this enables your element to move farther on the page without causing Cypress to continuously retry.\n\n```javascript\ncy.get(\"#modal button\").click({waitForAnimations: false})\n```\n\nYou can globally disable animation error checking, or increase the threshold by modifying your [`cypress.json`](https://on.cypress.io/guides/configuration).\n\n```json\n// cypress.json\n{\n  \"waitForAnimations\": false,\n  \"animationDistanceThreshold\": 50\n}\n```\n\n***\n\n# Running Cypress in CI requires a secret project key\n\nYou may receive this error when trying to run Cypress tests in Continuous Integration. This means that you did not pass a specific key to: `cypress ci` in your CI configuration file.\n\nSince no key was passed, Cypress then checks for any environment variable with the name `CYPRESS_CI_KEY`, but still didn't find any.\n\nYou can get your project's secret key by running the terminal command: `cypress get:key`\n\nThen [add the key to your config file or as an environment variable](https://on.cypress.io/guides/continuous-integration#section-acquire-a-cypress-secret-key).\n\n***\n\n# The test has finished but Cypress still has commands in its queue\n\n![screen shot 2016-04-04 at 12 07 40 pm](https://cloud.githubusercontent.com/assets/1268976/14254496/fa15f8da-fa5d-11e5-91b8-cdc8387e4dc8.png)\n\nLet's examine several different ways you may get this error message. In every situation, you'll need to change something in your code to prevent this error.\n\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"title\": \"Flaky tests below!\",\n  \"body\": \"Several of these tests are dependent on race conditions. You may have to run these tests multiple times before they will actually fail. You can also try tweaking some of the delays.\"\n}\n[/block]\n\n## Simple Example\n\n```javascript\ndescribe(\"simple example\", function(){\n  // this first test will actually pass and shows you that\n  // Cypress attempts to prevent this problem in every test\n  it(\"Cypress is smart and this does not fail\", function(){\n    // queue up some commands\n    // without returning the cy object\n    // which is ok!\n    cy\n      .get(\"body\")\n      .children()\n      .should(\"not.contain\", \"foo\")\n\n    // even though we return the string here\n    // Cypress automatically figures out that you've\n    // queued commands above and does not end the test\n    // until all commands have finished\n    return \"foobarbaz\"\n  })\n\n  it(\"but you can forcibly end the test early which does fail\", function(done){\n    // this example will fail because you've forcibly terminated\n    // the test early with mocha\n    cy\n      .get(\"body\")\n      .then(function(){\n        // forcibly end the test\n        // even though there are still\n        // pending queued commands below\n        done()\n      })\n      .children()\n      .should(\"not.contain\", \"foo\")\n  })\n})\n```\n\n## Complex Async Example\n\n```javascript\ndescribe(\"a complex example with async code\", function(){\n  it(\"you can cause commands to bleed into the next test\", function(){\n    // what's happening here is that because we have NOT told mocha this is an async test\n    // this test will pass immediately and move onto the next test...\n    //\n    // ...then, when the setTimeout callback function runs\n    // new commands will get queued on the wrong test\n    //\n    // Cypress will detect this and fail the next test\n    setTimeout(function(){\n      cy.get(\"body\").children().should(\"not.contain\", \"foo\")\n    }, 10)\n\n    // the correct way to write the above test code would be this:\n    // it(\"does not cause commands to bleed into the next test\", function(done){\n    //   setTimeout(function(){\n    //     cy.get(\"body\").children().should(\"not.contain\", \"foo\").then(function(){\n    //       now all the commands are correctly processed on this test\n    //       and do not bleed into the next test\n    //       done()\n    //     })\n    //   }, 10)\n    // })\n\n  })\n\n  it(\"this test will fail due to the previous poorly written test\", function(){\n    // we will get the error here that Cypress detected\n    // it still had commands in its command queue\n    //\n    // Cypress will print the commands out which should\n    // help us figure out that the previous test is\n    // causing this error message\n    cy.wait(10)\n  })\n})\n```\n\n## Complex Promise Example\n\n```javascript\ndescribe(\"another complex example using a forgotten 'return'\", function(){\n  it(\"forgets to return a promise\", function(){\n    // we forget to return the promise to our test\n    // which means the test passes synchronously but\n    // our promise resolves during the next test.\n    //\n    // this causes the commands to be queued on the\n    // wrong test\n    Cypress.Promise.delay(10).then(function(){\n      cy.get(\"body\").children().should(\"not.contain\", \"foo\")\n    })\n\n    // the correct way to write the above test code would be this:\n    // it(\"does not forget to return a promise\", function(){\n    //   return Cypress.Promise.delay(10).then(function(){\n    //     return cy.get(\"body\").children().should(\"not.contain\", \"foo\")\n    //   })\n    // }\n  })\n\n  it(\"this test will fail due to the previous poorly written test\", function(){\n    // we will get the error here that Cypress detected\n    // it still had commands in its command queue\n    //\n    // Cypress will print the commands out which should\n    // help us figure out that the previous test is\n    // causing this error message\n    cy.wait(10)\n  })\n})\n```\n\n***\n\n# cy.visit() failed because you are attempting to visit a second unique domain\n\nTBD.\n\n***\n\n# Cypress detected a cross origin error happened on page load\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"This is a simple overview...\",\n  \"body\": \"For a more thorough explanation of Cypress's Web Security model, [please read our dedicated guide to it](https://on.cypress.io/guides/web-security).\"\n}\n[/block]\n\nThis error means that your application navigated to a superdomain that Cypress was not bound to.\n\nInitially when you `cy.visit` Cypress changes the url to match what you are visiting. This enables Cypress to communicate with your appliation to control it, and bypasses all same-origin security policies built into the browsers.\n\nWhen your application navigates to a superdomain outside of the current origin-policy Cypress is unable to communicate with it, and thus fails.\n\nThere are generally fairly simple workarounds for these common situations:\n\n1. Don't click `<a>` links that navigate you outside of your apps. Likely this isn't worth testing anyway. You should ask yourself: *What's the point of clicking and going to another app?* Likely all you care about is that the `href` attribute matches what you expect. So simply make an assertion about that.\n\n2. You are testing a page that uses `Single sign-on (SSO)`. In this case your webserver is likely redirecting you between superdomains, and thus you receive this error message. You can likely get around this redirect problem by using [`cy.request`](https://on.cypress.io/api/request) and manually handling the session yourself.\n\nIf you find yourself stuck and cannot work around these issues you can just set this in your `cypress.json` file:\n\n```javascript\n// cypress.json\n{\n  chromeWebSecurity: false\n}\n```\n\nBut before doing so you should really understand and [read about the reasoning here](https://on.cypress.io/guides/web-security).\n\n***\n\n# Support file missing or invalid\n\nThe `supportFolder` option has been removed from Cypress and has been replaced by module support and the `supportFile` option. Cypress used to automatically include any scripts in the `supportFolder` before your test files, and that was the best way to include custom Cypress commands and utility functions. However, automatically including all the files in a certain directory is somewhat magical and unintuitive, and requires creating globals for the purpose of utility functions. This behavior has been succeeded by module support and the `supportFile` option.\n\n## Use modules for utility functions\n\nCypress supports both ES2015 modules and CommonJS modules. You can import/require npm modules as well as local modules:\n\n```javascript\nimport _ from \"lodash\"\nimport util from \"./util\"\n\nit(\"uses modules\", function () {\n  expect(_.kebabCase(\"FooBar\")).to.equal(\"foo-bar\")\n  expect(util.secretCode()).to.equal(\"1-2-3-4\")\n})\n```\n\n## Use supportFile to load scripts before your test code\n\nIt's still useful to load a setup file before your test code. If you are setting Cypress defaults or utilizing custom Cypress commands, instead of needing to import/require those defaults/commands in every test file, you can use the `supportFile` configuration option. This works similar to the former `supportFolder` option, but is more explicit.\n\n`supportFile` is a path to a file to include before your test files. By default, `supportFile` is set to look for one of the following files:\n\n* `cypress/support/index.js`\n* `cypress/support/index.coffee`\n\nJust like with your test files, the `supportFile` can use ES2015+ (or CoffeeScript) and modules, so you can import/require other files as needed.\n\n## Migrating from supportFolder to supportFile\n\nYou're seeing this error because you have the `supportFolder` option explicitly set, either to a different directory or as `false`, meaning you didn't utilize the support folder functionality.\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"I have `supportFolder` set to `false`\"\n}\n[/block]\n\nSet the `supportFile` option to `false` instead:\n\n```javascript\n// cypress.json\n\n// before\n{\n  \"supportFolder\": false\n}\n\n// after\n{\n  \"supportFile\": false\n}\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"I have `supportFolder` set to a different directory\"\n}\n[/block]\n\nWhen you open a project with Cypress, we look for a file named `index.js` in the `supportFolder` you have set. If one is not present, we generate a file that imports all the other files in your `supportFolder`.\n\nYou simply need to set the `supportFile` option to point to that file, and everything should work as before.\n\nIf, for example, you had the `supportFolder` set to `utilities`, change its name to `supportFile` and its value to `utilities/index.js`:\n\n```javascript\n// cypress.json\n\n// before\n{\n  \"supportFolder\": \"utilities\"\n}\n\n// after\n{\n  \"supportFile\": \"utilities/index.js\"\n}\n```\n\n***\n\n# The Chromium Renderer process just crashed\n\n![screen shot 2016-12-16 at 10 52 08 pm](https://cloud.githubusercontent.com/assets/1268976/21284187/5374b152-c3e2-11e6-9811-c79ead05930b.png)\n\nBrowsers are enormously complex pieces of software, and from time to time they will inconsistently crash *for no good reason*. Crashes are just a part of running automated tests.\n\nAt the moment, we haven't implemented an automatic way to recover from them, but it is actually possible for us to do so. We have an [open issue documenting the steps](https://github.com/cypress-io/cypress/issues/349) we could take to restart the renderer process and continue the run. If you're seeing consistent crashes and would like this implemented, please leave a note in the issue.\n\nIf you are running `Docker` [there is a simple one line fix for this problem documented here](https://github.com/cypress-io/cypress/issues/350).\n\n***\n\n# The 'cypress ci' command has been deprecated\n\nAs of version `0.19.0` and CLI versions `0.13.0`, we have deprecated the `cypress ci` command.\n\nWe did this to make it clearer what the difference was between a **regular run** and a **recorded run**.\n\nPreviously to record runs runs you wrote:\n\n```shell\ncypress ci <key>\n```\n\nOr if you had the environment variable: `CYPRESS_CI_KEY`\n\n```shell\ncypress ci\n```\n\nYou need to rewrite this as:\n\n```shell\ncypress run --record --key <record_key>\n```\n\nIf you were using the environment variable `CYPRESS_CI_KEY`, rename it to`CYPRESS_RECORD_KEY`.\n\nYou can now run and omit the `--key` flag:\n\n```shell\ncypress run --record\n```\n\nWe will automatically apply the record key environment variable.\n","date":"2017-04-19T18:46:47.000Z","updated":"2017-04-19T18:46:47.000Z","path":"guides/references/error-messages.html","comments":1,"layout":"page","_id":"cj1pby1kv003668g8be8kd3vv","content":"<h1 id=\"No-tests-found-in-your-file\"><a href=\"#No-tests-found-in-your-file\" class=\"headerlink\" title=\"No tests found in your file\"></a>No tests found in your file</h1><p><img src=\"https://cloud.githubusercontent.com/assets/1157043/20714968/aae41e0c-b61b-11e6-8e84-00da944fde04.png\" alt=\"screen shot 2015-12-01 at 12 29 06 pm\"></p>\n<p>This message means that Cypress was unable to find tests in the specified file. You’ll likely get this message if you have an empty test file and have not yet written any tests.</p>\n<hr>\n<h1 id=\"We-found-an-error-preparing-your-test-file\"><a href=\"#We-found-an-error-preparing-your-test-file\" class=\"headerlink\" title=\"We found an error preparing your test file\"></a>We found an error preparing your test file</h1><p>This message means that Cypress encountered an error when compiling and/or bundling your test file.</p>\n<p>Cypress automatically compiles and bundles your test code so you can use ES2015, CoffeeScript, modules, etc.</p>\n<p>You’ll typically receive this message due to:</p>\n<ul>\n<li>The file missing</li>\n<li>A syntax error in the file or one of its dependencies</li>\n<li>A missing dependency</li>\n</ul>\n<p>The error will be printed on the right side, usually showing the part of the code in which the error occurred.</p>\n<p>When you fix the error in your code, your tests will automatically re-run.</p>\n<hr>\n<h1 id=\"Cypress-cannot-execute-commands-outside-a-running-test\"><a href=\"#Cypress-cannot-execute-commands-outside-a-running-test\" class=\"headerlink\" title=\"Cypress cannot execute commands outside a running test\"></a>Cypress cannot execute commands outside a running test</h1><p><img src=\"https://cloud.githubusercontent.com/assets/1268976/11550645/b9b8bd42-993f-11e5-896e-f6a6ca43acb4.png\" alt=\"screen shot 2015-12-02 at 9 57 23 pm\"></p>\n<p>This message means you tried to execute one or more Cypress commands outside of a currently running test. Cypress has to be able to associate commands to a specific test.</p>\n<p>Typically this happens accidentally, like in the following situation.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(<span class=\"string\">\"Some Tests\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  it(<span class=\"string\">\"is true\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    expect(<span class=\"literal\">true</span>).to.be.true <span class=\"comment\">// yup, fine</span></div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  it(<span class=\"string\">\"is false\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    expect(<span class=\"literal\">false</span>).to.be.false <span class=\"comment\">// yup, also fine</span></div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  context(<span class=\"string\">\"some nested tests\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// oops you forgot to write an it(...) here!</span></div><div class=\"line\">    <span class=\"comment\">// these cypress commands below</span></div><div class=\"line\">    <span class=\"comment\">// are run outside of a test and cypress</span></div><div class=\"line\">    <span class=\"comment\">// throws an error</span></div><div class=\"line\">    cy</div><div class=\"line\">      .visit(<span class=\"string\">\"http://localhost:8080\"</span>)</div><div class=\"line\">      .get(<span class=\"string\">\"h1\"</span>).should(<span class=\"string\">\"contain\"</span>, <span class=\"string\">\"todos\"</span>)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Simply move those Cypress commands into an <code>it(...)</code> and everything will work correctly.</p>\n<p>If you are purposefully writing commands outside of a test, there is probably a better way to accomplish whatever you’re trying to do. Read through the <a href=\"https://on.cypress.io/guides/all-example-apps\" target=\"_blank\" rel=\"external\">Example Repos</a>, <a href=\"https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A\" target=\"_blank\" rel=\"external\">open an issue</a>, or <a href=\"https://gitter.im/cypress-io/cypress\" target=\"_blank\" rel=\"external\">come talk to someone in Gitter</a>.</p>\n<hr>\n<h1 id=\"cy-method-failed-because-the-element-you-are-chaining-off-of-has-become-detached-or-removed-from-the-dom\"><a href=\"#cy-method-failed-because-the-element-you-are-chaining-off-of-has-become-detached-or-removed-from-the-dom\" class=\"headerlink\" title=\"cy.method() failed because the element you are chaining off of has become detached or removed from the dom\"></a>cy.method() failed because the element you are chaining off of has become detached or removed from the dom</h1><p><img src=\"https://cloud.githubusercontent.com/assets/1268976/11550618/79d68542-993f-11e5-8b5f-9418dfa964c1.png\" alt=\"screen shot 2015-12-02 at 9 55 29 pm\"></p>\n<p>This message means you are trying to interact with a “dead” DOM element - meaning it is either detached or completely removed from the DOM.</p>\n<p>Cypress errors because it cannot operate or interact with “dead” elements - just like a real user could not do this either.</p>\n<p>Understanding how this happens is very important - and it is often easy to prevent. Let’s investigate.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- your app HTML --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"parent\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>delete<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// your app code</span></div><div class=\"line\">$(<span class=\"string\">\"button\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// when the &lt;button&gt; is clicked</span></div><div class=\"line\">  <span class=\"comment\">// we remove the button from the DOM</span></div><div class=\"line\">  $(<span class=\"keyword\">this</span>).remove()</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// buggy test code</span></div><div class=\"line\">cy</div><div class=\"line\">   <span class=\"comment\">// as soon as this click event happens the &lt;button&gt;</span></div><div class=\"line\">   <span class=\"comment\">// becomes removed from the DOM</span></div><div class=\"line\">  .get(<span class=\"string\">\"button\"</span>).click()</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// When cypress begins processing the 'parent' command</span></div><div class=\"line\">  <span class=\"comment\">// it will immediately detect that the current subject</span></div><div class=\"line\">  <span class=\"comment\">// which is the &lt;button&gt; is detached from the DOM and</span></div><div class=\"line\">  <span class=\"comment\">// will throw the error</span></div><div class=\"line\">  .parent()</div></pre></td></tr></table></figure>\n<p>We can prevent Cypress from throwing this error by rewriting our test code:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// fixed test code</span></div><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"button\"</span>).click()</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// simply query for the parent directly here</span></div><div class=\"line\">  <span class=\"comment\">// instead of chaining off the &lt;button&gt; subject</span></div><div class=\"line\">  .get(<span class=\"string\">\"#parent\"</span>)</div></pre></td></tr></table></figure>\n<p>The above example is an oversimplification. Let’s look at a more complex example.</p>\n<p>In modern JavaScript frameworks, DOM elements are regularly <code>re-rendered</code> - meaning that the old element is thrown away and a new one is put in its place. Because this happens so fast, it may <em>appear</em> as if nothing has visibly changed. But if you are in the middle of executing commands it’s possible the element you’re interacting with has become “dead”. To deal with this situation you must:</p>\n<ul>\n<li>understand when your application re-renders</li>\n<li>re-query for newly added DOM elements</li>\n<li><strong>guard</strong> Cypress from executing commands until a condition is met</li>\n</ul>\n<p>When we say <strong>guard</strong> we mean writing commands in such a way that prevents Cypress from going on before a specific condition is met. This usually means:</p>\n<ul>\n<li>writing an assertion</li>\n<li>waiting on an XHR</li>\n</ul>\n<hr>\n<h1 id=\"cy-method-failed-because-the-element-cannot-be-interacted-with\"><a href=\"#cy-method-failed-because-the-element-cannot-be-interacted-with\" class=\"headerlink\" title=\"cy.method() failed because the element cannot be interacted with\"></a>cy.method() failed because the element cannot be interacted with</h1><p>You may see a variation of this message for 4 different reasons:</p>\n<ol>\n<li>the element is not visible</li>\n<li>the element is being covered by another element</li>\n<li>the element’s center is hidden from view</li>\n<li>the element is disabled</li>\n</ol>\n<p>Cypress runs several calculations to ensure an element can <em>actually</em> be interacted with like a real user would.</p>\n<p>If you’re seeing this error, the solution is often obvious. You may need to add  <strong>command guards</strong> due to a timing or animation issue.</p>\n<p>There have been situations where Cypress does not correctly allow you to interact with an element which should be interactive. If that’s the case, <a href=\"https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A\" target=\"_blank\" rel=\"external\">open an issue</a> or force the action to happen.</p>\n<p>If you’d like to override these built-in checks, provide the <code>{force: true}</code> option to the action itself. Refer to each command for their available options, additional use cases and argument usage.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// we ignore the built in error checking</span></div><div class=\"line\"><span class=\"comment\">// and force the action to happen</span></div><div class=\"line\"><span class=\"comment\">// regardless of whether the button is</span></div><div class=\"line\"><span class=\"comment\">// visible, disabled, or covered by another element</span></div><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).click(&#123;<span class=\"attr\">force</span>: <span class=\"literal\">true</span>&#125;).</div></pre></td></tr></table></figure>\n<p><em>Be careful with this option. It’s possible to force your tests to pass but your feature may actually be failing.</em></p>\n<hr>\n<h1 id=\"cy-method-failed-because-the-element-is-currently-animating\"><a href=\"#cy-method-failed-because-the-element-is-currently-animating\" class=\"headerlink\" title=\"cy.method() failed because the element is currently animating\"></a>cy.method() failed because the element is currently animating</h1><p><img src=\"https://cloud.githubusercontent.com/assets/1268976/12061262/4f9a252e-af4f-11e5-9139-9c8bdb08ae58.png\" alt=\"screen shot 2015-12-30 at 11 44 22 pm\"></p>\n<p>By default Cypress detects if an element you’re trying to interact with is animating. This check ensures that an element is not animating too quickly for a real user to interact with the element. This also prevents some edge cases where actions such as <a href=\"https://on.cypress.io/api/type\" target=\"_blank\" rel=\"external\"><code>type</code></a> or <a href=\"https://on.cypress.io/api/click\" target=\"_blank\" rel=\"external\"><code>click</code></a> happenening too fast during a transition.</p>\n<p>Cypress will continuously attempt to interact with the element until it eventually times out.</p>\n<p>If you’d like to force Cypress to interact with the element there are a few options:</p>\n<ul>\n<li>Pass <code>{force: true}</code> and disables <strong>all</strong> error checking</li>\n<li>Pass <code>{waitForAnimations: false}</code> to disable animation error checking only</li>\n<li>Pass <code>{animationDistanceThreshold: 20}</code> to decrease the sensitivity to detecting if an element is animating too quickly for a user to interact with. By increasing the threshold this enables your element to move farther on the page without causing Cypress to continuously retry.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"#modal button\"</span>).click(&#123;<span class=\"attr\">waitForAnimations</span>: <span class=\"literal\">false</span>&#125;)</div></pre></td></tr></table></figure>\n<p>You can globally disable animation error checking, or increase the threshold by modifying your <a href=\"https://on.cypress.io/guides/configuration\" target=\"_blank\" rel=\"external\"><code>cypress.json</code></a>.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// cypress.json</div><div class=\"line\">&#123;</div><div class=\"line\">  \"waitForAnimations\": false,</div><div class=\"line\">  \"animationDistanceThreshold\": 50</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Running-Cypress-in-CI-requires-a-secret-project-key\"><a href=\"#Running-Cypress-in-CI-requires-a-secret-project-key\" class=\"headerlink\" title=\"Running Cypress in CI requires a secret project key\"></a>Running Cypress in CI requires a secret project key</h1><p>You may receive this error when trying to run Cypress tests in Continuous Integration. This means that you did not pass a specific key to: <code>cypress ci</code> in your CI configuration file.</p>\n<p>Since no key was passed, Cypress then checks for any environment variable with the name <code>CYPRESS_CI_KEY</code>, but still didn’t find any.</p>\n<p>You can get your project’s secret key by running the terminal command: <code>cypress get:key</code></p>\n<p>Then <a href=\"https://on.cypress.io/guides/continuous-integration#section-acquire-a-cypress-secret-key\" target=\"_blank\" rel=\"external\">add the key to your config file or as an environment variable</a>.</p>\n<hr>\n<h1 id=\"The-test-has-finished-but-Cypress-still-has-commands-in-its-queue\"><a href=\"#The-test-has-finished-but-Cypress-still-has-commands-in-its-queue\" class=\"headerlink\" title=\"The test has finished but Cypress still has commands in its queue\"></a>The test has finished but Cypress still has commands in its queue</h1><p><img src=\"https://cloud.githubusercontent.com/assets/1268976/14254496/fa15f8da-fa5d-11e5-91b8-cdc8387e4dc8.png\" alt=\"screen shot 2016-04-04 at 12 07 40 pm\"></p>\n<p>Let’s examine several different ways you may get this error message. In every situation, you’ll need to change something in your code to prevent this error.</p>\n<p>[block:callout]<br>{<br>  “type”: “warning”,<br>  “title”: “Flaky tests below!”,<br>  “body”: “Several of these tests are dependent on race conditions. You may have to run these tests multiple times before they will actually fail. You can also try tweaking some of the delays.”<br>}<br>[/block]</p>\n<h2 id=\"Simple-Example\"><a href=\"#Simple-Example\" class=\"headerlink\" title=\"Simple Example\"></a>Simple Example</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(<span class=\"string\">\"simple example\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// this first test will actually pass and shows you that</span></div><div class=\"line\">  <span class=\"comment\">// Cypress attempts to prevent this problem in every test</span></div><div class=\"line\">  it(<span class=\"string\">\"Cypress is smart and this does not fail\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// queue up some commands</span></div><div class=\"line\">    <span class=\"comment\">// without returning the cy object</span></div><div class=\"line\">    <span class=\"comment\">// which is ok!</span></div><div class=\"line\">    cy</div><div class=\"line\">      .get(<span class=\"string\">\"body\"</span>)</div><div class=\"line\">      .children()</div><div class=\"line\">      .should(<span class=\"string\">\"not.contain\"</span>, <span class=\"string\">\"foo\"</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// even though we return the string here</span></div><div class=\"line\">    <span class=\"comment\">// Cypress automatically figures out that you've</span></div><div class=\"line\">    <span class=\"comment\">// queued commands above and does not end the test</span></div><div class=\"line\">    <span class=\"comment\">// until all commands have finished</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"foobarbaz\"</span></div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  it(<span class=\"string\">\"but you can forcibly end the test early which does fail\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">done</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// this example will fail because you've forcibly terminated</span></div><div class=\"line\">    <span class=\"comment\">// the test early with mocha</span></div><div class=\"line\">    cy</div><div class=\"line\">      .get(<span class=\"string\">\"body\"</span>)</div><div class=\"line\">      .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">// forcibly end the test</span></div><div class=\"line\">        <span class=\"comment\">// even though there are still</span></div><div class=\"line\">        <span class=\"comment\">// pending queued commands below</span></div><div class=\"line\">        done()</div><div class=\"line\">      &#125;)</div><div class=\"line\">      .children()</div><div class=\"line\">      .should(<span class=\"string\">\"not.contain\"</span>, <span class=\"string\">\"foo\"</span>)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Complex-Async-Example\"><a href=\"#Complex-Async-Example\" class=\"headerlink\" title=\"Complex Async Example\"></a>Complex Async Example</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(<span class=\"string\">\"a complex example with async code\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  it(<span class=\"string\">\"you can cause commands to bleed into the next test\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// what's happening here is that because we have NOT told mocha this is an async test</span></div><div class=\"line\">    <span class=\"comment\">// this test will pass immediately and move onto the next test...</span></div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"comment\">// ...then, when the setTimeout callback function runs</span></div><div class=\"line\">    <span class=\"comment\">// new commands will get queued on the wrong test</span></div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"comment\">// Cypress will detect this and fail the next test</span></div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      cy.get(<span class=\"string\">\"body\"</span>).children().should(<span class=\"string\">\"not.contain\"</span>, <span class=\"string\">\"foo\"</span>)</div><div class=\"line\">    &#125;, <span class=\"number\">10</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// the correct way to write the above test code would be this:</span></div><div class=\"line\">    <span class=\"comment\">// it(\"does not cause commands to bleed into the next test\", function(done)&#123;</span></div><div class=\"line\">    <span class=\"comment\">//   setTimeout(function()&#123;</span></div><div class=\"line\">    <span class=\"comment\">//     cy.get(\"body\").children().should(\"not.contain\", \"foo\").then(function()&#123;</span></div><div class=\"line\">    <span class=\"comment\">//       now all the commands are correctly processed on this test</span></div><div class=\"line\">    <span class=\"comment\">//       and do not bleed into the next test</span></div><div class=\"line\">    <span class=\"comment\">//       done()</span></div><div class=\"line\">    <span class=\"comment\">//     &#125;)</span></div><div class=\"line\">    <span class=\"comment\">//   &#125;, 10)</span></div><div class=\"line\">    <span class=\"comment\">// &#125;)</span></div><div class=\"line\"></div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  it(<span class=\"string\">\"this test will fail due to the previous poorly written test\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// we will get the error here that Cypress detected</span></div><div class=\"line\">    <span class=\"comment\">// it still had commands in its command queue</span></div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"comment\">// Cypress will print the commands out which should</span></div><div class=\"line\">    <span class=\"comment\">// help us figure out that the previous test is</span></div><div class=\"line\">    <span class=\"comment\">// causing this error message</span></div><div class=\"line\">    cy.wait(<span class=\"number\">10</span>)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Complex-Promise-Example\"><a href=\"#Complex-Promise-Example\" class=\"headerlink\" title=\"Complex Promise Example\"></a>Complex Promise Example</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(<span class=\"string\">\"another complex example using a forgotten 'return'\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  it(<span class=\"string\">\"forgets to return a promise\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// we forget to return the promise to our test</span></div><div class=\"line\">    <span class=\"comment\">// which means the test passes synchronously but</span></div><div class=\"line\">    <span class=\"comment\">// our promise resolves during the next test.</span></div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"comment\">// this causes the commands to be queued on the</span></div><div class=\"line\">    <span class=\"comment\">// wrong test</span></div><div class=\"line\">    Cypress.Promise.delay(<span class=\"number\">10</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      cy.get(<span class=\"string\">\"body\"</span>).children().should(<span class=\"string\">\"not.contain\"</span>, <span class=\"string\">\"foo\"</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// the correct way to write the above test code would be this:</span></div><div class=\"line\">    <span class=\"comment\">// it(\"does not forget to return a promise\", function()&#123;</span></div><div class=\"line\">    <span class=\"comment\">//   return Cypress.Promise.delay(10).then(function()&#123;</span></div><div class=\"line\">    <span class=\"comment\">//     return cy.get(\"body\").children().should(\"not.contain\", \"foo\")</span></div><div class=\"line\">    <span class=\"comment\">//   &#125;)</span></div><div class=\"line\">    <span class=\"comment\">// &#125;</span></div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  it(<span class=\"string\">\"this test will fail due to the previous poorly written test\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// we will get the error here that Cypress detected</span></div><div class=\"line\">    <span class=\"comment\">// it still had commands in its command queue</span></div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"comment\">// Cypress will print the commands out which should</span></div><div class=\"line\">    <span class=\"comment\">// help us figure out that the previous test is</span></div><div class=\"line\">    <span class=\"comment\">// causing this error message</span></div><div class=\"line\">    cy.wait(<span class=\"number\">10</span>)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"cy-visit-failed-because-you-are-attempting-to-visit-a-second-unique-domain\"><a href=\"#cy-visit-failed-because-you-are-attempting-to-visit-a-second-unique-domain\" class=\"headerlink\" title=\"cy.visit() failed because you are attempting to visit a second unique domain\"></a>cy.visit() failed because you are attempting to visit a second unique domain</h1><p>TBD.</p>\n<hr>\n<h1 id=\"Cypress-detected-a-cross-origin-error-happened-on-page-load\"><a href=\"#Cypress-detected-a-cross-origin-error-happened-on-page-load\" class=\"headerlink\" title=\"Cypress detected a cross origin error happened on page load\"></a>Cypress detected a cross origin error happened on page load</h1><p>[block:callout]<br>{<br>  “type”: “info”,<br>  “title”: “This is a simple overview…”,<br>  “body”: “For a more thorough explanation of Cypress’s Web Security model, <a href=\"https://on.cypress.io/guides/web-security\" target=\"_blank\" rel=\"external\">please read our dedicated guide to it</a>.”<br>}<br>[/block]</p>\n<p>This error means that your application navigated to a superdomain that Cypress was not bound to.</p>\n<p>Initially when you <code>cy.visit</code> Cypress changes the url to match what you are visiting. This enables Cypress to communicate with your appliation to control it, and bypasses all same-origin security policies built into the browsers.</p>\n<p>When your application navigates to a superdomain outside of the current origin-policy Cypress is unable to communicate with it, and thus fails.</p>\n<p>There are generally fairly simple workarounds for these common situations:</p>\n<ol>\n<li><p>Don’t click <code>&lt;a&gt;</code> links that navigate you outside of your apps. Likely this isn’t worth testing anyway. You should ask yourself: <em>What’s the point of clicking and going to another app?</em> Likely all you care about is that the <code>href</code> attribute matches what you expect. So simply make an assertion about that.</p>\n</li>\n<li><p>You are testing a page that uses <code>Single sign-on (SSO)</code>. In this case your webserver is likely redirecting you between superdomains, and thus you receive this error message. You can likely get around this redirect problem by using <a href=\"https://on.cypress.io/api/request\" target=\"_blank\" rel=\"external\"><code>cy.request</code></a> and manually handling the session yourself.</p>\n</li>\n</ol>\n<p>If you find yourself stuck and cannot work around these issues you can just set this in your <code>cypress.json</code> file:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// cypress.json</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">chromeWebSecurity</span>: <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>But before doing so you should really understand and <a href=\"https://on.cypress.io/guides/web-security\" target=\"_blank\" rel=\"external\">read about the reasoning here</a>.</p>\n<hr>\n<h1 id=\"Support-file-missing-or-invalid\"><a href=\"#Support-file-missing-or-invalid\" class=\"headerlink\" title=\"Support file missing or invalid\"></a>Support file missing or invalid</h1><p>The <code>supportFolder</code> option has been removed from Cypress and has been replaced by module support and the <code>supportFile</code> option. Cypress used to automatically include any scripts in the <code>supportFolder</code> before your test files, and that was the best way to include custom Cypress commands and utility functions. However, automatically including all the files in a certain directory is somewhat magical and unintuitive, and requires creating globals for the purpose of utility functions. This behavior has been succeeded by module support and the <code>supportFile</code> option.</p>\n<h2 id=\"Use-modules-for-utility-functions\"><a href=\"#Use-modules-for-utility-functions\" class=\"headerlink\" title=\"Use modules for utility functions\"></a>Use modules for utility functions</h2><p>Cypress supports both ES2015 modules and CommonJS modules. You can import/require npm modules as well as local modules:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">\"lodash\"</span></div><div class=\"line\"><span class=\"keyword\">import</span> util <span class=\"keyword\">from</span> <span class=\"string\">\"./util\"</span></div><div class=\"line\"></div><div class=\"line\">it(<span class=\"string\">\"uses modules\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  expect(_.kebabCase(<span class=\"string\">\"FooBar\"</span>)).to.equal(<span class=\"string\">\"foo-bar\"</span>)</div><div class=\"line\">  expect(util.secretCode()).to.equal(<span class=\"string\">\"1-2-3-4\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Use-supportFile-to-load-scripts-before-your-test-code\"><a href=\"#Use-supportFile-to-load-scripts-before-your-test-code\" class=\"headerlink\" title=\"Use supportFile to load scripts before your test code\"></a>Use supportFile to load scripts before your test code</h2><p>It’s still useful to load a setup file before your test code. If you are setting Cypress defaults or utilizing custom Cypress commands, instead of needing to import/require those defaults/commands in every test file, you can use the <code>supportFile</code> configuration option. This works similar to the former <code>supportFolder</code> option, but is more explicit.</p>\n<p><code>supportFile</code> is a path to a file to include before your test files. By default, <code>supportFile</code> is set to look for one of the following files:</p>\n<ul>\n<li><code>cypress/support/index.js</code></li>\n<li><code>cypress/support/index.coffee</code></li>\n</ul>\n<p>Just like with your test files, the <code>supportFile</code> can use ES2015+ (or CoffeeScript) and modules, so you can import/require other files as needed.</p>\n<h2 id=\"Migrating-from-supportFolder-to-supportFile\"><a href=\"#Migrating-from-supportFolder-to-supportFile\" class=\"headerlink\" title=\"Migrating from supportFolder to supportFile\"></a>Migrating from supportFolder to supportFile</h2><p>You’re seeing this error because you have the <code>supportFolder</code> option explicitly set, either to a different directory or as <code>false</code>, meaning you didn’t utilize the support folder functionality.</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “title”: “I have <code>supportFolder</code> set to <code>false</code>“<br>}<br>[/block]</p>\n<p>Set the <code>supportFile</code> option to <code>false</code> instead:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// cypress.json</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// before</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"supportFolder\"</span>: <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// after</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"supportFile\"</span>: <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “title”: “I have <code>supportFolder</code> set to a different directory”<br>}<br>[/block]</p>\n<p>When you open a project with Cypress, we look for a file named <code>index.js</code> in the <code>supportFolder</code> you have set. If one is not present, we generate a file that imports all the other files in your <code>supportFolder</code>.</p>\n<p>You simply need to set the <code>supportFile</code> option to point to that file, and everything should work as before.</p>\n<p>If, for example, you had the <code>supportFolder</code> set to <code>utilities</code>, change its name to <code>supportFile</code> and its value to <code>utilities/index.js</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// cypress.json</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// before</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"supportFolder\"</span>: <span class=\"string\">\"utilities\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// after</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"supportFile\"</span>: <span class=\"string\">\"utilities/index.js\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"The-Chromium-Renderer-process-just-crashed\"><a href=\"#The-Chromium-Renderer-process-just-crashed\" class=\"headerlink\" title=\"The Chromium Renderer process just crashed\"></a>The Chromium Renderer process just crashed</h1><p><img src=\"https://cloud.githubusercontent.com/assets/1268976/21284187/5374b152-c3e2-11e6-9811-c79ead05930b.png\" alt=\"screen shot 2016-12-16 at 10 52 08 pm\"></p>\n<p>Browsers are enormously complex pieces of software, and from time to time they will inconsistently crash <em>for no good reason</em>. Crashes are just a part of running automated tests.</p>\n<p>At the moment, we haven’t implemented an automatic way to recover from them, but it is actually possible for us to do so. We have an <a href=\"https://github.com/cypress-io/cypress/issues/349\" target=\"_blank\" rel=\"external\">open issue documenting the steps</a> we could take to restart the renderer process and continue the run. If you’re seeing consistent crashes and would like this implemented, please leave a note in the issue.</p>\n<p>If you are running <code>Docker</code> <a href=\"https://github.com/cypress-io/cypress/issues/350\" target=\"_blank\" rel=\"external\">there is a simple one line fix for this problem documented here</a>.</p>\n<hr>\n<h1 id=\"The-‘cypress-ci’-command-has-been-deprecated\"><a href=\"#The-‘cypress-ci’-command-has-been-deprecated\" class=\"headerlink\" title=\"The ‘cypress ci’ command has been deprecated\"></a>The ‘cypress ci’ command has been deprecated</h1><p>As of version <code>0.19.0</code> and CLI versions <code>0.13.0</code>, we have deprecated the <code>cypress ci</code> command.</p>\n<p>We did this to make it clearer what the difference was between a <strong>regular run</strong> and a <strong>recorded run</strong>.</p>\n<p>Previously to record runs runs you wrote:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cypress ci &lt;key&gt;</div></pre></td></tr></table></figure>\n<p>Or if you had the environment variable: <code>CYPRESS_CI_KEY</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cypress ci</div></pre></td></tr></table></figure>\n<p>You need to rewrite this as:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cypress run --record --key &lt;record_key&gt;</div></pre></td></tr></table></figure>\n<p>If you were using the environment variable <code>CYPRESS_CI_KEY</code>, rename it to<code>CYPRESS_RECORD_KEY</code>.</p>\n<p>You can now run and omit the <code>--key</code> flag:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cypress run --record</div></pre></td></tr></table></figure>\n<p>We will automatically apply the record key environment variable.</p>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<h1 id=\"No-tests-found-in-your-file\"><a href=\"#No-tests-found-in-your-file\" class=\"headerlink\" title=\"No tests found in your file\"></a>No tests found in your file</h1><p><img src=\"https://cloud.githubusercontent.com/assets/1157043/20714968/aae41e0c-b61b-11e6-8e84-00da944fde04.png\" alt=\"screen shot 2015-12-01 at 12 29 06 pm\"></p>\n<p>This message means that Cypress was unable to find tests in the specified file. You’ll likely get this message if you have an empty test file and have not yet written any tests.</p>\n<hr>\n<h1 id=\"We-found-an-error-preparing-your-test-file\"><a href=\"#We-found-an-error-preparing-your-test-file\" class=\"headerlink\" title=\"We found an error preparing your test file\"></a>We found an error preparing your test file</h1><p>This message means that Cypress encountered an error when compiling and/or bundling your test file.</p>\n<p>Cypress automatically compiles and bundles your test code so you can use ES2015, CoffeeScript, modules, etc.</p>\n<p>You’ll typically receive this message due to:</p>\n<ul>\n<li>The file missing</li>\n<li>A syntax error in the file or one of its dependencies</li>\n<li>A missing dependency</li>\n</ul>\n<p>The error will be printed on the right side, usually showing the part of the code in which the error occurred.</p>\n<p>When you fix the error in your code, your tests will automatically re-run.</p>\n<hr>\n<h1 id=\"Cypress-cannot-execute-commands-outside-a-running-test\"><a href=\"#Cypress-cannot-execute-commands-outside-a-running-test\" class=\"headerlink\" title=\"Cypress cannot execute commands outside a running test\"></a>Cypress cannot execute commands outside a running test</h1><p><img src=\"https://cloud.githubusercontent.com/assets/1268976/11550645/b9b8bd42-993f-11e5-896e-f6a6ca43acb4.png\" alt=\"screen shot 2015-12-02 at 9 57 23 pm\"></p>\n<p>This message means you tried to execute one or more Cypress commands outside of a currently running test. Cypress has to be able to associate commands to a specific test.</p>\n<p>Typically this happens accidentally, like in the following situation.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(<span class=\"string\">\"Some Tests\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  it(<span class=\"string\">\"is true\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    expect(<span class=\"literal\">true</span>).to.be.true <span class=\"comment\">// yup, fine</span></div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  it(<span class=\"string\">\"is false\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    expect(<span class=\"literal\">false</span>).to.be.false <span class=\"comment\">// yup, also fine</span></div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  context(<span class=\"string\">\"some nested tests\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// oops you forgot to write an it(...) here!</span></div><div class=\"line\">    <span class=\"comment\">// these cypress commands below</span></div><div class=\"line\">    <span class=\"comment\">// are run outside of a test and cypress</span></div><div class=\"line\">    <span class=\"comment\">// throws an error</span></div><div class=\"line\">    cy</div><div class=\"line\">      .visit(<span class=\"string\">\"http://localhost:8080\"</span>)</div><div class=\"line\">      .get(<span class=\"string\">\"h1\"</span>).should(<span class=\"string\">\"contain\"</span>, <span class=\"string\">\"todos\"</span>)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Simply move those Cypress commands into an <code>it(...)</code> and everything will work correctly.</p>\n<p>If you are purposefully writing commands outside of a test, there is probably a better way to accomplish whatever you’re trying to do. Read through the <a href=\"https://on.cypress.io/guides/all-example-apps\">Example Repos</a>, <a href=\"https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A\">open an issue</a>, or <a href=\"https://gitter.im/cypress-io/cypress\">come talk to someone in Gitter</a>.</p>\n<hr>\n<h1 id=\"cy-method-failed-because-the-element-you-are-chaining-off-of-has-become-detached-or-removed-from-the-dom\"><a href=\"#cy-method-failed-because-the-element-you-are-chaining-off-of-has-become-detached-or-removed-from-the-dom\" class=\"headerlink\" title=\"cy.method() failed because the element you are chaining off of has become detached or removed from the dom\"></a>cy.method() failed because the element you are chaining off of has become detached or removed from the dom</h1><p><img src=\"https://cloud.githubusercontent.com/assets/1268976/11550618/79d68542-993f-11e5-8b5f-9418dfa964c1.png\" alt=\"screen shot 2015-12-02 at 9 55 29 pm\"></p>\n<p>This message means you are trying to interact with a “dead” DOM element - meaning it is either detached or completely removed from the DOM.</p>\n<p>Cypress errors because it cannot operate or interact with “dead” elements - just like a real user could not do this either.</p>\n<p>Understanding how this happens is very important - and it is often easy to prevent. Let’s investigate.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- your app HTML --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"parent\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>delete<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// your app code</span></div><div class=\"line\">$(<span class=\"string\">\"button\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// when the &lt;button&gt; is clicked</span></div><div class=\"line\">  <span class=\"comment\">// we remove the button from the DOM</span></div><div class=\"line\">  $(<span class=\"keyword\">this</span>).remove()</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// buggy test code</span></div><div class=\"line\">cy</div><div class=\"line\">   <span class=\"comment\">// as soon as this click event happens the &lt;button&gt;</span></div><div class=\"line\">   <span class=\"comment\">// becomes removed from the DOM</span></div><div class=\"line\">  .get(<span class=\"string\">\"button\"</span>).click()</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// When cypress begins processing the 'parent' command</span></div><div class=\"line\">  <span class=\"comment\">// it will immediately detect that the current subject</span></div><div class=\"line\">  <span class=\"comment\">// which is the &lt;button&gt; is detached from the DOM and</span></div><div class=\"line\">  <span class=\"comment\">// will throw the error</span></div><div class=\"line\">  .parent()</div></pre></td></tr></table></figure>\n<p>We can prevent Cypress from throwing this error by rewriting our test code:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// fixed test code</span></div><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"button\"</span>).click()</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// simply query for the parent directly here</span></div><div class=\"line\">  <span class=\"comment\">// instead of chaining off the &lt;button&gt; subject</span></div><div class=\"line\">  .get(<span class=\"string\">\"#parent\"</span>)</div></pre></td></tr></table></figure>\n<p>The above example is an oversimplification. Let’s look at a more complex example.</p>\n<p>In modern JavaScript frameworks, DOM elements are regularly <code>re-rendered</code> - meaning that the old element is thrown away and a new one is put in its place. Because this happens so fast, it may <em>appear</em> as if nothing has visibly changed. But if you are in the middle of executing commands it’s possible the element you’re interacting with has become “dead”. To deal with this situation you must:</p>\n<ul>\n<li>understand when your application re-renders</li>\n<li>re-query for newly added DOM elements</li>\n<li><strong>guard</strong> Cypress from executing commands until a condition is met</li>\n</ul>\n<p>When we say <strong>guard</strong> we mean writing commands in such a way that prevents Cypress from going on before a specific condition is met. This usually means:</p>\n<ul>\n<li>writing an assertion</li>\n<li>waiting on an XHR</li>\n</ul>\n<hr>\n<h1 id=\"cy-method-failed-because-the-element-cannot-be-interacted-with\"><a href=\"#cy-method-failed-because-the-element-cannot-be-interacted-with\" class=\"headerlink\" title=\"cy.method() failed because the element cannot be interacted with\"></a>cy.method() failed because the element cannot be interacted with</h1><p>You may see a variation of this message for 4 different reasons:</p>\n<ol>\n<li>the element is not visible</li>\n<li>the element is being covered by another element</li>\n<li>the element’s center is hidden from view</li>\n<li>the element is disabled</li>\n</ol>\n<p>Cypress runs several calculations to ensure an element can <em>actually</em> be interacted with like a real user would.</p>\n<p>If you’re seeing this error, the solution is often obvious. You may need to add  <strong>command guards</strong> due to a timing or animation issue.</p>\n<p>There have been situations where Cypress does not correctly allow you to interact with an element which should be interactive. If that’s the case, <a href=\"https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A\">open an issue</a> or force the action to happen.</p>\n<p>If you’d like to override these built-in checks, provide the <code>{force: true}</code> option to the action itself. Refer to each command for their available options, additional use cases and argument usage.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// we ignore the built in error checking</span></div><div class=\"line\"><span class=\"comment\">// and force the action to happen</span></div><div class=\"line\"><span class=\"comment\">// regardless of whether the button is</span></div><div class=\"line\"><span class=\"comment\">// visible, disabled, or covered by another element</span></div><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).click(&#123;<span class=\"attr\">force</span>: <span class=\"literal\">true</span>&#125;).</div></pre></td></tr></table></figure>\n<p><em>Be careful with this option. It’s possible to force your tests to pass but your feature may actually be failing.</em></p>\n<hr>\n<h1 id=\"cy-method-failed-because-the-element-is-currently-animating\"><a href=\"#cy-method-failed-because-the-element-is-currently-animating\" class=\"headerlink\" title=\"cy.method() failed because the element is currently animating\"></a>cy.method() failed because the element is currently animating</h1><p><img src=\"https://cloud.githubusercontent.com/assets/1268976/12061262/4f9a252e-af4f-11e5-9139-9c8bdb08ae58.png\" alt=\"screen shot 2015-12-30 at 11 44 22 pm\"></p>\n<p>By default Cypress detects if an element you’re trying to interact with is animating. This check ensures that an element is not animating too quickly for a real user to interact with the element. This also prevents some edge cases where actions such as <a href=\"https://on.cypress.io/api/type\"><code>type</code></a> or <a href=\"https://on.cypress.io/api/click\"><code>click</code></a> happenening too fast during a transition.</p>\n<p>Cypress will continuously attempt to interact with the element until it eventually times out.</p>\n<p>If you’d like to force Cypress to interact with the element there are a few options:</p>\n<ul>\n<li>Pass <code>{force: true}</code> and disables <strong>all</strong> error checking</li>\n<li>Pass <code>{waitForAnimations: false}</code> to disable animation error checking only</li>\n<li>Pass <code>{animationDistanceThreshold: 20}</code> to decrease the sensitivity to detecting if an element is animating too quickly for a user to interact with. By increasing the threshold this enables your element to move farther on the page without causing Cypress to continuously retry.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"#modal button\"</span>).click(&#123;<span class=\"attr\">waitForAnimations</span>: <span class=\"literal\">false</span>&#125;)</div></pre></td></tr></table></figure>\n<p>You can globally disable animation error checking, or increase the threshold by modifying your <a href=\"https://on.cypress.io/guides/configuration\"><code>cypress.json</code></a>.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// cypress.json</div><div class=\"line\">&#123;</div><div class=\"line\">  \"waitForAnimations\": false,</div><div class=\"line\">  \"animationDistanceThreshold\": 50</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Running-Cypress-in-CI-requires-a-secret-project-key\"><a href=\"#Running-Cypress-in-CI-requires-a-secret-project-key\" class=\"headerlink\" title=\"Running Cypress in CI requires a secret project key\"></a>Running Cypress in CI requires a secret project key</h1><p>You may receive this error when trying to run Cypress tests in Continuous Integration. This means that you did not pass a specific key to: <code>cypress ci</code> in your CI configuration file.</p>\n<p>Since no key was passed, Cypress then checks for any environment variable with the name <code>CYPRESS_CI_KEY</code>, but still didn’t find any.</p>\n<p>You can get your project’s secret key by running the terminal command: <code>cypress get:key</code></p>\n<p>Then <a href=\"https://on.cypress.io/guides/continuous-integration#section-acquire-a-cypress-secret-key\">add the key to your config file or as an environment variable</a>.</p>\n<hr>\n<h1 id=\"The-test-has-finished-but-Cypress-still-has-commands-in-its-queue\"><a href=\"#The-test-has-finished-but-Cypress-still-has-commands-in-its-queue\" class=\"headerlink\" title=\"The test has finished but Cypress still has commands in its queue\"></a>The test has finished but Cypress still has commands in its queue</h1><p><img src=\"https://cloud.githubusercontent.com/assets/1268976/14254496/fa15f8da-fa5d-11e5-91b8-cdc8387e4dc8.png\" alt=\"screen shot 2016-04-04 at 12 07 40 pm\"></p>\n<p>Let’s examine several different ways you may get this error message. In every situation, you’ll need to change something in your code to prevent this error.</p>\n<p>[block:callout]<br>{<br>  “type”: “warning”,<br>  “title”: “Flaky tests below!”,<br>  “body”: “Several of these tests are dependent on race conditions. You may have to run these tests multiple times before they will actually fail. You can also try tweaking some of the delays.”<br>}<br>[/block]</p>\n<h2 id=\"Simple-Example\"><a href=\"#Simple-Example\" class=\"headerlink\" title=\"Simple Example\"></a>Simple Example</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(<span class=\"string\">\"simple example\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// this first test will actually pass and shows you that</span></div><div class=\"line\">  <span class=\"comment\">// Cypress attempts to prevent this problem in every test</span></div><div class=\"line\">  it(<span class=\"string\">\"Cypress is smart and this does not fail\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// queue up some commands</span></div><div class=\"line\">    <span class=\"comment\">// without returning the cy object</span></div><div class=\"line\">    <span class=\"comment\">// which is ok!</span></div><div class=\"line\">    cy</div><div class=\"line\">      .get(<span class=\"string\">\"body\"</span>)</div><div class=\"line\">      .children()</div><div class=\"line\">      .should(<span class=\"string\">\"not.contain\"</span>, <span class=\"string\">\"foo\"</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// even though we return the string here</span></div><div class=\"line\">    <span class=\"comment\">// Cypress automatically figures out that you've</span></div><div class=\"line\">    <span class=\"comment\">// queued commands above and does not end the test</span></div><div class=\"line\">    <span class=\"comment\">// until all commands have finished</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"foobarbaz\"</span></div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  it(<span class=\"string\">\"but you can forcibly end the test early which does fail\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">done</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// this example will fail because you've forcibly terminated</span></div><div class=\"line\">    <span class=\"comment\">// the test early with mocha</span></div><div class=\"line\">    cy</div><div class=\"line\">      .get(<span class=\"string\">\"body\"</span>)</div><div class=\"line\">      .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">// forcibly end the test</span></div><div class=\"line\">        <span class=\"comment\">// even though there are still</span></div><div class=\"line\">        <span class=\"comment\">// pending queued commands below</span></div><div class=\"line\">        done()</div><div class=\"line\">      &#125;)</div><div class=\"line\">      .children()</div><div class=\"line\">      .should(<span class=\"string\">\"not.contain\"</span>, <span class=\"string\">\"foo\"</span>)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Complex-Async-Example\"><a href=\"#Complex-Async-Example\" class=\"headerlink\" title=\"Complex Async Example\"></a>Complex Async Example</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(<span class=\"string\">\"a complex example with async code\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  it(<span class=\"string\">\"you can cause commands to bleed into the next test\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// what's happening here is that because we have NOT told mocha this is an async test</span></div><div class=\"line\">    <span class=\"comment\">// this test will pass immediately and move onto the next test...</span></div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"comment\">// ...then, when the setTimeout callback function runs</span></div><div class=\"line\">    <span class=\"comment\">// new commands will get queued on the wrong test</span></div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"comment\">// Cypress will detect this and fail the next test</span></div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      cy.get(<span class=\"string\">\"body\"</span>).children().should(<span class=\"string\">\"not.contain\"</span>, <span class=\"string\">\"foo\"</span>)</div><div class=\"line\">    &#125;, <span class=\"number\">10</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// the correct way to write the above test code would be this:</span></div><div class=\"line\">    <span class=\"comment\">// it(\"does not cause commands to bleed into the next test\", function(done)&#123;</span></div><div class=\"line\">    <span class=\"comment\">//   setTimeout(function()&#123;</span></div><div class=\"line\">    <span class=\"comment\">//     cy.get(\"body\").children().should(\"not.contain\", \"foo\").then(function()&#123;</span></div><div class=\"line\">    <span class=\"comment\">//       now all the commands are correctly processed on this test</span></div><div class=\"line\">    <span class=\"comment\">//       and do not bleed into the next test</span></div><div class=\"line\">    <span class=\"comment\">//       done()</span></div><div class=\"line\">    <span class=\"comment\">//     &#125;)</span></div><div class=\"line\">    <span class=\"comment\">//   &#125;, 10)</span></div><div class=\"line\">    <span class=\"comment\">// &#125;)</span></div><div class=\"line\"></div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  it(<span class=\"string\">\"this test will fail due to the previous poorly written test\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// we will get the error here that Cypress detected</span></div><div class=\"line\">    <span class=\"comment\">// it still had commands in its command queue</span></div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"comment\">// Cypress will print the commands out which should</span></div><div class=\"line\">    <span class=\"comment\">// help us figure out that the previous test is</span></div><div class=\"line\">    <span class=\"comment\">// causing this error message</span></div><div class=\"line\">    cy.wait(<span class=\"number\">10</span>)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Complex-Promise-Example\"><a href=\"#Complex-Promise-Example\" class=\"headerlink\" title=\"Complex Promise Example\"></a>Complex Promise Example</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(<span class=\"string\">\"another complex example using a forgotten 'return'\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  it(<span class=\"string\">\"forgets to return a promise\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// we forget to return the promise to our test</span></div><div class=\"line\">    <span class=\"comment\">// which means the test passes synchronously but</span></div><div class=\"line\">    <span class=\"comment\">// our promise resolves during the next test.</span></div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"comment\">// this causes the commands to be queued on the</span></div><div class=\"line\">    <span class=\"comment\">// wrong test</span></div><div class=\"line\">    Cypress.Promise.delay(<span class=\"number\">10</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      cy.get(<span class=\"string\">\"body\"</span>).children().should(<span class=\"string\">\"not.contain\"</span>, <span class=\"string\">\"foo\"</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// the correct way to write the above test code would be this:</span></div><div class=\"line\">    <span class=\"comment\">// it(\"does not forget to return a promise\", function()&#123;</span></div><div class=\"line\">    <span class=\"comment\">//   return Cypress.Promise.delay(10).then(function()&#123;</span></div><div class=\"line\">    <span class=\"comment\">//     return cy.get(\"body\").children().should(\"not.contain\", \"foo\")</span></div><div class=\"line\">    <span class=\"comment\">//   &#125;)</span></div><div class=\"line\">    <span class=\"comment\">// &#125;</span></div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  it(<span class=\"string\">\"this test will fail due to the previous poorly written test\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// we will get the error here that Cypress detected</span></div><div class=\"line\">    <span class=\"comment\">// it still had commands in its command queue</span></div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"comment\">// Cypress will print the commands out which should</span></div><div class=\"line\">    <span class=\"comment\">// help us figure out that the previous test is</span></div><div class=\"line\">    <span class=\"comment\">// causing this error message</span></div><div class=\"line\">    cy.wait(<span class=\"number\">10</span>)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"cy-visit-failed-because-you-are-attempting-to-visit-a-second-unique-domain\"><a href=\"#cy-visit-failed-because-you-are-attempting-to-visit-a-second-unique-domain\" class=\"headerlink\" title=\"cy.visit() failed because you are attempting to visit a second unique domain\"></a>cy.visit() failed because you are attempting to visit a second unique domain</h1><p>TBD.</p>\n<hr>\n<h1 id=\"Cypress-detected-a-cross-origin-error-happened-on-page-load\"><a href=\"#Cypress-detected-a-cross-origin-error-happened-on-page-load\" class=\"headerlink\" title=\"Cypress detected a cross origin error happened on page load\"></a>Cypress detected a cross origin error happened on page load</h1><p>[block:callout]<br>{<br>  “type”: “info”,<br>  “title”: “This is a simple overview…”,<br>  “body”: “For a more thorough explanation of Cypress’s Web Security model, <a href=\"https://on.cypress.io/guides/web-security\">please read our dedicated guide to it</a>.”<br>}<br>[/block]</p>\n<p>This error means that your application navigated to a superdomain that Cypress was not bound to.</p>\n<p>Initially when you <code>cy.visit</code> Cypress changes the url to match what you are visiting. This enables Cypress to communicate with your appliation to control it, and bypasses all same-origin security policies built into the browsers.</p>\n<p>When your application navigates to a superdomain outside of the current origin-policy Cypress is unable to communicate with it, and thus fails.</p>\n<p>There are generally fairly simple workarounds for these common situations:</p>\n<ol>\n<li><p>Don’t click <code>&lt;a&gt;</code> links that navigate you outside of your apps. Likely this isn’t worth testing anyway. You should ask yourself: <em>What’s the point of clicking and going to another app?</em> Likely all you care about is that the <code>href</code> attribute matches what you expect. So simply make an assertion about that.</p>\n</li>\n<li><p>You are testing a page that uses <code>Single sign-on (SSO)</code>. In this case your webserver is likely redirecting you between superdomains, and thus you receive this error message. You can likely get around this redirect problem by using <a href=\"https://on.cypress.io/api/request\"><code>cy.request</code></a> and manually handling the session yourself.</p>\n</li>\n</ol>\n<p>If you find yourself stuck and cannot work around these issues you can just set this in your <code>cypress.json</code> file:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// cypress.json</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">chromeWebSecurity</span>: <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>But before doing so you should really understand and <a href=\"https://on.cypress.io/guides/web-security\">read about the reasoning here</a>.</p>\n<hr>\n<h1 id=\"Support-file-missing-or-invalid\"><a href=\"#Support-file-missing-or-invalid\" class=\"headerlink\" title=\"Support file missing or invalid\"></a>Support file missing or invalid</h1><p>The <code>supportFolder</code> option has been removed from Cypress and has been replaced by module support and the <code>supportFile</code> option. Cypress used to automatically include any scripts in the <code>supportFolder</code> before your test files, and that was the best way to include custom Cypress commands and utility functions. However, automatically including all the files in a certain directory is somewhat magical and unintuitive, and requires creating globals for the purpose of utility functions. This behavior has been succeeded by module support and the <code>supportFile</code> option.</p>\n<h2 id=\"Use-modules-for-utility-functions\"><a href=\"#Use-modules-for-utility-functions\" class=\"headerlink\" title=\"Use modules for utility functions\"></a>Use modules for utility functions</h2><p>Cypress supports both ES2015 modules and CommonJS modules. You can import/require npm modules as well as local modules:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">\"lodash\"</span></div><div class=\"line\"><span class=\"keyword\">import</span> util <span class=\"keyword\">from</span> <span class=\"string\">\"./util\"</span></div><div class=\"line\"></div><div class=\"line\">it(<span class=\"string\">\"uses modules\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  expect(_.kebabCase(<span class=\"string\">\"FooBar\"</span>)).to.equal(<span class=\"string\">\"foo-bar\"</span>)</div><div class=\"line\">  expect(util.secretCode()).to.equal(<span class=\"string\">\"1-2-3-4\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Use-supportFile-to-load-scripts-before-your-test-code\"><a href=\"#Use-supportFile-to-load-scripts-before-your-test-code\" class=\"headerlink\" title=\"Use supportFile to load scripts before your test code\"></a>Use supportFile to load scripts before your test code</h2><p>It’s still useful to load a setup file before your test code. If you are setting Cypress defaults or utilizing custom Cypress commands, instead of needing to import/require those defaults/commands in every test file, you can use the <code>supportFile</code> configuration option. This works similar to the former <code>supportFolder</code> option, but is more explicit.</p>\n<p><code>supportFile</code> is a path to a file to include before your test files. By default, <code>supportFile</code> is set to look for one of the following files:</p>\n<ul>\n<li><code>cypress/support/index.js</code></li>\n<li><code>cypress/support/index.coffee</code></li>\n</ul>\n<p>Just like with your test files, the <code>supportFile</code> can use ES2015+ (or CoffeeScript) and modules, so you can import/require other files as needed.</p>\n<h2 id=\"Migrating-from-supportFolder-to-supportFile\"><a href=\"#Migrating-from-supportFolder-to-supportFile\" class=\"headerlink\" title=\"Migrating from supportFolder to supportFile\"></a>Migrating from supportFolder to supportFile</h2><p>You’re seeing this error because you have the <code>supportFolder</code> option explicitly set, either to a different directory or as <code>false</code>, meaning you didn’t utilize the support folder functionality.</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “title”: “I have <code>supportFolder</code> set to <code>false</code>“<br>}<br>[/block]</p>\n<p>Set the <code>supportFile</code> option to <code>false</code> instead:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// cypress.json</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// before</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"supportFolder\"</span>: <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// after</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"supportFile\"</span>: <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “title”: “I have <code>supportFolder</code> set to a different directory”<br>}<br>[/block]</p>\n<p>When you open a project with Cypress, we look for a file named <code>index.js</code> in the <code>supportFolder</code> you have set. If one is not present, we generate a file that imports all the other files in your <code>supportFolder</code>.</p>\n<p>You simply need to set the <code>supportFile</code> option to point to that file, and everything should work as before.</p>\n<p>If, for example, you had the <code>supportFolder</code> set to <code>utilities</code>, change its name to <code>supportFile</code> and its value to <code>utilities/index.js</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// cypress.json</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// before</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"supportFolder\"</span>: <span class=\"string\">\"utilities\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// after</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"supportFile\"</span>: <span class=\"string\">\"utilities/index.js\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"The-Chromium-Renderer-process-just-crashed\"><a href=\"#The-Chromium-Renderer-process-just-crashed\" class=\"headerlink\" title=\"The Chromium Renderer process just crashed\"></a>The Chromium Renderer process just crashed</h1><p><img src=\"https://cloud.githubusercontent.com/assets/1268976/21284187/5374b152-c3e2-11e6-9811-c79ead05930b.png\" alt=\"screen shot 2016-12-16 at 10 52 08 pm\"></p>\n<p>Browsers are enormously complex pieces of software, and from time to time they will inconsistently crash <em>for no good reason</em>. Crashes are just a part of running automated tests.</p>\n<p>At the moment, we haven’t implemented an automatic way to recover from them, but it is actually possible for us to do so. We have an <a href=\"https://github.com/cypress-io/cypress/issues/349\">open issue documenting the steps</a> we could take to restart the renderer process and continue the run. If you’re seeing consistent crashes and would like this implemented, please leave a note in the issue.</p>\n<p>If you are running <code>Docker</code> <a href=\"https://github.com/cypress-io/cypress/issues/350\">there is a simple one line fix for this problem documented here</a>.</p>\n<hr>\n<h1 id=\"The-‘cypress-ci’-command-has-been-deprecated\"><a href=\"#The-‘cypress-ci’-command-has-been-deprecated\" class=\"headerlink\" title=\"The ‘cypress ci’ command has been deprecated\"></a>The ‘cypress ci’ command has been deprecated</h1><p>As of version <code>0.19.0</code> and CLI versions <code>0.13.0</code>, we have deprecated the <code>cypress ci</code> command.</p>\n<p>We did this to make it clearer what the difference was between a <strong>regular run</strong> and a <strong>recorded run</strong>.</p>\n<p>Previously to record runs runs you wrote:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cypress ci &lt;key&gt;</div></pre></td></tr></table></figure>\n<p>Or if you had the environment variable: <code>CYPRESS_CI_KEY</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cypress ci</div></pre></td></tr></table></figure>\n<p>You need to rewrite this as:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cypress run --record --key &lt;record_key&gt;</div></pre></td></tr></table></figure>\n<p>If you were using the environment variable <code>CYPRESS_CI_KEY</code>, rename it to<code>CYPRESS_RECORD_KEY</code>.</p>\n<p>You can now run and omit the <code>--key</code> flag:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cypress run --record</div></pre></td></tr></table></figure>\n<p>We will automatically apply the record key environment variable.</p>\n"},{"title":"userland-extensions","_content":"\n# Docker\n\n## Base Image\n\nDocker image with dependencies and specific version of Cypress.\n\nhttps://hub.docker.com/r/bahmutov/cypress-image/\n\n***\n\n# Gitlab\n\n## Multi Cypress\n\nRun multiple spec files concurrently.\n\nhttps://github.com/kensho/multi-cypress\n\n***\n\n# Typescript\n\n## Definitions\n\nTypescript typings for most Cypress API commands.\n\nhttps://github.com/StackVista/typed-cypress\n","source":"guides/references/userland-extensions.md","raw":"title: userland-extensions\n---\n\n# Docker\n\n## Base Image\n\nDocker image with dependencies and specific version of Cypress.\n\nhttps://hub.docker.com/r/bahmutov/cypress-image/\n\n***\n\n# Gitlab\n\n## Multi Cypress\n\nRun multiple spec files concurrently.\n\nhttps://github.com/kensho/multi-cypress\n\n***\n\n# Typescript\n\n## Definitions\n\nTypescript typings for most Cypress API commands.\n\nhttps://github.com/StackVista/typed-cypress\n","date":"2017-04-19T18:46:47.000Z","updated":"2017-04-19T18:46:47.000Z","path":"guides/references/userland-extensions.html","comments":1,"layout":"page","_id":"cj1pby1kv003768g8tjtiy9ab","content":"<h1 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h1><h2 id=\"Base-Image\"><a href=\"#Base-Image\" class=\"headerlink\" title=\"Base Image\"></a>Base Image</h2><p>Docker image with dependencies and specific version of Cypress.</p>\n<p><a href=\"https://hub.docker.com/r/bahmutov/cypress-image/\" target=\"_blank\" rel=\"external\">https://hub.docker.com/r/bahmutov/cypress-image/</a></p>\n<hr>\n<h1 id=\"Gitlab\"><a href=\"#Gitlab\" class=\"headerlink\" title=\"Gitlab\"></a>Gitlab</h1><h2 id=\"Multi-Cypress\"><a href=\"#Multi-Cypress\" class=\"headerlink\" title=\"Multi Cypress\"></a>Multi Cypress</h2><p>Run multiple spec files concurrently.</p>\n<p><a href=\"https://github.com/kensho/multi-cypress\" target=\"_blank\" rel=\"external\">https://github.com/kensho/multi-cypress</a></p>\n<hr>\n<h1 id=\"Typescript\"><a href=\"#Typescript\" class=\"headerlink\" title=\"Typescript\"></a>Typescript</h1><h2 id=\"Definitions\"><a href=\"#Definitions\" class=\"headerlink\" title=\"Definitions\"></a>Definitions</h2><p>Typescript typings for most Cypress API commands.</p>\n<p><a href=\"https://github.com/StackVista/typed-cypress\" target=\"_blank\" rel=\"external\">https://github.com/StackVista/typed-cypress</a></p>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<h1 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h1><h2 id=\"Base-Image\"><a href=\"#Base-Image\" class=\"headerlink\" title=\"Base Image\"></a>Base Image</h2><p>Docker image with dependencies and specific version of Cypress.</p>\n<p><a href=\"https://hub.docker.com/r/bahmutov/cypress-image/\">https://hub.docker.com/r/bahmutov/cypress-image/</a></p>\n<hr>\n<h1 id=\"Gitlab\"><a href=\"#Gitlab\" class=\"headerlink\" title=\"Gitlab\"></a>Gitlab</h1><h2 id=\"Multi-Cypress\"><a href=\"#Multi-Cypress\" class=\"headerlink\" title=\"Multi Cypress\"></a>Multi Cypress</h2><p>Run multiple spec files concurrently.</p>\n<p><a href=\"https://github.com/kensho/multi-cypress\">https://github.com/kensho/multi-cypress</a></p>\n<hr>\n<h1 id=\"Typescript\"><a href=\"#Typescript\" class=\"headerlink\" title=\"Typescript\"></a>Typescript</h1><h2 id=\"Definitions\"><a href=\"#Definitions\" class=\"headerlink\" title=\"Definitions\"></a>Definitions</h2><p>Typescript typings for most Cypress API commands.</p>\n<p><a href=\"https://github.com/StackVista/typed-cypress\">https://github.com/StackVista/typed-cypress</a></p>\n"},{"title":"web-security","_content":"\n# Overview\n\nBrowsers adhere to a strict [`same-origin policy`](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy). This means that browsers restrict access between `<iframes>` when their origin policies do not match.\n\nBecause Cypress' internal architecture is different from that of Selenium, Cypress must be able to directly communicate with your remote application at all times. Unfortunately, browsers naturally try to prevent how Cypress works.\n\nTo get around these restrictions, Cypress implements some strategies involving `JavaScript` code, the browser's `internal APIs`, and `network proxying` to **play by the rules** of `same-origin policy`. It is our goal to fully automate your application without needing to modify any application code - and we are *mostly* able to do this.\n\n**Examples of what Cypress does under the hood:**\n\n  - Injects [`document.domain`](https://developer.mozilla.org/en-US/docs/Web/API/Document/domain) into `text/html` pages.\n  - Proxies all `HTTP`/`HTTPS` traffic.\n  - Changes the hosted url to match that of the application under test.\n  - Uses the browser's internal APIs for network level traffic.\n\nWhen Cypress first loads, the internal Cypress web application is hosted on a random port: something like `http://localhost:65874/__/`.\n\nAfter the first [`cy.visit`](https://on.cypress.io/api/visit) is issued in a test, Cypress automatically changes its URL to match the origin of your remote application, thereby solving the first major hurdle of `same-origin policy`. Your application's code executes the same as it does outside of Cypress, and everything works as expected.\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"How is HTTPS supported?\",\n  \"body\": \"Cypress does some pretty interesting things under the hood to make testing HTTPs sites work. Cypress enables you to control and stub at the network level. Therefore, Cypress must assign and manage browser certificates to be able to modify the traffic in real time. You'll notice Chrome display a warning that the 'SSL certificate does not match'. This is normal and correct. Under the hood we act as our own CA authority and issue certificates dynamically in order to intercept requests otherwise impossible to access. We only do this for the superdomain currently under test, and bypass other traffic. That's why if you open a tab in Cypress to another host, the certificates match as expected.\"\n}\n[/block]\n\n***\n\n# Limitations\n\nIt's important to note that although we do our *very best* to ensure your application works normally inside of Cypress, there **are** some limitations you need to be aware of.\n\n## One Superdomain per Test\n\nBecause Cypress changes its own host URL to match that of your applications, it requires that your application remain on the same superdomain for the entirety of a single test.\n\nIf you attempt to visit two different superdomains, Cypress will error. Visiting subdomains works fine, but two different superdomains does not. You can visit different superdomains in *different* tests, just not the *same* test.\n\n```javascript\ncy\n  .visit(\"https://www.cypress.io\")\n  .visit(\"https://docs.cypress.io\") // yup all good\n```\n\n```javascript\ncy\n  .visit(\"https://apple.com\")\n  .visit(\"https://google.com\")      // bad, this will immediately error\n\n```\n\nAlthough Cypress tries to enforce this limitation, it is possible for your application to bypass Cypress's ability to detect this.\n\n**Examples of test cases that will error due to superdomain limitations:**\n\n1. [`cy.click`](https://on.cypress.io/api/click) an `<a>` with an `href` to a different superdomain.\n2. [`cy.submit`](https://on.cypress.io/api/submit) a `<form>` that causes your webserver to redirect to you a different superdomain.\n3. Issue a JavaScript redirect in your application, such as `window.location.href = '...'`, to a different superdomain.\n\nIn each of these situations, Cypress will lose the ability to automate your application and will immediately error.\n\nRead on to learn about [working around these common problems](#section-common-workarounds) or even [disabling web security](#section-disabling-web-security) altogether.\n\n***\n\n## Cross Origin Iframes\n\nIf your site embeds an `<iframe>` that is a cross-origin frame, Cypress will not be able to automate or communicate with this `<iframe>`.\n\n**Examples of uses for cross-origin iframes:**\n\n- Embedding a `Vimeo` or `Youtube` video.\n- Displaying a credit card form from `Stripe` or `Braintree`.\n- Displaying an embedded login form from `Auth0`.\n\nIt's actually *possible* for Cypress to accomodate these situations the same way Selenium does, but you will never have **native** access to these iframes from inside of Cypress.\n\nAs a workaround, you may be able to use [`window.postMessage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) to directly communicate with these iframes and control them (if the 3rd party iframe supports it).\n\nOther than that, you'll have to wait for us to implement API's to support this (check our [open issue](https://github.com/cypress-io/cypress/issues/136)), or you can [disable web security](#section-disabling-web-security).\n\n***\n\n## Insecure Content\n\nBecause of the way Cypress is designed, if you are testing an `HTTPS` site, Cypress will error anytime you attempt to navigate back to an `HTTP` site. This behavior helps highlight a *pretty serious* security problem with your application.\n\n**Example of accessing insecure content:**\n\n*Test code*\n\n```javascript\ncy.visit(\"https://app.corp.com\")\n```\n\nIn the application code, you set `cookies` and store a session on the browser.\n\nNow let's imagine you have a single `insecure` link (or JavaScript redirect) in your application code.\n\n*Application code*\n\n```html\n<html>\n  <a href=\"http://app.corp.com/page2\">Page 2</a>\n</html>\n```\n\nCypress will immediately fail with the following test code:\n\n*Test code*\n\n```javascript\ncy\n  .visit(\"https://app.corp.com\")\n  .get(\"a\").click()               // will immediately fail\n```\n\nBrowsers refuse to display insecure content on a secure page. Because Cypress initially changed its URL to match `https://app.corp.com` when the browser followed the `href` to `http://app.corp.com/page2`, the browser will refuse to display the contents.\n\nNow you may be thinking...'this sounds like a problem with Cypress because when I work with my application outside of Cypress it works just fine'.\n\nHowever, the truth is, Cypress is exposing a **security vulnerability** in your application, and you *want* it to fail in Cypress.\n\n`cookies` that do not have their `secure` flag set to `true` will be sent as clear text to the insecure URL. This leaves your application vulnerable to session hijacking.\n\nThis security vulnerability exists **even if** your webserver forces a `301 redirect` back to the `HTTPS` site. The original `HTTP` request was still made once, exposing insecure session information.\n\n**The Solution**\n\nSimply update your `HTML` or `JavaScript` code to not navigate to an insecure `HTTP` page and instead only use `HTTPS`. Additionally make sure that cookies have their `secure` flag set to `true`.\n\nIf you're in a situation where you don't control the code, or otherwise cannot work around this, you can bypass this restriction in Cypress by [disabling web security](#section-dislabing-web-security).\n\n***\n\n# Common Workarounds\n\nLet's investigate how you might encounter `cross origin` errors in your test code and break down how to work around them in Cypress.\n\n## External Navigation\n\nThe most common situation where you might encounter this error is when you click on an `<a>` that navigates to another superdomain.\n\n**Application code that is served at `localhost:8080`**\n\n```html\n<html>\n  <a href=\"https://google.com\">Google</a>\n</html>\n```\n\n**Test code**\n\n```javascript\ncy\n  .visit(\"http://localhost:8080\") // where your webserver + HTML is hosted\n  .get(\"a\").click()               // browser attempts to load google.com, Cypress errors\n```\n\nThere is essentially never any reason to visit a site that you don't control in your tests. It's prone to error and slow.\n\nInstead, all you need to test is that the `href` property is correct!\n\n```javascript\n// this is much easier to do and will run considerably faster\ncy\n  .visit(\"http://localhost:8080\")\n  .get(\"a\").should(\"have.attr\", \"href\", \"https://google.com\") // no page load!\n```\n\nOkay but let's say you're worried about `google.com` serving up the right HTML content. How would you test that? Easy! Just make a [`cy.request`](https://on.cypress.io/api/request) directly to it. [`cy.request`](https://on.cypress.io/api/request) is **NOT bound to CORS or same-origin policy**.\n\n```javascript\ncy\n  .visit(\"http://localhost:8080\")\n  .get(\"a\").then(function($a) {\n    // pull off the fully qualified href from the <a>\n    var url = $a.prop(\"href\")\n\n    // make a cy.request to it\n    cy.request(url).its(\"body\").should(\"include\", \"</html>\")\n  })\n```\n\nStill not satisfied? Do you really want to click through to another application? Okay then read about [disabling web security](#section-disabling-web-security).\n\n***\n\n## Form Submission Redirects\n\nWhen you submit a regular HTML form, the browser will follow this `HTTP(s) request`.\n\n**Application code that is served at `localhost:8080`**\n\n```html\n<html>\n  <form method=\"POST\" action=\"/submit\">\n    <input type=\"text\" name=\"email\" />\n    <input type=\"submit\" value=\"Submit\" />\n  </form>\n</html>\n```\n\n```javascript\ncy\n  .visit(\"http://localhost:8080\")\n  .get(\"form\").submit()           // submit the form!\n```\n\nIf your backend server handling the `/submit` route does a `30x` redirect to a different superdomain, you will get a `cross origin` error.\n\n```javascript\n// imagine this is some node / express code\n// on your localhost:8080 server\n\napp.post(\"/submit\", function(req, res) {\n  // redirect the browser to google.com\n  res.redirect(\"https://google.com\")\n})\n```\n\nA commone use case for this is `Single sign-on (SSO)`. In that situation you may `POST` to a different server and are redirected elsewhere (typically with the session token in the URL).\n\nIf that's the case, don't worry - you can work around it with [`cy.request`](https://on.cypress.io/api/request). [`cy.request`](https://on.cypress.io/api/request) is special because it is **NOT bound to CORS or same-origin policy**.\n\nIn fact we can likely bypass the initial visit altogether and just `POST` directly to your `SSO` server.\n\n```javascript\ncy\n  .request(\"POST\", \"https://sso.corp.com/auth\", {username: \"foo\", password: \"bar\"})\n  .then(function(response) {\n    // pull out the location redirect\n    var loc = response.headers[\"Location\"]\n\n    // parse out the token from the url (assuming its in there)\n    var token = parseOutMyToken(loc)\n\n    // do something with the token that your web application expects\n    // likely the same behavior as what your SSO does under the hood\n    // assuming it handles query string tokens like this\n    cy.visit(\"http://localhost:8080?token=\" + token)\n\n    // if you don't need to work with the token you can sometimes\n    // just visit the location header directly\n    cy.visit(loc)\n  })\n```\n\nNot working for you? Don't know how to set your token? If you still need to be able to be redirected to your SSO server you can read about [disabling web security](#section-disabling-web-security).\n\n***\n\n## JavaScript Redirects\n\nWhen we say *JavaScript Redirects* we are talking about any kind of code that does something like this:\n\n```javascript\nwindow.location.href = \"http://some.superdomain.com\"\n```\n\nThis is probably the hardest situation to test because it's usually happening due to another cause. You will need to figure out why your JavaScript code is redirecting. Perhaps you're not logged in, and you need to handle that setup elsewhere? Perhaps you're using a `Single sign-on (SSO)` server and you just need to read the previous section about working around that?\n\nIf you can't figure out why your JavaScript code is redirecting you to a different superdomain then you might want to just read about [disabling web security](#section-disabling-websecurity).\n\n***\n\n# Disabling Web Security\n\nSo if you cannot work around any of the issues using the suggested workarounds above, you may want to disable web security.\n\nOne last thing to consider here is that every once in a while we discover bugs in Cypress that lead to `cross origin` errors that can otherwise be fixed. If you think you're experiencing a bug, [come into gitter](https://gitter.im/cypress-io/cypress) or [open an issue](https://github.com/cypress-io/cypress/issues/new).\n\nTo start, you will need to understand that **not all browsers expose a way to turn off web security**. Some do, some don't. If you rely on disabling web security, you will not be able to run tests on browsers that do not support this feature.\n\nStill here? That's cool, let's disable web security!\n\n**Set `chromeWebSecurity` to `false` in `cypress.json` and we'll take care of the rest.**\n\n```json\n{\n  chromeWebSecurity: false\n}\n```\n\nThe browser will now display insecure content, you can now navigate to any superdomain without cross origin errors, and you can access cross origin iframes that are embedded in your application.\n\nOne thing you may notice though is that Cypress still enforces visiting a single superdomain with [`cy.visit`](https://on.cypress.io/api/visit). This is an artificial limitation (and one that can be removed). You should [open an issue](https://github.com/cypress-io/cypress/issues/new) and tell us what you're trying to do!\n","source":"guides/references/web-security.md","raw":"title: web-security\n---\n\n# Overview\n\nBrowsers adhere to a strict [`same-origin policy`](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy). This means that browsers restrict access between `<iframes>` when their origin policies do not match.\n\nBecause Cypress' internal architecture is different from that of Selenium, Cypress must be able to directly communicate with your remote application at all times. Unfortunately, browsers naturally try to prevent how Cypress works.\n\nTo get around these restrictions, Cypress implements some strategies involving `JavaScript` code, the browser's `internal APIs`, and `network proxying` to **play by the rules** of `same-origin policy`. It is our goal to fully automate your application without needing to modify any application code - and we are *mostly* able to do this.\n\n**Examples of what Cypress does under the hood:**\n\n  - Injects [`document.domain`](https://developer.mozilla.org/en-US/docs/Web/API/Document/domain) into `text/html` pages.\n  - Proxies all `HTTP`/`HTTPS` traffic.\n  - Changes the hosted url to match that of the application under test.\n  - Uses the browser's internal APIs for network level traffic.\n\nWhen Cypress first loads, the internal Cypress web application is hosted on a random port: something like `http://localhost:65874/__/`.\n\nAfter the first [`cy.visit`](https://on.cypress.io/api/visit) is issued in a test, Cypress automatically changes its URL to match the origin of your remote application, thereby solving the first major hurdle of `same-origin policy`. Your application's code executes the same as it does outside of Cypress, and everything works as expected.\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"How is HTTPS supported?\",\n  \"body\": \"Cypress does some pretty interesting things under the hood to make testing HTTPs sites work. Cypress enables you to control and stub at the network level. Therefore, Cypress must assign and manage browser certificates to be able to modify the traffic in real time. You'll notice Chrome display a warning that the 'SSL certificate does not match'. This is normal and correct. Under the hood we act as our own CA authority and issue certificates dynamically in order to intercept requests otherwise impossible to access. We only do this for the superdomain currently under test, and bypass other traffic. That's why if you open a tab in Cypress to another host, the certificates match as expected.\"\n}\n[/block]\n\n***\n\n# Limitations\n\nIt's important to note that although we do our *very best* to ensure your application works normally inside of Cypress, there **are** some limitations you need to be aware of.\n\n## One Superdomain per Test\n\nBecause Cypress changes its own host URL to match that of your applications, it requires that your application remain on the same superdomain for the entirety of a single test.\n\nIf you attempt to visit two different superdomains, Cypress will error. Visiting subdomains works fine, but two different superdomains does not. You can visit different superdomains in *different* tests, just not the *same* test.\n\n```javascript\ncy\n  .visit(\"https://www.cypress.io\")\n  .visit(\"https://docs.cypress.io\") // yup all good\n```\n\n```javascript\ncy\n  .visit(\"https://apple.com\")\n  .visit(\"https://google.com\")      // bad, this will immediately error\n\n```\n\nAlthough Cypress tries to enforce this limitation, it is possible for your application to bypass Cypress's ability to detect this.\n\n**Examples of test cases that will error due to superdomain limitations:**\n\n1. [`cy.click`](https://on.cypress.io/api/click) an `<a>` with an `href` to a different superdomain.\n2. [`cy.submit`](https://on.cypress.io/api/submit) a `<form>` that causes your webserver to redirect to you a different superdomain.\n3. Issue a JavaScript redirect in your application, such as `window.location.href = '...'`, to a different superdomain.\n\nIn each of these situations, Cypress will lose the ability to automate your application and will immediately error.\n\nRead on to learn about [working around these common problems](#section-common-workarounds) or even [disabling web security](#section-disabling-web-security) altogether.\n\n***\n\n## Cross Origin Iframes\n\nIf your site embeds an `<iframe>` that is a cross-origin frame, Cypress will not be able to automate or communicate with this `<iframe>`.\n\n**Examples of uses for cross-origin iframes:**\n\n- Embedding a `Vimeo` or `Youtube` video.\n- Displaying a credit card form from `Stripe` or `Braintree`.\n- Displaying an embedded login form from `Auth0`.\n\nIt's actually *possible* for Cypress to accomodate these situations the same way Selenium does, but you will never have **native** access to these iframes from inside of Cypress.\n\nAs a workaround, you may be able to use [`window.postMessage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) to directly communicate with these iframes and control them (if the 3rd party iframe supports it).\n\nOther than that, you'll have to wait for us to implement API's to support this (check our [open issue](https://github.com/cypress-io/cypress/issues/136)), or you can [disable web security](#section-disabling-web-security).\n\n***\n\n## Insecure Content\n\nBecause of the way Cypress is designed, if you are testing an `HTTPS` site, Cypress will error anytime you attempt to navigate back to an `HTTP` site. This behavior helps highlight a *pretty serious* security problem with your application.\n\n**Example of accessing insecure content:**\n\n*Test code*\n\n```javascript\ncy.visit(\"https://app.corp.com\")\n```\n\nIn the application code, you set `cookies` and store a session on the browser.\n\nNow let's imagine you have a single `insecure` link (or JavaScript redirect) in your application code.\n\n*Application code*\n\n```html\n<html>\n  <a href=\"http://app.corp.com/page2\">Page 2</a>\n</html>\n```\n\nCypress will immediately fail with the following test code:\n\n*Test code*\n\n```javascript\ncy\n  .visit(\"https://app.corp.com\")\n  .get(\"a\").click()               // will immediately fail\n```\n\nBrowsers refuse to display insecure content on a secure page. Because Cypress initially changed its URL to match `https://app.corp.com` when the browser followed the `href` to `http://app.corp.com/page2`, the browser will refuse to display the contents.\n\nNow you may be thinking...'this sounds like a problem with Cypress because when I work with my application outside of Cypress it works just fine'.\n\nHowever, the truth is, Cypress is exposing a **security vulnerability** in your application, and you *want* it to fail in Cypress.\n\n`cookies` that do not have their `secure` flag set to `true` will be sent as clear text to the insecure URL. This leaves your application vulnerable to session hijacking.\n\nThis security vulnerability exists **even if** your webserver forces a `301 redirect` back to the `HTTPS` site. The original `HTTP` request was still made once, exposing insecure session information.\n\n**The Solution**\n\nSimply update your `HTML` or `JavaScript` code to not navigate to an insecure `HTTP` page and instead only use `HTTPS`. Additionally make sure that cookies have their `secure` flag set to `true`.\n\nIf you're in a situation where you don't control the code, or otherwise cannot work around this, you can bypass this restriction in Cypress by [disabling web security](#section-dislabing-web-security).\n\n***\n\n# Common Workarounds\n\nLet's investigate how you might encounter `cross origin` errors in your test code and break down how to work around them in Cypress.\n\n## External Navigation\n\nThe most common situation where you might encounter this error is when you click on an `<a>` that navigates to another superdomain.\n\n**Application code that is served at `localhost:8080`**\n\n```html\n<html>\n  <a href=\"https://google.com\">Google</a>\n</html>\n```\n\n**Test code**\n\n```javascript\ncy\n  .visit(\"http://localhost:8080\") // where your webserver + HTML is hosted\n  .get(\"a\").click()               // browser attempts to load google.com, Cypress errors\n```\n\nThere is essentially never any reason to visit a site that you don't control in your tests. It's prone to error and slow.\n\nInstead, all you need to test is that the `href` property is correct!\n\n```javascript\n// this is much easier to do and will run considerably faster\ncy\n  .visit(\"http://localhost:8080\")\n  .get(\"a\").should(\"have.attr\", \"href\", \"https://google.com\") // no page load!\n```\n\nOkay but let's say you're worried about `google.com` serving up the right HTML content. How would you test that? Easy! Just make a [`cy.request`](https://on.cypress.io/api/request) directly to it. [`cy.request`](https://on.cypress.io/api/request) is **NOT bound to CORS or same-origin policy**.\n\n```javascript\ncy\n  .visit(\"http://localhost:8080\")\n  .get(\"a\").then(function($a) {\n    // pull off the fully qualified href from the <a>\n    var url = $a.prop(\"href\")\n\n    // make a cy.request to it\n    cy.request(url).its(\"body\").should(\"include\", \"</html>\")\n  })\n```\n\nStill not satisfied? Do you really want to click through to another application? Okay then read about [disabling web security](#section-disabling-web-security).\n\n***\n\n## Form Submission Redirects\n\nWhen you submit a regular HTML form, the browser will follow this `HTTP(s) request`.\n\n**Application code that is served at `localhost:8080`**\n\n```html\n<html>\n  <form method=\"POST\" action=\"/submit\">\n    <input type=\"text\" name=\"email\" />\n    <input type=\"submit\" value=\"Submit\" />\n  </form>\n</html>\n```\n\n```javascript\ncy\n  .visit(\"http://localhost:8080\")\n  .get(\"form\").submit()           // submit the form!\n```\n\nIf your backend server handling the `/submit` route does a `30x` redirect to a different superdomain, you will get a `cross origin` error.\n\n```javascript\n// imagine this is some node / express code\n// on your localhost:8080 server\n\napp.post(\"/submit\", function(req, res) {\n  // redirect the browser to google.com\n  res.redirect(\"https://google.com\")\n})\n```\n\nA commone use case for this is `Single sign-on (SSO)`. In that situation you may `POST` to a different server and are redirected elsewhere (typically with the session token in the URL).\n\nIf that's the case, don't worry - you can work around it with [`cy.request`](https://on.cypress.io/api/request). [`cy.request`](https://on.cypress.io/api/request) is special because it is **NOT bound to CORS or same-origin policy**.\n\nIn fact we can likely bypass the initial visit altogether and just `POST` directly to your `SSO` server.\n\n```javascript\ncy\n  .request(\"POST\", \"https://sso.corp.com/auth\", {username: \"foo\", password: \"bar\"})\n  .then(function(response) {\n    // pull out the location redirect\n    var loc = response.headers[\"Location\"]\n\n    // parse out the token from the url (assuming its in there)\n    var token = parseOutMyToken(loc)\n\n    // do something with the token that your web application expects\n    // likely the same behavior as what your SSO does under the hood\n    // assuming it handles query string tokens like this\n    cy.visit(\"http://localhost:8080?token=\" + token)\n\n    // if you don't need to work with the token you can sometimes\n    // just visit the location header directly\n    cy.visit(loc)\n  })\n```\n\nNot working for you? Don't know how to set your token? If you still need to be able to be redirected to your SSO server you can read about [disabling web security](#section-disabling-web-security).\n\n***\n\n## JavaScript Redirects\n\nWhen we say *JavaScript Redirects* we are talking about any kind of code that does something like this:\n\n```javascript\nwindow.location.href = \"http://some.superdomain.com\"\n```\n\nThis is probably the hardest situation to test because it's usually happening due to another cause. You will need to figure out why your JavaScript code is redirecting. Perhaps you're not logged in, and you need to handle that setup elsewhere? Perhaps you're using a `Single sign-on (SSO)` server and you just need to read the previous section about working around that?\n\nIf you can't figure out why your JavaScript code is redirecting you to a different superdomain then you might want to just read about [disabling web security](#section-disabling-websecurity).\n\n***\n\n# Disabling Web Security\n\nSo if you cannot work around any of the issues using the suggested workarounds above, you may want to disable web security.\n\nOne last thing to consider here is that every once in a while we discover bugs in Cypress that lead to `cross origin` errors that can otherwise be fixed. If you think you're experiencing a bug, [come into gitter](https://gitter.im/cypress-io/cypress) or [open an issue](https://github.com/cypress-io/cypress/issues/new).\n\nTo start, you will need to understand that **not all browsers expose a way to turn off web security**. Some do, some don't. If you rely on disabling web security, you will not be able to run tests on browsers that do not support this feature.\n\nStill here? That's cool, let's disable web security!\n\n**Set `chromeWebSecurity` to `false` in `cypress.json` and we'll take care of the rest.**\n\n```json\n{\n  chromeWebSecurity: false\n}\n```\n\nThe browser will now display insecure content, you can now navigate to any superdomain without cross origin errors, and you can access cross origin iframes that are embedded in your application.\n\nOne thing you may notice though is that Cypress still enforces visiting a single superdomain with [`cy.visit`](https://on.cypress.io/api/visit). This is an artificial limitation (and one that can be removed). You should [open an issue](https://github.com/cypress-io/cypress/issues/new) and tell us what you're trying to do!\n","date":"2017-04-19T18:46:47.000Z","updated":"2017-04-19T18:46:47.000Z","path":"guides/references/web-security.html","comments":1,"layout":"page","_id":"cj1pby1kw003868g88mb7upd4","content":"<h1 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h1><p>Browsers adhere to a strict <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\" target=\"_blank\" rel=\"external\"><code>same-origin policy</code></a>. This means that browsers restrict access between <code>&lt;iframes&gt;</code> when their origin policies do not match.</p>\n<p>Because Cypress’ internal architecture is different from that of Selenium, Cypress must be able to directly communicate with your remote application at all times. Unfortunately, browsers naturally try to prevent how Cypress works.</p>\n<p>To get around these restrictions, Cypress implements some strategies involving <code>JavaScript</code> code, the browser’s <code>internal APIs</code>, and <code>network proxying</code> to <strong>play by the rules</strong> of <code>same-origin policy</code>. It is our goal to fully automate your application without needing to modify any application code - and we are <em>mostly</em> able to do this.</p>\n<p><strong>Examples of what Cypress does under the hood:</strong></p>\n<ul>\n<li>Injects <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/domain\" target=\"_blank\" rel=\"external\"><code>document.domain</code></a> into <code>text/html</code> pages.</li>\n<li>Proxies all <code>HTTP</code>/<code>HTTPS</code> traffic.</li>\n<li>Changes the hosted url to match that of the application under test.</li>\n<li>Uses the browser’s internal APIs for network level traffic.</li>\n</ul>\n<p>When Cypress first loads, the internal Cypress web application is hosted on a random port: something like <code>http://localhost:65874/__/</code>.</p>\n<p>After the first <a href=\"https://on.cypress.io/api/visit\" target=\"_blank\" rel=\"external\"><code>cy.visit</code></a> is issued in a test, Cypress automatically changes its URL to match the origin of your remote application, thereby solving the first major hurdle of <code>same-origin policy</code>. Your application’s code executes the same as it does outside of Cypress, and everything works as expected.</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “title”: “How is HTTPS supported?”,<br>  “body”: “Cypress does some pretty interesting things under the hood to make testing HTTPs sites work. Cypress enables you to control and stub at the network level. Therefore, Cypress must assign and manage browser certificates to be able to modify the traffic in real time. You’ll notice Chrome display a warning that the ‘SSL certificate does not match’. This is normal and correct. Under the hood we act as our own CA authority and issue certificates dynamically in order to intercept requests otherwise impossible to access. We only do this for the superdomain currently under test, and bypass other traffic. That’s why if you open a tab in Cypress to another host, the certificates match as expected.”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Limitations\"><a href=\"#Limitations\" class=\"headerlink\" title=\"Limitations\"></a>Limitations</h1><p>It’s important to note that although we do our <em>very best</em> to ensure your application works normally inside of Cypress, there <strong>are</strong> some limitations you need to be aware of.</p>\n<h2 id=\"One-Superdomain-per-Test\"><a href=\"#One-Superdomain-per-Test\" class=\"headerlink\" title=\"One Superdomain per Test\"></a>One Superdomain per Test</h2><p>Because Cypress changes its own host URL to match that of your applications, it requires that your application remain on the same superdomain for the entirety of a single test.</p>\n<p>If you attempt to visit two different superdomains, Cypress will error. Visiting subdomains works fine, but two different superdomains does not. You can visit different superdomains in <em>different</em> tests, just not the <em>same</em> test.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .visit(<span class=\"string\">\"https://www.cypress.io\"</span>)</div><div class=\"line\">  .visit(<span class=\"string\">\"https://docs.cypress.io\"</span>) <span class=\"comment\">// yup all good</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .visit(<span class=\"string\">\"https://apple.com\"</span>)</div><div class=\"line\">  .visit(<span class=\"string\">\"https://google.com\"</span>)      <span class=\"comment\">// bad, this will immediately error</span></div></pre></td></tr></table></figure>\n<p>Although Cypress tries to enforce this limitation, it is possible for your application to bypass Cypress’s ability to detect this.</p>\n<p><strong>Examples of test cases that will error due to superdomain limitations:</strong></p>\n<ol>\n<li><a href=\"https://on.cypress.io/api/click\" target=\"_blank\" rel=\"external\"><code>cy.click</code></a> an <code>&lt;a&gt;</code> with an <code>href</code> to a different superdomain.</li>\n<li><a href=\"https://on.cypress.io/api/submit\" target=\"_blank\" rel=\"external\"><code>cy.submit</code></a> a <code>&lt;form&gt;</code> that causes your webserver to redirect to you a different superdomain.</li>\n<li>Issue a JavaScript redirect in your application, such as <code>window.location.href = &#39;...&#39;</code>, to a different superdomain.</li>\n</ol>\n<p>In each of these situations, Cypress will lose the ability to automate your application and will immediately error.</p>\n<p>Read on to learn about <a href=\"#section-common-workarounds\">working around these common problems</a> or even <a href=\"#section-disabling-web-security\">disabling web security</a> altogether.</p>\n<hr>\n<h2 id=\"Cross-Origin-Iframes\"><a href=\"#Cross-Origin-Iframes\" class=\"headerlink\" title=\"Cross Origin Iframes\"></a>Cross Origin Iframes</h2><p>If your site embeds an <code>&lt;iframe&gt;</code> that is a cross-origin frame, Cypress will not be able to automate or communicate with this <code>&lt;iframe&gt;</code>.</p>\n<p><strong>Examples of uses for cross-origin iframes:</strong></p>\n<ul>\n<li>Embedding a <code>Vimeo</code> or <code>Youtube</code> video.</li>\n<li>Displaying a credit card form from <code>Stripe</code> or <code>Braintree</code>.</li>\n<li>Displaying an embedded login form from <code>Auth0</code>.</li>\n</ul>\n<p>It’s actually <em>possible</em> for Cypress to accomodate these situations the same way Selenium does, but you will never have <strong>native</strong> access to these iframes from inside of Cypress.</p>\n<p>As a workaround, you may be able to use <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage\" target=\"_blank\" rel=\"external\"><code>window.postMessage</code></a> to directly communicate with these iframes and control them (if the 3rd party iframe supports it).</p>\n<p>Other than that, you’ll have to wait for us to implement API’s to support this (check our <a href=\"https://github.com/cypress-io/cypress/issues/136\" target=\"_blank\" rel=\"external\">open issue</a>), or you can <a href=\"#section-disabling-web-security\">disable web security</a>.</p>\n<hr>\n<h2 id=\"Insecure-Content\"><a href=\"#Insecure-Content\" class=\"headerlink\" title=\"Insecure Content\"></a>Insecure Content</h2><p>Because of the way Cypress is designed, if you are testing an <code>HTTPS</code> site, Cypress will error anytime you attempt to navigate back to an <code>HTTP</code> site. This behavior helps highlight a <em>pretty serious</em> security problem with your application.</p>\n<p><strong>Example of accessing insecure content:</strong></p>\n<p><em>Test code</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.visit(<span class=\"string\">\"https://app.corp.com\"</span>)</div></pre></td></tr></table></figure>\n<p>In the application code, you set <code>cookies</code> and store a session on the browser.</p>\n<p>Now let’s imagine you have a single <code>insecure</code> link (or JavaScript redirect) in your application code.</p>\n<p><em>Application code</em></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://app.corp.com/page2\"</span>&gt;</span>Page 2<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Cypress will immediately fail with the following test code:</p>\n<p><em>Test code</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .visit(<span class=\"string\">\"https://app.corp.com\"</span>)</div><div class=\"line\">  .get(<span class=\"string\">\"a\"</span>).click()               <span class=\"comment\">// will immediately fail</span></div></pre></td></tr></table></figure>\n<p>Browsers refuse to display insecure content on a secure page. Because Cypress initially changed its URL to match <code>https://app.corp.com</code> when the browser followed the <code>href</code> to <code>http://app.corp.com/page2</code>, the browser will refuse to display the contents.</p>\n<p>Now you may be thinking…’this sounds like a problem with Cypress because when I work with my application outside of Cypress it works just fine’.</p>\n<p>However, the truth is, Cypress is exposing a <strong>security vulnerability</strong> in your application, and you <em>want</em> it to fail in Cypress.</p>\n<p><code>cookies</code> that do not have their <code>secure</code> flag set to <code>true</code> will be sent as clear text to the insecure URL. This leaves your application vulnerable to session hijacking.</p>\n<p>This security vulnerability exists <strong>even if</strong> your webserver forces a <code>301 redirect</code> back to the <code>HTTPS</code> site. The original <code>HTTP</code> request was still made once, exposing insecure session information.</p>\n<p><strong>The Solution</strong></p>\n<p>Simply update your <code>HTML</code> or <code>JavaScript</code> code to not navigate to an insecure <code>HTTP</code> page and instead only use <code>HTTPS</code>. Additionally make sure that cookies have their <code>secure</code> flag set to <code>true</code>.</p>\n<p>If you’re in a situation where you don’t control the code, or otherwise cannot work around this, you can bypass this restriction in Cypress by <a href=\"#section-dislabing-web-security\">disabling web security</a>.</p>\n<hr>\n<h1 id=\"Common-Workarounds\"><a href=\"#Common-Workarounds\" class=\"headerlink\" title=\"Common Workarounds\"></a>Common Workarounds</h1><p>Let’s investigate how you might encounter <code>cross origin</code> errors in your test code and break down how to work around them in Cypress.</p>\n<h2 id=\"External-Navigation\"><a href=\"#External-Navigation\" class=\"headerlink\" title=\"External Navigation\"></a>External Navigation</h2><p>The most common situation where you might encounter this error is when you click on an <code>&lt;a&gt;</code> that navigates to another superdomain.</p>\n<p><strong>Application code that is served at <code>localhost:8080</code></strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://google.com\"</span>&gt;</span>Google<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><strong>Test code</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .visit(<span class=\"string\">\"http://localhost:8080\"</span>) <span class=\"comment\">// where your webserver + HTML is hosted</span></div><div class=\"line\">  .get(<span class=\"string\">\"a\"</span>).click()               <span class=\"comment\">// browser attempts to load google.com, Cypress errors</span></div></pre></td></tr></table></figure>\n<p>There is essentially never any reason to visit a site that you don’t control in your tests. It’s prone to error and slow.</p>\n<p>Instead, all you need to test is that the <code>href</code> property is correct!</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// this is much easier to do and will run considerably faster</span></div><div class=\"line\">cy</div><div class=\"line\">  .visit(<span class=\"string\">\"http://localhost:8080\"</span>)</div><div class=\"line\">  .get(<span class=\"string\">\"a\"</span>).should(<span class=\"string\">\"have.attr\"</span>, <span class=\"string\">\"href\"</span>, <span class=\"string\">\"https://google.com\"</span>) <span class=\"comment\">// no page load!</span></div></pre></td></tr></table></figure>\n<p>Okay but let’s say you’re worried about <code>google.com</code> serving up the right HTML content. How would you test that? Easy! Just make a <a href=\"https://on.cypress.io/api/request\" target=\"_blank\" rel=\"external\"><code>cy.request</code></a> directly to it. <a href=\"https://on.cypress.io/api/request\" target=\"_blank\" rel=\"external\"><code>cy.request</code></a> is <strong>NOT bound to CORS or same-origin policy</strong>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .visit(<span class=\"string\">\"http://localhost:8080\"</span>)</div><div class=\"line\">  .get(<span class=\"string\">\"a\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$a</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// pull off the fully qualified href from the &lt;a&gt;</span></div><div class=\"line\">    <span class=\"keyword\">var</span> url = $a.prop(<span class=\"string\">\"href\"</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// make a cy.request to it</span></div><div class=\"line\">    cy.request(url).its(<span class=\"string\">\"body\"</span>).should(<span class=\"string\">\"include\"</span>, <span class=\"string\">\"&lt;/html&gt;\"</span>)</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<p>Still not satisfied? Do you really want to click through to another application? Okay then read about <a href=\"#section-disabling-web-security\">disabling web security</a>.</p>\n<hr>\n<h2 id=\"Form-Submission-Redirects\"><a href=\"#Form-Submission-Redirects\" class=\"headerlink\" title=\"Form Submission Redirects\"></a>Form Submission Redirects</h2><p>When you submit a regular HTML form, the browser will follow this <code>HTTP(s) request</code>.</p>\n<p><strong>Application code that is served at <code>localhost:8080</code></strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"POST\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/submit\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"email\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Submit\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .visit(<span class=\"string\">\"http://localhost:8080\"</span>)</div><div class=\"line\">  .get(<span class=\"string\">\"form\"</span>).submit()           <span class=\"comment\">// submit the form!</span></div></pre></td></tr></table></figure>\n<p>If your backend server handling the <code>/submit</code> route does a <code>30x</code> redirect to a different superdomain, you will get a <code>cross origin</code> error.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// imagine this is some node / express code</span></div><div class=\"line\"><span class=\"comment\">// on your localhost:8080 server</span></div><div class=\"line\"></div><div class=\"line\">app.post(<span class=\"string\">\"/submit\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// redirect the browser to google.com</span></div><div class=\"line\">  res.redirect(<span class=\"string\">\"https://google.com\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>A commone use case for this is <code>Single sign-on (SSO)</code>. In that situation you may <code>POST</code> to a different server and are redirected elsewhere (typically with the session token in the URL).</p>\n<p>If that’s the case, don’t worry - you can work around it with <a href=\"https://on.cypress.io/api/request\" target=\"_blank\" rel=\"external\"><code>cy.request</code></a>. <a href=\"https://on.cypress.io/api/request\" target=\"_blank\" rel=\"external\"><code>cy.request</code></a> is special because it is <strong>NOT bound to CORS or same-origin policy</strong>.</p>\n<p>In fact we can likely bypass the initial visit altogether and just <code>POST</code> directly to your <code>SSO</code> server.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .request(<span class=\"string\">\"POST\"</span>, <span class=\"string\">\"https://sso.corp.com/auth\"</span>, &#123;<span class=\"attr\">username</span>: <span class=\"string\">\"foo\"</span>, <span class=\"attr\">password</span>: <span class=\"string\">\"bar\"</span>&#125;)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// pull out the location redirect</span></div><div class=\"line\">    <span class=\"keyword\">var</span> loc = response.headers[<span class=\"string\">\"Location\"</span>]</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// parse out the token from the url (assuming its in there)</span></div><div class=\"line\">    <span class=\"keyword\">var</span> token = parseOutMyToken(loc)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// do something with the token that your web application expects</span></div><div class=\"line\">    <span class=\"comment\">// likely the same behavior as what your SSO does under the hood</span></div><div class=\"line\">    <span class=\"comment\">// assuming it handles query string tokens like this</span></div><div class=\"line\">    cy.visit(<span class=\"string\">\"http://localhost:8080?token=\"</span> + token)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// if you don't need to work with the token you can sometimes</span></div><div class=\"line\">    <span class=\"comment\">// just visit the location header directly</span></div><div class=\"line\">    cy.visit(loc)</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<p>Not working for you? Don’t know how to set your token? If you still need to be able to be redirected to your SSO server you can read about <a href=\"#section-disabling-web-security\">disabling web security</a>.</p>\n<hr>\n<h2 id=\"JavaScript-Redirects\"><a href=\"#JavaScript-Redirects\" class=\"headerlink\" title=\"JavaScript Redirects\"></a>JavaScript Redirects</h2><p>When we say <em>JavaScript Redirects</em> we are talking about any kind of code that does something like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.location.href = <span class=\"string\">\"http://some.superdomain.com\"</span></div></pre></td></tr></table></figure>\n<p>This is probably the hardest situation to test because it’s usually happening due to another cause. You will need to figure out why your JavaScript code is redirecting. Perhaps you’re not logged in, and you need to handle that setup elsewhere? Perhaps you’re using a <code>Single sign-on (SSO)</code> server and you just need to read the previous section about working around that?</p>\n<p>If you can’t figure out why your JavaScript code is redirecting you to a different superdomain then you might want to just read about <a href=\"#section-disabling-websecurity\">disabling web security</a>.</p>\n<hr>\n<h1 id=\"Disabling-Web-Security\"><a href=\"#Disabling-Web-Security\" class=\"headerlink\" title=\"Disabling Web Security\"></a>Disabling Web Security</h1><p>So if you cannot work around any of the issues using the suggested workarounds above, you may want to disable web security.</p>\n<p>One last thing to consider here is that every once in a while we discover bugs in Cypress that lead to <code>cross origin</code> errors that can otherwise be fixed. If you think you’re experiencing a bug, <a href=\"https://gitter.im/cypress-io/cypress\" target=\"_blank\" rel=\"external\">come into gitter</a> or <a href=\"https://github.com/cypress-io/cypress/issues/new\" target=\"_blank\" rel=\"external\">open an issue</a>.</p>\n<p>To start, you will need to understand that <strong>not all browsers expose a way to turn off web security</strong>. Some do, some don’t. If you rely on disabling web security, you will not be able to run tests on browsers that do not support this feature.</p>\n<p>Still here? That’s cool, let’s disable web security!</p>\n<p><strong>Set <code>chromeWebSecurity</code> to <code>false</code> in <code>cypress.json</code> and we’ll take care of the rest.</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  chromeWebSecurity: false</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The browser will now display insecure content, you can now navigate to any superdomain without cross origin errors, and you can access cross origin iframes that are embedded in your application.</p>\n<p>One thing you may notice though is that Cypress still enforces visiting a single superdomain with <a href=\"https://on.cypress.io/api/visit\" target=\"_blank\" rel=\"external\"><code>cy.visit</code></a>. This is an artificial limitation (and one that can be removed). You should <a href=\"https://github.com/cypress-io/cypress/issues/new\" target=\"_blank\" rel=\"external\">open an issue</a> and tell us what you’re trying to do!</p>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<h1 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h1><p>Browsers adhere to a strict <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\"><code>same-origin policy</code></a>. This means that browsers restrict access between <code>&lt;iframes&gt;</code> when their origin policies do not match.</p>\n<p>Because Cypress’ internal architecture is different from that of Selenium, Cypress must be able to directly communicate with your remote application at all times. Unfortunately, browsers naturally try to prevent how Cypress works.</p>\n<p>To get around these restrictions, Cypress implements some strategies involving <code>JavaScript</code> code, the browser’s <code>internal APIs</code>, and <code>network proxying</code> to <strong>play by the rules</strong> of <code>same-origin policy</code>. It is our goal to fully automate your application without needing to modify any application code - and we are <em>mostly</em> able to do this.</p>\n<p><strong>Examples of what Cypress does under the hood:</strong></p>\n<ul>\n<li>Injects <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/domain\"><code>document.domain</code></a> into <code>text/html</code> pages.</li>\n<li>Proxies all <code>HTTP</code>/<code>HTTPS</code> traffic.</li>\n<li>Changes the hosted url to match that of the application under test.</li>\n<li>Uses the browser’s internal APIs for network level traffic.</li>\n</ul>\n<p>When Cypress first loads, the internal Cypress web application is hosted on a random port: something like <code>http://localhost:65874/__/</code>.</p>\n<p>After the first <a href=\"https://on.cypress.io/api/visit\"><code>cy.visit</code></a> is issued in a test, Cypress automatically changes its URL to match the origin of your remote application, thereby solving the first major hurdle of <code>same-origin policy</code>. Your application’s code executes the same as it does outside of Cypress, and everything works as expected.</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “title”: “How is HTTPS supported?”,<br>  “body”: “Cypress does some pretty interesting things under the hood to make testing HTTPs sites work. Cypress enables you to control and stub at the network level. Therefore, Cypress must assign and manage browser certificates to be able to modify the traffic in real time. You’ll notice Chrome display a warning that the ‘SSL certificate does not match’. This is normal and correct. Under the hood we act as our own CA authority and issue certificates dynamically in order to intercept requests otherwise impossible to access. We only do this for the superdomain currently under test, and bypass other traffic. That’s why if you open a tab in Cypress to another host, the certificates match as expected.”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Limitations\"><a href=\"#Limitations\" class=\"headerlink\" title=\"Limitations\"></a>Limitations</h1><p>It’s important to note that although we do our <em>very best</em> to ensure your application works normally inside of Cypress, there <strong>are</strong> some limitations you need to be aware of.</p>\n<h2 id=\"One-Superdomain-per-Test\"><a href=\"#One-Superdomain-per-Test\" class=\"headerlink\" title=\"One Superdomain per Test\"></a>One Superdomain per Test</h2><p>Because Cypress changes its own host URL to match that of your applications, it requires that your application remain on the same superdomain for the entirety of a single test.</p>\n<p>If you attempt to visit two different superdomains, Cypress will error. Visiting subdomains works fine, but two different superdomains does not. You can visit different superdomains in <em>different</em> tests, just not the <em>same</em> test.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .visit(<span class=\"string\">\"https://www.cypress.io\"</span>)</div><div class=\"line\">  .visit(<span class=\"string\">\"https://docs.cypress.io\"</span>) <span class=\"comment\">// yup all good</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .visit(<span class=\"string\">\"https://apple.com\"</span>)</div><div class=\"line\">  .visit(<span class=\"string\">\"https://google.com\"</span>)      <span class=\"comment\">// bad, this will immediately error</span></div></pre></td></tr></table></figure>\n<p>Although Cypress tries to enforce this limitation, it is possible for your application to bypass Cypress’s ability to detect this.</p>\n<p><strong>Examples of test cases that will error due to superdomain limitations:</strong></p>\n<ol>\n<li><a href=\"https://on.cypress.io/api/click\"><code>cy.click</code></a> an <code>&lt;a&gt;</code> with an <code>href</code> to a different superdomain.</li>\n<li><a href=\"https://on.cypress.io/api/submit\"><code>cy.submit</code></a> a <code>&lt;form&gt;</code> that causes your webserver to redirect to you a different superdomain.</li>\n<li>Issue a JavaScript redirect in your application, such as <code>window.location.href = &#39;...&#39;</code>, to a different superdomain.</li>\n</ol>\n<p>In each of these situations, Cypress will lose the ability to automate your application and will immediately error.</p>\n<p>Read on to learn about <a href=\"#section-common-workarounds\">working around these common problems</a> or even <a href=\"#section-disabling-web-security\">disabling web security</a> altogether.</p>\n<hr>\n<h2 id=\"Cross-Origin-Iframes\"><a href=\"#Cross-Origin-Iframes\" class=\"headerlink\" title=\"Cross Origin Iframes\"></a>Cross Origin Iframes</h2><p>If your site embeds an <code>&lt;iframe&gt;</code> that is a cross-origin frame, Cypress will not be able to automate or communicate with this <code>&lt;iframe&gt;</code>.</p>\n<p><strong>Examples of uses for cross-origin iframes:</strong></p>\n<ul>\n<li>Embedding a <code>Vimeo</code> or <code>Youtube</code> video.</li>\n<li>Displaying a credit card form from <code>Stripe</code> or <code>Braintree</code>.</li>\n<li>Displaying an embedded login form from <code>Auth0</code>.</li>\n</ul>\n<p>It’s actually <em>possible</em> for Cypress to accomodate these situations the same way Selenium does, but you will never have <strong>native</strong> access to these iframes from inside of Cypress.</p>\n<p>As a workaround, you may be able to use <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage\"><code>window.postMessage</code></a> to directly communicate with these iframes and control them (if the 3rd party iframe supports it).</p>\n<p>Other than that, you’ll have to wait for us to implement API’s to support this (check our <a href=\"https://github.com/cypress-io/cypress/issues/136\">open issue</a>), or you can <a href=\"#section-disabling-web-security\">disable web security</a>.</p>\n<hr>\n<h2 id=\"Insecure-Content\"><a href=\"#Insecure-Content\" class=\"headerlink\" title=\"Insecure Content\"></a>Insecure Content</h2><p>Because of the way Cypress is designed, if you are testing an <code>HTTPS</code> site, Cypress will error anytime you attempt to navigate back to an <code>HTTP</code> site. This behavior helps highlight a <em>pretty serious</em> security problem with your application.</p>\n<p><strong>Example of accessing insecure content:</strong></p>\n<p><em>Test code</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.visit(<span class=\"string\">\"https://app.corp.com\"</span>)</div></pre></td></tr></table></figure>\n<p>In the application code, you set <code>cookies</code> and store a session on the browser.</p>\n<p>Now let’s imagine you have a single <code>insecure</code> link (or JavaScript redirect) in your application code.</p>\n<p><em>Application code</em></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://app.corp.com/page2\"</span>&gt;</span>Page 2<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Cypress will immediately fail with the following test code:</p>\n<p><em>Test code</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .visit(<span class=\"string\">\"https://app.corp.com\"</span>)</div><div class=\"line\">  .get(<span class=\"string\">\"a\"</span>).click()               <span class=\"comment\">// will immediately fail</span></div></pre></td></tr></table></figure>\n<p>Browsers refuse to display insecure content on a secure page. Because Cypress initially changed its URL to match <code>https://app.corp.com</code> when the browser followed the <code>href</code> to <code>http://app.corp.com/page2</code>, the browser will refuse to display the contents.</p>\n<p>Now you may be thinking…’this sounds like a problem with Cypress because when I work with my application outside of Cypress it works just fine’.</p>\n<p>However, the truth is, Cypress is exposing a <strong>security vulnerability</strong> in your application, and you <em>want</em> it to fail in Cypress.</p>\n<p><code>cookies</code> that do not have their <code>secure</code> flag set to <code>true</code> will be sent as clear text to the insecure URL. This leaves your application vulnerable to session hijacking.</p>\n<p>This security vulnerability exists <strong>even if</strong> your webserver forces a <code>301 redirect</code> back to the <code>HTTPS</code> site. The original <code>HTTP</code> request was still made once, exposing insecure session information.</p>\n<p><strong>The Solution</strong></p>\n<p>Simply update your <code>HTML</code> or <code>JavaScript</code> code to not navigate to an insecure <code>HTTP</code> page and instead only use <code>HTTPS</code>. Additionally make sure that cookies have their <code>secure</code> flag set to <code>true</code>.</p>\n<p>If you’re in a situation where you don’t control the code, or otherwise cannot work around this, you can bypass this restriction in Cypress by <a href=\"#section-dislabing-web-security\">disabling web security</a>.</p>\n<hr>\n<h1 id=\"Common-Workarounds\"><a href=\"#Common-Workarounds\" class=\"headerlink\" title=\"Common Workarounds\"></a>Common Workarounds</h1><p>Let’s investigate how you might encounter <code>cross origin</code> errors in your test code and break down how to work around them in Cypress.</p>\n<h2 id=\"External-Navigation\"><a href=\"#External-Navigation\" class=\"headerlink\" title=\"External Navigation\"></a>External Navigation</h2><p>The most common situation where you might encounter this error is when you click on an <code>&lt;a&gt;</code> that navigates to another superdomain.</p>\n<p><strong>Application code that is served at <code>localhost:8080</code></strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://google.com\"</span>&gt;</span>Google<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><strong>Test code</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .visit(<span class=\"string\">\"http://localhost:8080\"</span>) <span class=\"comment\">// where your webserver + HTML is hosted</span></div><div class=\"line\">  .get(<span class=\"string\">\"a\"</span>).click()               <span class=\"comment\">// browser attempts to load google.com, Cypress errors</span></div></pre></td></tr></table></figure>\n<p>There is essentially never any reason to visit a site that you don’t control in your tests. It’s prone to error and slow.</p>\n<p>Instead, all you need to test is that the <code>href</code> property is correct!</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// this is much easier to do and will run considerably faster</span></div><div class=\"line\">cy</div><div class=\"line\">  .visit(<span class=\"string\">\"http://localhost:8080\"</span>)</div><div class=\"line\">  .get(<span class=\"string\">\"a\"</span>).should(<span class=\"string\">\"have.attr\"</span>, <span class=\"string\">\"href\"</span>, <span class=\"string\">\"https://google.com\"</span>) <span class=\"comment\">// no page load!</span></div></pre></td></tr></table></figure>\n<p>Okay but let’s say you’re worried about <code>google.com</code> serving up the right HTML content. How would you test that? Easy! Just make a <a href=\"https://on.cypress.io/api/request\"><code>cy.request</code></a> directly to it. <a href=\"https://on.cypress.io/api/request\"><code>cy.request</code></a> is <strong>NOT bound to CORS or same-origin policy</strong>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .visit(<span class=\"string\">\"http://localhost:8080\"</span>)</div><div class=\"line\">  .get(<span class=\"string\">\"a\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$a</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// pull off the fully qualified href from the &lt;a&gt;</span></div><div class=\"line\">    <span class=\"keyword\">var</span> url = $a.prop(<span class=\"string\">\"href\"</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// make a cy.request to it</span></div><div class=\"line\">    cy.request(url).its(<span class=\"string\">\"body\"</span>).should(<span class=\"string\">\"include\"</span>, <span class=\"string\">\"&lt;/html&gt;\"</span>)</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<p>Still not satisfied? Do you really want to click through to another application? Okay then read about <a href=\"#section-disabling-web-security\">disabling web security</a>.</p>\n<hr>\n<h2 id=\"Form-Submission-Redirects\"><a href=\"#Form-Submission-Redirects\" class=\"headerlink\" title=\"Form Submission Redirects\"></a>Form Submission Redirects</h2><p>When you submit a regular HTML form, the browser will follow this <code>HTTP(s) request</code>.</p>\n<p><strong>Application code that is served at <code>localhost:8080</code></strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"POST\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/submit\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"email\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Submit\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .visit(<span class=\"string\">\"http://localhost:8080\"</span>)</div><div class=\"line\">  .get(<span class=\"string\">\"form\"</span>).submit()           <span class=\"comment\">// submit the form!</span></div></pre></td></tr></table></figure>\n<p>If your backend server handling the <code>/submit</code> route does a <code>30x</code> redirect to a different superdomain, you will get a <code>cross origin</code> error.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// imagine this is some node / express code</span></div><div class=\"line\"><span class=\"comment\">// on your localhost:8080 server</span></div><div class=\"line\"></div><div class=\"line\">app.post(<span class=\"string\">\"/submit\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// redirect the browser to google.com</span></div><div class=\"line\">  res.redirect(<span class=\"string\">\"https://google.com\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>A commone use case for this is <code>Single sign-on (SSO)</code>. In that situation you may <code>POST</code> to a different server and are redirected elsewhere (typically with the session token in the URL).</p>\n<p>If that’s the case, don’t worry - you can work around it with <a href=\"https://on.cypress.io/api/request\"><code>cy.request</code></a>. <a href=\"https://on.cypress.io/api/request\"><code>cy.request</code></a> is special because it is <strong>NOT bound to CORS or same-origin policy</strong>.</p>\n<p>In fact we can likely bypass the initial visit altogether and just <code>POST</code> directly to your <code>SSO</code> server.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .request(<span class=\"string\">\"POST\"</span>, <span class=\"string\">\"https://sso.corp.com/auth\"</span>, &#123;<span class=\"attr\">username</span>: <span class=\"string\">\"foo\"</span>, <span class=\"attr\">password</span>: <span class=\"string\">\"bar\"</span>&#125;)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// pull out the location redirect</span></div><div class=\"line\">    <span class=\"keyword\">var</span> loc = response.headers[<span class=\"string\">\"Location\"</span>]</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// parse out the token from the url (assuming its in there)</span></div><div class=\"line\">    <span class=\"keyword\">var</span> token = parseOutMyToken(loc)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// do something with the token that your web application expects</span></div><div class=\"line\">    <span class=\"comment\">// likely the same behavior as what your SSO does under the hood</span></div><div class=\"line\">    <span class=\"comment\">// assuming it handles query string tokens like this</span></div><div class=\"line\">    cy.visit(<span class=\"string\">\"http://localhost:8080?token=\"</span> + token)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// if you don't need to work with the token you can sometimes</span></div><div class=\"line\">    <span class=\"comment\">// just visit the location header directly</span></div><div class=\"line\">    cy.visit(loc)</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<p>Not working for you? Don’t know how to set your token? If you still need to be able to be redirected to your SSO server you can read about <a href=\"#section-disabling-web-security\">disabling web security</a>.</p>\n<hr>\n<h2 id=\"JavaScript-Redirects\"><a href=\"#JavaScript-Redirects\" class=\"headerlink\" title=\"JavaScript Redirects\"></a>JavaScript Redirects</h2><p>When we say <em>JavaScript Redirects</em> we are talking about any kind of code that does something like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.location.href = <span class=\"string\">\"http://some.superdomain.com\"</span></div></pre></td></tr></table></figure>\n<p>This is probably the hardest situation to test because it’s usually happening due to another cause. You will need to figure out why your JavaScript code is redirecting. Perhaps you’re not logged in, and you need to handle that setup elsewhere? Perhaps you’re using a <code>Single sign-on (SSO)</code> server and you just need to read the previous section about working around that?</p>\n<p>If you can’t figure out why your JavaScript code is redirecting you to a different superdomain then you might want to just read about <a href=\"#section-disabling-websecurity\">disabling web security</a>.</p>\n<hr>\n<h1 id=\"Disabling-Web-Security\"><a href=\"#Disabling-Web-Security\" class=\"headerlink\" title=\"Disabling Web Security\"></a>Disabling Web Security</h1><p>So if you cannot work around any of the issues using the suggested workarounds above, you may want to disable web security.</p>\n<p>One last thing to consider here is that every once in a while we discover bugs in Cypress that lead to <code>cross origin</code> errors that can otherwise be fixed. If you think you’re experiencing a bug, <a href=\"https://gitter.im/cypress-io/cypress\">come into gitter</a> or <a href=\"https://github.com/cypress-io/cypress/issues/new\">open an issue</a>.</p>\n<p>To start, you will need to understand that <strong>not all browsers expose a way to turn off web security</strong>. Some do, some don’t. If you rely on disabling web security, you will not be able to run tests on browsers that do not support this feature.</p>\n<p>Still here? That’s cool, let’s disable web security!</p>\n<p><strong>Set <code>chromeWebSecurity</code> to <code>false</code> in <code>cypress.json</code> and we’ll take care of the rest.</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  chromeWebSecurity: false</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The browser will now display insecure content, you can now navigate to any superdomain without cross origin errors, and you can access cross origin iframes that are embedded in your application.</p>\n<p>One thing you may notice though is that Cypress still enforces visiting a single superdomain with <a href=\"https://on.cypress.io/api/visit\"><code>cy.visit</code></a>. This is an artificial limitation (and one that can be removed). You should <a href=\"https://github.com/cypress-io/cypress/issues/new\">open an issue</a> and tell us what you’re trying to do!</p>\n"},{"title":"our-goals","_content":"\n# Problems with current front-end testing tools\n\nThere are clear benefits to testing code. But many *web applications* are not fully covered in tests. Why? There are many testing tools for the front end, but most (if not all) suffer from some problems.\n\n* **Poor Setup:** Testing environments take too long to setup.\n* **Unreliable:** Tests are often brittle, and randomly fail.\n* **Time consuming:** Running an entire test suite takes too long (sometimes hours).\n* **No Cross Browser Support:** Debugging across browsers and browser versions is very time consuming.\n* **Obscure Error Messages:** Error messages are obtuse, indirect, and increase the time it takes to debug.\n* **Coupled dependencies:** Integration tests are often coupled directly to the server.\n* **Lacking fixture support:** Handling mock data, or fixtures, is difficult.\n* **Don't encourage TDD:** Testing often occurs *after* features are built because there isn't an apparent test-driven development (TDD) flow.\n* **Lack of integration testing:** Even if unit testing JavaScript is reasonably simple, unit testing alone does not verify your application is fully functioning.\n* **Async hell:** Handling complicated asynchronous logic that is found on most modern single-page JavaScript applications is impossible.\n* **No Visibility:** Testing through a console is obscure and doesn't give full visibility on the problems your users will face using your web application.\n* **Buggy:** Selenium drivers differ in implementation details which means code breaks across different browsers and browser versions.\n\nThese are just a few reasons why it's often difficult to test modern web applications. Often it takes longer to write a passing test for a feature, than to actually build the feature.\n\nThere is a lot of mental friction when writing tests. Testing just becomes another layer to cut through. Because testing is often brittle, we lose confidence that our tests are delivering any additional value.\n\nBecause of this complexity, most organizations have an entire Quality Assurance (QA) department dedicated to these tasks.\n\n> Cypress aims to solve the biggest difficulties when it comes to testing web applications. It aims to reduce the mental effort required to write tests. Cypress works in your typical development workflow (in the browser) and allows you to see your application while it's being tested. This enables you to practice TDD since there is no context shift between testing and development.\n\n***\n\n# Goals of Cypress\n\n* **Easy Setup:** Allow you to write your first test in less than 5 minutes.\n* **Automated:** Allow you to drive your application with tests instead of manual interactions.\n* **Easy Integration:** Require zero code changes to your existing application.\n* **In-Browser Testing:** Integrate testing within your normal development process.\n* **JavaScript:** Allow you to write your test suite in JavaScript.\n* **Enjoyable:** Make writing tests an enjoyable, fun experience.\n* **Opinionated:** Encourage writing good tests.\n* **Clear error messages:** Provide **clear**, debuggable error messages.\n* **Intelligent Network Requests:** Make dealing with `AJAX/XHR` ridiculously simple.\n* **Cross-browser support:** Provide cross-browser testing and debugging **without** leaving Google Chrome and work in all modern browsers (`IE11+`)\n* **CI Integration:** Instantly integrate any Continuous Integration provider.\n* **Accessible:** Work with any JavaScript framework (current and future).\n* **Flexible:** Replace server side testing tools like `Capybara`.\n* **Integrate with Server:** Allow you to communicate directly to a backend server for seeding / querying.\n* **Elimate Selenium:** Eliminate the need to code or deal with `Selenium`.","source":"guides/welcome/our-goals.md","raw":"title: our-goals\n---\n\n# Problems with current front-end testing tools\n\nThere are clear benefits to testing code. But many *web applications* are not fully covered in tests. Why? There are many testing tools for the front end, but most (if not all) suffer from some problems.\n\n* **Poor Setup:** Testing environments take too long to setup.\n* **Unreliable:** Tests are often brittle, and randomly fail.\n* **Time consuming:** Running an entire test suite takes too long (sometimes hours).\n* **No Cross Browser Support:** Debugging across browsers and browser versions is very time consuming.\n* **Obscure Error Messages:** Error messages are obtuse, indirect, and increase the time it takes to debug.\n* **Coupled dependencies:** Integration tests are often coupled directly to the server.\n* **Lacking fixture support:** Handling mock data, or fixtures, is difficult.\n* **Don't encourage TDD:** Testing often occurs *after* features are built because there isn't an apparent test-driven development (TDD) flow.\n* **Lack of integration testing:** Even if unit testing JavaScript is reasonably simple, unit testing alone does not verify your application is fully functioning.\n* **Async hell:** Handling complicated asynchronous logic that is found on most modern single-page JavaScript applications is impossible.\n* **No Visibility:** Testing through a console is obscure and doesn't give full visibility on the problems your users will face using your web application.\n* **Buggy:** Selenium drivers differ in implementation details which means code breaks across different browsers and browser versions.\n\nThese are just a few reasons why it's often difficult to test modern web applications. Often it takes longer to write a passing test for a feature, than to actually build the feature.\n\nThere is a lot of mental friction when writing tests. Testing just becomes another layer to cut through. Because testing is often brittle, we lose confidence that our tests are delivering any additional value.\n\nBecause of this complexity, most organizations have an entire Quality Assurance (QA) department dedicated to these tasks.\n\n> Cypress aims to solve the biggest difficulties when it comes to testing web applications. It aims to reduce the mental effort required to write tests. Cypress works in your typical development workflow (in the browser) and allows you to see your application while it's being tested. This enables you to practice TDD since there is no context shift between testing and development.\n\n***\n\n# Goals of Cypress\n\n* **Easy Setup:** Allow you to write your first test in less than 5 minutes.\n* **Automated:** Allow you to drive your application with tests instead of manual interactions.\n* **Easy Integration:** Require zero code changes to your existing application.\n* **In-Browser Testing:** Integrate testing within your normal development process.\n* **JavaScript:** Allow you to write your test suite in JavaScript.\n* **Enjoyable:** Make writing tests an enjoyable, fun experience.\n* **Opinionated:** Encourage writing good tests.\n* **Clear error messages:** Provide **clear**, debuggable error messages.\n* **Intelligent Network Requests:** Make dealing with `AJAX/XHR` ridiculously simple.\n* **Cross-browser support:** Provide cross-browser testing and debugging **without** leaving Google Chrome and work in all modern browsers (`IE11+`)\n* **CI Integration:** Instantly integrate any Continuous Integration provider.\n* **Accessible:** Work with any JavaScript framework (current and future).\n* **Flexible:** Replace server side testing tools like `Capybara`.\n* **Integrate with Server:** Allow you to communicate directly to a backend server for seeding / querying.\n* **Elimate Selenium:** Eliminate the need to code or deal with `Selenium`.","date":"2017-04-19T18:46:47.000Z","updated":"2017-04-19T18:46:47.000Z","path":"guides/welcome/our-goals.html","comments":1,"layout":"page","_id":"cj1pby1kw003a68g8nkfc3nd4","content":"<h1 id=\"Problems-with-current-front-end-testing-tools\"><a href=\"#Problems-with-current-front-end-testing-tools\" class=\"headerlink\" title=\"Problems with current front-end testing tools\"></a>Problems with current front-end testing tools</h1><p>There are clear benefits to testing code. But many <em>web applications</em> are not fully covered in tests. Why? There are many testing tools for the front end, but most (if not all) suffer from some problems.</p>\n<ul>\n<li><strong>Poor Setup:</strong> Testing environments take too long to setup.</li>\n<li><strong>Unreliable:</strong> Tests are often brittle, and randomly fail.</li>\n<li><strong>Time consuming:</strong> Running an entire test suite takes too long (sometimes hours).</li>\n<li><strong>No Cross Browser Support:</strong> Debugging across browsers and browser versions is very time consuming.</li>\n<li><strong>Obscure Error Messages:</strong> Error messages are obtuse, indirect, and increase the time it takes to debug.</li>\n<li><strong>Coupled dependencies:</strong> Integration tests are often coupled directly to the server.</li>\n<li><strong>Lacking fixture support:</strong> Handling mock data, or fixtures, is difficult.</li>\n<li><strong>Don’t encourage TDD:</strong> Testing often occurs <em>after</em> features are built because there isn’t an apparent test-driven development (TDD) flow.</li>\n<li><strong>Lack of integration testing:</strong> Even if unit testing JavaScript is reasonably simple, unit testing alone does not verify your application is fully functioning.</li>\n<li><strong>Async hell:</strong> Handling complicated asynchronous logic that is found on most modern single-page JavaScript applications is impossible.</li>\n<li><strong>No Visibility:</strong> Testing through a console is obscure and doesn’t give full visibility on the problems your users will face using your web application.</li>\n<li><strong>Buggy:</strong> Selenium drivers differ in implementation details which means code breaks across different browsers and browser versions.</li>\n</ul>\n<p>These are just a few reasons why it’s often difficult to test modern web applications. Often it takes longer to write a passing test for a feature, than to actually build the feature.</p>\n<p>There is a lot of mental friction when writing tests. Testing just becomes another layer to cut through. Because testing is often brittle, we lose confidence that our tests are delivering any additional value.</p>\n<p>Because of this complexity, most organizations have an entire Quality Assurance (QA) department dedicated to these tasks.</p>\n<blockquote>\n<p>Cypress aims to solve the biggest difficulties when it comes to testing web applications. It aims to reduce the mental effort required to write tests. Cypress works in your typical development workflow (in the browser) and allows you to see your application while it’s being tested. This enables you to practice TDD since there is no context shift between testing and development.</p>\n</blockquote>\n<hr>\n<h1 id=\"Goals-of-Cypress\"><a href=\"#Goals-of-Cypress\" class=\"headerlink\" title=\"Goals of Cypress\"></a>Goals of Cypress</h1><ul>\n<li><strong>Easy Setup:</strong> Allow you to write your first test in less than 5 minutes.</li>\n<li><strong>Automated:</strong> Allow you to drive your application with tests instead of manual interactions.</li>\n<li><strong>Easy Integration:</strong> Require zero code changes to your existing application.</li>\n<li><strong>In-Browser Testing:</strong> Integrate testing within your normal development process.</li>\n<li><strong>JavaScript:</strong> Allow you to write your test suite in JavaScript.</li>\n<li><strong>Enjoyable:</strong> Make writing tests an enjoyable, fun experience.</li>\n<li><strong>Opinionated:</strong> Encourage writing good tests.</li>\n<li><strong>Clear error messages:</strong> Provide <strong>clear</strong>, debuggable error messages.</li>\n<li><strong>Intelligent Network Requests:</strong> Make dealing with <code>AJAX/XHR</code> ridiculously simple.</li>\n<li><strong>Cross-browser support:</strong> Provide cross-browser testing and debugging <strong>without</strong> leaving Google Chrome and work in all modern browsers (<code>IE11+</code>)</li>\n<li><strong>CI Integration:</strong> Instantly integrate any Continuous Integration provider.</li>\n<li><strong>Accessible:</strong> Work with any JavaScript framework (current and future).</li>\n<li><strong>Flexible:</strong> Replace server side testing tools like <code>Capybara</code>.</li>\n<li><strong>Integrate with Server:</strong> Allow you to communicate directly to a backend server for seeding / querying.</li>\n<li><strong>Elimate Selenium:</strong> Eliminate the need to code or deal with <code>Selenium</code>.</li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<h1 id=\"Problems-with-current-front-end-testing-tools\"><a href=\"#Problems-with-current-front-end-testing-tools\" class=\"headerlink\" title=\"Problems with current front-end testing tools\"></a>Problems with current front-end testing tools</h1><p>There are clear benefits to testing code. But many <em>web applications</em> are not fully covered in tests. Why? There are many testing tools for the front end, but most (if not all) suffer from some problems.</p>\n<ul>\n<li><strong>Poor Setup:</strong> Testing environments take too long to setup.</li>\n<li><strong>Unreliable:</strong> Tests are often brittle, and randomly fail.</li>\n<li><strong>Time consuming:</strong> Running an entire test suite takes too long (sometimes hours).</li>\n<li><strong>No Cross Browser Support:</strong> Debugging across browsers and browser versions is very time consuming.</li>\n<li><strong>Obscure Error Messages:</strong> Error messages are obtuse, indirect, and increase the time it takes to debug.</li>\n<li><strong>Coupled dependencies:</strong> Integration tests are often coupled directly to the server.</li>\n<li><strong>Lacking fixture support:</strong> Handling mock data, or fixtures, is difficult.</li>\n<li><strong>Don’t encourage TDD:</strong> Testing often occurs <em>after</em> features are built because there isn’t an apparent test-driven development (TDD) flow.</li>\n<li><strong>Lack of integration testing:</strong> Even if unit testing JavaScript is reasonably simple, unit testing alone does not verify your application is fully functioning.</li>\n<li><strong>Async hell:</strong> Handling complicated asynchronous logic that is found on most modern single-page JavaScript applications is impossible.</li>\n<li><strong>No Visibility:</strong> Testing through a console is obscure and doesn’t give full visibility on the problems your users will face using your web application.</li>\n<li><strong>Buggy:</strong> Selenium drivers differ in implementation details which means code breaks across different browsers and browser versions.</li>\n</ul>\n<p>These are just a few reasons why it’s often difficult to test modern web applications. Often it takes longer to write a passing test for a feature, than to actually build the feature.</p>\n<p>There is a lot of mental friction when writing tests. Testing just becomes another layer to cut through. Because testing is often brittle, we lose confidence that our tests are delivering any additional value.</p>\n<p>Because of this complexity, most organizations have an entire Quality Assurance (QA) department dedicated to these tasks.</p>\n<blockquote>\n<p>Cypress aims to solve the biggest difficulties when it comes to testing web applications. It aims to reduce the mental effort required to write tests. Cypress works in your typical development workflow (in the browser) and allows you to see your application while it’s being tested. This enables you to practice TDD since there is no context shift between testing and development.</p>\n</blockquote>\n<hr>\n<h1 id=\"Goals-of-Cypress\"><a href=\"#Goals-of-Cypress\" class=\"headerlink\" title=\"Goals of Cypress\"></a>Goals of Cypress</h1><ul>\n<li><strong>Easy Setup:</strong> Allow you to write your first test in less than 5 minutes.</li>\n<li><strong>Automated:</strong> Allow you to drive your application with tests instead of manual interactions.</li>\n<li><strong>Easy Integration:</strong> Require zero code changes to your existing application.</li>\n<li><strong>In-Browser Testing:</strong> Integrate testing within your normal development process.</li>\n<li><strong>JavaScript:</strong> Allow you to write your test suite in JavaScript.</li>\n<li><strong>Enjoyable:</strong> Make writing tests an enjoyable, fun experience.</li>\n<li><strong>Opinionated:</strong> Encourage writing good tests.</li>\n<li><strong>Clear error messages:</strong> Provide <strong>clear</strong>, debuggable error messages.</li>\n<li><strong>Intelligent Network Requests:</strong> Make dealing with <code>AJAX/XHR</code> ridiculously simple.</li>\n<li><strong>Cross-browser support:</strong> Provide cross-browser testing and debugging <strong>without</strong> leaving Google Chrome and work in all modern browsers (<code>IE11+</code>)</li>\n<li><strong>CI Integration:</strong> Instantly integrate any Continuous Integration provider.</li>\n<li><strong>Accessible:</strong> Work with any JavaScript framework (current and future).</li>\n<li><strong>Flexible:</strong> Replace server side testing tools like <code>Capybara</code>.</li>\n<li><strong>Integrate with Server:</strong> Allow you to communicate directly to a backend server for seeding / querying.</li>\n<li><strong>Elimate Selenium:</strong> Eliminate the need to code or deal with <code>Selenium</code>.</li>\n</ul>\n"},{"_content":"slug: running-tests\nexcerpt: Run your tests\n\nThe test runner allows Cypress tests to be run in a web browser.\n\n# Command Log\n\n# Working in the Console\n\n","source":"incomplete/4-Guides/Running Tests.md","raw":"slug: running-tests\nexcerpt: Run your tests\n\nThe test runner allows Cypress tests to be run in a web browser.\n\n# Command Log\n\n# Working in the Console\n\n","date":"2017-04-19T18:46:47.000Z","updated":"2017-04-19T18:46:47.000Z","path":"incomplete/4-Guides/Running Tests.html","title":"","comments":1,"layout":"page","_id":"cj1pby1kx003b68g8b8ypnbcw","content":"<p>slug: running-tests<br>excerpt: Run your tests</p>\n<p>The test runner allows Cypress tests to be run in a web browser.</p>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h1 id=\"Working-in-the-Console\"><a href=\"#Working-in-the-Console\" class=\"headerlink\" title=\"Working in the Console\"></a>Working in the Console</h1>","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>slug: running-tests<br>excerpt: Run your tests</p>\n<p>The test runner allows Cypress tests to be run in a web browser.</p>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h1 id=\"Working-in-the-Console\"><a href=\"#Working-in-the-Console\" class=\"headerlink\" title=\"Working in the Console\"></a>Working in the Console</h1>"},{"_content":"slug: debugging-tools\nexcerpt: Debug Cypress\n\n# DOM Events\n\n# Page Events\n\nCypress will additionally log out when specific \"page events\" happen. These are events which alter the state of your application and can help provide insight and feedback into the logical order of what happened and when it happened.\n\nFor instance Cypress will log out the following:\n\n* Whenever your URL changes (and the new url)\n* Whenever the submit event is detected (from a traditional `<form>` submit)\n* Whenever the page begins to load (after clicking on an `<a>` or navigating to another page)\n* Whenever the page finishes loading\n* Whenever an XHR is issued (when the `cy.server` has been started)\n\n# Debugging Assertions\n\n- When assertions fail\n- Determining Subject Changes\n- Clicking on an assertion for more information\n- Inspecting Objects\n- Making multiple assertions","source":"incomplete/4-Guides/Debugging Tools.md","raw":"slug: debugging-tools\nexcerpt: Debug Cypress\n\n# DOM Events\n\n# Page Events\n\nCypress will additionally log out when specific \"page events\" happen. These are events which alter the state of your application and can help provide insight and feedback into the logical order of what happened and when it happened.\n\nFor instance Cypress will log out the following:\n\n* Whenever your URL changes (and the new url)\n* Whenever the submit event is detected (from a traditional `<form>` submit)\n* Whenever the page begins to load (after clicking on an `<a>` or navigating to another page)\n* Whenever the page finishes loading\n* Whenever an XHR is issued (when the `cy.server` has been started)\n\n# Debugging Assertions\n\n- When assertions fail\n- Determining Subject Changes\n- Clicking on an assertion for more information\n- Inspecting Objects\n- Making multiple assertions","date":"2017-04-19T18:46:47.000Z","updated":"2017-04-19T18:46:47.000Z","path":"incomplete/4-Guides/Debugging Tools.html","title":"","comments":1,"layout":"page","_id":"cj1pby1kx003c68g8wjdoh7du","content":"<p>slug: debugging-tools<br>excerpt: Debug Cypress</p>\n<h1 id=\"DOM-Events\"><a href=\"#DOM-Events\" class=\"headerlink\" title=\"DOM Events\"></a>DOM Events</h1><h1 id=\"Page-Events\"><a href=\"#Page-Events\" class=\"headerlink\" title=\"Page Events\"></a>Page Events</h1><p>Cypress will additionally log out when specific “page events” happen. These are events which alter the state of your application and can help provide insight and feedback into the logical order of what happened and when it happened.</p>\n<p>For instance Cypress will log out the following:</p>\n<ul>\n<li>Whenever your URL changes (and the new url)</li>\n<li>Whenever the submit event is detected (from a traditional <code>&lt;form&gt;</code> submit)</li>\n<li>Whenever the page begins to load (after clicking on an <code>&lt;a&gt;</code> or navigating to another page)</li>\n<li>Whenever the page finishes loading</li>\n<li>Whenever an XHR is issued (when the <code>cy.server</code> has been started)</li>\n</ul>\n<h1 id=\"Debugging-Assertions\"><a href=\"#Debugging-Assertions\" class=\"headerlink\" title=\"Debugging Assertions\"></a>Debugging Assertions</h1><ul>\n<li>When assertions fail</li>\n<li>Determining Subject Changes</li>\n<li>Clicking on an assertion for more information</li>\n<li>Inspecting Objects</li>\n<li>Making multiple assertions</li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>slug: debugging-tools<br>excerpt: Debug Cypress</p>\n<h1 id=\"DOM-Events\"><a href=\"#DOM-Events\" class=\"headerlink\" title=\"DOM Events\"></a>DOM Events</h1><h1 id=\"Page-Events\"><a href=\"#Page-Events\" class=\"headerlink\" title=\"Page Events\"></a>Page Events</h1><p>Cypress will additionally log out when specific “page events” happen. These are events which alter the state of your application and can help provide insight and feedback into the logical order of what happened and when it happened.</p>\n<p>For instance Cypress will log out the following:</p>\n<ul>\n<li>Whenever your URL changes (and the new url)</li>\n<li>Whenever the submit event is detected (from a traditional <code>&lt;form&gt;</code> submit)</li>\n<li>Whenever the page begins to load (after clicking on an <code>&lt;a&gt;</code> or navigating to another page)</li>\n<li>Whenever the page finishes loading</li>\n<li>Whenever an XHR is issued (when the <code>cy.server</code> has been started)</li>\n</ul>\n<h1 id=\"Debugging-Assertions\"><a href=\"#Debugging-Assertions\" class=\"headerlink\" title=\"Debugging Assertions\"></a>Debugging Assertions</h1><ul>\n<li>When assertions fail</li>\n<li>Determining Subject Changes</li>\n<li>Clicking on an assertion for more information</li>\n<li>Inspecting Objects</li>\n<li>Making multiple assertions</li>\n</ul>\n"},{"_content":"slug: websocket-handling\nexcerpt: Handle Websockets\n\nweb sockets need to be handled\n","source":"incomplete/4-Guides/Websocket Handling.md","raw":"slug: websocket-handling\nexcerpt: Handle Websockets\n\nweb sockets need to be handled\n","date":"2017-04-19T18:46:47.000Z","updated":"2017-04-19T18:46:47.000Z","path":"incomplete/4-Guides/Websocket Handling.html","title":"","comments":1,"layout":"page","_id":"cj1pby1ky003d68g86250bji8","content":"<p>slug: websocket-handling<br>excerpt: Handle Websockets</p>\n<p>web sockets need to be handled</p>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>slug: websocket-handling<br>excerpt: Handle Websockets</p>\n<p>web sockets need to be handled</p>\n"},{"_content":"slug: writing-tests\nexcerpt: Writing Tests\n\n# Only running one test\n\nAll tests have a `.only` method that can be used to run only one test or test suite.\n\n```javascript\n// this is the only test that will run when running test suite\nit.only(\"has 'Welcome' in title\", function(){\n  cy.title().should(\"include\", \"Welcome\")\n})\n``\n\n# Skipping a test\n\nAll tests have a `.skip` method that can be used to skip a test or test suite.\n\n```javascript\n// this test will not run when running test suite\nit.skip(\"button highlights as active\", function(){\n  cy.get(\"button\").should(\"have.class\", \"active\")\n})\n``\n","source":"incomplete/4-Guides/Writing Tests.md","raw":"slug: writing-tests\nexcerpt: Writing Tests\n\n# Only running one test\n\nAll tests have a `.only` method that can be used to run only one test or test suite.\n\n```javascript\n// this is the only test that will run when running test suite\nit.only(\"has 'Welcome' in title\", function(){\n  cy.title().should(\"include\", \"Welcome\")\n})\n``\n\n# Skipping a test\n\nAll tests have a `.skip` method that can be used to skip a test or test suite.\n\n```javascript\n// this test will not run when running test suite\nit.skip(\"button highlights as active\", function(){\n  cy.get(\"button\").should(\"have.class\", \"active\")\n})\n``\n","date":"2017-04-19T18:46:47.000Z","updated":"2017-04-19T18:46:47.000Z","path":"incomplete/4-Guides/Writing Tests.html","title":"","comments":1,"layout":"page","_id":"cj1pby1ky003e68g8ccyb6qmj","content":"<p>slug: writing-tests<br>excerpt: Writing Tests</p>\n<h1 id=\"Only-running-one-test\"><a href=\"#Only-running-one-test\" class=\"headerlink\" title=\"Only running one test\"></a>Only running one test</h1><p>All tests have a <code>.only</code> method that can be used to run only one test or test suite.</p>\n<p><code>`javascript\n// this is the only test that will run when running test suite\nit.only(&quot;has &#39;Welcome&#39; in title&quot;, function(){\n  cy.title().should(&quot;include&quot;, &quot;Welcome&quot;)\n})</code></p>\n<h1 id=\"Skipping-a-test\"><a href=\"#Skipping-a-test\" class=\"headerlink\" title=\"Skipping a test\"></a>Skipping a test</h1><p>All tests have a <code>.skip</code> method that can be used to skip a test or test suite.</p>\n<p><code>`javascript\n// this test will not run when running test suite\nit.skip(&quot;button highlights as active&quot;, function(){\n  cy.get(&quot;button&quot;).should(&quot;have.class&quot;, &quot;active&quot;)\n})</code></p>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>slug: writing-tests<br>excerpt: Writing Tests</p>\n<h1 id=\"Only-running-one-test\"><a href=\"#Only-running-one-test\" class=\"headerlink\" title=\"Only running one test\"></a>Only running one test</h1><p>All tests have a <code>.only</code> method that can be used to run only one test or test suite.</p>\n<p><code>`javascript\n// this is the only test that will run when running test suite\nit.only(&quot;has &#39;Welcome&#39; in title&quot;, function(){\n  cy.title().should(&quot;include&quot;, &quot;Welcome&quot;)\n})</code></p>\n<h1 id=\"Skipping-a-test\"><a href=\"#Skipping-a-test\" class=\"headerlink\" title=\"Skipping a test\"></a>Skipping a test</h1><p>All tests have a <code>.skip</code> method that can be used to skip a test or test suite.</p>\n<p><code>`javascript\n// this test will not run when running test suite\nit.skip(&quot;button highlights as active&quot;, function(){\n  cy.get(&quot;button&quot;).should(&quot;have.class&quot;, &quot;active&quot;)\n})</code></p>\n"},{"_content":"slug: common-assertions\nexcerpt: Cheatsheet for common assertions\n\nAlthough you'll find examples of assertions throughout the docs, we've grouped them all here.\n\n**DOM**\n- [Counting number of elements](#)\n- [Element existence](#)\n- [Element non-existance](#)\n- [Element text / content](#)\n- [Element visibility](#)\n- [Element attributes](#)\n- [Element values](#)\n- [Element classes](#)\n- [Element state](#)\n\n**XHR**\n\n- Element existence\n- Element non-existance\n- Element text / content\n- Element Visibility\n- Counting number of elements\n- Animations and Transitions\n- Classes and Properties\n- Request URL\n- Request Headers\n- Request Body\n- Counting number of requests\n- Verifying an object deep equals another object\n- Matching a property with regular expression\n- Matching the URL with a regular expression","source":"incomplete/5-References/Common Assertions.md","raw":"slug: common-assertions\nexcerpt: Cheatsheet for common assertions\n\nAlthough you'll find examples of assertions throughout the docs, we've grouped them all here.\n\n**DOM**\n- [Counting number of elements](#)\n- [Element existence](#)\n- [Element non-existance](#)\n- [Element text / content](#)\n- [Element visibility](#)\n- [Element attributes](#)\n- [Element values](#)\n- [Element classes](#)\n- [Element state](#)\n\n**XHR**\n\n- Element existence\n- Element non-existance\n- Element text / content\n- Element Visibility\n- Counting number of elements\n- Animations and Transitions\n- Classes and Properties\n- Request URL\n- Request Headers\n- Request Body\n- Counting number of requests\n- Verifying an object deep equals another object\n- Matching a property with regular expression\n- Matching the URL with a regular expression","date":"2017-04-19T18:46:47.000Z","updated":"2017-04-19T18:46:47.000Z","path":"incomplete/5-References/Common Assertions.html","title":"","comments":1,"layout":"page","_id":"cj1pby1kz003f68g870xsdbyp","content":"<p>slug: common-assertions<br>excerpt: Cheatsheet for common assertions</p>\n<p>Although you’ll find examples of assertions throughout the docs, we’ve grouped them all here.</p>\n<p><strong>DOM</strong></p>\n<ul>\n<li><a href=\"#\">Counting number of elements</a></li>\n<li><a href=\"#\">Element existence</a></li>\n<li><a href=\"#\">Element non-existance</a></li>\n<li><a href=\"#\">Element text / content</a></li>\n<li><a href=\"#\">Element visibility</a></li>\n<li><a href=\"#\">Element attributes</a></li>\n<li><a href=\"#\">Element values</a></li>\n<li><a href=\"#\">Element classes</a></li>\n<li><a href=\"#\">Element state</a></li>\n</ul>\n<p><strong>XHR</strong></p>\n<ul>\n<li>Element existence</li>\n<li>Element non-existance</li>\n<li>Element text / content</li>\n<li>Element Visibility</li>\n<li>Counting number of elements</li>\n<li>Animations and Transitions</li>\n<li>Classes and Properties</li>\n<li>Request URL</li>\n<li>Request Headers</li>\n<li>Request Body</li>\n<li>Counting number of requests</li>\n<li>Verifying an object deep equals another object</li>\n<li>Matching a property with regular expression</li>\n<li>Matching the URL with a regular expression</li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>slug: common-assertions<br>excerpt: Cheatsheet for common assertions</p>\n<p>Although you’ll find examples of assertions throughout the docs, we’ve grouped them all here.</p>\n<p><strong>DOM</strong></p>\n<ul>\n<li><a href=\"#\">Counting number of elements</a></li>\n<li><a href=\"#\">Element existence</a></li>\n<li><a href=\"#\">Element non-existance</a></li>\n<li><a href=\"#\">Element text / content</a></li>\n<li><a href=\"#\">Element visibility</a></li>\n<li><a href=\"#\">Element attributes</a></li>\n<li><a href=\"#\">Element values</a></li>\n<li><a href=\"#\">Element classes</a></li>\n<li><a href=\"#\">Element state</a></li>\n</ul>\n<p><strong>XHR</strong></p>\n<ul>\n<li>Element existence</li>\n<li>Element non-existance</li>\n<li>Element text / content</li>\n<li>Element Visibility</li>\n<li>Counting number of elements</li>\n<li>Animations and Transitions</li>\n<li>Classes and Properties</li>\n<li>Request URL</li>\n<li>Request Headers</li>\n<li>Request Body</li>\n<li>Counting number of requests</li>\n<li>Verifying an object deep equals another object</li>\n<li>Matching a property with regular expression</li>\n<li>Matching the URL with a regular expression</li>\n</ul>\n"},{"_content":"slug: deprecations\nexcerpt: Deprecations that require additional explanation will be listed here.\n\n# Contents\n\n- :fa-angle-right: [Passing `cy.server({stub: false})` is now deprecated](#section-passing-cy-server-stub-false-is-now-deprecated)\n- :fa-angle-right: [Passing `cy.route({stub: false})` is now deprecated](#section-passing-cy-route-stub-false-is-now-deprecated)\n- :fa-angle-right: [Cypress Package Renamed](#section-cypress-package-renamed)\n\n***\n\n# Passing `cy.server({stub: false})` is now deprecated\n\nIn previous versions of Cypress, to prevent Cypress from stubbing routes you had to explicitly tell your server not to stub routes like this:\n\n```javascript\ncy\n  .server({stub: false})\n  .route(...)\n```\n\nYou no longer have to do this. Whether a [cy.route](https://on.cypress.io/api/route) is stubbed or not is simply based on whether or not you specified a response in [cy.route](https://on.cypress.io/api/route).\n\n***\n\n# Passing `cy.route({stub: false})` is now deprecated\n\nIn previous versions of Cypress, [cy.route](https://on.cypress.io/api/route) would require a `response` unless you specified `stub: false` in its options.\n\nYou used to have to write this:\n\n```javascript\ncy\n  .server()\n  .route({url: /posts/, stub: false})\n```\n\nThis is now deprecated because Cypress automatically stubs [cy.route](https://on.cypress.io/api/route) based on whether or not it has a `response` property.\n\n```javascript\ncy\n  .server()\n  .route(/users/, [{}, {}])               // <-- stubbed because this has a response argument\n  .route({url: /comments/, response: []}) // <-- stubbed because this has a response property\n  .route(/posts/)                         // <-- not stubbed because there is no response argument or property\n```\n\n***\n\n# Cypress Package Renamed\n\n<img width=\"638\" alt=\"screen shot 2016-03-26 at 2 06 48 pm\" src=\"https://cloud.githubusercontent.com/assets/1268976/14061658/0f675e30-f35c-11e5-9765-ab0049a2653d.png\">\n\nIn previous versions of Cypress (below `0.15.0`) we distributed our CLI Tools under the package: `cypress`.\n\nAs of `0.15.0` the CLI Tools have now been renamed to the package `cypress-cli`.\n\nPlease update your scripts to use: `npm install -g cypress-cli`\n\nThis change was made for two reasons:\n\n- Users were confused thinking they were actually installing cypress when in fact they were installing the CLI tools.\n- Once we open source the Desktop Application it will be distributed under the `cypress` package\n\nHopefully this change will lead to less confusion over the versioning of both the `CLI Tools` and the `Cypress Desktop Application`.\n\nOnce `cypress` is open sourced you'll be able to set `cypress` as a `devDependency` and will not have to fuss with downloading or managing the Desktop Application.\n","source":"incomplete/5-References/Deprecations.md","raw":"slug: deprecations\nexcerpt: Deprecations that require additional explanation will be listed here.\n\n# Contents\n\n- :fa-angle-right: [Passing `cy.server({stub: false})` is now deprecated](#section-passing-cy-server-stub-false-is-now-deprecated)\n- :fa-angle-right: [Passing `cy.route({stub: false})` is now deprecated](#section-passing-cy-route-stub-false-is-now-deprecated)\n- :fa-angle-right: [Cypress Package Renamed](#section-cypress-package-renamed)\n\n***\n\n# Passing `cy.server({stub: false})` is now deprecated\n\nIn previous versions of Cypress, to prevent Cypress from stubbing routes you had to explicitly tell your server not to stub routes like this:\n\n```javascript\ncy\n  .server({stub: false})\n  .route(...)\n```\n\nYou no longer have to do this. Whether a [cy.route](https://on.cypress.io/api/route) is stubbed or not is simply based on whether or not you specified a response in [cy.route](https://on.cypress.io/api/route).\n\n***\n\n# Passing `cy.route({stub: false})` is now deprecated\n\nIn previous versions of Cypress, [cy.route](https://on.cypress.io/api/route) would require a `response` unless you specified `stub: false` in its options.\n\nYou used to have to write this:\n\n```javascript\ncy\n  .server()\n  .route({url: /posts/, stub: false})\n```\n\nThis is now deprecated because Cypress automatically stubs [cy.route](https://on.cypress.io/api/route) based on whether or not it has a `response` property.\n\n```javascript\ncy\n  .server()\n  .route(/users/, [{}, {}])               // <-- stubbed because this has a response argument\n  .route({url: /comments/, response: []}) // <-- stubbed because this has a response property\n  .route(/posts/)                         // <-- not stubbed because there is no response argument or property\n```\n\n***\n\n# Cypress Package Renamed\n\n<img width=\"638\" alt=\"screen shot 2016-03-26 at 2 06 48 pm\" src=\"https://cloud.githubusercontent.com/assets/1268976/14061658/0f675e30-f35c-11e5-9765-ab0049a2653d.png\">\n\nIn previous versions of Cypress (below `0.15.0`) we distributed our CLI Tools under the package: `cypress`.\n\nAs of `0.15.0` the CLI Tools have now been renamed to the package `cypress-cli`.\n\nPlease update your scripts to use: `npm install -g cypress-cli`\n\nThis change was made for two reasons:\n\n- Users were confused thinking they were actually installing cypress when in fact they were installing the CLI tools.\n- Once we open source the Desktop Application it will be distributed under the `cypress` package\n\nHopefully this change will lead to less confusion over the versioning of both the `CLI Tools` and the `Cypress Desktop Application`.\n\nOnce `cypress` is open sourced you'll be able to set `cypress` as a `devDependency` and will not have to fuss with downloading or managing the Desktop Application.\n","date":"2017-04-19T18:46:47.000Z","updated":"2017-04-19T18:46:47.000Z","path":"incomplete/5-References/Deprecations.html","title":"","comments":1,"layout":"page","_id":"cj1pby1kz003g68g87vi2bh6b","content":"<p>slug: deprecations<br>excerpt: Deprecations that require additional explanation will be listed here.</p>\n<h1 id=\"Contents\"><a href=\"#Contents\" class=\"headerlink\" title=\"Contents\"></a>Contents</h1><ul>\n<li>:fa-angle-right: <a href=\"#section-passing-cy-server-stub-false-is-now-deprecated\">Passing <code>cy.server({stub: false})</code> is now deprecated</a></li>\n<li>:fa-angle-right: <a href=\"#section-passing-cy-route-stub-false-is-now-deprecated\">Passing <code>cy.route({stub: false})</code> is now deprecated</a></li>\n<li>:fa-angle-right: <a href=\"#section-cypress-package-renamed\">Cypress Package Renamed</a></li>\n</ul>\n<hr>\n<h1 id=\"Passing-cy-server-stub-false-is-now-deprecated\"><a href=\"#Passing-cy-server-stub-false-is-now-deprecated\" class=\"headerlink\" title=\"Passing cy.server({stub: false}) is now deprecated\"></a>Passing <code>cy.server({stub: false})</code> is now deprecated</h1><p>In previous versions of Cypress, to prevent Cypress from stubbing routes you had to explicitly tell your server not to stub routes like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server(&#123;<span class=\"attr\">stub</span>: <span class=\"literal\">false</span>&#125;)</div><div class=\"line\">  .route(...)</div></pre></td></tr></table></figure>\n<p>You no longer have to do this. Whether a <a href=\"https://on.cypress.io/api/route\" target=\"_blank\" rel=\"external\">cy.route</a> is stubbed or not is simply based on whether or not you specified a response in <a href=\"https://on.cypress.io/api/route\" target=\"_blank\" rel=\"external\">cy.route</a>.</p>\n<hr>\n<h1 id=\"Passing-cy-route-stub-false-is-now-deprecated\"><a href=\"#Passing-cy-route-stub-false-is-now-deprecated\" class=\"headerlink\" title=\"Passing cy.route({stub: false}) is now deprecated\"></a>Passing <code>cy.route({stub: false})</code> is now deprecated</h1><p>In previous versions of Cypress, <a href=\"https://on.cypress.io/api/route\" target=\"_blank\" rel=\"external\">cy.route</a> would require a <code>response</code> unless you specified <code>stub: false</code> in its options.</p>\n<p>You used to have to write this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(&#123;<span class=\"attr\">url</span>: <span class=\"regexp\">/posts/</span>, <span class=\"attr\">stub</span>: <span class=\"literal\">false</span>&#125;)</div></pre></td></tr></table></figure>\n<p>This is now deprecated because Cypress automatically stubs <a href=\"https://on.cypress.io/api/route\" target=\"_blank\" rel=\"external\">cy.route</a> based on whether or not it has a <code>response</code> property.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"regexp\">/users/</span>, [&#123;&#125;, &#123;&#125;])               <span class=\"comment\">// &lt;-- stubbed because this has a response argument</span></div><div class=\"line\">  .route(&#123;<span class=\"attr\">url</span>: <span class=\"regexp\">/comments/</span>, <span class=\"attr\">response</span>: []&#125;) <span class=\"comment\">// &lt;-- stubbed because this has a response property</span></div><div class=\"line\">  .route(<span class=\"regexp\">/posts/</span>)                         <span class=\"comment\">// &lt;-- not stubbed because there is no response argument or property</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Cypress-Package-Renamed\"><a href=\"#Cypress-Package-Renamed\" class=\"headerlink\" title=\"Cypress Package Renamed\"></a>Cypress Package Renamed</h1><p><img width=\"638\" alt=\"screen shot 2016-03-26 at 2 06 48 pm\" src=\"https://cloud.githubusercontent.com/assets/1268976/14061658/0f675e30-f35c-11e5-9765-ab0049a2653d.png\"></p>\n<p>In previous versions of Cypress (below <code>0.15.0</code>) we distributed our CLI Tools under the package: <code>cypress</code>.</p>\n<p>As of <code>0.15.0</code> the CLI Tools have now been renamed to the package <code>cypress-cli</code>.</p>\n<p>Please update your scripts to use: <code>npm install -g cypress-cli</code></p>\n<p>This change was made for two reasons:</p>\n<ul>\n<li>Users were confused thinking they were actually installing cypress when in fact they were installing the CLI tools.</li>\n<li>Once we open source the Desktop Application it will be distributed under the <code>cypress</code> package</li>\n</ul>\n<p>Hopefully this change will lead to less confusion over the versioning of both the <code>CLI Tools</code> and the <code>Cypress Desktop Application</code>.</p>\n<p>Once <code>cypress</code> is open sourced you’ll be able to set <code>cypress</code> as a <code>devDependency</code> and will not have to fuss with downloading or managing the Desktop Application.</p>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>slug: deprecations<br>excerpt: Deprecations that require additional explanation will be listed here.</p>\n<h1 id=\"Contents\"><a href=\"#Contents\" class=\"headerlink\" title=\"Contents\"></a>Contents</h1><ul>\n<li>:fa-angle-right: <a href=\"#section-passing-cy-server-stub-false-is-now-deprecated\">Passing <code>cy.server({stub: false})</code> is now deprecated</a></li>\n<li>:fa-angle-right: <a href=\"#section-passing-cy-route-stub-false-is-now-deprecated\">Passing <code>cy.route({stub: false})</code> is now deprecated</a></li>\n<li>:fa-angle-right: <a href=\"#section-cypress-package-renamed\">Cypress Package Renamed</a></li>\n</ul>\n<hr>\n<h1 id=\"Passing-cy-server-stub-false-is-now-deprecated\"><a href=\"#Passing-cy-server-stub-false-is-now-deprecated\" class=\"headerlink\" title=\"Passing cy.server({stub: false}) is now deprecated\"></a>Passing <code>cy.server({stub: false})</code> is now deprecated</h1><p>In previous versions of Cypress, to prevent Cypress from stubbing routes you had to explicitly tell your server not to stub routes like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server(&#123;<span class=\"attr\">stub</span>: <span class=\"literal\">false</span>&#125;)</div><div class=\"line\">  .route(...)</div></pre></td></tr></table></figure>\n<p>You no longer have to do this. Whether a <a href=\"https://on.cypress.io/api/route\">cy.route</a> is stubbed or not is simply based on whether or not you specified a response in <a href=\"https://on.cypress.io/api/route\">cy.route</a>.</p>\n<hr>\n<h1 id=\"Passing-cy-route-stub-false-is-now-deprecated\"><a href=\"#Passing-cy-route-stub-false-is-now-deprecated\" class=\"headerlink\" title=\"Passing cy.route({stub: false}) is now deprecated\"></a>Passing <code>cy.route({stub: false})</code> is now deprecated</h1><p>In previous versions of Cypress, <a href=\"https://on.cypress.io/api/route\">cy.route</a> would require a <code>response</code> unless you specified <code>stub: false</code> in its options.</p>\n<p>You used to have to write this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(&#123;<span class=\"attr\">url</span>: <span class=\"regexp\">/posts/</span>, <span class=\"attr\">stub</span>: <span class=\"literal\">false</span>&#125;)</div></pre></td></tr></table></figure>\n<p>This is now deprecated because Cypress automatically stubs <a href=\"https://on.cypress.io/api/route\">cy.route</a> based on whether or not it has a <code>response</code> property.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"regexp\">/users/</span>, [&#123;&#125;, &#123;&#125;])               <span class=\"comment\">// &lt;-- stubbed because this has a response argument</span></div><div class=\"line\">  .route(&#123;<span class=\"attr\">url</span>: <span class=\"regexp\">/comments/</span>, <span class=\"attr\">response</span>: []&#125;) <span class=\"comment\">// &lt;-- stubbed because this has a response property</span></div><div class=\"line\">  .route(<span class=\"regexp\">/posts/</span>)                         <span class=\"comment\">// &lt;-- not stubbed because there is no response argument or property</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Cypress-Package-Renamed\"><a href=\"#Cypress-Package-Renamed\" class=\"headerlink\" title=\"Cypress Package Renamed\"></a>Cypress Package Renamed</h1><p><img width=\"638\" alt=\"screen shot 2016-03-26 at 2 06 48 pm\" src=\"https://cloud.githubusercontent.com/assets/1268976/14061658/0f675e30-f35c-11e5-9765-ab0049a2653d.png\"></p>\n<p>In previous versions of Cypress (below <code>0.15.0</code>) we distributed our CLI Tools under the package: <code>cypress</code>.</p>\n<p>As of <code>0.15.0</code> the CLI Tools have now been renamed to the package <code>cypress-cli</code>.</p>\n<p>Please update your scripts to use: <code>npm install -g cypress-cli</code></p>\n<p>This change was made for two reasons:</p>\n<ul>\n<li>Users were confused thinking they were actually installing cypress when in fact they were installing the CLI tools.</li>\n<li>Once we open source the Desktop Application it will be distributed under the <code>cypress</code> package</li>\n</ul>\n<p>Hopefully this change will lead to less confusion over the versioning of both the <code>CLI Tools</code> and the <code>Cypress Desktop Application</code>.</p>\n<p>Once <code>cypress</code> is open sourced you’ll be able to set <code>cypress</code> as a <code>devDependency</code> and will not have to fuss with downloading or managing the Desktop Application.</p>\n"},{"_content":"slug: faq\nexcerpt: Frequently Asked Questions\n\n# What kinds of applications can I test with Cypress?\nCypress was originally designed to be used in modern JavaScript applications, but Cypress works perfectly on traditional server-side HTML based applications as well.\n\nThe API scales well in both situations, however there are certain commands which are useful primarily in JavaScript-based applications and won't see much use in traditional server-side applications.\n\nCypress enables you to pick the best testing strategy. You may choose not to involve the server for most tests (which is a good thing) and mock all requests/responses to and from the server. You may also choose to perform full-blown integration tests, where no data is mocked, and everything goes through the server. The implementation is completely up to you.\n\n# What backend servers is Cypress compatible with?\nAny and all. Ruby, Node, C#, PHP, none of that matters. You'll write your tests in Javascript, but beyond that Cypress will work everywhere. To talk directly to your backend from your tests, you will need one of our adapters. Read on for more information on that.\n\n# Does Cypress require me to change any of my existing code?\nNo. But if you're wanting to test parts of your application which are not easily testable, you'll need to refactor those as you would for any testing.\n\n# How is this different than Mocha, Karma, Capybara, Protractor, SauceLabs, etc?\nCypress is kind of a hybrid application/framework/service all rolled into one. It takes a little bit of each of those tools and brings them all together.\n\n**Mocha** <br>\n[Mocha](http://mochajs.org/) is a testing framework for JavaScript. Mocha gives you the `it`, `describe`, `beforeEach` methods. Cypress isn't **different** from Mocha, it actually **uses** Mocha under the hood. All of your tests will be written on top of Mocha's `bdd` interface.\n\n**Karma** <br>\n[Karma](http://karma-runner.github.io/) is a unit testing runner for JavaScript, which can work with either `Jasmine`, `Mocha`, or another JavaScript testing framework.\n\nKarma also watches your JavaScript files, live reloads when they change, and is also the `reporter` for your tests failing / passing. It runs from the command line.\n\nCypress would essentially replace Karma because it does all of this and much more.\n\n**Capybara** <br>\nCapybara is a `Ruby` specific tool which allows you to write integration tests for your web application. In the Rails world, this is the *go-to* tool for testing your application. It uses `Selenium` or another headless driver under the hood to interact with browsers. It's API consists of commands which query for DOM elements, perform user actions, navigate around, etc.\n\nCypress would essentially replace Capybara because it does all of these things, and much more. The difference is that instead of testing your application in a GUI-less console, you'd see your application at all times. You'd never have to take a screenshot to debug because all commands instantly provide you the state of your application when they run. Upon any command failing, you'll get a human-readable error explaining why it failed. There's no \"guessing\" when debugging.\n\nIn my experience, Capybara begins to melt down on complex JavaScript applications. Additionally, trying to TDD your application is virtually impossible. You often have to resort to writing your application code first (typically manually refreshing your browser after changes) until you get it working. From there you write tests, but lose the entire value of TDD. These tests often feel \"tacked\" on, especially when it becomes harder to write a passing test when you can just open up your browser and see that it is already working.\n\n**Protractor** <br>\nProtractor is basically the `Capybara` of the JavaScript world. It provides a nice Promise-based interface on top of Selenium, which makes it easy to deal with async code. Protractor comes with all of the features of Capybara but essentially suffers from the same problems.\n\nCypress would replace Protractor because it does all of these things and much more. One major difference is that Cypress enables you to write your unit tests and integration tests in the same tool, as opposed to splitting up this work across both Karma and Protractor. Also, Protractor is very much focused on `AngularJS`, whereas Cypress works with all JavaScript frameworks. Protractor, because it's based on Selenium, is still pretty slow, and is prohibitive when trying to TDD your application. Cypress on the other hand will run at the maximum speed your browser and application are capable of serving and rendering, there is no additional bloat.\n\n**SauceLabs** <br>\n[SauceLabs](https://saucelabs.com/) is a 3rd party tool which enables Selenium-based tests to be run across various browsers and operating systems. Additionally, they have a JS Unit Testing tool which isn't Selenium focused.\n\nSauceLabs also has a `manual testing` mode, where you can remotely control browsers in the cloud as if they were installed on your machine.\n\nCypress does not replace SauceLabs, in fact it compliments it. We are currently working on our own manual testing mode for browsers, but it is considerably different than what SauceLabs provides. That is the only overlapping feature.\n\nCypress's API is written to be completely compatible with SauceLabs, even though our API is not Selenium based at all. At the end of the day, you'll be able to enter your SauceLabs API key directly into Cypress, and  run all of your tests across various browser combinations / operating systems. The results will be made available directly in Cypress.\n\nUltimately SauceLabs and Cypress offer very different value propositions. SauceLabs doesn't help you write your tests, it takes your existing tests and runs them across different browsers and aggregates the results for you.\n\nCypress on the other hand **helps** you write your tests. You would use Cypress every day, building and testing your application, and then use SauceLabs to ensure your application works on every browser.\n\nThe overlapping feature, **manually testing browsers** is different from a workflow perspective.\n\nCurrently, without Cypress, when you get errors from SauceLabs, you would then proceed to **debug** your application in that specific browser. This is where manually testing comes in handy. You could do that from SauceLabs tool, which means you'd navigate to their service and connect to your local server. You could then make a code change, refresh, manually recreate the bug, and debug in the other browser (with the other browser's native debugging tools). This can be tedious and time consuming. After fixing the bug you'd have to rerun your tests across all of the browsers again to see if anything else broke.\n\nWith Cypress, you'd still get errors from SauceLabs, but instead of leaving Cypress, you could use Cypress to create a manual session with that failing browser. Once connected to the other browser, you could see the error message in Cypress and proceed to debug it. As you make code changes, all of your Cypress commands would drive the other browser. The end result is that you'd see and debug another browser from within Google Chrome, using the same interface you use while developing locally.\n\n# If Cypress runs in the browser, doesn't that mean it's sandboxed?\nYes, technically; it's sandboxed and has to follow the same rules as every other browser. That's actually a good thing because it doesn't require a browser extension, and it naturally works across all browsers (which enables cross-browser testing).\n\nBut Cypress is actually way beyond just a basic JavaScript application running in the browser. That's one part, but it's also a `Desktop Application`, communicates with backend web services, and has language-specific adapters which are installed in your project.\n\nAll of these technologies together are coordinated and enable Cypress to work, which extends its capabilities far outside of the browser sandbox. Without these, Cypress would not work at all. While it's possible limitations may arise, these will be the minority. For the vast majority of your web development, Cypress will work just fine, and already **does** work.\n\n# Seriously, I know there are security restrictions for JavaScript running in the browser!\nSeriously, Cypress has already solved these issues transparently without it causing you to change anything in your application. Everything should just work. Even clearing all cookies from JavaScript.\n\n# Since Cypress runs in the browser, how can it talk to my backend?\nWhile you'll always write your tests in JavaScript, it's often important to talk to your backend prior to a test running, or throughout a test, or even after a test finishes. Regardless of which type of application you have, or plan to build, Cypress can communicate with the backend through one of its adapters. We are currently building adapters for:\n\n* Rails\n* Node\n* .NET\n* PHP\n\nEach adapter will be made available in each language's package system, and will have separate repositories detailing the installation, configuration, etc. Using these adapters will allow Cypress to pass messages to the backend for things like:\n\n* Querying the database\n* Seeding the database\n* Requesting specific data\n* Asking if emails were sent\n* Anything else your backend needs to provide\n\nAs is the philosophy of Cypress, using these adapters should be painless and simple to install. Error messages will display directly in the browser and you'll be able to diagnose / debug easily.\n\nThese adapters are completely optional and are only necessary if you intend to test end to end with your server. If you only write JavaScript unit tests or mock request/responses you won't need these.\n\n# We use WebSockets, will Cypress work with that?\nYes.\n\n# Will Cypress work for my CI provider?\nYes.\n\n# We have the craziest most insane authentication system ever, will Cypress work with that?\nIf you're using some crazy thumb-print, retinal-scan, time-based, key-changing, microphone audial decoding mechanism to log in your users, then no, Cypress won't work with that.  But seriously, Cypress is a **development** tool, which makes it easy to test your web applications. If your application is doing 100x things to make it extremely difficult to access, Cypress won't magically make it any easier.\n\nBecause Cypress is a development tool, you can always make your application more accessible while in your development environment. If you want, simply disable crazy steps in your authentication systems while you're in your testing environment. After all, that's why we have different environments! Normally you already have a development environment, a testing environment, a staging environment, and a production environment.  So simply expose the parts of your system you want accessible in each appropriate environment.\n\nIn doing so, Cypress may not be able to give you 100% coverage without you changing anything, but that's okay. Just use different tools to test the crazier, less accessible parts of your application, and let Cypress test the other 99%.\n\nJust remember, Cypress won't make a non-testable application suddenly testable. It's on your shoulders to architect your code in an accessible manner.\n\n# I have an insanely complex JavaScript application with dragging and dropping, complex virtual DOM interactions, async loading templates, two-way-data-binding, pushState routing, all on the latest and greatest JS framework which I wrote and released today... will Cypress work?\nYes, definitely yes.\n\n# Can I use Cypress to script user-actions on an external site like `gmail.com`?\nNo. There are already lots of tools to do that. Using Cypress to test against a 3rd party application is not supported. It **may** work but will defeat the purpose of why it was created. You use Cypress *while* you develop **your** application, it helps you write your tests.","source":"incomplete/5-References/FAQ.md","raw":"slug: faq\nexcerpt: Frequently Asked Questions\n\n# What kinds of applications can I test with Cypress?\nCypress was originally designed to be used in modern JavaScript applications, but Cypress works perfectly on traditional server-side HTML based applications as well.\n\nThe API scales well in both situations, however there are certain commands which are useful primarily in JavaScript-based applications and won't see much use in traditional server-side applications.\n\nCypress enables you to pick the best testing strategy. You may choose not to involve the server for most tests (which is a good thing) and mock all requests/responses to and from the server. You may also choose to perform full-blown integration tests, where no data is mocked, and everything goes through the server. The implementation is completely up to you.\n\n# What backend servers is Cypress compatible with?\nAny and all. Ruby, Node, C#, PHP, none of that matters. You'll write your tests in Javascript, but beyond that Cypress will work everywhere. To talk directly to your backend from your tests, you will need one of our adapters. Read on for more information on that.\n\n# Does Cypress require me to change any of my existing code?\nNo. But if you're wanting to test parts of your application which are not easily testable, you'll need to refactor those as you would for any testing.\n\n# How is this different than Mocha, Karma, Capybara, Protractor, SauceLabs, etc?\nCypress is kind of a hybrid application/framework/service all rolled into one. It takes a little bit of each of those tools and brings them all together.\n\n**Mocha** <br>\n[Mocha](http://mochajs.org/) is a testing framework for JavaScript. Mocha gives you the `it`, `describe`, `beforeEach` methods. Cypress isn't **different** from Mocha, it actually **uses** Mocha under the hood. All of your tests will be written on top of Mocha's `bdd` interface.\n\n**Karma** <br>\n[Karma](http://karma-runner.github.io/) is a unit testing runner for JavaScript, which can work with either `Jasmine`, `Mocha`, or another JavaScript testing framework.\n\nKarma also watches your JavaScript files, live reloads when they change, and is also the `reporter` for your tests failing / passing. It runs from the command line.\n\nCypress would essentially replace Karma because it does all of this and much more.\n\n**Capybara** <br>\nCapybara is a `Ruby` specific tool which allows you to write integration tests for your web application. In the Rails world, this is the *go-to* tool for testing your application. It uses `Selenium` or another headless driver under the hood to interact with browsers. It's API consists of commands which query for DOM elements, perform user actions, navigate around, etc.\n\nCypress would essentially replace Capybara because it does all of these things, and much more. The difference is that instead of testing your application in a GUI-less console, you'd see your application at all times. You'd never have to take a screenshot to debug because all commands instantly provide you the state of your application when they run. Upon any command failing, you'll get a human-readable error explaining why it failed. There's no \"guessing\" when debugging.\n\nIn my experience, Capybara begins to melt down on complex JavaScript applications. Additionally, trying to TDD your application is virtually impossible. You often have to resort to writing your application code first (typically manually refreshing your browser after changes) until you get it working. From there you write tests, but lose the entire value of TDD. These tests often feel \"tacked\" on, especially when it becomes harder to write a passing test when you can just open up your browser and see that it is already working.\n\n**Protractor** <br>\nProtractor is basically the `Capybara` of the JavaScript world. It provides a nice Promise-based interface on top of Selenium, which makes it easy to deal with async code. Protractor comes with all of the features of Capybara but essentially suffers from the same problems.\n\nCypress would replace Protractor because it does all of these things and much more. One major difference is that Cypress enables you to write your unit tests and integration tests in the same tool, as opposed to splitting up this work across both Karma and Protractor. Also, Protractor is very much focused on `AngularJS`, whereas Cypress works with all JavaScript frameworks. Protractor, because it's based on Selenium, is still pretty slow, and is prohibitive when trying to TDD your application. Cypress on the other hand will run at the maximum speed your browser and application are capable of serving and rendering, there is no additional bloat.\n\n**SauceLabs** <br>\n[SauceLabs](https://saucelabs.com/) is a 3rd party tool which enables Selenium-based tests to be run across various browsers and operating systems. Additionally, they have a JS Unit Testing tool which isn't Selenium focused.\n\nSauceLabs also has a `manual testing` mode, where you can remotely control browsers in the cloud as if they were installed on your machine.\n\nCypress does not replace SauceLabs, in fact it compliments it. We are currently working on our own manual testing mode for browsers, but it is considerably different than what SauceLabs provides. That is the only overlapping feature.\n\nCypress's API is written to be completely compatible with SauceLabs, even though our API is not Selenium based at all. At the end of the day, you'll be able to enter your SauceLabs API key directly into Cypress, and  run all of your tests across various browser combinations / operating systems. The results will be made available directly in Cypress.\n\nUltimately SauceLabs and Cypress offer very different value propositions. SauceLabs doesn't help you write your tests, it takes your existing tests and runs them across different browsers and aggregates the results for you.\n\nCypress on the other hand **helps** you write your tests. You would use Cypress every day, building and testing your application, and then use SauceLabs to ensure your application works on every browser.\n\nThe overlapping feature, **manually testing browsers** is different from a workflow perspective.\n\nCurrently, without Cypress, when you get errors from SauceLabs, you would then proceed to **debug** your application in that specific browser. This is where manually testing comes in handy. You could do that from SauceLabs tool, which means you'd navigate to their service and connect to your local server. You could then make a code change, refresh, manually recreate the bug, and debug in the other browser (with the other browser's native debugging tools). This can be tedious and time consuming. After fixing the bug you'd have to rerun your tests across all of the browsers again to see if anything else broke.\n\nWith Cypress, you'd still get errors from SauceLabs, but instead of leaving Cypress, you could use Cypress to create a manual session with that failing browser. Once connected to the other browser, you could see the error message in Cypress and proceed to debug it. As you make code changes, all of your Cypress commands would drive the other browser. The end result is that you'd see and debug another browser from within Google Chrome, using the same interface you use while developing locally.\n\n# If Cypress runs in the browser, doesn't that mean it's sandboxed?\nYes, technically; it's sandboxed and has to follow the same rules as every other browser. That's actually a good thing because it doesn't require a browser extension, and it naturally works across all browsers (which enables cross-browser testing).\n\nBut Cypress is actually way beyond just a basic JavaScript application running in the browser. That's one part, but it's also a `Desktop Application`, communicates with backend web services, and has language-specific adapters which are installed in your project.\n\nAll of these technologies together are coordinated and enable Cypress to work, which extends its capabilities far outside of the browser sandbox. Without these, Cypress would not work at all. While it's possible limitations may arise, these will be the minority. For the vast majority of your web development, Cypress will work just fine, and already **does** work.\n\n# Seriously, I know there are security restrictions for JavaScript running in the browser!\nSeriously, Cypress has already solved these issues transparently without it causing you to change anything in your application. Everything should just work. Even clearing all cookies from JavaScript.\n\n# Since Cypress runs in the browser, how can it talk to my backend?\nWhile you'll always write your tests in JavaScript, it's often important to talk to your backend prior to a test running, or throughout a test, or even after a test finishes. Regardless of which type of application you have, or plan to build, Cypress can communicate with the backend through one of its adapters. We are currently building adapters for:\n\n* Rails\n* Node\n* .NET\n* PHP\n\nEach adapter will be made available in each language's package system, and will have separate repositories detailing the installation, configuration, etc. Using these adapters will allow Cypress to pass messages to the backend for things like:\n\n* Querying the database\n* Seeding the database\n* Requesting specific data\n* Asking if emails were sent\n* Anything else your backend needs to provide\n\nAs is the philosophy of Cypress, using these adapters should be painless and simple to install. Error messages will display directly in the browser and you'll be able to diagnose / debug easily.\n\nThese adapters are completely optional and are only necessary if you intend to test end to end with your server. If you only write JavaScript unit tests or mock request/responses you won't need these.\n\n# We use WebSockets, will Cypress work with that?\nYes.\n\n# Will Cypress work for my CI provider?\nYes.\n\n# We have the craziest most insane authentication system ever, will Cypress work with that?\nIf you're using some crazy thumb-print, retinal-scan, time-based, key-changing, microphone audial decoding mechanism to log in your users, then no, Cypress won't work with that.  But seriously, Cypress is a **development** tool, which makes it easy to test your web applications. If your application is doing 100x things to make it extremely difficult to access, Cypress won't magically make it any easier.\n\nBecause Cypress is a development tool, you can always make your application more accessible while in your development environment. If you want, simply disable crazy steps in your authentication systems while you're in your testing environment. After all, that's why we have different environments! Normally you already have a development environment, a testing environment, a staging environment, and a production environment.  So simply expose the parts of your system you want accessible in each appropriate environment.\n\nIn doing so, Cypress may not be able to give you 100% coverage without you changing anything, but that's okay. Just use different tools to test the crazier, less accessible parts of your application, and let Cypress test the other 99%.\n\nJust remember, Cypress won't make a non-testable application suddenly testable. It's on your shoulders to architect your code in an accessible manner.\n\n# I have an insanely complex JavaScript application with dragging and dropping, complex virtual DOM interactions, async loading templates, two-way-data-binding, pushState routing, all on the latest and greatest JS framework which I wrote and released today... will Cypress work?\nYes, definitely yes.\n\n# Can I use Cypress to script user-actions on an external site like `gmail.com`?\nNo. There are already lots of tools to do that. Using Cypress to test against a 3rd party application is not supported. It **may** work but will defeat the purpose of why it was created. You use Cypress *while* you develop **your** application, it helps you write your tests.","date":"2017-04-19T18:46:47.000Z","updated":"2017-04-19T18:46:47.000Z","path":"incomplete/5-References/FAQ.html","title":"","comments":1,"layout":"page","_id":"cj1pby1kz003h68g8f8gj42c6","content":"<p>slug: faq<br>excerpt: Frequently Asked Questions</p>\n<h1 id=\"What-kinds-of-applications-can-I-test-with-Cypress\"><a href=\"#What-kinds-of-applications-can-I-test-with-Cypress\" class=\"headerlink\" title=\"What kinds of applications can I test with Cypress?\"></a>What kinds of applications can I test with Cypress?</h1><p>Cypress was originally designed to be used in modern JavaScript applications, but Cypress works perfectly on traditional server-side HTML based applications as well.</p>\n<p>The API scales well in both situations, however there are certain commands which are useful primarily in JavaScript-based applications and won’t see much use in traditional server-side applications.</p>\n<p>Cypress enables you to pick the best testing strategy. You may choose not to involve the server for most tests (which is a good thing) and mock all requests/responses to and from the server. You may also choose to perform full-blown integration tests, where no data is mocked, and everything goes through the server. The implementation is completely up to you.</p>\n<h1 id=\"What-backend-servers-is-Cypress-compatible-with\"><a href=\"#What-backend-servers-is-Cypress-compatible-with\" class=\"headerlink\" title=\"What backend servers is Cypress compatible with?\"></a>What backend servers is Cypress compatible with?</h1><p>Any and all. Ruby, Node, C#, PHP, none of that matters. You’ll write your tests in Javascript, but beyond that Cypress will work everywhere. To talk directly to your backend from your tests, you will need one of our adapters. Read on for more information on that.</p>\n<h1 id=\"Does-Cypress-require-me-to-change-any-of-my-existing-code\"><a href=\"#Does-Cypress-require-me-to-change-any-of-my-existing-code\" class=\"headerlink\" title=\"Does Cypress require me to change any of my existing code?\"></a>Does Cypress require me to change any of my existing code?</h1><p>No. But if you’re wanting to test parts of your application which are not easily testable, you’ll need to refactor those as you would for any testing.</p>\n<h1 id=\"How-is-this-different-than-Mocha-Karma-Capybara-Protractor-SauceLabs-etc\"><a href=\"#How-is-this-different-than-Mocha-Karma-Capybara-Protractor-SauceLabs-etc\" class=\"headerlink\" title=\"How is this different than Mocha, Karma, Capybara, Protractor, SauceLabs, etc?\"></a>How is this different than Mocha, Karma, Capybara, Protractor, SauceLabs, etc?</h1><p>Cypress is kind of a hybrid application/framework/service all rolled into one. It takes a little bit of each of those tools and brings them all together.</p>\n<p><strong>Mocha</strong> <br><br><a href=\"http://mochajs.org/\" target=\"_blank\" rel=\"external\">Mocha</a> is a testing framework for JavaScript. Mocha gives you the <code>it</code>, <code>describe</code>, <code>beforeEach</code> methods. Cypress isn’t <strong>different</strong> from Mocha, it actually <strong>uses</strong> Mocha under the hood. All of your tests will be written on top of Mocha’s <code>bdd</code> interface.</p>\n<p><strong>Karma</strong> <br><br><a href=\"http://karma-runner.github.io/\" target=\"_blank\" rel=\"external\">Karma</a> is a unit testing runner for JavaScript, which can work with either <code>Jasmine</code>, <code>Mocha</code>, or another JavaScript testing framework.</p>\n<p>Karma also watches your JavaScript files, live reloads when they change, and is also the <code>reporter</code> for your tests failing / passing. It runs from the command line.</p>\n<p>Cypress would essentially replace Karma because it does all of this and much more.</p>\n<p><strong>Capybara</strong> <br><br>Capybara is a <code>Ruby</code> specific tool which allows you to write integration tests for your web application. In the Rails world, this is the <em>go-to</em> tool for testing your application. It uses <code>Selenium</code> or another headless driver under the hood to interact with browsers. It’s API consists of commands which query for DOM elements, perform user actions, navigate around, etc.</p>\n<p>Cypress would essentially replace Capybara because it does all of these things, and much more. The difference is that instead of testing your application in a GUI-less console, you’d see your application at all times. You’d never have to take a screenshot to debug because all commands instantly provide you the state of your application when they run. Upon any command failing, you’ll get a human-readable error explaining why it failed. There’s no “guessing” when debugging.</p>\n<p>In my experience, Capybara begins to melt down on complex JavaScript applications. Additionally, trying to TDD your application is virtually impossible. You often have to resort to writing your application code first (typically manually refreshing your browser after changes) until you get it working. From there you write tests, but lose the entire value of TDD. These tests often feel “tacked” on, especially when it becomes harder to write a passing test when you can just open up your browser and see that it is already working.</p>\n<p><strong>Protractor</strong> <br><br>Protractor is basically the <code>Capybara</code> of the JavaScript world. It provides a nice Promise-based interface on top of Selenium, which makes it easy to deal with async code. Protractor comes with all of the features of Capybara but essentially suffers from the same problems.</p>\n<p>Cypress would replace Protractor because it does all of these things and much more. One major difference is that Cypress enables you to write your unit tests and integration tests in the same tool, as opposed to splitting up this work across both Karma and Protractor. Also, Protractor is very much focused on <code>AngularJS</code>, whereas Cypress works with all JavaScript frameworks. Protractor, because it’s based on Selenium, is still pretty slow, and is prohibitive when trying to TDD your application. Cypress on the other hand will run at the maximum speed your browser and application are capable of serving and rendering, there is no additional bloat.</p>\n<p><strong>SauceLabs</strong> <br><br><a href=\"https://saucelabs.com/\" target=\"_blank\" rel=\"external\">SauceLabs</a> is a 3rd party tool which enables Selenium-based tests to be run across various browsers and operating systems. Additionally, they have a JS Unit Testing tool which isn’t Selenium focused.</p>\n<p>SauceLabs also has a <code>manual testing</code> mode, where you can remotely control browsers in the cloud as if they were installed on your machine.</p>\n<p>Cypress does not replace SauceLabs, in fact it compliments it. We are currently working on our own manual testing mode for browsers, but it is considerably different than what SauceLabs provides. That is the only overlapping feature.</p>\n<p>Cypress’s API is written to be completely compatible with SauceLabs, even though our API is not Selenium based at all. At the end of the day, you’ll be able to enter your SauceLabs API key directly into Cypress, and  run all of your tests across various browser combinations / operating systems. The results will be made available directly in Cypress.</p>\n<p>Ultimately SauceLabs and Cypress offer very different value propositions. SauceLabs doesn’t help you write your tests, it takes your existing tests and runs them across different browsers and aggregates the results for you.</p>\n<p>Cypress on the other hand <strong>helps</strong> you write your tests. You would use Cypress every day, building and testing your application, and then use SauceLabs to ensure your application works on every browser.</p>\n<p>The overlapping feature, <strong>manually testing browsers</strong> is different from a workflow perspective.</p>\n<p>Currently, without Cypress, when you get errors from SauceLabs, you would then proceed to <strong>debug</strong> your application in that specific browser. This is where manually testing comes in handy. You could do that from SauceLabs tool, which means you’d navigate to their service and connect to your local server. You could then make a code change, refresh, manually recreate the bug, and debug in the other browser (with the other browser’s native debugging tools). This can be tedious and time consuming. After fixing the bug you’d have to rerun your tests across all of the browsers again to see if anything else broke.</p>\n<p>With Cypress, you’d still get errors from SauceLabs, but instead of leaving Cypress, you could use Cypress to create a manual session with that failing browser. Once connected to the other browser, you could see the error message in Cypress and proceed to debug it. As you make code changes, all of your Cypress commands would drive the other browser. The end result is that you’d see and debug another browser from within Google Chrome, using the same interface you use while developing locally.</p>\n<h1 id=\"If-Cypress-runs-in-the-browser-doesn’t-that-mean-it’s-sandboxed\"><a href=\"#If-Cypress-runs-in-the-browser-doesn’t-that-mean-it’s-sandboxed\" class=\"headerlink\" title=\"If Cypress runs in the browser, doesn’t that mean it’s sandboxed?\"></a>If Cypress runs in the browser, doesn’t that mean it’s sandboxed?</h1><p>Yes, technically; it’s sandboxed and has to follow the same rules as every other browser. That’s actually a good thing because it doesn’t require a browser extension, and it naturally works across all browsers (which enables cross-browser testing).</p>\n<p>But Cypress is actually way beyond just a basic JavaScript application running in the browser. That’s one part, but it’s also a <code>Desktop Application</code>, communicates with backend web services, and has language-specific adapters which are installed in your project.</p>\n<p>All of these technologies together are coordinated and enable Cypress to work, which extends its capabilities far outside of the browser sandbox. Without these, Cypress would not work at all. While it’s possible limitations may arise, these will be the minority. For the vast majority of your web development, Cypress will work just fine, and already <strong>does</strong> work.</p>\n<h1 id=\"Seriously-I-know-there-are-security-restrictions-for-JavaScript-running-in-the-browser\"><a href=\"#Seriously-I-know-there-are-security-restrictions-for-JavaScript-running-in-the-browser\" class=\"headerlink\" title=\"Seriously, I know there are security restrictions for JavaScript running in the browser!\"></a>Seriously, I know there are security restrictions for JavaScript running in the browser!</h1><p>Seriously, Cypress has already solved these issues transparently without it causing you to change anything in your application. Everything should just work. Even clearing all cookies from JavaScript.</p>\n<h1 id=\"Since-Cypress-runs-in-the-browser-how-can-it-talk-to-my-backend\"><a href=\"#Since-Cypress-runs-in-the-browser-how-can-it-talk-to-my-backend\" class=\"headerlink\" title=\"Since Cypress runs in the browser, how can it talk to my backend?\"></a>Since Cypress runs in the browser, how can it talk to my backend?</h1><p>While you’ll always write your tests in JavaScript, it’s often important to talk to your backend prior to a test running, or throughout a test, or even after a test finishes. Regardless of which type of application you have, or plan to build, Cypress can communicate with the backend through one of its adapters. We are currently building adapters for:</p>\n<ul>\n<li>Rails</li>\n<li>Node</li>\n<li>.NET</li>\n<li>PHP</li>\n</ul>\n<p>Each adapter will be made available in each language’s package system, and will have separate repositories detailing the installation, configuration, etc. Using these adapters will allow Cypress to pass messages to the backend for things like:</p>\n<ul>\n<li>Querying the database</li>\n<li>Seeding the database</li>\n<li>Requesting specific data</li>\n<li>Asking if emails were sent</li>\n<li>Anything else your backend needs to provide</li>\n</ul>\n<p>As is the philosophy of Cypress, using these adapters should be painless and simple to install. Error messages will display directly in the browser and you’ll be able to diagnose / debug easily.</p>\n<p>These adapters are completely optional and are only necessary if you intend to test end to end with your server. If you only write JavaScript unit tests or mock request/responses you won’t need these.</p>\n<h1 id=\"We-use-WebSockets-will-Cypress-work-with-that\"><a href=\"#We-use-WebSockets-will-Cypress-work-with-that\" class=\"headerlink\" title=\"We use WebSockets, will Cypress work with that?\"></a>We use WebSockets, will Cypress work with that?</h1><p>Yes.</p>\n<h1 id=\"Will-Cypress-work-for-my-CI-provider\"><a href=\"#Will-Cypress-work-for-my-CI-provider\" class=\"headerlink\" title=\"Will Cypress work for my CI provider?\"></a>Will Cypress work for my CI provider?</h1><p>Yes.</p>\n<h1 id=\"We-have-the-craziest-most-insane-authentication-system-ever-will-Cypress-work-with-that\"><a href=\"#We-have-the-craziest-most-insane-authentication-system-ever-will-Cypress-work-with-that\" class=\"headerlink\" title=\"We have the craziest most insane authentication system ever, will Cypress work with that?\"></a>We have the craziest most insane authentication system ever, will Cypress work with that?</h1><p>If you’re using some crazy thumb-print, retinal-scan, time-based, key-changing, microphone audial decoding mechanism to log in your users, then no, Cypress won’t work with that.  But seriously, Cypress is a <strong>development</strong> tool, which makes it easy to test your web applications. If your application is doing 100x things to make it extremely difficult to access, Cypress won’t magically make it any easier.</p>\n<p>Because Cypress is a development tool, you can always make your application more accessible while in your development environment. If you want, simply disable crazy steps in your authentication systems while you’re in your testing environment. After all, that’s why we have different environments! Normally you already have a development environment, a testing environment, a staging environment, and a production environment.  So simply expose the parts of your system you want accessible in each appropriate environment.</p>\n<p>In doing so, Cypress may not be able to give you 100% coverage without you changing anything, but that’s okay. Just use different tools to test the crazier, less accessible parts of your application, and let Cypress test the other 99%.</p>\n<p>Just remember, Cypress won’t make a non-testable application suddenly testable. It’s on your shoulders to architect your code in an accessible manner.</p>\n<h1 id=\"I-have-an-insanely-complex-JavaScript-application-with-dragging-and-dropping-complex-virtual-DOM-interactions-async-loading-templates-two-way-data-binding-pushState-routing-all-on-the-latest-and-greatest-JS-framework-which-I-wrote-and-released-today…-will-Cypress-work\"><a href=\"#I-have-an-insanely-complex-JavaScript-application-with-dragging-and-dropping-complex-virtual-DOM-interactions-async-loading-templates-two-way-data-binding-pushState-routing-all-on-the-latest-and-greatest-JS-framework-which-I-wrote-and-released-today…-will-Cypress-work\" class=\"headerlink\" title=\"I have an insanely complex JavaScript application with dragging and dropping, complex virtual DOM interactions, async loading templates, two-way-data-binding, pushState routing, all on the latest and greatest JS framework which I wrote and released today… will Cypress work?\"></a>I have an insanely complex JavaScript application with dragging and dropping, complex virtual DOM interactions, async loading templates, two-way-data-binding, pushState routing, all on the latest and greatest JS framework which I wrote and released today… will Cypress work?</h1><p>Yes, definitely yes.</p>\n<h1 id=\"Can-I-use-Cypress-to-script-user-actions-on-an-external-site-like-gmail-com\"><a href=\"#Can-I-use-Cypress-to-script-user-actions-on-an-external-site-like-gmail-com\" class=\"headerlink\" title=\"Can I use Cypress to script user-actions on an external site like gmail.com?\"></a>Can I use Cypress to script user-actions on an external site like <code>gmail.com</code>?</h1><p>No. There are already lots of tools to do that. Using Cypress to test against a 3rd party application is not supported. It <strong>may</strong> work but will defeat the purpose of why it was created. You use Cypress <em>while</em> you develop <strong>your</strong> application, it helps you write your tests.</p>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>slug: faq<br>excerpt: Frequently Asked Questions</p>\n<h1 id=\"What-kinds-of-applications-can-I-test-with-Cypress\"><a href=\"#What-kinds-of-applications-can-I-test-with-Cypress\" class=\"headerlink\" title=\"What kinds of applications can I test with Cypress?\"></a>What kinds of applications can I test with Cypress?</h1><p>Cypress was originally designed to be used in modern JavaScript applications, but Cypress works perfectly on traditional server-side HTML based applications as well.</p>\n<p>The API scales well in both situations, however there are certain commands which are useful primarily in JavaScript-based applications and won’t see much use in traditional server-side applications.</p>\n<p>Cypress enables you to pick the best testing strategy. You may choose not to involve the server for most tests (which is a good thing) and mock all requests/responses to and from the server. You may also choose to perform full-blown integration tests, where no data is mocked, and everything goes through the server. The implementation is completely up to you.</p>\n<h1 id=\"What-backend-servers-is-Cypress-compatible-with\"><a href=\"#What-backend-servers-is-Cypress-compatible-with\" class=\"headerlink\" title=\"What backend servers is Cypress compatible with?\"></a>What backend servers is Cypress compatible with?</h1><p>Any and all. Ruby, Node, C#, PHP, none of that matters. You’ll write your tests in Javascript, but beyond that Cypress will work everywhere. To talk directly to your backend from your tests, you will need one of our adapters. Read on for more information on that.</p>\n<h1 id=\"Does-Cypress-require-me-to-change-any-of-my-existing-code\"><a href=\"#Does-Cypress-require-me-to-change-any-of-my-existing-code\" class=\"headerlink\" title=\"Does Cypress require me to change any of my existing code?\"></a>Does Cypress require me to change any of my existing code?</h1><p>No. But if you’re wanting to test parts of your application which are not easily testable, you’ll need to refactor those as you would for any testing.</p>\n<h1 id=\"How-is-this-different-than-Mocha-Karma-Capybara-Protractor-SauceLabs-etc\"><a href=\"#How-is-this-different-than-Mocha-Karma-Capybara-Protractor-SauceLabs-etc\" class=\"headerlink\" title=\"How is this different than Mocha, Karma, Capybara, Protractor, SauceLabs, etc?\"></a>How is this different than Mocha, Karma, Capybara, Protractor, SauceLabs, etc?</h1><p>Cypress is kind of a hybrid application/framework/service all rolled into one. It takes a little bit of each of those tools and brings them all together.</p>\n<p><strong>Mocha</strong> <br><br><a href=\"http://mochajs.org/\">Mocha</a> is a testing framework for JavaScript. Mocha gives you the <code>it</code>, <code>describe</code>, <code>beforeEach</code> methods. Cypress isn’t <strong>different</strong> from Mocha, it actually <strong>uses</strong> Mocha under the hood. All of your tests will be written on top of Mocha’s <code>bdd</code> interface.</p>\n<p><strong>Karma</strong> <br><br><a href=\"http://karma-runner.github.io/\">Karma</a> is a unit testing runner for JavaScript, which can work with either <code>Jasmine</code>, <code>Mocha</code>, or another JavaScript testing framework.</p>\n<p>Karma also watches your JavaScript files, live reloads when they change, and is also the <code>reporter</code> for your tests failing / passing. It runs from the command line.</p>\n<p>Cypress would essentially replace Karma because it does all of this and much more.</p>\n<p><strong>Capybara</strong> <br><br>Capybara is a <code>Ruby</code> specific tool which allows you to write integration tests for your web application. In the Rails world, this is the <em>go-to</em> tool for testing your application. It uses <code>Selenium</code> or another headless driver under the hood to interact with browsers. It’s API consists of commands which query for DOM elements, perform user actions, navigate around, etc.</p>\n<p>Cypress would essentially replace Capybara because it does all of these things, and much more. The difference is that instead of testing your application in a GUI-less console, you’d see your application at all times. You’d never have to take a screenshot to debug because all commands instantly provide you the state of your application when they run. Upon any command failing, you’ll get a human-readable error explaining why it failed. There’s no “guessing” when debugging.</p>\n<p>In my experience, Capybara begins to melt down on complex JavaScript applications. Additionally, trying to TDD your application is virtually impossible. You often have to resort to writing your application code first (typically manually refreshing your browser after changes) until you get it working. From there you write tests, but lose the entire value of TDD. These tests often feel “tacked” on, especially when it becomes harder to write a passing test when you can just open up your browser and see that it is already working.</p>\n<p><strong>Protractor</strong> <br><br>Protractor is basically the <code>Capybara</code> of the JavaScript world. It provides a nice Promise-based interface on top of Selenium, which makes it easy to deal with async code. Protractor comes with all of the features of Capybara but essentially suffers from the same problems.</p>\n<p>Cypress would replace Protractor because it does all of these things and much more. One major difference is that Cypress enables you to write your unit tests and integration tests in the same tool, as opposed to splitting up this work across both Karma and Protractor. Also, Protractor is very much focused on <code>AngularJS</code>, whereas Cypress works with all JavaScript frameworks. Protractor, because it’s based on Selenium, is still pretty slow, and is prohibitive when trying to TDD your application. Cypress on the other hand will run at the maximum speed your browser and application are capable of serving and rendering, there is no additional bloat.</p>\n<p><strong>SauceLabs</strong> <br><br><a href=\"https://saucelabs.com/\">SauceLabs</a> is a 3rd party tool which enables Selenium-based tests to be run across various browsers and operating systems. Additionally, they have a JS Unit Testing tool which isn’t Selenium focused.</p>\n<p>SauceLabs also has a <code>manual testing</code> mode, where you can remotely control browsers in the cloud as if they were installed on your machine.</p>\n<p>Cypress does not replace SauceLabs, in fact it compliments it. We are currently working on our own manual testing mode for browsers, but it is considerably different than what SauceLabs provides. That is the only overlapping feature.</p>\n<p>Cypress’s API is written to be completely compatible with SauceLabs, even though our API is not Selenium based at all. At the end of the day, you’ll be able to enter your SauceLabs API key directly into Cypress, and  run all of your tests across various browser combinations / operating systems. The results will be made available directly in Cypress.</p>\n<p>Ultimately SauceLabs and Cypress offer very different value propositions. SauceLabs doesn’t help you write your tests, it takes your existing tests and runs them across different browsers and aggregates the results for you.</p>\n<p>Cypress on the other hand <strong>helps</strong> you write your tests. You would use Cypress every day, building and testing your application, and then use SauceLabs to ensure your application works on every browser.</p>\n<p>The overlapping feature, <strong>manually testing browsers</strong> is different from a workflow perspective.</p>\n<p>Currently, without Cypress, when you get errors from SauceLabs, you would then proceed to <strong>debug</strong> your application in that specific browser. This is where manually testing comes in handy. You could do that from SauceLabs tool, which means you’d navigate to their service and connect to your local server. You could then make a code change, refresh, manually recreate the bug, and debug in the other browser (with the other browser’s native debugging tools). This can be tedious and time consuming. After fixing the bug you’d have to rerun your tests across all of the browsers again to see if anything else broke.</p>\n<p>With Cypress, you’d still get errors from SauceLabs, but instead of leaving Cypress, you could use Cypress to create a manual session with that failing browser. Once connected to the other browser, you could see the error message in Cypress and proceed to debug it. As you make code changes, all of your Cypress commands would drive the other browser. The end result is that you’d see and debug another browser from within Google Chrome, using the same interface you use while developing locally.</p>\n<h1 id=\"If-Cypress-runs-in-the-browser-doesn’t-that-mean-it’s-sandboxed\"><a href=\"#If-Cypress-runs-in-the-browser-doesn’t-that-mean-it’s-sandboxed\" class=\"headerlink\" title=\"If Cypress runs in the browser, doesn’t that mean it’s sandboxed?\"></a>If Cypress runs in the browser, doesn’t that mean it’s sandboxed?</h1><p>Yes, technically; it’s sandboxed and has to follow the same rules as every other browser. That’s actually a good thing because it doesn’t require a browser extension, and it naturally works across all browsers (which enables cross-browser testing).</p>\n<p>But Cypress is actually way beyond just a basic JavaScript application running in the browser. That’s one part, but it’s also a <code>Desktop Application</code>, communicates with backend web services, and has language-specific adapters which are installed in your project.</p>\n<p>All of these technologies together are coordinated and enable Cypress to work, which extends its capabilities far outside of the browser sandbox. Without these, Cypress would not work at all. While it’s possible limitations may arise, these will be the minority. For the vast majority of your web development, Cypress will work just fine, and already <strong>does</strong> work.</p>\n<h1 id=\"Seriously-I-know-there-are-security-restrictions-for-JavaScript-running-in-the-browser\"><a href=\"#Seriously-I-know-there-are-security-restrictions-for-JavaScript-running-in-the-browser\" class=\"headerlink\" title=\"Seriously, I know there are security restrictions for JavaScript running in the browser!\"></a>Seriously, I know there are security restrictions for JavaScript running in the browser!</h1><p>Seriously, Cypress has already solved these issues transparently without it causing you to change anything in your application. Everything should just work. Even clearing all cookies from JavaScript.</p>\n<h1 id=\"Since-Cypress-runs-in-the-browser-how-can-it-talk-to-my-backend\"><a href=\"#Since-Cypress-runs-in-the-browser-how-can-it-talk-to-my-backend\" class=\"headerlink\" title=\"Since Cypress runs in the browser, how can it talk to my backend?\"></a>Since Cypress runs in the browser, how can it talk to my backend?</h1><p>While you’ll always write your tests in JavaScript, it’s often important to talk to your backend prior to a test running, or throughout a test, or even after a test finishes. Regardless of which type of application you have, or plan to build, Cypress can communicate with the backend through one of its adapters. We are currently building adapters for:</p>\n<ul>\n<li>Rails</li>\n<li>Node</li>\n<li>.NET</li>\n<li>PHP</li>\n</ul>\n<p>Each adapter will be made available in each language’s package system, and will have separate repositories detailing the installation, configuration, etc. Using these adapters will allow Cypress to pass messages to the backend for things like:</p>\n<ul>\n<li>Querying the database</li>\n<li>Seeding the database</li>\n<li>Requesting specific data</li>\n<li>Asking if emails were sent</li>\n<li>Anything else your backend needs to provide</li>\n</ul>\n<p>As is the philosophy of Cypress, using these adapters should be painless and simple to install. Error messages will display directly in the browser and you’ll be able to diagnose / debug easily.</p>\n<p>These adapters are completely optional and are only necessary if you intend to test end to end with your server. If you only write JavaScript unit tests or mock request/responses you won’t need these.</p>\n<h1 id=\"We-use-WebSockets-will-Cypress-work-with-that\"><a href=\"#We-use-WebSockets-will-Cypress-work-with-that\" class=\"headerlink\" title=\"We use WebSockets, will Cypress work with that?\"></a>We use WebSockets, will Cypress work with that?</h1><p>Yes.</p>\n<h1 id=\"Will-Cypress-work-for-my-CI-provider\"><a href=\"#Will-Cypress-work-for-my-CI-provider\" class=\"headerlink\" title=\"Will Cypress work for my CI provider?\"></a>Will Cypress work for my CI provider?</h1><p>Yes.</p>\n<h1 id=\"We-have-the-craziest-most-insane-authentication-system-ever-will-Cypress-work-with-that\"><a href=\"#We-have-the-craziest-most-insane-authentication-system-ever-will-Cypress-work-with-that\" class=\"headerlink\" title=\"We have the craziest most insane authentication system ever, will Cypress work with that?\"></a>We have the craziest most insane authentication system ever, will Cypress work with that?</h1><p>If you’re using some crazy thumb-print, retinal-scan, time-based, key-changing, microphone audial decoding mechanism to log in your users, then no, Cypress won’t work with that.  But seriously, Cypress is a <strong>development</strong> tool, which makes it easy to test your web applications. If your application is doing 100x things to make it extremely difficult to access, Cypress won’t magically make it any easier.</p>\n<p>Because Cypress is a development tool, you can always make your application more accessible while in your development environment. If you want, simply disable crazy steps in your authentication systems while you’re in your testing environment. After all, that’s why we have different environments! Normally you already have a development environment, a testing environment, a staging environment, and a production environment.  So simply expose the parts of your system you want accessible in each appropriate environment.</p>\n<p>In doing so, Cypress may not be able to give you 100% coverage without you changing anything, but that’s okay. Just use different tools to test the crazier, less accessible parts of your application, and let Cypress test the other 99%.</p>\n<p>Just remember, Cypress won’t make a non-testable application suddenly testable. It’s on your shoulders to architect your code in an accessible manner.</p>\n<h1 id=\"I-have-an-insanely-complex-JavaScript-application-with-dragging-and-dropping-complex-virtual-DOM-interactions-async-loading-templates-two-way-data-binding-pushState-routing-all-on-the-latest-and-greatest-JS-framework-which-I-wrote-and-released-today…-will-Cypress-work\"><a href=\"#I-have-an-insanely-complex-JavaScript-application-with-dragging-and-dropping-complex-virtual-DOM-interactions-async-loading-templates-two-way-data-binding-pushState-routing-all-on-the-latest-and-greatest-JS-framework-which-I-wrote-and-released-today…-will-Cypress-work\" class=\"headerlink\" title=\"I have an insanely complex JavaScript application with dragging and dropping, complex virtual DOM interactions, async loading templates, two-way-data-binding, pushState routing, all on the latest and greatest JS framework which I wrote and released today… will Cypress work?\"></a>I have an insanely complex JavaScript application with dragging and dropping, complex virtual DOM interactions, async loading templates, two-way-data-binding, pushState routing, all on the latest and greatest JS framework which I wrote and released today… will Cypress work?</h1><p>Yes, definitely yes.</p>\n<h1 id=\"Can-I-use-Cypress-to-script-user-actions-on-an-external-site-like-gmail-com\"><a href=\"#Can-I-use-Cypress-to-script-user-actions-on-an-external-site-like-gmail-com\" class=\"headerlink\" title=\"Can I use Cypress to script user-actions on an external site like gmail.com?\"></a>Can I use Cypress to script user-actions on an external site like <code>gmail.com</code>?</h1><p>No. There are already lots of tools to do that. Using Cypress to test against a 3rd party application is not supported. It <strong>may</strong> work but will defeat the purpose of why it was created. You use Cypress <em>while</em> you develop <strong>your</strong> application, it helps you write your tests.</p>\n"},{"title":"as","_content":"\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Read about Using Aliases first.](https://on.cypress.io/guides/using-aliases)\",\n  \"title\": \"New to Cypress?\"\n}\n[/block]\n\nAssign an alias to a route or DOM element for use later. Reference the alias later within the [`cy.get`](https://on.cypress.io/api/get) or [`cy.wait`](https://on.cypress.io/api/wait) command with the prefix `@`.\n\n| | |\n|--- | --- |\n| **Returns** | the DOM element or route being aliased  |\n| **Timeout** | the alias will retry the chain of commands before the alias assignment for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.as( *text* )](#section-usage)\n\nCreate an alias to be used later, passing the name of the alias as a parameter.\n\n***\n\n# Usage\n\n## Alias a route, then wait for that route using `@alias`\n\n```javascript\ncy\n  .route(\"PUT\", /^\\/users\\/\\d+/, \"fixture:user\").as(\"userPut\")\n  .get(\"form\").submit()\n  .wait(\"@userPut\")\n    .its(\"url\").should(\"contain\", \"users\")\n\n```\n\n***\n\n# Command Log\n\n## Alias several routes\n\n```javascript\ncy\n  .route(/company/, \"fixture:company\").as(\"companyGet\")\n  .route(/roles/, \"fixture:roles\").as(\"rolesGet\")\n  .route(/teams/, \"fixture:teams\").as(\"teamsGet\")\n  .route(/users\\/\\d+/, \"fixture:user\").as(\"userGet\")\n  .route(\"PUT\", /^\\/users\\/\\d+/, \"fixture:user\").as(\"userPut\")\n```\n\nAliases of routes display in the routes instrument panel:\n\n<img width=\"567\" alt=\"screen shot 2015-11-29 at 2 25 47 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459470/22e31e54-96a5-11e5-8895-a6ff5f8bb973.png\">\n\n***\n\n# Errors\n\n## cy.as() cannot be aliased as: 'str'. This word is reserved.\n\nSome strings are not allowed as aliases since they are reserved words in Cypress. These words include: test, runnable, timeout, slow, skip, and inspect.\n\n***\n\n# Related\n\n- [get](https://on.cypress.io/api/get)\n- [wait](https://on.cypress.io/api/wait)\n- [Using Aliases](https://on.cypress.io/guides/using-aliases)","source":"api/commands/as.md","raw":"title: as\n---\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Read about Using Aliases first.](https://on.cypress.io/guides/using-aliases)\",\n  \"title\": \"New to Cypress?\"\n}\n[/block]\n\nAssign an alias to a route or DOM element for use later. Reference the alias later within the [`cy.get`](https://on.cypress.io/api/get) or [`cy.wait`](https://on.cypress.io/api/wait) command with the prefix `@`.\n\n| | |\n|--- | --- |\n| **Returns** | the DOM element or route being aliased  |\n| **Timeout** | the alias will retry the chain of commands before the alias assignment for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.as( *text* )](#section-usage)\n\nCreate an alias to be used later, passing the name of the alias as a parameter.\n\n***\n\n# Usage\n\n## Alias a route, then wait for that route using `@alias`\n\n```javascript\ncy\n  .route(\"PUT\", /^\\/users\\/\\d+/, \"fixture:user\").as(\"userPut\")\n  .get(\"form\").submit()\n  .wait(\"@userPut\")\n    .its(\"url\").should(\"contain\", \"users\")\n\n```\n\n***\n\n# Command Log\n\n## Alias several routes\n\n```javascript\ncy\n  .route(/company/, \"fixture:company\").as(\"companyGet\")\n  .route(/roles/, \"fixture:roles\").as(\"rolesGet\")\n  .route(/teams/, \"fixture:teams\").as(\"teamsGet\")\n  .route(/users\\/\\d+/, \"fixture:user\").as(\"userGet\")\n  .route(\"PUT\", /^\\/users\\/\\d+/, \"fixture:user\").as(\"userPut\")\n```\n\nAliases of routes display in the routes instrument panel:\n\n<img width=\"567\" alt=\"screen shot 2015-11-29 at 2 25 47 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459470/22e31e54-96a5-11e5-8895-a6ff5f8bb973.png\">\n\n***\n\n# Errors\n\n## cy.as() cannot be aliased as: 'str'. This word is reserved.\n\nSome strings are not allowed as aliases since they are reserved words in Cypress. These words include: test, runnable, timeout, slow, skip, and inspect.\n\n***\n\n# Related\n\n- [get](https://on.cypress.io/api/get)\n- [wait](https://on.cypress.io/api/wait)\n- [Using Aliases](https://on.cypress.io/guides/using-aliases)","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/as.html","comments":1,"layout":"page","_id":"cj1pc2g7z0001k1g8el2iijv9","content":"<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://on.cypress.io/guides/using-aliases\" target=\"_blank\" rel=\"external\">Read about Using Aliases first.</a>“,<br>  “title”: “New to Cypress?”<br>}<br>[/block]</p>\n<p>Assign an alias to a route or DOM element for use later. Reference the alias later within the <a href=\"https://on.cypress.io/api/get\" target=\"_blank\" rel=\"external\"><code>cy.get</code></a> or <a href=\"https://on.cypress.io/api/wait\" target=\"_blank\" rel=\"external\"><code>cy.wait</code></a> command with the prefix <code>@</code>.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the DOM element or route being aliased</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td>the alias will retry the chain of commands before the alias assignment for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-as-text\"><a href=\"#cy-as-text\" class=\"headerlink\" title=\"cy.as( text )\"></a><a href=\"#section-usage\">cy.as( <em>text</em> )</a></h1><p>Create an alias to be used later, passing the name of the alias as a parameter.</p>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Alias-a-route-then-wait-for-that-route-using-alias\"><a href=\"#Alias-a-route-then-wait-for-that-route-using-alias\" class=\"headerlink\" title=\"Alias a route, then wait for that route using @alias\"></a>Alias a route, then wait for that route using <code>@alias</code></h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .route(\"PUT\", /^\\/users\\/\\d+/, \"fixture:user\").as(\"userPut\")</div><div class=\"line\">  .get(\"form\").submit()</div><div class=\"line\">  .wait(\"@userPut\")</div><div class=\"line\">    .its(\"url\").should(\"contain\", \"users\")</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Alias-several-routes\"><a href=\"#Alias-several-routes\" class=\"headerlink\" title=\"Alias several routes\"></a>Alias several routes</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .route(<span class=\"regexp\">/company/</span>, <span class=\"string\">\"fixture:company\"</span>).as(<span class=\"string\">\"companyGet\"</span>)</div><div class=\"line\">  .route(<span class=\"regexp\">/roles/</span>, <span class=\"string\">\"fixture:roles\"</span>).as(<span class=\"string\">\"rolesGet\"</span>)</div><div class=\"line\">  .route(<span class=\"regexp\">/teams/</span>, <span class=\"string\">\"fixture:teams\"</span>).as(<span class=\"string\">\"teamsGet\"</span>)</div><div class=\"line\">  .route(<span class=\"regexp\">/users\\/\\d+/</span>, <span class=\"string\">\"fixture:user\"</span>).as(<span class=\"string\">\"userGet\"</span>)</div><div class=\"line\">  .route(<span class=\"string\">\"PUT\"</span>, /^\\/users\\/\\d+<span class=\"regexp\">/, \"fixture:user\").as(\"userPut\")</span></div></pre></td></tr></table></figure>\n<p>Aliases of routes display in the routes instrument panel:</p>\n<p><img width=\"567\" alt=\"screen shot 2015-11-29 at 2 25 47 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459470/22e31e54-96a5-11e5-8895-a6ff5f8bb973.png\"></p>\n<hr>\n<h1 id=\"Errors\"><a href=\"#Errors\" class=\"headerlink\" title=\"Errors\"></a>Errors</h1><h2 id=\"cy-as-cannot-be-aliased-as-‘str’-This-word-is-reserved\"><a href=\"#cy-as-cannot-be-aliased-as-‘str’-This-word-is-reserved\" class=\"headerlink\" title=\"cy.as() cannot be aliased as: ‘str’. This word is reserved.\"></a>cy.as() cannot be aliased as: ‘str’. This word is reserved.</h2><p>Some strings are not allowed as aliases since they are reserved words in Cypress. These words include: test, runnable, timeout, slow, skip, and inspect.</p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/get\" target=\"_blank\" rel=\"external\">get</a></li>\n<li><a href=\"https://on.cypress.io/api/wait\" target=\"_blank\" rel=\"external\">wait</a></li>\n<li><a href=\"https://on.cypress.io/guides/using-aliases\" target=\"_blank\" rel=\"external\">Using Aliases</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://on.cypress.io/guides/using-aliases\">Read about Using Aliases first.</a>“,<br>  “title”: “New to Cypress?”<br>}<br>[/block]</p>\n<p>Assign an alias to a route or DOM element for use later. Reference the alias later within the <a href=\"https://on.cypress.io/api/get\"><code>cy.get</code></a> or <a href=\"https://on.cypress.io/api/wait\"><code>cy.wait</code></a> command with the prefix <code>@</code>.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the DOM element or route being aliased</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td>the alias will retry the chain of commands before the alias assignment for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-as-text\"><a href=\"#cy-as-text\" class=\"headerlink\" title=\"cy.as( text )\"></a><a href=\"#section-usage\">cy.as( <em>text</em> )</a></h1><p>Create an alias to be used later, passing the name of the alias as a parameter.</p>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Alias-a-route-then-wait-for-that-route-using-alias\"><a href=\"#Alias-a-route-then-wait-for-that-route-using-alias\" class=\"headerlink\" title=\"Alias a route, then wait for that route using @alias\"></a>Alias a route, then wait for that route using <code>@alias</code></h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .route(\"PUT\", /^\\/users\\/\\d+/, \"fixture:user\").as(\"userPut\")</div><div class=\"line\">  .get(\"form\").submit()</div><div class=\"line\">  .wait(\"@userPut\")</div><div class=\"line\">    .its(\"url\").should(\"contain\", \"users\")</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Alias-several-routes\"><a href=\"#Alias-several-routes\" class=\"headerlink\" title=\"Alias several routes\"></a>Alias several routes</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .route(<span class=\"regexp\">/company/</span>, <span class=\"string\">\"fixture:company\"</span>).as(<span class=\"string\">\"companyGet\"</span>)</div><div class=\"line\">  .route(<span class=\"regexp\">/roles/</span>, <span class=\"string\">\"fixture:roles\"</span>).as(<span class=\"string\">\"rolesGet\"</span>)</div><div class=\"line\">  .route(<span class=\"regexp\">/teams/</span>, <span class=\"string\">\"fixture:teams\"</span>).as(<span class=\"string\">\"teamsGet\"</span>)</div><div class=\"line\">  .route(<span class=\"regexp\">/users\\/\\d+/</span>, <span class=\"string\">\"fixture:user\"</span>).as(<span class=\"string\">\"userGet\"</span>)</div><div class=\"line\">  .route(<span class=\"string\">\"PUT\"</span>, /^\\/users\\/\\d+<span class=\"regexp\">/, \"fixture:user\").as(\"userPut\")</span></div></pre></td></tr></table></figure>\n<p>Aliases of routes display in the routes instrument panel:</p>\n<p><img width=\"567\" alt=\"screen shot 2015-11-29 at 2 25 47 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459470/22e31e54-96a5-11e5-8895-a6ff5f8bb973.png\"></p>\n<hr>\n<h1 id=\"Errors\"><a href=\"#Errors\" class=\"headerlink\" title=\"Errors\"></a>Errors</h1><h2 id=\"cy-as-cannot-be-aliased-as-‘str’-This-word-is-reserved\"><a href=\"#cy-as-cannot-be-aliased-as-‘str’-This-word-is-reserved\" class=\"headerlink\" title=\"cy.as() cannot be aliased as: ‘str’. This word is reserved.\"></a>cy.as() cannot be aliased as: ‘str’. This word is reserved.</h2><p>Some strings are not allowed as aliases since they are reserved words in Cypress. These words include: test, runnable, timeout, slow, skip, and inspect.</p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/get\">get</a></li>\n<li><a href=\"https://on.cypress.io/api/wait\">wait</a></li>\n<li><a href=\"https://on.cypress.io/guides/using-aliases\">Using Aliases</a></li>\n</ul>\n"},{"title":"and","_content":"\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Read about Making Assertions first.](https://on.cypress.io/guides/making-assertions)\",\n  \"title\": \"New to Cypress?\"\n}\n[/block]\n\n`cy.and` makes chaining together assertions easy.\n\nYou'd typically use `cy.and` when you are making multiple assertions about the same subject.\n\n| | |\n|--- | --- |\n| **Returns** | the current subject but (in some cases) a new subject  |\n| **Timeout** | the assertion will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.and( *chainers* )](#section-chainers-usage)\n\nMake an assertion about the current subject using assertion chainers.\n\n***\n\n# [cy.and( *chainers*, *value* )](#section-chainers-with-value-usage)\n\nMake an assertion about the value of the current subject.\n\nSome chai methods and chai-jQuery methods return a new (different) subject for chain-ability.\n\n***\n\n# [cy.and( *chainers*, *method*, *value* )](#section-chainers-with-method-and-value-usage)\n\nMake an assertion about the subject by calling a method and providing a value to that method.\n\n***\n\n# [cy.and( *function* )](#section-function-usage)\n\nPass a function that can have any number of explicit assertions written within it.\n\nDoes not change the subject. Whatever was passed to the function is what is returned.\n\n***\n\n# Chainers Usage\n\n## Chain assertions on the same subject\n\n```javascript\ncy.get(\"button\").should(\"have.class\", \"active\").and(\"not.be.disabled\")\n```\n\n***\n\n# Chainers with Value Usage\n\n## Chain assertions on subject change\n\n```html\n<!-- App Code -->\n<ul>\n  <li>\n    <a href=\"users/123/edit\">Edit User</a>\n  </li>\n</ul>\n```\n\n```javascript\ncy\n  // subject is now <a>\n  .get(\"a\")\n\n  // assert <a> contains text: \"Edit User\"\n  // subject is still the <a>\n  .should(\"contain\", \"Edit User\")\n\n  // assert subject has 'href' attribute\n  // subject now changes to return value from the 'href' attribute\n  .and(\"have.attr\", \"href\")\n\n  // assert that the string returned from 'href'\n  // matches the RegExp /users/\n  // the subject is still the same string\n  .and(\"match\", /users/)\n\n  // assert that the string does not\n  // have a '#' character within it\n  .and(\"not.include\", \"#\")\n```\n\n***\n\n# Chainers with Method and Value Usage\n\n## Assert the href is equal to '/users'\n\n```javascript\n// have.attr comes from chai-jquery\ncy\n  .get(\"#header a\")\n  .should(\"have.class\", \"active\")\n  .and(\"have.attr\", \"href\", \"/users\")\n```\n\n***\n\n# Function Usage\n\n## Verify length, content, and classes from multiple `<p>`\n\nPassing a function to `cy.and` enables you to assert on arbitrary subjects. This gives you the opportunity to *massage* what you'd like to assert on.\n\nJust be sure *not* to include any code that has side effects in your callback function.\n\nThe callback function will be retried over and over again until no assertions within it throw.\n\n```html\n<div>\n  <p class=\"text-primary\">Hello World</p>\n  <p class=\"text-danger\">You have an error</p>\n  <p class=\"text-default\">Try again later</p>\n</div>\n```\n\n```javascript\ncy\n  .get(\"p\")\n  .should(\"not.be.empty\")\n  .and(function($p){\n    // should have found 3 elements\n    expect($p).to.have.length(3)\n\n    // make sure the first contains some text content\n    expect($p.first()).to.contain(\"Hello World\")\n\n    // use jquery's map to grab all of their classes\n    // jquery's map returns a new jquery object\n    var classes = $p.map(function(i, el){\n      return cy.$(el).attr(\"class\")\n    })\n\n    // call classes.get() to make this a plain array\n    expect(classes.get()).to.deep.eq([\n      \"text-primary\",\n      \"text-danger\",\n      \"text-default\"\n    ])\n  })\n```\n\n***\n\n## Using a callback function will not change the subject\n\n```javascript\ncy\n  .get(\"button\")\n  .should(\"be.active\")\n  .and(function($button){\n    // whatever we return here is ignored\n    // as Cypress will always force the return\n    // value for future commands to be the same\n    // as the previous subject which is <button>\n\n    expect({foo: \"bar\"}).to.deep.eq({foo: \"bar\"})\n\n    // whatever the return value (if any) is ignored\n    return {foo: \"bar\"}\n  })\n\n  .then(function($button){\n    // $button === <button>\n    // the subject is unchanged no matter what was returned\n  })\n```\n\n***\n\n## Assertions that change the subject\n\nSometimes using a specific chainer will automatically change the assertion subject.\n\nFor instance in `chai`, the method [`have.property(\"...\")`](http://chaijs.com/api/bdd/) will automatically change the subject.\n\nAdditionally in [`Chai-jQuery`](https://github.com/chaijs/chai-jquery#attrname-value), the methods: `attr`, `prop`, `css`, and `data` also change the subject.\n\nThis allows you to utilize other `chainer` methods such as `match` when making assertions about values.\n\n```javascript\n// in this example our subject changed to the string 'sans-serif' because\n// have.css(\"font-family\") returned a string instead of the <body> element\ncy\n  // subject is <body>\n  .get(\"body\")\n\n  // subject changes to the string return value of 'font-family'\n  .should(\"have.css\", \"font-family\")\n\n  // use match to assert the string matches a regular expression\n  .and(\"match\", /sans-serif/)\n```\n\n```javascript\n// in this example our subject changed to the string '/users' because\n// have.attr, href, /users returned a string instead of the <a> element\ncy\n  // subject is <a>\n  .get(\"a\")\n\n  // subject changes to the string 'users'\n  .should(\"have.attr\", \"href\", \"/users\")\n```\n\n***\n\n# Notes\n\n## Similarities to Chai\n\nIf you've worked in [Chai](http://chaijs.com/) before, you will recognize that `cy.and` matches the same fluent assertion syntax.\n\nTake this *explicit* assertion for example:\n\n```javascript\nexpect({foo: \"bar\"}).to.have.property(\"foo\").and.eq(\"bar\")\n```\n\n`cy.and` reproduces this same assertion behavior.\n\n***\n\n## Can I pass options to cy.and()?\n\nOptions passed to the preceding command will be passed through to `cy.and`.\n\nThe following example is an example of increasing the `timeout` of the `cy.and`:\n\n```javascript\ncy\n  .get(\"input\", {timeout: 10000}) // <-- wait up to 10 seconds for this 'input' to be found\n    .should(\"have.value\", \"foo\")   // <-- and to have the value 'foo'\n    .and(\"have.class\", \"radio\")    // <-- and to have the class 'radio'\n```\n\n```javascript\ncy.find(\"input\", {timeout: 10000}).should(\"have.value\", \"foo\").and(\"have.class\", \"radio\")\n                         ↲\n      // adding the timeout here will automatically\n      // flow down to the assertions, and they will\n      // be retried for up to 10 seconds\n```\n\n***\n\n## How do I know which assertions change the subject and which keep it the same?\n\nThe chainers that come from [Chai](https://on.cypress.io/guides/bundled-tools#section-chai) or [Chai-jQuery](https://on.cypress.io/guides/bundled-tools#section-chai-jquery) will always document what they return.\n\nAlternatively, it is very easy to use Cypress itself to figure this out.\n\nYou can [read more about debugging assertions](https://on.cypress.io/guides/making-assertions#sections-debugging-assertions) here.\n\n***\n\n# Command Log\n\n## Chain assertions on the same subject\n\n```javascript\n  .find(\"input[type='checkbox']\")\n    .should(\"be.checked\")\n    .and(\"not.be.disabled\")\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"530\" alt=\"screen shot 2015-11-29 at 12 16 46 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458700/36d1e646-9693-11e5-8771-158230530fdc.png\">\n\nWhen clicking on `assert` within the command log, the console outputs the following:\n\n<img width=\"636\" alt=\"screen shot 2015-11-29 at 12 17 03 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458702/3b6873be-9693-11e5-88f7-a928ebdac80c.png\">\n\n***\n\n# Related\n\n- [should](https://on.cypress.io/api/should)\n- [Making Assertions](https://on.cypress.io/guides/making-assertions)","source":"api/commands/and.md","raw":"title: and\n---\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Read about Making Assertions first.](https://on.cypress.io/guides/making-assertions)\",\n  \"title\": \"New to Cypress?\"\n}\n[/block]\n\n`cy.and` makes chaining together assertions easy.\n\nYou'd typically use `cy.and` when you are making multiple assertions about the same subject.\n\n| | |\n|--- | --- |\n| **Returns** | the current subject but (in some cases) a new subject  |\n| **Timeout** | the assertion will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.and( *chainers* )](#section-chainers-usage)\n\nMake an assertion about the current subject using assertion chainers.\n\n***\n\n# [cy.and( *chainers*, *value* )](#section-chainers-with-value-usage)\n\nMake an assertion about the value of the current subject.\n\nSome chai methods and chai-jQuery methods return a new (different) subject for chain-ability.\n\n***\n\n# [cy.and( *chainers*, *method*, *value* )](#section-chainers-with-method-and-value-usage)\n\nMake an assertion about the subject by calling a method and providing a value to that method.\n\n***\n\n# [cy.and( *function* )](#section-function-usage)\n\nPass a function that can have any number of explicit assertions written within it.\n\nDoes not change the subject. Whatever was passed to the function is what is returned.\n\n***\n\n# Chainers Usage\n\n## Chain assertions on the same subject\n\n```javascript\ncy.get(\"button\").should(\"have.class\", \"active\").and(\"not.be.disabled\")\n```\n\n***\n\n# Chainers with Value Usage\n\n## Chain assertions on subject change\n\n```html\n<!-- App Code -->\n<ul>\n  <li>\n    <a href=\"users/123/edit\">Edit User</a>\n  </li>\n</ul>\n```\n\n```javascript\ncy\n  // subject is now <a>\n  .get(\"a\")\n\n  // assert <a> contains text: \"Edit User\"\n  // subject is still the <a>\n  .should(\"contain\", \"Edit User\")\n\n  // assert subject has 'href' attribute\n  // subject now changes to return value from the 'href' attribute\n  .and(\"have.attr\", \"href\")\n\n  // assert that the string returned from 'href'\n  // matches the RegExp /users/\n  // the subject is still the same string\n  .and(\"match\", /users/)\n\n  // assert that the string does not\n  // have a '#' character within it\n  .and(\"not.include\", \"#\")\n```\n\n***\n\n# Chainers with Method and Value Usage\n\n## Assert the href is equal to '/users'\n\n```javascript\n// have.attr comes from chai-jquery\ncy\n  .get(\"#header a\")\n  .should(\"have.class\", \"active\")\n  .and(\"have.attr\", \"href\", \"/users\")\n```\n\n***\n\n# Function Usage\n\n## Verify length, content, and classes from multiple `<p>`\n\nPassing a function to `cy.and` enables you to assert on arbitrary subjects. This gives you the opportunity to *massage* what you'd like to assert on.\n\nJust be sure *not* to include any code that has side effects in your callback function.\n\nThe callback function will be retried over and over again until no assertions within it throw.\n\n```html\n<div>\n  <p class=\"text-primary\">Hello World</p>\n  <p class=\"text-danger\">You have an error</p>\n  <p class=\"text-default\">Try again later</p>\n</div>\n```\n\n```javascript\ncy\n  .get(\"p\")\n  .should(\"not.be.empty\")\n  .and(function($p){\n    // should have found 3 elements\n    expect($p).to.have.length(3)\n\n    // make sure the first contains some text content\n    expect($p.first()).to.contain(\"Hello World\")\n\n    // use jquery's map to grab all of their classes\n    // jquery's map returns a new jquery object\n    var classes = $p.map(function(i, el){\n      return cy.$(el).attr(\"class\")\n    })\n\n    // call classes.get() to make this a plain array\n    expect(classes.get()).to.deep.eq([\n      \"text-primary\",\n      \"text-danger\",\n      \"text-default\"\n    ])\n  })\n```\n\n***\n\n## Using a callback function will not change the subject\n\n```javascript\ncy\n  .get(\"button\")\n  .should(\"be.active\")\n  .and(function($button){\n    // whatever we return here is ignored\n    // as Cypress will always force the return\n    // value for future commands to be the same\n    // as the previous subject which is <button>\n\n    expect({foo: \"bar\"}).to.deep.eq({foo: \"bar\"})\n\n    // whatever the return value (if any) is ignored\n    return {foo: \"bar\"}\n  })\n\n  .then(function($button){\n    // $button === <button>\n    // the subject is unchanged no matter what was returned\n  })\n```\n\n***\n\n## Assertions that change the subject\n\nSometimes using a specific chainer will automatically change the assertion subject.\n\nFor instance in `chai`, the method [`have.property(\"...\")`](http://chaijs.com/api/bdd/) will automatically change the subject.\n\nAdditionally in [`Chai-jQuery`](https://github.com/chaijs/chai-jquery#attrname-value), the methods: `attr`, `prop`, `css`, and `data` also change the subject.\n\nThis allows you to utilize other `chainer` methods such as `match` when making assertions about values.\n\n```javascript\n// in this example our subject changed to the string 'sans-serif' because\n// have.css(\"font-family\") returned a string instead of the <body> element\ncy\n  // subject is <body>\n  .get(\"body\")\n\n  // subject changes to the string return value of 'font-family'\n  .should(\"have.css\", \"font-family\")\n\n  // use match to assert the string matches a regular expression\n  .and(\"match\", /sans-serif/)\n```\n\n```javascript\n// in this example our subject changed to the string '/users' because\n// have.attr, href, /users returned a string instead of the <a> element\ncy\n  // subject is <a>\n  .get(\"a\")\n\n  // subject changes to the string 'users'\n  .should(\"have.attr\", \"href\", \"/users\")\n```\n\n***\n\n# Notes\n\n## Similarities to Chai\n\nIf you've worked in [Chai](http://chaijs.com/) before, you will recognize that `cy.and` matches the same fluent assertion syntax.\n\nTake this *explicit* assertion for example:\n\n```javascript\nexpect({foo: \"bar\"}).to.have.property(\"foo\").and.eq(\"bar\")\n```\n\n`cy.and` reproduces this same assertion behavior.\n\n***\n\n## Can I pass options to cy.and()?\n\nOptions passed to the preceding command will be passed through to `cy.and`.\n\nThe following example is an example of increasing the `timeout` of the `cy.and`:\n\n```javascript\ncy\n  .get(\"input\", {timeout: 10000}) // <-- wait up to 10 seconds for this 'input' to be found\n    .should(\"have.value\", \"foo\")   // <-- and to have the value 'foo'\n    .and(\"have.class\", \"radio\")    // <-- and to have the class 'radio'\n```\n\n```javascript\ncy.find(\"input\", {timeout: 10000}).should(\"have.value\", \"foo\").and(\"have.class\", \"radio\")\n                         ↲\n      // adding the timeout here will automatically\n      // flow down to the assertions, and they will\n      // be retried for up to 10 seconds\n```\n\n***\n\n## How do I know which assertions change the subject and which keep it the same?\n\nThe chainers that come from [Chai](https://on.cypress.io/guides/bundled-tools#section-chai) or [Chai-jQuery](https://on.cypress.io/guides/bundled-tools#section-chai-jquery) will always document what they return.\n\nAlternatively, it is very easy to use Cypress itself to figure this out.\n\nYou can [read more about debugging assertions](https://on.cypress.io/guides/making-assertions#sections-debugging-assertions) here.\n\n***\n\n# Command Log\n\n## Chain assertions on the same subject\n\n```javascript\n  .find(\"input[type='checkbox']\")\n    .should(\"be.checked\")\n    .and(\"not.be.disabled\")\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"530\" alt=\"screen shot 2015-11-29 at 12 16 46 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458700/36d1e646-9693-11e5-8771-158230530fdc.png\">\n\nWhen clicking on `assert` within the command log, the console outputs the following:\n\n<img width=\"636\" alt=\"screen shot 2015-11-29 at 12 17 03 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458702/3b6873be-9693-11e5-88f7-a928ebdac80c.png\">\n\n***\n\n# Related\n\n- [should](https://on.cypress.io/api/should)\n- [Making Assertions](https://on.cypress.io/guides/making-assertions)","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/and.html","comments":1,"layout":"page","_id":"cj1pc2g7z0002k1g81mpil295","content":"<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://on.cypress.io/guides/making-assertions\" target=\"_blank\" rel=\"external\">Read about Making Assertions first.</a>“,<br>  “title”: “New to Cypress?”<br>}<br>[/block]</p>\n<p><code>cy.and</code> makes chaining together assertions easy.</p>\n<p>You’d typically use <code>cy.and</code> when you are making multiple assertions about the same subject.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the current subject but (in some cases) a new subject</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td>the assertion will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-and-chainers\"><a href=\"#cy-and-chainers\" class=\"headerlink\" title=\"cy.and( chainers )\"></a><a href=\"#section-chainers-usage\">cy.and( <em>chainers</em> )</a></h1><p>Make an assertion about the current subject using assertion chainers.</p>\n<hr>\n<h1 id=\"cy-and-chainers-value\"><a href=\"#cy-and-chainers-value\" class=\"headerlink\" title=\"cy.and( chainers, value )\"></a><a href=\"#section-chainers-with-value-usage\">cy.and( <em>chainers</em>, <em>value</em> )</a></h1><p>Make an assertion about the value of the current subject.</p>\n<p>Some chai methods and chai-jQuery methods return a new (different) subject for chain-ability.</p>\n<hr>\n<h1 id=\"cy-and-chainers-method-value\"><a href=\"#cy-and-chainers-method-value\" class=\"headerlink\" title=\"cy.and( chainers, method, value )\"></a><a href=\"#section-chainers-with-method-and-value-usage\">cy.and( <em>chainers</em>, <em>method</em>, <em>value</em> )</a></h1><p>Make an assertion about the subject by calling a method and providing a value to that method.</p>\n<hr>\n<h1 id=\"cy-and-function\"><a href=\"#cy-and-function\" class=\"headerlink\" title=\"cy.and( function )\"></a><a href=\"#section-function-usage\">cy.and( <em>function</em> )</a></h1><p>Pass a function that can have any number of explicit assertions written within it.</p>\n<p>Does not change the subject. Whatever was passed to the function is what is returned.</p>\n<hr>\n<h1 id=\"Chainers-Usage\"><a href=\"#Chainers-Usage\" class=\"headerlink\" title=\"Chainers Usage\"></a>Chainers Usage</h1><h2 id=\"Chain-assertions-on-the-same-subject\"><a href=\"#Chain-assertions-on-the-same-subject\" class=\"headerlink\" title=\"Chain assertions on the same subject\"></a>Chain assertions on the same subject</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).should(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"active\"</span>).and(<span class=\"string\">\"not.be.disabled\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Chainers-with-Value-Usage\"><a href=\"#Chainers-with-Value-Usage\" class=\"headerlink\" title=\"Chainers with Value Usage\"></a>Chainers with Value Usage</h1><h2 id=\"Chain-assertions-on-subject-change\"><a href=\"#Chain-assertions-on-subject-change\" class=\"headerlink\" title=\"Chain assertions on subject change\"></a>Chain assertions on subject change</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- App Code --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"users/123/edit\"</span>&gt;</span>Edit User<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  <span class=\"comment\">// subject is now &lt;a&gt;</span></div><div class=\"line\">  .get(<span class=\"string\">\"a\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// assert &lt;a&gt; contains text: \"Edit User\"</span></div><div class=\"line\">  <span class=\"comment\">// subject is still the &lt;a&gt;</span></div><div class=\"line\">  .should(<span class=\"string\">\"contain\"</span>, <span class=\"string\">\"Edit User\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// assert subject has 'href' attribute</span></div><div class=\"line\">  <span class=\"comment\">// subject now changes to return value from the 'href' attribute</span></div><div class=\"line\">  .and(<span class=\"string\">\"have.attr\"</span>, <span class=\"string\">\"href\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// assert that the string returned from 'href'</span></div><div class=\"line\">  <span class=\"comment\">// matches the RegExp /users/</span></div><div class=\"line\">  <span class=\"comment\">// the subject is still the same string</span></div><div class=\"line\">  .and(<span class=\"string\">\"match\"</span>, /users/)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// assert that the string does not</span></div><div class=\"line\">  <span class=\"comment\">// have a '#' character within it</span></div><div class=\"line\">  .and(<span class=\"string\">\"not.include\"</span>, <span class=\"string\">\"#\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Chainers-with-Method-and-Value-Usage\"><a href=\"#Chainers-with-Method-and-Value-Usage\" class=\"headerlink\" title=\"Chainers with Method and Value Usage\"></a>Chainers with Method and Value Usage</h1><h2 id=\"Assert-the-href-is-equal-to-‘-users’\"><a href=\"#Assert-the-href-is-equal-to-‘-users’\" class=\"headerlink\" title=\"Assert the href is equal to ‘/users’\"></a>Assert the href is equal to ‘/users’</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// have.attr comes from chai-jquery</span></div><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"#header a\"</span>)</div><div class=\"line\">  .should(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"active\"</span>)</div><div class=\"line\">  .and(<span class=\"string\">\"have.attr\"</span>, <span class=\"string\">\"href\"</span>, <span class=\"string\">\"/users\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Function-Usage\"><a href=\"#Function-Usage\" class=\"headerlink\" title=\"Function Usage\"></a>Function Usage</h1><h2 id=\"Verify-length-content-and-classes-from-multiple-lt-p-gt\"><a href=\"#Verify-length-content-and-classes-from-multiple-lt-p-gt\" class=\"headerlink\" title=\"Verify length, content, and classes from multiple &lt;p&gt;\"></a>Verify length, content, and classes from multiple <code>&lt;p&gt;</code></h2><p>Passing a function to <code>cy.and</code> enables you to assert on arbitrary subjects. This gives you the opportunity to <em>massage</em> what you’d like to assert on.</p>\n<p>Just be sure <em>not</em> to include any code that has side effects in your callback function.</p>\n<p>The callback function will be retried over and over again until no assertions within it throw.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text-primary\"</span>&gt;</span>Hello World<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text-danger\"</span>&gt;</span>You have an error<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text-default\"</span>&gt;</span>Try again later<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"p\"</span>)</div><div class=\"line\">  .should(<span class=\"string\">\"not.be.empty\"</span>)</div><div class=\"line\">  .and(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$p</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// should have found 3 elements</span></div><div class=\"line\">    expect($p).to.have.length(<span class=\"number\">3</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// make sure the first contains some text content</span></div><div class=\"line\">    expect($p.first()).to.contain(<span class=\"string\">\"Hello World\"</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// use jquery's map to grab all of their classes</span></div><div class=\"line\">    <span class=\"comment\">// jquery's map returns a new jquery object</span></div><div class=\"line\">    <span class=\"keyword\">var</span> classes = $p.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i, el</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> cy.$(el).attr(<span class=\"string\">\"class\"</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// call classes.get() to make this a plain array</span></div><div class=\"line\">    expect(classes.get()).to.deep.eq([</div><div class=\"line\">      <span class=\"string\">\"text-primary\"</span>,</div><div class=\"line\">      <span class=\"string\">\"text-danger\"</span>,</div><div class=\"line\">      <span class=\"string\">\"text-default\"</span></div><div class=\"line\">    ])</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Using-a-callback-function-will-not-change-the-subject\"><a href=\"#Using-a-callback-function-will-not-change-the-subject\" class=\"headerlink\" title=\"Using a callback function will not change the subject\"></a>Using a callback function will not change the subject</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"button\"</span>)</div><div class=\"line\">  .should(<span class=\"string\">\"be.active\"</span>)</div><div class=\"line\">  .and(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$button</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// whatever we return here is ignored</span></div><div class=\"line\">    <span class=\"comment\">// as Cypress will always force the return</span></div><div class=\"line\">    <span class=\"comment\">// value for future commands to be the same</span></div><div class=\"line\">    <span class=\"comment\">// as the previous subject which is &lt;button&gt;</span></div><div class=\"line\"></div><div class=\"line\">    expect(&#123;<span class=\"attr\">foo</span>: <span class=\"string\">\"bar\"</span>&#125;).to.deep.eq(&#123;<span class=\"attr\">foo</span>: <span class=\"string\">\"bar\"</span>&#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// whatever the return value (if any) is ignored</span></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">foo</span>: <span class=\"string\">\"bar\"</span>&#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$button</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// $button === &lt;button&gt;</span></div><div class=\"line\">    <span class=\"comment\">// the subject is unchanged no matter what was returned</span></div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Assertions-that-change-the-subject\"><a href=\"#Assertions-that-change-the-subject\" class=\"headerlink\" title=\"Assertions that change the subject\"></a>Assertions that change the subject</h2><p>Sometimes using a specific chainer will automatically change the assertion subject.</p>\n<p>For instance in <code>chai</code>, the method <a href=\"http://chaijs.com/api/bdd/\" target=\"_blank\" rel=\"external\"><code>have.property(&quot;...&quot;)</code></a> will automatically change the subject.</p>\n<p>Additionally in <a href=\"https://github.com/chaijs/chai-jquery#attrname-value\" target=\"_blank\" rel=\"external\"><code>Chai-jQuery</code></a>, the methods: <code>attr</code>, <code>prop</code>, <code>css</code>, and <code>data</code> also change the subject.</p>\n<p>This allows you to utilize other <code>chainer</code> methods such as <code>match</code> when making assertions about values.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in this example our subject changed to the string 'sans-serif' because</span></div><div class=\"line\"><span class=\"comment\">// have.css(\"font-family\") returned a string instead of the &lt;body&gt; element</span></div><div class=\"line\">cy</div><div class=\"line\">  <span class=\"comment\">// subject is &lt;body&gt;</span></div><div class=\"line\">  .get(<span class=\"string\">\"body\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// subject changes to the string return value of 'font-family'</span></div><div class=\"line\">  .should(<span class=\"string\">\"have.css\"</span>, <span class=\"string\">\"font-family\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// use match to assert the string matches a regular expression</span></div><div class=\"line\">  .and(<span class=\"string\">\"match\"</span>, /sans-serif/)</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in this example our subject changed to the string '/users' because</span></div><div class=\"line\"><span class=\"comment\">// have.attr, href, /users returned a string instead of the &lt;a&gt; element</span></div><div class=\"line\">cy</div><div class=\"line\">  <span class=\"comment\">// subject is &lt;a&gt;</span></div><div class=\"line\">  .get(<span class=\"string\">\"a\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// subject changes to the string 'users'</span></div><div class=\"line\">  .should(<span class=\"string\">\"have.attr\"</span>, <span class=\"string\">\"href\"</span>, <span class=\"string\">\"/users\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h1><h2 id=\"Similarities-to-Chai\"><a href=\"#Similarities-to-Chai\" class=\"headerlink\" title=\"Similarities to Chai\"></a>Similarities to Chai</h2><p>If you’ve worked in <a href=\"http://chaijs.com/\" target=\"_blank\" rel=\"external\">Chai</a> before, you will recognize that <code>cy.and</code> matches the same fluent assertion syntax.</p>\n<p>Take this <em>explicit</em> assertion for example:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">expect(&#123;<span class=\"attr\">foo</span>: <span class=\"string\">\"bar\"</span>&#125;).to.have.property(<span class=\"string\">\"foo\"</span>).and.eq(<span class=\"string\">\"bar\"</span>)</div></pre></td></tr></table></figure>\n<p><code>cy.and</code> reproduces this same assertion behavior.</p>\n<hr>\n<h2 id=\"Can-I-pass-options-to-cy-and\"><a href=\"#Can-I-pass-options-to-cy-and\" class=\"headerlink\" title=\"Can I pass options to cy.and()?\"></a>Can I pass options to cy.and()?</h2><p>Options passed to the preceding command will be passed through to <code>cy.and</code>.</p>\n<p>The following example is an example of increasing the <code>timeout</code> of the <code>cy.and</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"input\"</span>, &#123;<span class=\"attr\">timeout</span>: <span class=\"number\">10000</span>&#125;) <span class=\"comment\">// &lt;-- wait up to 10 seconds for this 'input' to be found</span></div><div class=\"line\">    .should(<span class=\"string\">\"have.value\"</span>, <span class=\"string\">\"foo\"</span>)   <span class=\"comment\">// &lt;-- and to have the value 'foo'</span></div><div class=\"line\">    .and(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"radio\"</span>)    <span class=\"comment\">// &lt;-- and to have the class 'radio'</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.find(<span class=\"string\">\"input\"</span>, &#123;<span class=\"attr\">timeout</span>: <span class=\"number\">10000</span>&#125;).should(<span class=\"string\">\"have.value\"</span>, <span class=\"string\">\"foo\"</span>).and(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"radio\"</span>)</div><div class=\"line\">                         ↲</div><div class=\"line\">      <span class=\"comment\">// adding the timeout here will automatically</span></div><div class=\"line\">      <span class=\"comment\">// flow down to the assertions, and they will</span></div><div class=\"line\">      <span class=\"comment\">// be retried for up to 10 seconds</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"How-do-I-know-which-assertions-change-the-subject-and-which-keep-it-the-same\"><a href=\"#How-do-I-know-which-assertions-change-the-subject-and-which-keep-it-the-same\" class=\"headerlink\" title=\"How do I know which assertions change the subject and which keep it the same?\"></a>How do I know which assertions change the subject and which keep it the same?</h2><p>The chainers that come from <a href=\"https://on.cypress.io/guides/bundled-tools#section-chai\" target=\"_blank\" rel=\"external\">Chai</a> or <a href=\"https://on.cypress.io/guides/bundled-tools#section-chai-jquery\" target=\"_blank\" rel=\"external\">Chai-jQuery</a> will always document what they return.</p>\n<p>Alternatively, it is very easy to use Cypress itself to figure this out.</p>\n<p>You can <a href=\"https://on.cypress.io/guides/making-assertions#sections-debugging-assertions\" target=\"_blank\" rel=\"external\">read more about debugging assertions</a> here.</p>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Chain-assertions-on-the-same-subject-1\"><a href=\"#Chain-assertions-on-the-same-subject-1\" class=\"headerlink\" title=\"Chain assertions on the same subject\"></a>Chain assertions on the same subject</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.find(<span class=\"string\">\"input[type='checkbox']\"</span>)</div><div class=\"line\">  .should(<span class=\"string\">\"be.checked\"</span>)</div><div class=\"line\">  .and(<span class=\"string\">\"not.be.disabled\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"530\" alt=\"screen shot 2015-11-29 at 12 16 46 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458700/36d1e646-9693-11e5-8771-158230530fdc.png\"></p>\n<p>When clicking on <code>assert</code> within the command log, the console outputs the following:</p>\n<p><img width=\"636\" alt=\"screen shot 2015-11-29 at 12 17 03 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458702/3b6873be-9693-11e5-88f7-a928ebdac80c.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/should\" target=\"_blank\" rel=\"external\">should</a></li>\n<li><a href=\"https://on.cypress.io/guides/making-assertions\" target=\"_blank\" rel=\"external\">Making Assertions</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://on.cypress.io/guides/making-assertions\">Read about Making Assertions first.</a>“,<br>  “title”: “New to Cypress?”<br>}<br>[/block]</p>\n<p><code>cy.and</code> makes chaining together assertions easy.</p>\n<p>You’d typically use <code>cy.and</code> when you are making multiple assertions about the same subject.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the current subject but (in some cases) a new subject</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td>the assertion will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-and-chainers\"><a href=\"#cy-and-chainers\" class=\"headerlink\" title=\"cy.and( chainers )\"></a><a href=\"#section-chainers-usage\">cy.and( <em>chainers</em> )</a></h1><p>Make an assertion about the current subject using assertion chainers.</p>\n<hr>\n<h1 id=\"cy-and-chainers-value\"><a href=\"#cy-and-chainers-value\" class=\"headerlink\" title=\"cy.and( chainers, value )\"></a><a href=\"#section-chainers-with-value-usage\">cy.and( <em>chainers</em>, <em>value</em> )</a></h1><p>Make an assertion about the value of the current subject.</p>\n<p>Some chai methods and chai-jQuery methods return a new (different) subject for chain-ability.</p>\n<hr>\n<h1 id=\"cy-and-chainers-method-value\"><a href=\"#cy-and-chainers-method-value\" class=\"headerlink\" title=\"cy.and( chainers, method, value )\"></a><a href=\"#section-chainers-with-method-and-value-usage\">cy.and( <em>chainers</em>, <em>method</em>, <em>value</em> )</a></h1><p>Make an assertion about the subject by calling a method and providing a value to that method.</p>\n<hr>\n<h1 id=\"cy-and-function\"><a href=\"#cy-and-function\" class=\"headerlink\" title=\"cy.and( function )\"></a><a href=\"#section-function-usage\">cy.and( <em>function</em> )</a></h1><p>Pass a function that can have any number of explicit assertions written within it.</p>\n<p>Does not change the subject. Whatever was passed to the function is what is returned.</p>\n<hr>\n<h1 id=\"Chainers-Usage\"><a href=\"#Chainers-Usage\" class=\"headerlink\" title=\"Chainers Usage\"></a>Chainers Usage</h1><h2 id=\"Chain-assertions-on-the-same-subject\"><a href=\"#Chain-assertions-on-the-same-subject\" class=\"headerlink\" title=\"Chain assertions on the same subject\"></a>Chain assertions on the same subject</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).should(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"active\"</span>).and(<span class=\"string\">\"not.be.disabled\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Chainers-with-Value-Usage\"><a href=\"#Chainers-with-Value-Usage\" class=\"headerlink\" title=\"Chainers with Value Usage\"></a>Chainers with Value Usage</h1><h2 id=\"Chain-assertions-on-subject-change\"><a href=\"#Chain-assertions-on-subject-change\" class=\"headerlink\" title=\"Chain assertions on subject change\"></a>Chain assertions on subject change</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- App Code --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"users/123/edit\"</span>&gt;</span>Edit User<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  <span class=\"comment\">// subject is now &lt;a&gt;</span></div><div class=\"line\">  .get(<span class=\"string\">\"a\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// assert &lt;a&gt; contains text: \"Edit User\"</span></div><div class=\"line\">  <span class=\"comment\">// subject is still the &lt;a&gt;</span></div><div class=\"line\">  .should(<span class=\"string\">\"contain\"</span>, <span class=\"string\">\"Edit User\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// assert subject has 'href' attribute</span></div><div class=\"line\">  <span class=\"comment\">// subject now changes to return value from the 'href' attribute</span></div><div class=\"line\">  .and(<span class=\"string\">\"have.attr\"</span>, <span class=\"string\">\"href\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// assert that the string returned from 'href'</span></div><div class=\"line\">  <span class=\"comment\">// matches the RegExp /users/</span></div><div class=\"line\">  <span class=\"comment\">// the subject is still the same string</span></div><div class=\"line\">  .and(<span class=\"string\">\"match\"</span>, /users/)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// assert that the string does not</span></div><div class=\"line\">  <span class=\"comment\">// have a '#' character within it</span></div><div class=\"line\">  .and(<span class=\"string\">\"not.include\"</span>, <span class=\"string\">\"#\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Chainers-with-Method-and-Value-Usage\"><a href=\"#Chainers-with-Method-and-Value-Usage\" class=\"headerlink\" title=\"Chainers with Method and Value Usage\"></a>Chainers with Method and Value Usage</h1><h2 id=\"Assert-the-href-is-equal-to-‘-users’\"><a href=\"#Assert-the-href-is-equal-to-‘-users’\" class=\"headerlink\" title=\"Assert the href is equal to ‘/users’\"></a>Assert the href is equal to ‘/users’</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// have.attr comes from chai-jquery</span></div><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"#header a\"</span>)</div><div class=\"line\">  .should(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"active\"</span>)</div><div class=\"line\">  .and(<span class=\"string\">\"have.attr\"</span>, <span class=\"string\">\"href\"</span>, <span class=\"string\">\"/users\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Function-Usage\"><a href=\"#Function-Usage\" class=\"headerlink\" title=\"Function Usage\"></a>Function Usage</h1><h2 id=\"Verify-length-content-and-classes-from-multiple-lt-p-gt\"><a href=\"#Verify-length-content-and-classes-from-multiple-lt-p-gt\" class=\"headerlink\" title=\"Verify length, content, and classes from multiple &lt;p&gt;\"></a>Verify length, content, and classes from multiple <code>&lt;p&gt;</code></h2><p>Passing a function to <code>cy.and</code> enables you to assert on arbitrary subjects. This gives you the opportunity to <em>massage</em> what you’d like to assert on.</p>\n<p>Just be sure <em>not</em> to include any code that has side effects in your callback function.</p>\n<p>The callback function will be retried over and over again until no assertions within it throw.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text-primary\"</span>&gt;</span>Hello World<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text-danger\"</span>&gt;</span>You have an error<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text-default\"</span>&gt;</span>Try again later<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"p\"</span>)</div><div class=\"line\">  .should(<span class=\"string\">\"not.be.empty\"</span>)</div><div class=\"line\">  .and(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$p</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// should have found 3 elements</span></div><div class=\"line\">    expect($p).to.have.length(<span class=\"number\">3</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// make sure the first contains some text content</span></div><div class=\"line\">    expect($p.first()).to.contain(<span class=\"string\">\"Hello World\"</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// use jquery's map to grab all of their classes</span></div><div class=\"line\">    <span class=\"comment\">// jquery's map returns a new jquery object</span></div><div class=\"line\">    <span class=\"keyword\">var</span> classes = $p.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i, el</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> cy.$(el).attr(<span class=\"string\">\"class\"</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// call classes.get() to make this a plain array</span></div><div class=\"line\">    expect(classes.get()).to.deep.eq([</div><div class=\"line\">      <span class=\"string\">\"text-primary\"</span>,</div><div class=\"line\">      <span class=\"string\">\"text-danger\"</span>,</div><div class=\"line\">      <span class=\"string\">\"text-default\"</span></div><div class=\"line\">    ])</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Using-a-callback-function-will-not-change-the-subject\"><a href=\"#Using-a-callback-function-will-not-change-the-subject\" class=\"headerlink\" title=\"Using a callback function will not change the subject\"></a>Using a callback function will not change the subject</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"button\"</span>)</div><div class=\"line\">  .should(<span class=\"string\">\"be.active\"</span>)</div><div class=\"line\">  .and(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$button</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// whatever we return here is ignored</span></div><div class=\"line\">    <span class=\"comment\">// as Cypress will always force the return</span></div><div class=\"line\">    <span class=\"comment\">// value for future commands to be the same</span></div><div class=\"line\">    <span class=\"comment\">// as the previous subject which is &lt;button&gt;</span></div><div class=\"line\"></div><div class=\"line\">    expect(&#123;<span class=\"attr\">foo</span>: <span class=\"string\">\"bar\"</span>&#125;).to.deep.eq(&#123;<span class=\"attr\">foo</span>: <span class=\"string\">\"bar\"</span>&#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// whatever the return value (if any) is ignored</span></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">foo</span>: <span class=\"string\">\"bar\"</span>&#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$button</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// $button === &lt;button&gt;</span></div><div class=\"line\">    <span class=\"comment\">// the subject is unchanged no matter what was returned</span></div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Assertions-that-change-the-subject\"><a href=\"#Assertions-that-change-the-subject\" class=\"headerlink\" title=\"Assertions that change the subject\"></a>Assertions that change the subject</h2><p>Sometimes using a specific chainer will automatically change the assertion subject.</p>\n<p>For instance in <code>chai</code>, the method <a href=\"http://chaijs.com/api/bdd/\"><code>have.property(&quot;...&quot;)</code></a> will automatically change the subject.</p>\n<p>Additionally in <a href=\"https://github.com/chaijs/chai-jquery#attrname-value\"><code>Chai-jQuery</code></a>, the methods: <code>attr</code>, <code>prop</code>, <code>css</code>, and <code>data</code> also change the subject.</p>\n<p>This allows you to utilize other <code>chainer</code> methods such as <code>match</code> when making assertions about values.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in this example our subject changed to the string 'sans-serif' because</span></div><div class=\"line\"><span class=\"comment\">// have.css(\"font-family\") returned a string instead of the &lt;body&gt; element</span></div><div class=\"line\">cy</div><div class=\"line\">  <span class=\"comment\">// subject is &lt;body&gt;</span></div><div class=\"line\">  .get(<span class=\"string\">\"body\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// subject changes to the string return value of 'font-family'</span></div><div class=\"line\">  .should(<span class=\"string\">\"have.css\"</span>, <span class=\"string\">\"font-family\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// use match to assert the string matches a regular expression</span></div><div class=\"line\">  .and(<span class=\"string\">\"match\"</span>, /sans-serif/)</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in this example our subject changed to the string '/users' because</span></div><div class=\"line\"><span class=\"comment\">// have.attr, href, /users returned a string instead of the &lt;a&gt; element</span></div><div class=\"line\">cy</div><div class=\"line\">  <span class=\"comment\">// subject is &lt;a&gt;</span></div><div class=\"line\">  .get(<span class=\"string\">\"a\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// subject changes to the string 'users'</span></div><div class=\"line\">  .should(<span class=\"string\">\"have.attr\"</span>, <span class=\"string\">\"href\"</span>, <span class=\"string\">\"/users\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h1><h2 id=\"Similarities-to-Chai\"><a href=\"#Similarities-to-Chai\" class=\"headerlink\" title=\"Similarities to Chai\"></a>Similarities to Chai</h2><p>If you’ve worked in <a href=\"http://chaijs.com/\">Chai</a> before, you will recognize that <code>cy.and</code> matches the same fluent assertion syntax.</p>\n<p>Take this <em>explicit</em> assertion for example:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">expect(&#123;<span class=\"attr\">foo</span>: <span class=\"string\">\"bar\"</span>&#125;).to.have.property(<span class=\"string\">\"foo\"</span>).and.eq(<span class=\"string\">\"bar\"</span>)</div></pre></td></tr></table></figure>\n<p><code>cy.and</code> reproduces this same assertion behavior.</p>\n<hr>\n<h2 id=\"Can-I-pass-options-to-cy-and\"><a href=\"#Can-I-pass-options-to-cy-and\" class=\"headerlink\" title=\"Can I pass options to cy.and()?\"></a>Can I pass options to cy.and()?</h2><p>Options passed to the preceding command will be passed through to <code>cy.and</code>.</p>\n<p>The following example is an example of increasing the <code>timeout</code> of the <code>cy.and</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"input\"</span>, &#123;<span class=\"attr\">timeout</span>: <span class=\"number\">10000</span>&#125;) <span class=\"comment\">// &lt;-- wait up to 10 seconds for this 'input' to be found</span></div><div class=\"line\">    .should(<span class=\"string\">\"have.value\"</span>, <span class=\"string\">\"foo\"</span>)   <span class=\"comment\">// &lt;-- and to have the value 'foo'</span></div><div class=\"line\">    .and(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"radio\"</span>)    <span class=\"comment\">// &lt;-- and to have the class 'radio'</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.find(<span class=\"string\">\"input\"</span>, &#123;<span class=\"attr\">timeout</span>: <span class=\"number\">10000</span>&#125;).should(<span class=\"string\">\"have.value\"</span>, <span class=\"string\">\"foo\"</span>).and(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"radio\"</span>)</div><div class=\"line\">                         ↲</div><div class=\"line\">      <span class=\"comment\">// adding the timeout here will automatically</span></div><div class=\"line\">      <span class=\"comment\">// flow down to the assertions, and they will</span></div><div class=\"line\">      <span class=\"comment\">// be retried for up to 10 seconds</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"How-do-I-know-which-assertions-change-the-subject-and-which-keep-it-the-same\"><a href=\"#How-do-I-know-which-assertions-change-the-subject-and-which-keep-it-the-same\" class=\"headerlink\" title=\"How do I know which assertions change the subject and which keep it the same?\"></a>How do I know which assertions change the subject and which keep it the same?</h2><p>The chainers that come from <a href=\"https://on.cypress.io/guides/bundled-tools#section-chai\">Chai</a> or <a href=\"https://on.cypress.io/guides/bundled-tools#section-chai-jquery\">Chai-jQuery</a> will always document what they return.</p>\n<p>Alternatively, it is very easy to use Cypress itself to figure this out.</p>\n<p>You can <a href=\"https://on.cypress.io/guides/making-assertions#sections-debugging-assertions\">read more about debugging assertions</a> here.</p>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Chain-assertions-on-the-same-subject-1\"><a href=\"#Chain-assertions-on-the-same-subject-1\" class=\"headerlink\" title=\"Chain assertions on the same subject\"></a>Chain assertions on the same subject</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.find(<span class=\"string\">\"input[type='checkbox']\"</span>)</div><div class=\"line\">  .should(<span class=\"string\">\"be.checked\"</span>)</div><div class=\"line\">  .and(<span class=\"string\">\"not.be.disabled\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"530\" alt=\"screen shot 2015-11-29 at 12 16 46 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458700/36d1e646-9693-11e5-8771-158230530fdc.png\"></p>\n<p>When clicking on <code>assert</code> within the command log, the console outputs the following:</p>\n<p><img width=\"636\" alt=\"screen shot 2015-11-29 at 12 17 03 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458702/3b6873be-9693-11e5-88f7-a928ebdac80c.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/should\">should</a></li>\n<li><a href=\"https://on.cypress.io/guides/making-assertions\">Making Assertions</a></li>\n</ul>\n"},{"title":"blur","_content":"\nMake the DOM element found in the previous command lose focus.\n\n**The following events are fired during blur:** `focusout`, `blur`\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.blur` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.blur()](#section-usage)\n\nBlur the DOM element from the previous command.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.blur`.\n\n**[cy.blur( *options* )](#options-usage)**\n\nOption | Default | Notes\n--- | --- | ---\n`force` | `false` | Forces blur, disables error checking prior to blur\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Blur the comment input.\n\n```javascript\n// returns the same <textarea> for further chaining\ncy.get(\"[name='comment']\").type(\"Nice Product!\").blur()\n```\n\n***\n\n# Options Usage\n\n## Blur the first input, ignoring whether the input is currently focused.\n\n```javascript\n// returns the same <input> for further chaining\ncy.get(\"input:first\").blur({force: true})\n```\n\n***\n\n# Command Log\n\n## Blur a textarea after typing.\n\n```javascript\ncy.get(\"[name='comment']\").type(\"Nice Product!\").blur()\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"524\" alt=\"screen shot 2015-11-27 at 1 37 36 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446921/58a14e34-950c-11e5-85ba-633b7ed5d7f1.png\">\n\nWhen clicking on the `blur` command within the command log, the console outputs the following:\n\n<img width=\"525\" alt=\"screen shot 2015-11-27 at 1 37 53 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446923/5c44a2ca-950c-11e5-8080-0dc108bc4959.png\">\n\n***\n\n# Errors\n\n## cy.blur() can only be called when there is a currently focused element.\n\nThere is currently no specific element that has focus. If you want to ensure focus before blurring, try using `cy.focus()` on the element before `cy.blur()`\n\n## cy.blur() timed out because your browser did not receive any blur events. This is a known bug in Chrome when it is not the currently focused window.\n\nIf you see this error, you may want to ensure that the main browser window is currently focused. This means not being focused in debugger or any other window when the command is executed.\n\n## cy.blur() can only be called on the focused element.\n\nIf you want to ensure focus on a specific element before blurring, try using `cy.focus()` on the element before `cy.blur()`\n\n***\n\n# Related\n\n- [focused](https://on.cypress.io/api/focused)\n- [focus](https://on.cypress.io/api/focus)","source":"api/commands/blur.md","raw":"title: blur\n---\n\nMake the DOM element found in the previous command lose focus.\n\n**The following events are fired during blur:** `focusout`, `blur`\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.blur` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.blur()](#section-usage)\n\nBlur the DOM element from the previous command.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.blur`.\n\n**[cy.blur( *options* )](#options-usage)**\n\nOption | Default | Notes\n--- | --- | ---\n`force` | `false` | Forces blur, disables error checking prior to blur\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Blur the comment input.\n\n```javascript\n// returns the same <textarea> for further chaining\ncy.get(\"[name='comment']\").type(\"Nice Product!\").blur()\n```\n\n***\n\n# Options Usage\n\n## Blur the first input, ignoring whether the input is currently focused.\n\n```javascript\n// returns the same <input> for further chaining\ncy.get(\"input:first\").blur({force: true})\n```\n\n***\n\n# Command Log\n\n## Blur a textarea after typing.\n\n```javascript\ncy.get(\"[name='comment']\").type(\"Nice Product!\").blur()\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"524\" alt=\"screen shot 2015-11-27 at 1 37 36 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446921/58a14e34-950c-11e5-85ba-633b7ed5d7f1.png\">\n\nWhen clicking on the `blur` command within the command log, the console outputs the following:\n\n<img width=\"525\" alt=\"screen shot 2015-11-27 at 1 37 53 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446923/5c44a2ca-950c-11e5-8080-0dc108bc4959.png\">\n\n***\n\n# Errors\n\n## cy.blur() can only be called when there is a currently focused element.\n\nThere is currently no specific element that has focus. If you want to ensure focus before blurring, try using `cy.focus()` on the element before `cy.blur()`\n\n## cy.blur() timed out because your browser did not receive any blur events. This is a known bug in Chrome when it is not the currently focused window.\n\nIf you see this error, you may want to ensure that the main browser window is currently focused. This means not being focused in debugger or any other window when the command is executed.\n\n## cy.blur() can only be called on the focused element.\n\nIf you want to ensure focus on a specific element before blurring, try using `cy.focus()` on the element before `cy.blur()`\n\n***\n\n# Related\n\n- [focused](https://on.cypress.io/api/focused)\n- [focus](https://on.cypress.io/api/focus)","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/blur.html","comments":1,"layout":"page","_id":"cj1pc2g800003k1g8ricgotxo","content":"<p>Make the DOM element found in the previous command lose focus.</p>\n<p><strong>The following events are fired during blur:</strong> <code>focusout</code>, <code>blur</code></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.blur</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-blur\"><a href=\"#cy-blur\" class=\"headerlink\" title=\"cy.blur()\"></a><a href=\"#section-usage\">cy.blur()</a></h1><p>Blur the DOM element from the previous command.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.blur</code>.</p>\n<p><strong><a href=\"#options-usage\">cy.blur( <em>options</em> )</a></strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>force</code></td>\n<td><code>false</code></td>\n<td>Forces blur, disables error checking prior to blur</td>\n</tr>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Blur-the-comment-input\"><a href=\"#Blur-the-comment-input\" class=\"headerlink\" title=\"Blur the comment input.\"></a>Blur the comment input.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns the same &lt;textarea&gt; for further chaining</span></div><div class=\"line\">cy.get(<span class=\"string\">\"[name='comment']\"</span>).type(<span class=\"string\">\"Nice Product!\"</span>).blur()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Options-Usage\"><a href=\"#Options-Usage\" class=\"headerlink\" title=\"Options Usage\"></a>Options Usage</h1><h2 id=\"Blur-the-first-input-ignoring-whether-the-input-is-currently-focused\"><a href=\"#Blur-the-first-input-ignoring-whether-the-input-is-currently-focused\" class=\"headerlink\" title=\"Blur the first input, ignoring whether the input is currently focused.\"></a>Blur the first input, ignoring whether the input is currently focused.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns the same &lt;input&gt; for further chaining</span></div><div class=\"line\">cy.get(<span class=\"string\">\"input:first\"</span>).blur(&#123;<span class=\"attr\">force</span>: <span class=\"literal\">true</span>&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Blur-a-textarea-after-typing\"><a href=\"#Blur-a-textarea-after-typing\" class=\"headerlink\" title=\"Blur a textarea after typing.\"></a>Blur a textarea after typing.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"[name='comment']\"</span>).type(<span class=\"string\">\"Nice Product!\"</span>).blur()</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"524\" alt=\"screen shot 2015-11-27 at 1 37 36 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446921/58a14e34-950c-11e5-85ba-633b7ed5d7f1.png\"></p>\n<p>When clicking on the <code>blur</code> command within the command log, the console outputs the following:</p>\n<p><img width=\"525\" alt=\"screen shot 2015-11-27 at 1 37 53 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446923/5c44a2ca-950c-11e5-8080-0dc108bc4959.png\"></p>\n<hr>\n<h1 id=\"Errors\"><a href=\"#Errors\" class=\"headerlink\" title=\"Errors\"></a>Errors</h1><h2 id=\"cy-blur-can-only-be-called-when-there-is-a-currently-focused-element\"><a href=\"#cy-blur-can-only-be-called-when-there-is-a-currently-focused-element\" class=\"headerlink\" title=\"cy.blur() can only be called when there is a currently focused element.\"></a>cy.blur() can only be called when there is a currently focused element.</h2><p>There is currently no specific element that has focus. If you want to ensure focus before blurring, try using <code>cy.focus()</code> on the element before <code>cy.blur()</code></p>\n<h2 id=\"cy-blur-timed-out-because-your-browser-did-not-receive-any-blur-events-This-is-a-known-bug-in-Chrome-when-it-is-not-the-currently-focused-window\"><a href=\"#cy-blur-timed-out-because-your-browser-did-not-receive-any-blur-events-This-is-a-known-bug-in-Chrome-when-it-is-not-the-currently-focused-window\" class=\"headerlink\" title=\"cy.blur() timed out because your browser did not receive any blur events. This is a known bug in Chrome when it is not the currently focused window.\"></a>cy.blur() timed out because your browser did not receive any blur events. This is a known bug in Chrome when it is not the currently focused window.</h2><p>If you see this error, you may want to ensure that the main browser window is currently focused. This means not being focused in debugger or any other window when the command is executed.</p>\n<h2 id=\"cy-blur-can-only-be-called-on-the-focused-element\"><a href=\"#cy-blur-can-only-be-called-on-the-focused-element\" class=\"headerlink\" title=\"cy.blur() can only be called on the focused element.\"></a>cy.blur() can only be called on the focused element.</h2><p>If you want to ensure focus on a specific element before blurring, try using <code>cy.focus()</code> on the element before <code>cy.blur()</code></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/focused\" target=\"_blank\" rel=\"external\">focused</a></li>\n<li><a href=\"https://on.cypress.io/api/focus\" target=\"_blank\" rel=\"external\">focus</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Make the DOM element found in the previous command lose focus.</p>\n<p><strong>The following events are fired during blur:</strong> <code>focusout</code>, <code>blur</code></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.blur</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-blur\"><a href=\"#cy-blur\" class=\"headerlink\" title=\"cy.blur()\"></a><a href=\"#section-usage\">cy.blur()</a></h1><p>Blur the DOM element from the previous command.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.blur</code>.</p>\n<p><strong><a href=\"#options-usage\">cy.blur( <em>options</em> )</a></strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>force</code></td>\n<td><code>false</code></td>\n<td>Forces blur, disables error checking prior to blur</td>\n</tr>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Blur-the-comment-input\"><a href=\"#Blur-the-comment-input\" class=\"headerlink\" title=\"Blur the comment input.\"></a>Blur the comment input.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns the same &lt;textarea&gt; for further chaining</span></div><div class=\"line\">cy.get(<span class=\"string\">\"[name='comment']\"</span>).type(<span class=\"string\">\"Nice Product!\"</span>).blur()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Options-Usage\"><a href=\"#Options-Usage\" class=\"headerlink\" title=\"Options Usage\"></a>Options Usage</h1><h2 id=\"Blur-the-first-input-ignoring-whether-the-input-is-currently-focused\"><a href=\"#Blur-the-first-input-ignoring-whether-the-input-is-currently-focused\" class=\"headerlink\" title=\"Blur the first input, ignoring whether the input is currently focused.\"></a>Blur the first input, ignoring whether the input is currently focused.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns the same &lt;input&gt; for further chaining</span></div><div class=\"line\">cy.get(<span class=\"string\">\"input:first\"</span>).blur(&#123;<span class=\"attr\">force</span>: <span class=\"literal\">true</span>&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Blur-a-textarea-after-typing\"><a href=\"#Blur-a-textarea-after-typing\" class=\"headerlink\" title=\"Blur a textarea after typing.\"></a>Blur a textarea after typing.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"[name='comment']\"</span>).type(<span class=\"string\">\"Nice Product!\"</span>).blur()</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"524\" alt=\"screen shot 2015-11-27 at 1 37 36 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446921/58a14e34-950c-11e5-85ba-633b7ed5d7f1.png\"></p>\n<p>When clicking on the <code>blur</code> command within the command log, the console outputs the following:</p>\n<p><img width=\"525\" alt=\"screen shot 2015-11-27 at 1 37 53 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446923/5c44a2ca-950c-11e5-8080-0dc108bc4959.png\"></p>\n<hr>\n<h1 id=\"Errors\"><a href=\"#Errors\" class=\"headerlink\" title=\"Errors\"></a>Errors</h1><h2 id=\"cy-blur-can-only-be-called-when-there-is-a-currently-focused-element\"><a href=\"#cy-blur-can-only-be-called-when-there-is-a-currently-focused-element\" class=\"headerlink\" title=\"cy.blur() can only be called when there is a currently focused element.\"></a>cy.blur() can only be called when there is a currently focused element.</h2><p>There is currently no specific element that has focus. If you want to ensure focus before blurring, try using <code>cy.focus()</code> on the element before <code>cy.blur()</code></p>\n<h2 id=\"cy-blur-timed-out-because-your-browser-did-not-receive-any-blur-events-This-is-a-known-bug-in-Chrome-when-it-is-not-the-currently-focused-window\"><a href=\"#cy-blur-timed-out-because-your-browser-did-not-receive-any-blur-events-This-is-a-known-bug-in-Chrome-when-it-is-not-the-currently-focused-window\" class=\"headerlink\" title=\"cy.blur() timed out because your browser did not receive any blur events. This is a known bug in Chrome when it is not the currently focused window.\"></a>cy.blur() timed out because your browser did not receive any blur events. This is a known bug in Chrome when it is not the currently focused window.</h2><p>If you see this error, you may want to ensure that the main browser window is currently focused. This means not being focused in debugger or any other window when the command is executed.</p>\n<h2 id=\"cy-blur-can-only-be-called-on-the-focused-element\"><a href=\"#cy-blur-can-only-be-called-on-the-focused-element\" class=\"headerlink\" title=\"cy.blur() can only be called on the focused element.\"></a>cy.blur() can only be called on the focused element.</h2><p>If you want to ensure focus on a specific element before blurring, try using <code>cy.focus()</code> on the element before <code>cy.blur()</code></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/focused\">focused</a></li>\n<li><a href=\"https://on.cypress.io/api/focus\">focus</a></li>\n</ul>\n"},{"title":"children","_content":"\nGet the children of each DOM element in the set of matched DOM elements.\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.children` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.children()](#section-usage)\n\nGet the children of each DOM element in the set of matched DOM elements.\n\n***\n\n# [cy.children( *selector* )](#section-selector-usage)\n\nThe `.children()` method optionally accepts a selector expression. If the selector is supplied, the DOM elements will be filtered by testing whether they match it.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.children`.\n\n**cy.children( *options* )**\n**cy.children( *selector*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry getting the element\n\n***\n\n# Usage\n\n## Get the children of the \"secondary-nav\"\n\n```html\n<ul class=\"primary-nav\">\n  <li class=\"about\">About</li>\n  <li class=\"services\">Services\n    <ul class=\"secondary-nav\">\n      <li class=\"services-1\">Web Design</li>\n      <li class=\"services-2\">Print Design\n        <ul class=\"tertiary-nav\">\n          <li class=\"item-1\">Signage</li>\n          <li class=\"item-2\">T-Shirt</li>\n          <li class=\"item-3\">Business Cards</li>\n        </ul>\n      </li>\n      <li class=\"services-3\">Logo Design</li>\n    </ul>\n  </li>\n  <li class=\"Contact\">Contact</li>\n</ul>\n```\n\n```javascript\n// returns [\n//  <li class=\"services-1\"></li>,\n//  <li class=\"services-2\"></li>,\n//  <li class=\"services-3\"></li>\n// ]\ncy.get(\"ul.secondary-nav\").children()\n```\n\n***\n\n# Selector Usage\n\n## Get the children with class \"active\"\n\n```html\n<div>\n  <ul>\n    <li class=\"active\">Unit Testing</li>\n    <li>Integration Testing</li>\n  </ul>\n</div>\n```\n\n```javascript\n// returns [<li class=\"active\">Unit Testing</li>]\ncy.get(\"ul\").children(\".active\")\n```\n\n***\n\n# Command Log\n\n## Assert that there should be 8 children elements in a nav\n\n```javascript\ncy.get(\".left-nav>.nav\").children().should(\"have.length\", 8)\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"521\" alt=\"screen shot 2015-11-27 at 1 52 26 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447069/2b0f8a7e-950e-11e5-96b5-9d82d9fdddec.png\">\n\nWhen clicking on the `children` command within the command log, the console outputs the following:\n\n<img width=\"542\" alt=\"screen shot 2015-11-27 at 1 52 41 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447071/2e9252bc-950e-11e5-9a32-e5860da89160.png\">\n\n***\n\n# Related\n\n- [parent](https://on.cypress.io/api/parent)\n- [parents](https://on.cypress.io/api/parents)\n- [next](https://on.cypress.io/api/next)\n- [siblings](https://on.cypress.io/api/siblings)","source":"api/commands/children.md","raw":"title: children\n---\n\nGet the children of each DOM element in the set of matched DOM elements.\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.children` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.children()](#section-usage)\n\nGet the children of each DOM element in the set of matched DOM elements.\n\n***\n\n# [cy.children( *selector* )](#section-selector-usage)\n\nThe `.children()` method optionally accepts a selector expression. If the selector is supplied, the DOM elements will be filtered by testing whether they match it.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.children`.\n\n**cy.children( *options* )**\n**cy.children( *selector*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry getting the element\n\n***\n\n# Usage\n\n## Get the children of the \"secondary-nav\"\n\n```html\n<ul class=\"primary-nav\">\n  <li class=\"about\">About</li>\n  <li class=\"services\">Services\n    <ul class=\"secondary-nav\">\n      <li class=\"services-1\">Web Design</li>\n      <li class=\"services-2\">Print Design\n        <ul class=\"tertiary-nav\">\n          <li class=\"item-1\">Signage</li>\n          <li class=\"item-2\">T-Shirt</li>\n          <li class=\"item-3\">Business Cards</li>\n        </ul>\n      </li>\n      <li class=\"services-3\">Logo Design</li>\n    </ul>\n  </li>\n  <li class=\"Contact\">Contact</li>\n</ul>\n```\n\n```javascript\n// returns [\n//  <li class=\"services-1\"></li>,\n//  <li class=\"services-2\"></li>,\n//  <li class=\"services-3\"></li>\n// ]\ncy.get(\"ul.secondary-nav\").children()\n```\n\n***\n\n# Selector Usage\n\n## Get the children with class \"active\"\n\n```html\n<div>\n  <ul>\n    <li class=\"active\">Unit Testing</li>\n    <li>Integration Testing</li>\n  </ul>\n</div>\n```\n\n```javascript\n// returns [<li class=\"active\">Unit Testing</li>]\ncy.get(\"ul\").children(\".active\")\n```\n\n***\n\n# Command Log\n\n## Assert that there should be 8 children elements in a nav\n\n```javascript\ncy.get(\".left-nav>.nav\").children().should(\"have.length\", 8)\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"521\" alt=\"screen shot 2015-11-27 at 1 52 26 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447069/2b0f8a7e-950e-11e5-96b5-9d82d9fdddec.png\">\n\nWhen clicking on the `children` command within the command log, the console outputs the following:\n\n<img width=\"542\" alt=\"screen shot 2015-11-27 at 1 52 41 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447071/2e9252bc-950e-11e5-9a32-e5860da89160.png\">\n\n***\n\n# Related\n\n- [parent](https://on.cypress.io/api/parent)\n- [parents](https://on.cypress.io/api/parents)\n- [next](https://on.cypress.io/api/next)\n- [siblings](https://on.cypress.io/api/siblings)","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/children.html","comments":1,"layout":"page","_id":"cj1pc2g800004k1g8u6xnizn0","content":"<p>Get the children of each DOM element in the set of matched DOM elements.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.children</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-children\"><a href=\"#cy-children\" class=\"headerlink\" title=\"cy.children()\"></a><a href=\"#section-usage\">cy.children()</a></h1><p>Get the children of each DOM element in the set of matched DOM elements.</p>\n<hr>\n<h1 id=\"cy-children-selector\"><a href=\"#cy-children-selector\" class=\"headerlink\" title=\"cy.children( selector )\"></a><a href=\"#section-selector-usage\">cy.children( <em>selector</em> )</a></h1><p>The <code>.children()</code> method optionally accepts a selector expression. If the selector is supplied, the DOM elements will be filtered by testing whether they match it.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.children</code>.</p>\n<p><strong>cy.children( <em>options</em> )</strong><br><strong>cy.children( <em>selector</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry getting the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Get-the-children-of-the-“secondary-nav”\"><a href=\"#Get-the-children-of-the-“secondary-nav”\" class=\"headerlink\" title=\"Get the children of the “secondary-nav”\"></a>Get the children of the “secondary-nav”</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"primary-nav\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"about\"</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"services\"</span>&gt;</span>Services</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"secondary-nav\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"services-1\"</span>&gt;</span>Web Design<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"services-2\"</span>&gt;</span>Print Design</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tertiary-nav\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item-1\"</span>&gt;</span>Signage<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item-2\"</span>&gt;</span>T-Shirt<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item-3\"</span>&gt;</span>Business Cards<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"services-3\"</span>&gt;</span>Logo Design<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"Contact\"</span>&gt;</span>Contact<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns [</span></div><div class=\"line\"><span class=\"comment\">//  &lt;li class=\"services-1\"&gt;&lt;/li&gt;,</span></div><div class=\"line\"><span class=\"comment\">//  &lt;li class=\"services-2\"&gt;&lt;/li&gt;,</span></div><div class=\"line\"><span class=\"comment\">//  &lt;li class=\"services-3\"&gt;&lt;/li&gt;</span></div><div class=\"line\"><span class=\"comment\">// ]</span></div><div class=\"line\">cy.get(<span class=\"string\">\"ul.secondary-nav\"</span>).children()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Selector-Usage\"><a href=\"#Selector-Usage\" class=\"headerlink\" title=\"Selector Usage\"></a>Selector Usage</h1><h2 id=\"Get-the-children-with-class-“active”\"><a href=\"#Get-the-children-with-class-“active”\" class=\"headerlink\" title=\"Get the children with class “active”\"></a>Get the children with class “active”</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active\"</span>&gt;</span>Unit Testing<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Integration Testing<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns [&lt;li class=\"active\"&gt;Unit Testing&lt;/li&gt;]</span></div><div class=\"line\">cy.get(<span class=\"string\">\"ul\"</span>).children(<span class=\"string\">\".active\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Assert-that-there-should-be-8-children-elements-in-a-nav\"><a href=\"#Assert-that-there-should-be-8-children-elements-in-a-nav\" class=\"headerlink\" title=\"Assert that there should be 8 children elements in a nav\"></a>Assert that there should be 8 children elements in a nav</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\".left-nav&gt;.nav\"</span>).children().should(<span class=\"string\">\"have.length\"</span>, <span class=\"number\">8</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"521\" alt=\"screen shot 2015-11-27 at 1 52 26 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447069/2b0f8a7e-950e-11e5-96b5-9d82d9fdddec.png\"></p>\n<p>When clicking on the <code>children</code> command within the command log, the console outputs the following:</p>\n<p><img width=\"542\" alt=\"screen shot 2015-11-27 at 1 52 41 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447071/2e9252bc-950e-11e5-9a32-e5860da89160.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/parent\" target=\"_blank\" rel=\"external\">parent</a></li>\n<li><a href=\"https://on.cypress.io/api/parents\" target=\"_blank\" rel=\"external\">parents</a></li>\n<li><a href=\"https://on.cypress.io/api/next\" target=\"_blank\" rel=\"external\">next</a></li>\n<li><a href=\"https://on.cypress.io/api/siblings\" target=\"_blank\" rel=\"external\">siblings</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Get the children of each DOM element in the set of matched DOM elements.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.children</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-children\"><a href=\"#cy-children\" class=\"headerlink\" title=\"cy.children()\"></a><a href=\"#section-usage\">cy.children()</a></h1><p>Get the children of each DOM element in the set of matched DOM elements.</p>\n<hr>\n<h1 id=\"cy-children-selector\"><a href=\"#cy-children-selector\" class=\"headerlink\" title=\"cy.children( selector )\"></a><a href=\"#section-selector-usage\">cy.children( <em>selector</em> )</a></h1><p>The <code>.children()</code> method optionally accepts a selector expression. If the selector is supplied, the DOM elements will be filtered by testing whether they match it.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.children</code>.</p>\n<p><strong>cy.children( <em>options</em> )</strong><br><strong>cy.children( <em>selector</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry getting the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Get-the-children-of-the-“secondary-nav”\"><a href=\"#Get-the-children-of-the-“secondary-nav”\" class=\"headerlink\" title=\"Get the children of the “secondary-nav”\"></a>Get the children of the “secondary-nav”</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"primary-nav\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"about\"</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"services\"</span>&gt;</span>Services</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"secondary-nav\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"services-1\"</span>&gt;</span>Web Design<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"services-2\"</span>&gt;</span>Print Design</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tertiary-nav\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item-1\"</span>&gt;</span>Signage<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item-2\"</span>&gt;</span>T-Shirt<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item-3\"</span>&gt;</span>Business Cards<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"services-3\"</span>&gt;</span>Logo Design<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"Contact\"</span>&gt;</span>Contact<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns [</span></div><div class=\"line\"><span class=\"comment\">//  &lt;li class=\"services-1\"&gt;&lt;/li&gt;,</span></div><div class=\"line\"><span class=\"comment\">//  &lt;li class=\"services-2\"&gt;&lt;/li&gt;,</span></div><div class=\"line\"><span class=\"comment\">//  &lt;li class=\"services-3\"&gt;&lt;/li&gt;</span></div><div class=\"line\"><span class=\"comment\">// ]</span></div><div class=\"line\">cy.get(<span class=\"string\">\"ul.secondary-nav\"</span>).children()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Selector-Usage\"><a href=\"#Selector-Usage\" class=\"headerlink\" title=\"Selector Usage\"></a>Selector Usage</h1><h2 id=\"Get-the-children-with-class-“active”\"><a href=\"#Get-the-children-with-class-“active”\" class=\"headerlink\" title=\"Get the children with class “active”\"></a>Get the children with class “active”</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active\"</span>&gt;</span>Unit Testing<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Integration Testing<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns [&lt;li class=\"active\"&gt;Unit Testing&lt;/li&gt;]</span></div><div class=\"line\">cy.get(<span class=\"string\">\"ul\"</span>).children(<span class=\"string\">\".active\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Assert-that-there-should-be-8-children-elements-in-a-nav\"><a href=\"#Assert-that-there-should-be-8-children-elements-in-a-nav\" class=\"headerlink\" title=\"Assert that there should be 8 children elements in a nav\"></a>Assert that there should be 8 children elements in a nav</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\".left-nav&gt;.nav\"</span>).children().should(<span class=\"string\">\"have.length\"</span>, <span class=\"number\">8</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"521\" alt=\"screen shot 2015-11-27 at 1 52 26 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447069/2b0f8a7e-950e-11e5-96b5-9d82d9fdddec.png\"></p>\n<p>When clicking on the <code>children</code> command within the command log, the console outputs the following:</p>\n<p><img width=\"542\" alt=\"screen shot 2015-11-27 at 1 52 41 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447071/2e9252bc-950e-11e5-9a32-e5860da89160.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/parent\">parent</a></li>\n<li><a href=\"https://on.cypress.io/api/parents\">parents</a></li>\n<li><a href=\"https://on.cypress.io/api/next\">next</a></li>\n<li><a href=\"https://on.cypress.io/api/siblings\">siblings</a></li>\n</ul>\n"},{"title":"check","_content":"\nCheck the checkboxes or radios within the current subject.\n\n**The following events are fired during check:** `mousedown`, `focus`, `mouseup`, `click`\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.check` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) or the duration of the `timeout` specified in the command's [options](#section-options). |\n\n***\n\n# [cy.check()](#section-usage)\n\nChecks checkboxes or radios.\n\n***\n\n# [cy.check( *value* )](#section-value-usage)\n\nChecks the checkbox or radio with the matching value.\n\n***\n\n# [cy.check( *values* )](#section-values-usage)\n\nChecks the checkboxes or radios with the matching values.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.check`.\n\n**cy.check( *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`interval` | `16` | Interval which to retry a check\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry the check\n`force` | `false` | Forces check, disables error checking prior to check\n`log` | `true` | whether to display command in command log\n`multiple` | `false` | Enables serially checking multiple elements\n\n***\n\n# Usage\n\n## Check all checkboxes\n\n```javascript\ncy.get(\"[type='checkbox']\").check()\n```\n\n***\n\n## Check all radios\n\n```javascript\ncy.get(\"[type='radio']\").check()\n```\n\n***\n\n## Check the element with id of `saveUserName` and check it\n\n```javascript\ncy.get(\"#saveUserName\").check()\n```\n\n***\n\n# Value Usage\n\n## Check the checkbox with the value of \"US\"\n\n```javascript\ncy.get(\"input[type='checkbox']\").check(\"US\")\n```\n\n***\n\n# Values Usage\n\n## Check the checkbox with the value of \"ga\" and \"ca\"\n\n```javascript\ncy.get(\"input[type='checkbox']\").check([\"ga\", \"ca\"])\n```\n\n***\n\n# Command Log\n\n## check the element with name of emailUser\n\n```javascript\ncy.get(\"form\").find(\"[name='emailUser']\").check()\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"582\" alt=\"screen shot 2015-11-29 at 12 53 25 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458925/6226b39e-9698-11e5-9a2a-debf91f5989a.png\">\n\nWhen clicking on `check` within the command log, the console outputs the following:\n\n<img width=\"547\" alt=\"screen shot 2015-11-29 at 12 53 48 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458927/65a2526c-9698-11e5-8b33-f59e666170e2.png\">\n\n***\n\n# Related\n\n- [uncheck](https://on.cypress.io/api/uncheck)\n- [click](https://on.cypress.io/api/click)\n","source":"api/commands/check.md","raw":"title: check\n---\n\nCheck the checkboxes or radios within the current subject.\n\n**The following events are fired during check:** `mousedown`, `focus`, `mouseup`, `click`\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.check` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) or the duration of the `timeout` specified in the command's [options](#section-options). |\n\n***\n\n# [cy.check()](#section-usage)\n\nChecks checkboxes or radios.\n\n***\n\n# [cy.check( *value* )](#section-value-usage)\n\nChecks the checkbox or radio with the matching value.\n\n***\n\n# [cy.check( *values* )](#section-values-usage)\n\nChecks the checkboxes or radios with the matching values.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.check`.\n\n**cy.check( *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`interval` | `16` | Interval which to retry a check\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry the check\n`force` | `false` | Forces check, disables error checking prior to check\n`log` | `true` | whether to display command in command log\n`multiple` | `false` | Enables serially checking multiple elements\n\n***\n\n# Usage\n\n## Check all checkboxes\n\n```javascript\ncy.get(\"[type='checkbox']\").check()\n```\n\n***\n\n## Check all radios\n\n```javascript\ncy.get(\"[type='radio']\").check()\n```\n\n***\n\n## Check the element with id of `saveUserName` and check it\n\n```javascript\ncy.get(\"#saveUserName\").check()\n```\n\n***\n\n# Value Usage\n\n## Check the checkbox with the value of \"US\"\n\n```javascript\ncy.get(\"input[type='checkbox']\").check(\"US\")\n```\n\n***\n\n# Values Usage\n\n## Check the checkbox with the value of \"ga\" and \"ca\"\n\n```javascript\ncy.get(\"input[type='checkbox']\").check([\"ga\", \"ca\"])\n```\n\n***\n\n# Command Log\n\n## check the element with name of emailUser\n\n```javascript\ncy.get(\"form\").find(\"[name='emailUser']\").check()\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"582\" alt=\"screen shot 2015-11-29 at 12 53 25 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458925/6226b39e-9698-11e5-9a2a-debf91f5989a.png\">\n\nWhen clicking on `check` within the command log, the console outputs the following:\n\n<img width=\"547\" alt=\"screen shot 2015-11-29 at 12 53 48 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458927/65a2526c-9698-11e5-8b33-f59e666170e2.png\">\n\n***\n\n# Related\n\n- [uncheck](https://on.cypress.io/api/uncheck)\n- [click](https://on.cypress.io/api/click)\n","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/check.html","comments":1,"layout":"page","_id":"cj1pc2g810005k1g8af2zdva5","content":"<p>Check the checkboxes or radios within the current subject.</p>\n<p><strong>The following events are fired during check:</strong> <code>mousedown</code>, <code>focus</code>, <code>mouseup</code>, <code>click</code></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.check</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a> or the duration of the <code>timeout</code> specified in the command’s <a href=\"#section-options\">options</a>.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-check\"><a href=\"#cy-check\" class=\"headerlink\" title=\"cy.check()\"></a><a href=\"#section-usage\">cy.check()</a></h1><p>Checks checkboxes or radios.</p>\n<hr>\n<h1 id=\"cy-check-value\"><a href=\"#cy-check-value\" class=\"headerlink\" title=\"cy.check( value )\"></a><a href=\"#section-value-usage\">cy.check( <em>value</em> )</a></h1><p>Checks the checkbox or radio with the matching value.</p>\n<hr>\n<h1 id=\"cy-check-values\"><a href=\"#cy-check-values\" class=\"headerlink\" title=\"cy.check( values )\"></a><a href=\"#section-values-usage\">cy.check( <em>values</em> )</a></h1><p>Checks the checkboxes or radios with the matching values.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.check</code>.</p>\n<p><strong>cy.check( <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>interval</code></td>\n<td><code>16</code></td>\n<td>Interval which to retry a check</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry the check</td>\n</tr>\n<tr>\n<td><code>force</code></td>\n<td><code>false</code></td>\n<td>Forces check, disables error checking prior to check</td>\n</tr>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>multiple</code></td>\n<td><code>false</code></td>\n<td>Enables serially checking multiple elements</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Check-all-checkboxes\"><a href=\"#Check-all-checkboxes\" class=\"headerlink\" title=\"Check all checkboxes\"></a>Check all checkboxes</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"[type='checkbox']\"</span>).check()</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Check-all-radios\"><a href=\"#Check-all-radios\" class=\"headerlink\" title=\"Check all radios\"></a>Check all radios</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"[type='radio']\"</span>).check()</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Check-the-element-with-id-of-saveUserName-and-check-it\"><a href=\"#Check-the-element-with-id-of-saveUserName-and-check-it\" class=\"headerlink\" title=\"Check the element with id of saveUserName and check it\"></a>Check the element with id of <code>saveUserName</code> and check it</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"#saveUserName\"</span>).check()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Value-Usage\"><a href=\"#Value-Usage\" class=\"headerlink\" title=\"Value Usage\"></a>Value Usage</h1><h2 id=\"Check-the-checkbox-with-the-value-of-“US”\"><a href=\"#Check-the-checkbox-with-the-value-of-“US”\" class=\"headerlink\" title=\"Check the checkbox with the value of “US”\"></a>Check the checkbox with the value of “US”</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"input[type='checkbox']\"</span>).check(<span class=\"string\">\"US\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Values-Usage\"><a href=\"#Values-Usage\" class=\"headerlink\" title=\"Values Usage\"></a>Values Usage</h1><h2 id=\"Check-the-checkbox-with-the-value-of-“ga”-and-“ca”\"><a href=\"#Check-the-checkbox-with-the-value-of-“ga”-and-“ca”\" class=\"headerlink\" title=\"Check the checkbox with the value of “ga” and “ca”\"></a>Check the checkbox with the value of “ga” and “ca”</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"input[type='checkbox']\"</span>).check([<span class=\"string\">\"ga\"</span>, <span class=\"string\">\"ca\"</span>])</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"check-the-element-with-name-of-emailUser\"><a href=\"#check-the-element-with-name-of-emailUser\" class=\"headerlink\" title=\"check the element with name of emailUser\"></a>check the element with name of emailUser</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"form\"</span>).find(<span class=\"string\">\"[name='emailUser']\"</span>).check()</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"582\" alt=\"screen shot 2015-11-29 at 12 53 25 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458925/6226b39e-9698-11e5-9a2a-debf91f5989a.png\"></p>\n<p>When clicking on <code>check</code> within the command log, the console outputs the following:</p>\n<p><img width=\"547\" alt=\"screen shot 2015-11-29 at 12 53 48 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458927/65a2526c-9698-11e5-8b33-f59e666170e2.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/uncheck\" target=\"_blank\" rel=\"external\">uncheck</a></li>\n<li><a href=\"https://on.cypress.io/api/click\" target=\"_blank\" rel=\"external\">click</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Check the checkboxes or radios within the current subject.</p>\n<p><strong>The following events are fired during check:</strong> <code>mousedown</code>, <code>focus</code>, <code>mouseup</code>, <code>click</code></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.check</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a> or the duration of the <code>timeout</code> specified in the command’s <a href=\"#section-options\">options</a>.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-check\"><a href=\"#cy-check\" class=\"headerlink\" title=\"cy.check()\"></a><a href=\"#section-usage\">cy.check()</a></h1><p>Checks checkboxes or radios.</p>\n<hr>\n<h1 id=\"cy-check-value\"><a href=\"#cy-check-value\" class=\"headerlink\" title=\"cy.check( value )\"></a><a href=\"#section-value-usage\">cy.check( <em>value</em> )</a></h1><p>Checks the checkbox or radio with the matching value.</p>\n<hr>\n<h1 id=\"cy-check-values\"><a href=\"#cy-check-values\" class=\"headerlink\" title=\"cy.check( values )\"></a><a href=\"#section-values-usage\">cy.check( <em>values</em> )</a></h1><p>Checks the checkboxes or radios with the matching values.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.check</code>.</p>\n<p><strong>cy.check( <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>interval</code></td>\n<td><code>16</code></td>\n<td>Interval which to retry a check</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry the check</td>\n</tr>\n<tr>\n<td><code>force</code></td>\n<td><code>false</code></td>\n<td>Forces check, disables error checking prior to check</td>\n</tr>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>multiple</code></td>\n<td><code>false</code></td>\n<td>Enables serially checking multiple elements</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Check-all-checkboxes\"><a href=\"#Check-all-checkboxes\" class=\"headerlink\" title=\"Check all checkboxes\"></a>Check all checkboxes</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"[type='checkbox']\"</span>).check()</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Check-all-radios\"><a href=\"#Check-all-radios\" class=\"headerlink\" title=\"Check all radios\"></a>Check all radios</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"[type='radio']\"</span>).check()</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Check-the-element-with-id-of-saveUserName-and-check-it\"><a href=\"#Check-the-element-with-id-of-saveUserName-and-check-it\" class=\"headerlink\" title=\"Check the element with id of saveUserName and check it\"></a>Check the element with id of <code>saveUserName</code> and check it</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"#saveUserName\"</span>).check()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Value-Usage\"><a href=\"#Value-Usage\" class=\"headerlink\" title=\"Value Usage\"></a>Value Usage</h1><h2 id=\"Check-the-checkbox-with-the-value-of-“US”\"><a href=\"#Check-the-checkbox-with-the-value-of-“US”\" class=\"headerlink\" title=\"Check the checkbox with the value of “US”\"></a>Check the checkbox with the value of “US”</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"input[type='checkbox']\"</span>).check(<span class=\"string\">\"US\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Values-Usage\"><a href=\"#Values-Usage\" class=\"headerlink\" title=\"Values Usage\"></a>Values Usage</h1><h2 id=\"Check-the-checkbox-with-the-value-of-“ga”-and-“ca”\"><a href=\"#Check-the-checkbox-with-the-value-of-“ga”-and-“ca”\" class=\"headerlink\" title=\"Check the checkbox with the value of “ga” and “ca”\"></a>Check the checkbox with the value of “ga” and “ca”</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"input[type='checkbox']\"</span>).check([<span class=\"string\">\"ga\"</span>, <span class=\"string\">\"ca\"</span>])</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"check-the-element-with-name-of-emailUser\"><a href=\"#check-the-element-with-name-of-emailUser\" class=\"headerlink\" title=\"check the element with name of emailUser\"></a>check the element with name of emailUser</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"form\"</span>).find(<span class=\"string\">\"[name='emailUser']\"</span>).check()</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"582\" alt=\"screen shot 2015-11-29 at 12 53 25 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458925/6226b39e-9698-11e5-9a2a-debf91f5989a.png\"></p>\n<p>When clicking on <code>check</code> within the command log, the console outputs the following:</p>\n<p><img width=\"547\" alt=\"screen shot 2015-11-29 at 12 53 48 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458927/65a2526c-9698-11e5-8b33-f59e666170e2.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/uncheck\">uncheck</a></li>\n<li><a href=\"https://on.cypress.io/api/click\">click</a></li>\n</ul>\n"},{"title":"clear","_content":"\nClears a value of an `<input>` or `<textarea>`. Under the hood this is actually a shortcut for writing:\n\n```javascript\ncy.type(\"{selectall}{backspace}\")\n```\n\nPrior to clearing, if the element isn't currently focused, Cypress will issue a [click](https://on.cypress.io/api/click) on the element, which will cause the element to receive focus.\n\n**The following events are fired during clear:** `keydown`, `keypress`, `textInput`, `input`, `keyup`.\n\n`beforeinput` is *not* fired even though it is in the spec because no browser has adopted it.\n\n| | |\n|--- | --- |\n| **Returns** | the element that was typed into |\n| **Timeout** | `cy.clear` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) or the duration of the `timeout` specified in the command's [options](#section-options).|\n\n***\n\n# [cy.clear()](#section-usage)\n\nClears the value of an `<input>` or `<textarea>`.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.clear`.\n\n**cy.clear( *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`force` | `false` | Forces clear, disables error checking prior to clear\n`interval` | `16` | Interval which to retry type\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry the type\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Clear the input and type a new value.\n\n```html\n<input name=\"name\" value=\"John Doe\" />\n```\n\n```javascript\n// clears the existing value first before typing\ncy.get(\"input[name='name']\").clear().type(\"Jane Lane\")\n```\n\n***\n\n# Command Log\n\n## Clear the input and type a new value\n\n```javascript\ncy.get(\"input[name='name']\").clear().type(\"Jane Lane\")\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"570\" alt=\"screen shot 2015-11-29 at 12 56 58 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458939/bac1f4dc-9698-11e5-8e20-1ed9405f3d30.png\">\n\nWhen clicking on `clear` within the command log, the console outputs the following:\n\n<img width=\"511\" alt=\"screen shot 2015-11-29 at 12 57 07 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458940/bdc93a50-9698-11e5-8be7-ef6a0470c3ae.png\">\n\n***\n\n# Related\n\n- [type](https://on.cypress.io/api/type)","source":"api/commands/clear.md","raw":"title: clear\n---\n\nClears a value of an `<input>` or `<textarea>`. Under the hood this is actually a shortcut for writing:\n\n```javascript\ncy.type(\"{selectall}{backspace}\")\n```\n\nPrior to clearing, if the element isn't currently focused, Cypress will issue a [click](https://on.cypress.io/api/click) on the element, which will cause the element to receive focus.\n\n**The following events are fired during clear:** `keydown`, `keypress`, `textInput`, `input`, `keyup`.\n\n`beforeinput` is *not* fired even though it is in the spec because no browser has adopted it.\n\n| | |\n|--- | --- |\n| **Returns** | the element that was typed into |\n| **Timeout** | `cy.clear` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) or the duration of the `timeout` specified in the command's [options](#section-options).|\n\n***\n\n# [cy.clear()](#section-usage)\n\nClears the value of an `<input>` or `<textarea>`.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.clear`.\n\n**cy.clear( *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`force` | `false` | Forces clear, disables error checking prior to clear\n`interval` | `16` | Interval which to retry type\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry the type\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Clear the input and type a new value.\n\n```html\n<input name=\"name\" value=\"John Doe\" />\n```\n\n```javascript\n// clears the existing value first before typing\ncy.get(\"input[name='name']\").clear().type(\"Jane Lane\")\n```\n\n***\n\n# Command Log\n\n## Clear the input and type a new value\n\n```javascript\ncy.get(\"input[name='name']\").clear().type(\"Jane Lane\")\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"570\" alt=\"screen shot 2015-11-29 at 12 56 58 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458939/bac1f4dc-9698-11e5-8e20-1ed9405f3d30.png\">\n\nWhen clicking on `clear` within the command log, the console outputs the following:\n\n<img width=\"511\" alt=\"screen shot 2015-11-29 at 12 57 07 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458940/bdc93a50-9698-11e5-8be7-ef6a0470c3ae.png\">\n\n***\n\n# Related\n\n- [type](https://on.cypress.io/api/type)","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/clear.html","comments":1,"layout":"page","_id":"cj1pc2g810006k1g8bqxqawpc","content":"<p>Clears a value of an <code>&lt;input&gt;</code> or <code>&lt;textarea&gt;</code>. Under the hood this is actually a shortcut for writing:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.type(<span class=\"string\">\"&#123;selectall&#125;&#123;backspace&#125;\"</span>)</div></pre></td></tr></table></figure>\n<p>Prior to clearing, if the element isn’t currently focused, Cypress will issue a <a href=\"https://on.cypress.io/api/click\" target=\"_blank\" rel=\"external\">click</a> on the element, which will cause the element to receive focus.</p>\n<p><strong>The following events are fired during clear:</strong> <code>keydown</code>, <code>keypress</code>, <code>textInput</code>, <code>input</code>, <code>keyup</code>.</p>\n<p><code>beforeinput</code> is <em>not</em> fired even though it is in the spec because no browser has adopted it.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the element that was typed into</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.clear</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a> or the duration of the <code>timeout</code> specified in the command’s <a href=\"#section-options\">options</a>.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-clear\"><a href=\"#cy-clear\" class=\"headerlink\" title=\"cy.clear()\"></a><a href=\"#section-usage\">cy.clear()</a></h1><p>Clears the value of an <code>&lt;input&gt;</code> or <code>&lt;textarea&gt;</code>.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.clear</code>.</p>\n<p><strong>cy.clear( <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>force</code></td>\n<td><code>false</code></td>\n<td>Forces clear, disables error checking prior to clear</td>\n</tr>\n<tr>\n<td><code>interval</code></td>\n<td><code>16</code></td>\n<td>Interval which to retry type</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry the type</td>\n</tr>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Clear-the-input-and-type-a-new-value\"><a href=\"#Clear-the-input-and-type-a-new-value\" class=\"headerlink\" title=\"Clear the input and type a new value.\"></a>Clear the input and type a new value.</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"John Doe\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// clears the existing value first before typing</span></div><div class=\"line\">cy.get(<span class=\"string\">\"input[name='name']\"</span>).clear().type(<span class=\"string\">\"Jane Lane\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Clear-the-input-and-type-a-new-value-1\"><a href=\"#Clear-the-input-and-type-a-new-value-1\" class=\"headerlink\" title=\"Clear the input and type a new value\"></a>Clear the input and type a new value</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"input[name='name']\"</span>).clear().type(<span class=\"string\">\"Jane Lane\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"570\" alt=\"screen shot 2015-11-29 at 12 56 58 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458939/bac1f4dc-9698-11e5-8e20-1ed9405f3d30.png\"></p>\n<p>When clicking on <code>clear</code> within the command log, the console outputs the following:</p>\n<p><img width=\"511\" alt=\"screen shot 2015-11-29 at 12 57 07 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458940/bdc93a50-9698-11e5-8be7-ef6a0470c3ae.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/type\" target=\"_blank\" rel=\"external\">type</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Clears a value of an <code>&lt;input&gt;</code> or <code>&lt;textarea&gt;</code>. Under the hood this is actually a shortcut for writing:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.type(<span class=\"string\">\"&#123;selectall&#125;&#123;backspace&#125;\"</span>)</div></pre></td></tr></table></figure>\n<p>Prior to clearing, if the element isn’t currently focused, Cypress will issue a <a href=\"https://on.cypress.io/api/click\">click</a> on the element, which will cause the element to receive focus.</p>\n<p><strong>The following events are fired during clear:</strong> <code>keydown</code>, <code>keypress</code>, <code>textInput</code>, <code>input</code>, <code>keyup</code>.</p>\n<p><code>beforeinput</code> is <em>not</em> fired even though it is in the spec because no browser has adopted it.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the element that was typed into</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.clear</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a> or the duration of the <code>timeout</code> specified in the command’s <a href=\"#section-options\">options</a>.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-clear\"><a href=\"#cy-clear\" class=\"headerlink\" title=\"cy.clear()\"></a><a href=\"#section-usage\">cy.clear()</a></h1><p>Clears the value of an <code>&lt;input&gt;</code> or <code>&lt;textarea&gt;</code>.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.clear</code>.</p>\n<p><strong>cy.clear( <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>force</code></td>\n<td><code>false</code></td>\n<td>Forces clear, disables error checking prior to clear</td>\n</tr>\n<tr>\n<td><code>interval</code></td>\n<td><code>16</code></td>\n<td>Interval which to retry type</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry the type</td>\n</tr>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Clear-the-input-and-type-a-new-value\"><a href=\"#Clear-the-input-and-type-a-new-value\" class=\"headerlink\" title=\"Clear the input and type a new value.\"></a>Clear the input and type a new value.</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"John Doe\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// clears the existing value first before typing</span></div><div class=\"line\">cy.get(<span class=\"string\">\"input[name='name']\"</span>).clear().type(<span class=\"string\">\"Jane Lane\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Clear-the-input-and-type-a-new-value-1\"><a href=\"#Clear-the-input-and-type-a-new-value-1\" class=\"headerlink\" title=\"Clear the input and type a new value\"></a>Clear the input and type a new value</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"input[name='name']\"</span>).clear().type(<span class=\"string\">\"Jane Lane\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"570\" alt=\"screen shot 2015-11-29 at 12 56 58 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458939/bac1f4dc-9698-11e5-8e20-1ed9405f3d30.png\"></p>\n<p>When clicking on <code>clear</code> within the command log, the console outputs the following:</p>\n<p><img width=\"511\" alt=\"screen shot 2015-11-29 at 12 57 07 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458940/bdc93a50-9698-11e5-8be7-ef6a0470c3ae.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/type\">type</a></li>\n</ul>\n"},{"title":"clearcookie","_content":"\nClears a browser cookie.\n\nCypress automatically clears all cookies **before** each test to prevent state from building up. You shouldn't need to invoke this command unless you're using it to clear a specific cookie inside a single test.\n\n| | |\n|--- | --- |\n| **Returns** | `null` |\n| **Timeout** | `cy.clearCookie` will wait up for the duration of [`responseTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) for the automation server to process this command. |\n\n***\n\n# [cy.clearCookie( *name* )](#section-usage)\n\nClears a browser cookie by its name.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.clearCookie`.\n\n**[cy.clearCookie( *name*, *options* )](#options-usage)**\n\nOption | Default | Notes\n--- | --- | ---\n`timeout` | [`responseTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to wait for the `cy.clearCookie` command to be processed\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Clear a cookie after logging in\n\nIn this example, on first login our server sends us back a session cookie. After invoking `cy.clearCookie('session_id')` this clears the session cookie, and upon navigating to an unauthorized page, our server should have redirected us back to login.\n\n```javascript\ncy\n  .login('bob@example.com', 'p@ssw0rd') // example of custom command\n  .clearCookie('session_id')\n  .visit('/dashboard')                  // we should be redirected back to login\n  .url().should('eq', 'login')\n```\n\n***\n\n# Command Log\n\n## Clearing a cookie after setting a cookie\n\n```javascript\ncy\n  .setCookie('foo', 'bar')\n  .clearCookie('foo')\n  .getCookie('foo').should('be.null')\n```\n\nThe commands above will display in the command log as:\n\n![screen shot 2016-05-22 at 9 21 14 pm](https://cloud.githubusercontent.com/assets/1268976/15458066/345b5bb8-2063-11e6-91bb-173421c8440a.png)\n\nWhen clicking on `clearCookie` within the command log, the console outputs the following:\n\n![screen shot 2016-05-22 at 9 21 32 pm](https://cloud.githubusercontent.com/assets/1268976/15458067/345dba3e-2063-11e6-8739-af971bc79068.png)\n\n***\n\n# Related\n\n- [clearCookies](https://on.cypress.io/api/clearcookies)\n- [getCookie](https://on.cypress.io/api/getcookie)\n- [getCookies](https://on.cypress.io/api/getcookies)\n- [setCookie](https://on.cypress.io/api/setcookie)\n- [Cypress Cookies API](https://on.cypress.io/api/cookies)","source":"api/commands/clearcookie.md","raw":"title: clearcookie\n---\n\nClears a browser cookie.\n\nCypress automatically clears all cookies **before** each test to prevent state from building up. You shouldn't need to invoke this command unless you're using it to clear a specific cookie inside a single test.\n\n| | |\n|--- | --- |\n| **Returns** | `null` |\n| **Timeout** | `cy.clearCookie` will wait up for the duration of [`responseTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) for the automation server to process this command. |\n\n***\n\n# [cy.clearCookie( *name* )](#section-usage)\n\nClears a browser cookie by its name.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.clearCookie`.\n\n**[cy.clearCookie( *name*, *options* )](#options-usage)**\n\nOption | Default | Notes\n--- | --- | ---\n`timeout` | [`responseTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to wait for the `cy.clearCookie` command to be processed\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Clear a cookie after logging in\n\nIn this example, on first login our server sends us back a session cookie. After invoking `cy.clearCookie('session_id')` this clears the session cookie, and upon navigating to an unauthorized page, our server should have redirected us back to login.\n\n```javascript\ncy\n  .login('bob@example.com', 'p@ssw0rd') // example of custom command\n  .clearCookie('session_id')\n  .visit('/dashboard')                  // we should be redirected back to login\n  .url().should('eq', 'login')\n```\n\n***\n\n# Command Log\n\n## Clearing a cookie after setting a cookie\n\n```javascript\ncy\n  .setCookie('foo', 'bar')\n  .clearCookie('foo')\n  .getCookie('foo').should('be.null')\n```\n\nThe commands above will display in the command log as:\n\n![screen shot 2016-05-22 at 9 21 14 pm](https://cloud.githubusercontent.com/assets/1268976/15458066/345b5bb8-2063-11e6-91bb-173421c8440a.png)\n\nWhen clicking on `clearCookie` within the command log, the console outputs the following:\n\n![screen shot 2016-05-22 at 9 21 32 pm](https://cloud.githubusercontent.com/assets/1268976/15458067/345dba3e-2063-11e6-8739-af971bc79068.png)\n\n***\n\n# Related\n\n- [clearCookies](https://on.cypress.io/api/clearcookies)\n- [getCookie](https://on.cypress.io/api/getcookie)\n- [getCookies](https://on.cypress.io/api/getcookies)\n- [setCookie](https://on.cypress.io/api/setcookie)\n- [Cypress Cookies API](https://on.cypress.io/api/cookies)","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/clearcookie.html","comments":1,"layout":"page","_id":"cj1pc2g820007k1g83x4wru13","content":"<p>Clears a browser cookie.</p>\n<p>Cypress automatically clears all cookies <strong>before</strong> each test to prevent state from building up. You shouldn’t need to invoke this command unless you’re using it to clear a specific cookie inside a single test.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td><code>null</code></td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.clearCookie</code> will wait up for the duration of <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>responseTimeout</code></a> for the automation server to process this command.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-clearCookie-name\"><a href=\"#cy-clearCookie-name\" class=\"headerlink\" title=\"cy.clearCookie( name )\"></a><a href=\"#section-usage\">cy.clearCookie( <em>name</em> )</a></h1><p>Clears a browser cookie by its name.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.clearCookie</code>.</p>\n<p><strong><a href=\"#options-usage\">cy.clearCookie( <em>name</em>, <em>options</em> )</a></strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>responseTimeout</code></a></td>\n<td>Total time to wait for the <code>cy.clearCookie</code> command to be processed</td>\n</tr>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Clear-a-cookie-after-logging-in\"><a href=\"#Clear-a-cookie-after-logging-in\" class=\"headerlink\" title=\"Clear a cookie after logging in\"></a>Clear a cookie after logging in</h2><p>In this example, on first login our server sends us back a session cookie. After invoking <code>cy.clearCookie(&#39;session_id&#39;)</code> this clears the session cookie, and upon navigating to an unauthorized page, our server should have redirected us back to login.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .login(<span class=\"string\">'bob@example.com'</span>, <span class=\"string\">'p@ssw0rd'</span>) <span class=\"comment\">// example of custom command</span></div><div class=\"line\">  .clearCookie(<span class=\"string\">'session_id'</span>)</div><div class=\"line\">  .visit(<span class=\"string\">'/dashboard'</span>)                  <span class=\"comment\">// we should be redirected back to login</span></div><div class=\"line\">  .url().should(<span class=\"string\">'eq'</span>, <span class=\"string\">'login'</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Clearing-a-cookie-after-setting-a-cookie\"><a href=\"#Clearing-a-cookie-after-setting-a-cookie\" class=\"headerlink\" title=\"Clearing a cookie after setting a cookie\"></a>Clearing a cookie after setting a cookie</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .setCookie(<span class=\"string\">'foo'</span>, <span class=\"string\">'bar'</span>)</div><div class=\"line\">  .clearCookie(<span class=\"string\">'foo'</span>)</div><div class=\"line\">  .getCookie(<span class=\"string\">'foo'</span>).should(<span class=\"string\">'be.null'</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/15458066/345b5bb8-2063-11e6-91bb-173421c8440a.png\" alt=\"screen shot 2016-05-22 at 9 21 14 pm\"></p>\n<p>When clicking on <code>clearCookie</code> within the command log, the console outputs the following:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/15458067/345dba3e-2063-11e6-8739-af971bc79068.png\" alt=\"screen shot 2016-05-22 at 9 21 32 pm\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/clearcookies\" target=\"_blank\" rel=\"external\">clearCookies</a></li>\n<li><a href=\"https://on.cypress.io/api/getcookie\" target=\"_blank\" rel=\"external\">getCookie</a></li>\n<li><a href=\"https://on.cypress.io/api/getcookies\" target=\"_blank\" rel=\"external\">getCookies</a></li>\n<li><a href=\"https://on.cypress.io/api/setcookie\" target=\"_blank\" rel=\"external\">setCookie</a></li>\n<li><a href=\"https://on.cypress.io/api/cookies\" target=\"_blank\" rel=\"external\">Cypress Cookies API</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Clears a browser cookie.</p>\n<p>Cypress automatically clears all cookies <strong>before</strong> each test to prevent state from building up. You shouldn’t need to invoke this command unless you’re using it to clear a specific cookie inside a single test.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td><code>null</code></td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.clearCookie</code> will wait up for the duration of <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>responseTimeout</code></a> for the automation server to process this command.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-clearCookie-name\"><a href=\"#cy-clearCookie-name\" class=\"headerlink\" title=\"cy.clearCookie( name )\"></a><a href=\"#section-usage\">cy.clearCookie( <em>name</em> )</a></h1><p>Clears a browser cookie by its name.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.clearCookie</code>.</p>\n<p><strong><a href=\"#options-usage\">cy.clearCookie( <em>name</em>, <em>options</em> )</a></strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>responseTimeout</code></a></td>\n<td>Total time to wait for the <code>cy.clearCookie</code> command to be processed</td>\n</tr>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Clear-a-cookie-after-logging-in\"><a href=\"#Clear-a-cookie-after-logging-in\" class=\"headerlink\" title=\"Clear a cookie after logging in\"></a>Clear a cookie after logging in</h2><p>In this example, on first login our server sends us back a session cookie. After invoking <code>cy.clearCookie(&#39;session_id&#39;)</code> this clears the session cookie, and upon navigating to an unauthorized page, our server should have redirected us back to login.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .login(<span class=\"string\">'bob@example.com'</span>, <span class=\"string\">'p@ssw0rd'</span>) <span class=\"comment\">// example of custom command</span></div><div class=\"line\">  .clearCookie(<span class=\"string\">'session_id'</span>)</div><div class=\"line\">  .visit(<span class=\"string\">'/dashboard'</span>)                  <span class=\"comment\">// we should be redirected back to login</span></div><div class=\"line\">  .url().should(<span class=\"string\">'eq'</span>, <span class=\"string\">'login'</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Clearing-a-cookie-after-setting-a-cookie\"><a href=\"#Clearing-a-cookie-after-setting-a-cookie\" class=\"headerlink\" title=\"Clearing a cookie after setting a cookie\"></a>Clearing a cookie after setting a cookie</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .setCookie(<span class=\"string\">'foo'</span>, <span class=\"string\">'bar'</span>)</div><div class=\"line\">  .clearCookie(<span class=\"string\">'foo'</span>)</div><div class=\"line\">  .getCookie(<span class=\"string\">'foo'</span>).should(<span class=\"string\">'be.null'</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/15458066/345b5bb8-2063-11e6-91bb-173421c8440a.png\" alt=\"screen shot 2016-05-22 at 9 21 14 pm\"></p>\n<p>When clicking on <code>clearCookie</code> within the command log, the console outputs the following:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/15458067/345dba3e-2063-11e6-8739-af971bc79068.png\" alt=\"screen shot 2016-05-22 at 9 21 32 pm\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/clearcookies\">clearCookies</a></li>\n<li><a href=\"https://on.cypress.io/api/getcookie\">getCookie</a></li>\n<li><a href=\"https://on.cypress.io/api/getcookies\">getCookies</a></li>\n<li><a href=\"https://on.cypress.io/api/setcookie\">setCookie</a></li>\n<li><a href=\"https://on.cypress.io/api/cookies\">Cypress Cookies API</a></li>\n</ul>\n"},{"title":"clearcookies","_content":"\nClears all of the browser cookies.\n\nCypress automatically invokes this command **before** each test to prevent state from building up. You shouldn't need to invoke this command unless you're using it to clear cookies inside a single test.\n\n| | |\n|--- | --- |\n| **Returns** | `null` |\n| **Timeout** | `cy.clearCookies` will wait up for the duration of [`responseTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) for the automation server to process this command.|\n\n***\n\n# [cy.clearCookies()](#section-usage)\n\nClears all the browser cookies.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.clearCookies`.\n\n**[cy.clearCookies(*options* )](#options-usage)**\n\nOption | Default | Notes\n--- | --- | ---\n`timeout` | [`responseTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to wait for the `cy.clearCookies` command to be processed\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Clear cookies after logging in\n\nIn this example, on first login our server sends us back a session cookie. After invoking `cy.clearCookies` this clears the session cookie, and upon navigating to an unauthorized page, our server should have redirected us back to login.\n\n```javascript\ncy\n  .login(\"bob@example.com\", \"p@ssw0rd\") // example of custom command\n  .clearCookies()\n  .visit(\"/dashboard\")                  // we should be redirected back to login\n  .url().should(\"eq\", \"login\")\n```\n\n***\n\n# Command Log\n\n## Clear cookies after getting cookies\n\n```javascript\ncy\n  .getCookies().should('have.length', 1)\n  .clearCookies()\n  .getCookies().should('be.empty')\n```\n\nThe commands above will display in the command log as:\n\n![screen shot 2016-05-10 at 12 01 38 pm](https://cloud.githubusercontent.com/assets/1271364/15153391/1afa9fb4-16a7-11e6-9a76-3c3e6b4b9f6b.png)\n\nWhen clicking on `clearCookies` within the command log, the console outputs the following:\n\n![screen shot 2016-05-10 at 12 02 01 pm](https://cloud.githubusercontent.com/assets/1271364/15153392/1afb086e-16a7-11e6-9541-1b1794e14705.png)\n\n***\n\n# Related\n\n- [clearCookie](https://on.cypress.io/api/clearcookie)\n- [getCookie](https://on.cypress.io/api/getcookie)\n- [getCookies](https://on.cypress.io/api/getcookies)\n- [setCookie](https://on.cypress.io/api/setcookie)\n- [Cypress Cookies API](https://on.cypress.io/api/cookies)","source":"api/commands/clearcookies.md","raw":"title: clearcookies\n---\n\nClears all of the browser cookies.\n\nCypress automatically invokes this command **before** each test to prevent state from building up. You shouldn't need to invoke this command unless you're using it to clear cookies inside a single test.\n\n| | |\n|--- | --- |\n| **Returns** | `null` |\n| **Timeout** | `cy.clearCookies` will wait up for the duration of [`responseTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) for the automation server to process this command.|\n\n***\n\n# [cy.clearCookies()](#section-usage)\n\nClears all the browser cookies.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.clearCookies`.\n\n**[cy.clearCookies(*options* )](#options-usage)**\n\nOption | Default | Notes\n--- | --- | ---\n`timeout` | [`responseTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to wait for the `cy.clearCookies` command to be processed\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Clear cookies after logging in\n\nIn this example, on first login our server sends us back a session cookie. After invoking `cy.clearCookies` this clears the session cookie, and upon navigating to an unauthorized page, our server should have redirected us back to login.\n\n```javascript\ncy\n  .login(\"bob@example.com\", \"p@ssw0rd\") // example of custom command\n  .clearCookies()\n  .visit(\"/dashboard\")                  // we should be redirected back to login\n  .url().should(\"eq\", \"login\")\n```\n\n***\n\n# Command Log\n\n## Clear cookies after getting cookies\n\n```javascript\ncy\n  .getCookies().should('have.length', 1)\n  .clearCookies()\n  .getCookies().should('be.empty')\n```\n\nThe commands above will display in the command log as:\n\n![screen shot 2016-05-10 at 12 01 38 pm](https://cloud.githubusercontent.com/assets/1271364/15153391/1afa9fb4-16a7-11e6-9a76-3c3e6b4b9f6b.png)\n\nWhen clicking on `clearCookies` within the command log, the console outputs the following:\n\n![screen shot 2016-05-10 at 12 02 01 pm](https://cloud.githubusercontent.com/assets/1271364/15153392/1afb086e-16a7-11e6-9541-1b1794e14705.png)\n\n***\n\n# Related\n\n- [clearCookie](https://on.cypress.io/api/clearcookie)\n- [getCookie](https://on.cypress.io/api/getcookie)\n- [getCookies](https://on.cypress.io/api/getcookies)\n- [setCookie](https://on.cypress.io/api/setcookie)\n- [Cypress Cookies API](https://on.cypress.io/api/cookies)","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/clearcookies.html","comments":1,"layout":"page","_id":"cj1pc2g820008k1g8ozgtvhrg","content":"<p>Clears all of the browser cookies.</p>\n<p>Cypress automatically invokes this command <strong>before</strong> each test to prevent state from building up. You shouldn’t need to invoke this command unless you’re using it to clear cookies inside a single test.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td><code>null</code></td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.clearCookies</code> will wait up for the duration of <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>responseTimeout</code></a> for the automation server to process this command.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-clearCookies\"><a href=\"#cy-clearCookies\" class=\"headerlink\" title=\"cy.clearCookies()\"></a><a href=\"#section-usage\">cy.clearCookies()</a></h1><p>Clears all the browser cookies.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.clearCookies</code>.</p>\n<p><strong><a href=\"#options-usage\">cy.clearCookies(<em>options</em> )</a></strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>responseTimeout</code></a></td>\n<td>Total time to wait for the <code>cy.clearCookies</code> command to be processed</td>\n</tr>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Clear-cookies-after-logging-in\"><a href=\"#Clear-cookies-after-logging-in\" class=\"headerlink\" title=\"Clear cookies after logging in\"></a>Clear cookies after logging in</h2><p>In this example, on first login our server sends us back a session cookie. After invoking <code>cy.clearCookies</code> this clears the session cookie, and upon navigating to an unauthorized page, our server should have redirected us back to login.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .login(<span class=\"string\">\"bob@example.com\"</span>, <span class=\"string\">\"p@ssw0rd\"</span>) <span class=\"comment\">// example of custom command</span></div><div class=\"line\">  .clearCookies()</div><div class=\"line\">  .visit(<span class=\"string\">\"/dashboard\"</span>)                  <span class=\"comment\">// we should be redirected back to login</span></div><div class=\"line\">  .url().should(<span class=\"string\">\"eq\"</span>, <span class=\"string\">\"login\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Clear-cookies-after-getting-cookies\"><a href=\"#Clear-cookies-after-getting-cookies\" class=\"headerlink\" title=\"Clear cookies after getting cookies\"></a>Clear cookies after getting cookies</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .getCookies().should(<span class=\"string\">'have.length'</span>, <span class=\"number\">1</span>)</div><div class=\"line\">  .clearCookies()</div><div class=\"line\">  .getCookies().should(<span class=\"string\">'be.empty'</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/15153391/1afa9fb4-16a7-11e6-9a76-3c3e6b4b9f6b.png\" alt=\"screen shot 2016-05-10 at 12 01 38 pm\"></p>\n<p>When clicking on <code>clearCookies</code> within the command log, the console outputs the following:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/15153392/1afb086e-16a7-11e6-9541-1b1794e14705.png\" alt=\"screen shot 2016-05-10 at 12 02 01 pm\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/clearcookie\" target=\"_blank\" rel=\"external\">clearCookie</a></li>\n<li><a href=\"https://on.cypress.io/api/getcookie\" target=\"_blank\" rel=\"external\">getCookie</a></li>\n<li><a href=\"https://on.cypress.io/api/getcookies\" target=\"_blank\" rel=\"external\">getCookies</a></li>\n<li><a href=\"https://on.cypress.io/api/setcookie\" target=\"_blank\" rel=\"external\">setCookie</a></li>\n<li><a href=\"https://on.cypress.io/api/cookies\" target=\"_blank\" rel=\"external\">Cypress Cookies API</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Clears all of the browser cookies.</p>\n<p>Cypress automatically invokes this command <strong>before</strong> each test to prevent state from building up. You shouldn’t need to invoke this command unless you’re using it to clear cookies inside a single test.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td><code>null</code></td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.clearCookies</code> will wait up for the duration of <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>responseTimeout</code></a> for the automation server to process this command.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-clearCookies\"><a href=\"#cy-clearCookies\" class=\"headerlink\" title=\"cy.clearCookies()\"></a><a href=\"#section-usage\">cy.clearCookies()</a></h1><p>Clears all the browser cookies.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.clearCookies</code>.</p>\n<p><strong><a href=\"#options-usage\">cy.clearCookies(<em>options</em> )</a></strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>responseTimeout</code></a></td>\n<td>Total time to wait for the <code>cy.clearCookies</code> command to be processed</td>\n</tr>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Clear-cookies-after-logging-in\"><a href=\"#Clear-cookies-after-logging-in\" class=\"headerlink\" title=\"Clear cookies after logging in\"></a>Clear cookies after logging in</h2><p>In this example, on first login our server sends us back a session cookie. After invoking <code>cy.clearCookies</code> this clears the session cookie, and upon navigating to an unauthorized page, our server should have redirected us back to login.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .login(<span class=\"string\">\"bob@example.com\"</span>, <span class=\"string\">\"p@ssw0rd\"</span>) <span class=\"comment\">// example of custom command</span></div><div class=\"line\">  .clearCookies()</div><div class=\"line\">  .visit(<span class=\"string\">\"/dashboard\"</span>)                  <span class=\"comment\">// we should be redirected back to login</span></div><div class=\"line\">  .url().should(<span class=\"string\">\"eq\"</span>, <span class=\"string\">\"login\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Clear-cookies-after-getting-cookies\"><a href=\"#Clear-cookies-after-getting-cookies\" class=\"headerlink\" title=\"Clear cookies after getting cookies\"></a>Clear cookies after getting cookies</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .getCookies().should(<span class=\"string\">'have.length'</span>, <span class=\"number\">1</span>)</div><div class=\"line\">  .clearCookies()</div><div class=\"line\">  .getCookies().should(<span class=\"string\">'be.empty'</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/15153391/1afa9fb4-16a7-11e6-9a76-3c3e6b4b9f6b.png\" alt=\"screen shot 2016-05-10 at 12 01 38 pm\"></p>\n<p>When clicking on <code>clearCookies</code> within the command log, the console outputs the following:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/15153392/1afb086e-16a7-11e6-9541-1b1794e14705.png\" alt=\"screen shot 2016-05-10 at 12 02 01 pm\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/clearcookie\">clearCookie</a></li>\n<li><a href=\"https://on.cypress.io/api/getcookie\">getCookie</a></li>\n<li><a href=\"https://on.cypress.io/api/getcookies\">getCookies</a></li>\n<li><a href=\"https://on.cypress.io/api/setcookie\">setCookie</a></li>\n<li><a href=\"https://on.cypress.io/api/cookies\">Cypress Cookies API</a></li>\n</ul>\n"},{"title":"clearlocalstorage","_content":"\nClears all data in local storage.\n\nCypress automatically invokes this command **before** each test to prevent state from building up. You shouldn't need to invoke this command unless you're using it to clear localStorage inside a single test.\n\n| | |\n|--- | --- |\n| **Returns** | the remote local storage object |\n| **Timeout** | *cannot timeout* |\n\n***\n\n# [cy.clearLocalStorage()](#section-usage)\n\nClear all data in local storage.\n\n***\n\n# [cy.clearLocalStorage( *string* )](#section-usage)\n\nClears all keys in local storage matching the string.\n\n***\n\n# [cy.clearLocalStorage( *RegExp* )](#section-usage)\n\nClears all keys in local storage matching the RegExp.\n\n***\n\n# Usage\n\n## Clear Local Storage\n\n```javascript\n// returns local storage object\ncy.clearLocalStorage()\n```","source":"api/commands/clearlocalstorage.md","raw":"title: clearlocalstorage\n---\n\nClears all data in local storage.\n\nCypress automatically invokes this command **before** each test to prevent state from building up. You shouldn't need to invoke this command unless you're using it to clear localStorage inside a single test.\n\n| | |\n|--- | --- |\n| **Returns** | the remote local storage object |\n| **Timeout** | *cannot timeout* |\n\n***\n\n# [cy.clearLocalStorage()](#section-usage)\n\nClear all data in local storage.\n\n***\n\n# [cy.clearLocalStorage( *string* )](#section-usage)\n\nClears all keys in local storage matching the string.\n\n***\n\n# [cy.clearLocalStorage( *RegExp* )](#section-usage)\n\nClears all keys in local storage matching the RegExp.\n\n***\n\n# Usage\n\n## Clear Local Storage\n\n```javascript\n// returns local storage object\ncy.clearLocalStorage()\n```","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/clearlocalstorage.html","comments":1,"layout":"page","_id":"cj1pc2g830009k1g8by9uvody","content":"<p>Clears all data in local storage.</p>\n<p>Cypress automatically invokes this command <strong>before</strong> each test to prevent state from building up. You shouldn’t need to invoke this command unless you’re using it to clear localStorage inside a single test.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the remote local storage object</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><em>cannot timeout</em></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-clearLocalStorage\"><a href=\"#cy-clearLocalStorage\" class=\"headerlink\" title=\"cy.clearLocalStorage()\"></a><a href=\"#section-usage\">cy.clearLocalStorage()</a></h1><p>Clear all data in local storage.</p>\n<hr>\n<h1 id=\"cy-clearLocalStorage-string\"><a href=\"#cy-clearLocalStorage-string\" class=\"headerlink\" title=\"cy.clearLocalStorage( string )\"></a><a href=\"#section-usage\">cy.clearLocalStorage( <em>string</em> )</a></h1><p>Clears all keys in local storage matching the string.</p>\n<hr>\n<h1 id=\"cy-clearLocalStorage-RegExp\"><a href=\"#cy-clearLocalStorage-RegExp\" class=\"headerlink\" title=\"cy.clearLocalStorage( RegExp )\"></a><a href=\"#section-usage\">cy.clearLocalStorage( <em>RegExp</em> )</a></h1><p>Clears all keys in local storage matching the RegExp.</p>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Clear-Local-Storage\"><a href=\"#Clear-Local-Storage\" class=\"headerlink\" title=\"Clear Local Storage\"></a>Clear Local Storage</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns local storage object</span></div><div class=\"line\">cy.clearLocalStorage()</div></pre></td></tr></table></figure>","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Clears all data in local storage.</p>\n<p>Cypress automatically invokes this command <strong>before</strong> each test to prevent state from building up. You shouldn’t need to invoke this command unless you’re using it to clear localStorage inside a single test.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the remote local storage object</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><em>cannot timeout</em></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-clearLocalStorage\"><a href=\"#cy-clearLocalStorage\" class=\"headerlink\" title=\"cy.clearLocalStorage()\"></a><a href=\"#section-usage\">cy.clearLocalStorage()</a></h1><p>Clear all data in local storage.</p>\n<hr>\n<h1 id=\"cy-clearLocalStorage-string\"><a href=\"#cy-clearLocalStorage-string\" class=\"headerlink\" title=\"cy.clearLocalStorage( string )\"></a><a href=\"#section-usage\">cy.clearLocalStorage( <em>string</em> )</a></h1><p>Clears all keys in local storage matching the string.</p>\n<hr>\n<h1 id=\"cy-clearLocalStorage-RegExp\"><a href=\"#cy-clearLocalStorage-RegExp\" class=\"headerlink\" title=\"cy.clearLocalStorage( RegExp )\"></a><a href=\"#section-usage\">cy.clearLocalStorage( <em>RegExp</em> )</a></h1><p>Clears all keys in local storage matching the RegExp.</p>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Clear-Local-Storage\"><a href=\"#Clear-Local-Storage\" class=\"headerlink\" title=\"Clear Local Storage\"></a>Clear Local Storage</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns local storage object</span></div><div class=\"line\">cy.clearLocalStorage()</div></pre></td></tr></table></figure>"},{"title":"clock","_content":"\n`cy.clock` overrides native global functions related to time, so you can test code using those functions in an easier, synchronous way. This includes the `setTimeout`, `clearTimeout`, `setInterval`, and `clearInterval` functions as well as controlling `Date` objects. Note that this only applies to the `top` window on a web page. It will not override the time functions on any iframes embedded on the web page.\n\n`cy.clock` automatically restores the native functions in between tests without you having to explicitly restore them. You can still manually restore the functions within a test by calling `.restore()` on the `clock` object that `cy.clock` yields.\n\n`cy.clock` pairs with [`cy.tick`](https://on.cypress.io/api/tick), which moves the clock along a certain number of milliseconds.\n\nSubsequent calls to `cy.clock` will yield the `clock` object without re-overriding the native time functions.\n\nIf you call `cy.clock` before visiting a page with [`cy.visit`](https://on.cypress.io/api/visit), the page's native global functions will be overridden on window load, before any of your app code runs, so even if `setTimeout`, for example, is called on page load, it can still be controlled via [`cy.tick`](https://on.cypress.io/api/tick). This also applies if, during the course of a test, the page under test is reloaded or changed.\n\n| | |\n|--- | --- |\n| **Returns** | a `clock` object. See [clock API](#section-clock-api) |\n\n***\n\n# [cy.clock()](#section-usage)\n\nReplaces `setTimeout`, `clearTimeout`, `setInterval`, `clearInterval` and `Date` and allows them to be controlled synchronously via [`cy.tick`](https://on.cypress.io/api/tick) or the yielded `clock` object (see [clock API](#section-clock-api)).\n\nThe clock starts at the unix epoch (timestamp of 0). This means that when you instantiate `new Date` in your application, it will have a time of `January 1st, 1970`.\n\n***\n\n# [cy.clock( *now* )](#section-specify-the-now-timestamp)\n\nSame as above, but starts the clock at the specified timestamp.\n\n***\n\n# [cy.clock( *now*, *functionNames* )](#section-specify-which-functions-to-override)\n\nSame as above, but only overrides the functions in the array `functionNames`.\n\n***\n\n# clock API\n\n`cy.clock` yields a `clock` object with the following methods. You can also access the `clock` object via `this.clock` in a [`cy.then`](https://on.cypress.io/api/then) callback.\n\n## clock.tick(*milliseconds*)\n\nMove the clock the specified number of `milliseconds`. Any timers within the affected range of time will be called.\n\n## clock.restore()\n\nRestore all overridden native functions. This is automatically called between tests, so should not generally be needed.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.clock`.\n\n**cy.clock( *options* )**\n\n**cy.clock( *now*,  *options* )**\n\n**cy.clock( *now*, *functionNames*,  *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Create a clock and use it to trigger a setInterval\n\n```javascript\n// your app code\nvar seconds = 0\n\nsetInterval(function(){\n  $('#seconds-elapsed').text(++seconds + ' seconds')\n}, 1000)\n```\n\n```javascript\n// test code\ncy\n  .clock()\n  .visit(\"/index.html\")\n  .tick(1000)\n  .get(\"#seconds-elapsed\")\n    .should(\"have.text\", \"1 seconds\")\n  .tick(1000)\n  .get(\"#seconds-elapsed\")\n    .should(\"have.text\", \"2 seconds\")\n```\n\n***\n\n## Specify the now timestamp\n\n```javascript\n// your app code\n$('#date').text(new Date().toJSON())\n```\n\n```javascript\n// test code\nconst now = new Date(2017, 2, 14).getTime() // March 14, 2017 timestamp\n\ncy\n  .clock(now)\n  .visit(\"/index.html\")\n  .get(\"#date\")\n    .contains(\"2017-03-14\")\n```\n\n***\n\n## Specify which functions to override\n\nThis will only override `setTimeout` and `clearTimeout` and leave the other time-related functions as they are.\n\n```javascript\ncy.clock(null, [\"setTimeout\", \"clearTimeout\"])\n```\n\n***\n\n## Access the clock object to synchronously move time\n\nIn most cases, it's easier to [`cy.tick`](https://on.cypress.io/api/tick) to move time, but you can also use `clock` object yielded by `cy.clock`.\n\n```javascript\ncy.clock().then(function (clock) {\n  clock.tick(1000)\n})\n```\n\nYou can call `cy.clock` again for this purpose later in a chain if necessary.\n\n```javascript\ncy\n  .clock()\n  .get(\"#foo\")\n  .type(\"Foo\")\n  .clock().then(function (clock) {\n    clock.tick(1000)\n  })\n```\n\nThe clock object is also available via `this.clock` in any `.then` callback.\n\n```javascript\ncy\n  .clock()\n  .get(\"#foo\").then(function ($foo) {\n    this.clock.tick(1000)\n    // do something with $foo ...\n  })\n```\n\n***\n\n## Access the clock object to restore native functions\n\nIn general, it should not be necessary to manually restore the native functions that `cy.clock` overrides, since this is done automatically between tests. But if you need to, the `clock` object yielded has `.restore` method.\n\n```javascript\ncy.clock().then(function (clock) {\n  clock.restore()\n})\n```\n\nOr via `this.clock`:\n\n```javascript\ncy\n  .clock()\n  .get(\"#foo\").then(function ($foo) {\n    this.clock.restore()\n    // do something with $foo ...\n  })\n```\n\n***\n\n## Example Recipe\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe testing spying, stubbing and time](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/spy_stub_clock_spec.js)\",\n  \"title\": \"Using cy.clock and cy.tick\"\n}\n[/block]\n\n***\n\n# Command Log\n\n## Create a clock and tick it 1 second\n\n```javascript\ncy\n  .clock()\n  .tick(1000)\n```\n\nThe command above will display in the command log as:\n\n<img width=\"448\" alt=\"screen shot of command log\" src=\"https://cloud.githubusercontent.com/assets/1157043/22437918/059f60a6-e6f8-11e6-903d-d868e044615d.png\">\n\nWhen clicking on the `clock` command within the command log, the console outputs the following:\n\n<img width=\"1059\" alt=\"screen shot of console output\" src=\"https://cloud.githubusercontent.com/assets/1157043/22437920/0786f9d8-e6f8-11e6-9e77-926b15aa8dae.png\">\n\n***\n\n# Related\n\n- [Guide: Stubs, Spies and Clocks ](https://on.cypress.io/guides/stubs-spies-clocks)\n- [Recipe: Controlling Behavior with Spies, Stubs, and Clocks](https://github.com/cypress-io/cypress-example-recipes#controlling-behavior-with-spies-stubs-and-clocks)\n- [tick](https://on.cypress.io/api/tick)\n- [spy](https://on.cypress.io/api/spy)\n- [stub](https://on.cypress.io/api/stub)\n","source":"api/commands/clock.md","raw":"title: clock\n---\n\n`cy.clock` overrides native global functions related to time, so you can test code using those functions in an easier, synchronous way. This includes the `setTimeout`, `clearTimeout`, `setInterval`, and `clearInterval` functions as well as controlling `Date` objects. Note that this only applies to the `top` window on a web page. It will not override the time functions on any iframes embedded on the web page.\n\n`cy.clock` automatically restores the native functions in between tests without you having to explicitly restore them. You can still manually restore the functions within a test by calling `.restore()` on the `clock` object that `cy.clock` yields.\n\n`cy.clock` pairs with [`cy.tick`](https://on.cypress.io/api/tick), which moves the clock along a certain number of milliseconds.\n\nSubsequent calls to `cy.clock` will yield the `clock` object without re-overriding the native time functions.\n\nIf you call `cy.clock` before visiting a page with [`cy.visit`](https://on.cypress.io/api/visit), the page's native global functions will be overridden on window load, before any of your app code runs, so even if `setTimeout`, for example, is called on page load, it can still be controlled via [`cy.tick`](https://on.cypress.io/api/tick). This also applies if, during the course of a test, the page under test is reloaded or changed.\n\n| | |\n|--- | --- |\n| **Returns** | a `clock` object. See [clock API](#section-clock-api) |\n\n***\n\n# [cy.clock()](#section-usage)\n\nReplaces `setTimeout`, `clearTimeout`, `setInterval`, `clearInterval` and `Date` and allows them to be controlled synchronously via [`cy.tick`](https://on.cypress.io/api/tick) or the yielded `clock` object (see [clock API](#section-clock-api)).\n\nThe clock starts at the unix epoch (timestamp of 0). This means that when you instantiate `new Date` in your application, it will have a time of `January 1st, 1970`.\n\n***\n\n# [cy.clock( *now* )](#section-specify-the-now-timestamp)\n\nSame as above, but starts the clock at the specified timestamp.\n\n***\n\n# [cy.clock( *now*, *functionNames* )](#section-specify-which-functions-to-override)\n\nSame as above, but only overrides the functions in the array `functionNames`.\n\n***\n\n# clock API\n\n`cy.clock` yields a `clock` object with the following methods. You can also access the `clock` object via `this.clock` in a [`cy.then`](https://on.cypress.io/api/then) callback.\n\n## clock.tick(*milliseconds*)\n\nMove the clock the specified number of `milliseconds`. Any timers within the affected range of time will be called.\n\n## clock.restore()\n\nRestore all overridden native functions. This is automatically called between tests, so should not generally be needed.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.clock`.\n\n**cy.clock( *options* )**\n\n**cy.clock( *now*,  *options* )**\n\n**cy.clock( *now*, *functionNames*,  *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Create a clock and use it to trigger a setInterval\n\n```javascript\n// your app code\nvar seconds = 0\n\nsetInterval(function(){\n  $('#seconds-elapsed').text(++seconds + ' seconds')\n}, 1000)\n```\n\n```javascript\n// test code\ncy\n  .clock()\n  .visit(\"/index.html\")\n  .tick(1000)\n  .get(\"#seconds-elapsed\")\n    .should(\"have.text\", \"1 seconds\")\n  .tick(1000)\n  .get(\"#seconds-elapsed\")\n    .should(\"have.text\", \"2 seconds\")\n```\n\n***\n\n## Specify the now timestamp\n\n```javascript\n// your app code\n$('#date').text(new Date().toJSON())\n```\n\n```javascript\n// test code\nconst now = new Date(2017, 2, 14).getTime() // March 14, 2017 timestamp\n\ncy\n  .clock(now)\n  .visit(\"/index.html\")\n  .get(\"#date\")\n    .contains(\"2017-03-14\")\n```\n\n***\n\n## Specify which functions to override\n\nThis will only override `setTimeout` and `clearTimeout` and leave the other time-related functions as they are.\n\n```javascript\ncy.clock(null, [\"setTimeout\", \"clearTimeout\"])\n```\n\n***\n\n## Access the clock object to synchronously move time\n\nIn most cases, it's easier to [`cy.tick`](https://on.cypress.io/api/tick) to move time, but you can also use `clock` object yielded by `cy.clock`.\n\n```javascript\ncy.clock().then(function (clock) {\n  clock.tick(1000)\n})\n```\n\nYou can call `cy.clock` again for this purpose later in a chain if necessary.\n\n```javascript\ncy\n  .clock()\n  .get(\"#foo\")\n  .type(\"Foo\")\n  .clock().then(function (clock) {\n    clock.tick(1000)\n  })\n```\n\nThe clock object is also available via `this.clock` in any `.then` callback.\n\n```javascript\ncy\n  .clock()\n  .get(\"#foo\").then(function ($foo) {\n    this.clock.tick(1000)\n    // do something with $foo ...\n  })\n```\n\n***\n\n## Access the clock object to restore native functions\n\nIn general, it should not be necessary to manually restore the native functions that `cy.clock` overrides, since this is done automatically between tests. But if you need to, the `clock` object yielded has `.restore` method.\n\n```javascript\ncy.clock().then(function (clock) {\n  clock.restore()\n})\n```\n\nOr via `this.clock`:\n\n```javascript\ncy\n  .clock()\n  .get(\"#foo\").then(function ($foo) {\n    this.clock.restore()\n    // do something with $foo ...\n  })\n```\n\n***\n\n## Example Recipe\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe testing spying, stubbing and time](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/spy_stub_clock_spec.js)\",\n  \"title\": \"Using cy.clock and cy.tick\"\n}\n[/block]\n\n***\n\n# Command Log\n\n## Create a clock and tick it 1 second\n\n```javascript\ncy\n  .clock()\n  .tick(1000)\n```\n\nThe command above will display in the command log as:\n\n<img width=\"448\" alt=\"screen shot of command log\" src=\"https://cloud.githubusercontent.com/assets/1157043/22437918/059f60a6-e6f8-11e6-903d-d868e044615d.png\">\n\nWhen clicking on the `clock` command within the command log, the console outputs the following:\n\n<img width=\"1059\" alt=\"screen shot of console output\" src=\"https://cloud.githubusercontent.com/assets/1157043/22437920/0786f9d8-e6f8-11e6-9e77-926b15aa8dae.png\">\n\n***\n\n# Related\n\n- [Guide: Stubs, Spies and Clocks ](https://on.cypress.io/guides/stubs-spies-clocks)\n- [Recipe: Controlling Behavior with Spies, Stubs, and Clocks](https://github.com/cypress-io/cypress-example-recipes#controlling-behavior-with-spies-stubs-and-clocks)\n- [tick](https://on.cypress.io/api/tick)\n- [spy](https://on.cypress.io/api/spy)\n- [stub](https://on.cypress.io/api/stub)\n","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/clock.html","comments":1,"layout":"page","_id":"cj1pc2g83000ak1g82zeib8pd","content":"<p><code>cy.clock</code> overrides native global functions related to time, so you can test code using those functions in an easier, synchronous way. This includes the <code>setTimeout</code>, <code>clearTimeout</code>, <code>setInterval</code>, and <code>clearInterval</code> functions as well as controlling <code>Date</code> objects. Note that this only applies to the <code>top</code> window on a web page. It will not override the time functions on any iframes embedded on the web page.</p>\n<p><code>cy.clock</code> automatically restores the native functions in between tests without you having to explicitly restore them. You can still manually restore the functions within a test by calling <code>.restore()</code> on the <code>clock</code> object that <code>cy.clock</code> yields.</p>\n<p><code>cy.clock</code> pairs with <a href=\"https://on.cypress.io/api/tick\" target=\"_blank\" rel=\"external\"><code>cy.tick</code></a>, which moves the clock along a certain number of milliseconds.</p>\n<p>Subsequent calls to <code>cy.clock</code> will yield the <code>clock</code> object without re-overriding the native time functions.</p>\n<p>If you call <code>cy.clock</code> before visiting a page with <a href=\"https://on.cypress.io/api/visit\" target=\"_blank\" rel=\"external\"><code>cy.visit</code></a>, the page’s native global functions will be overridden on window load, before any of your app code runs, so even if <code>setTimeout</code>, for example, is called on page load, it can still be controlled via <a href=\"https://on.cypress.io/api/tick\" target=\"_blank\" rel=\"external\"><code>cy.tick</code></a>. This also applies if, during the course of a test, the page under test is reloaded or changed.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>a <code>clock</code> object. See <a href=\"#section-clock-api\">clock API</a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-clock\"><a href=\"#cy-clock\" class=\"headerlink\" title=\"cy.clock()\"></a><a href=\"#section-usage\">cy.clock()</a></h1><p>Replaces <code>setTimeout</code>, <code>clearTimeout</code>, <code>setInterval</code>, <code>clearInterval</code> and <code>Date</code> and allows them to be controlled synchronously via <a href=\"https://on.cypress.io/api/tick\" target=\"_blank\" rel=\"external\"><code>cy.tick</code></a> or the yielded <code>clock</code> object (see <a href=\"#section-clock-api\">clock API</a>).</p>\n<p>The clock starts at the unix epoch (timestamp of 0). This means that when you instantiate <code>new Date</code> in your application, it will have a time of <code>January 1st, 1970</code>.</p>\n<hr>\n<h1 id=\"cy-clock-now\"><a href=\"#cy-clock-now\" class=\"headerlink\" title=\"cy.clock( now )\"></a><a href=\"#section-specify-the-now-timestamp\">cy.clock( <em>now</em> )</a></h1><p>Same as above, but starts the clock at the specified timestamp.</p>\n<hr>\n<h1 id=\"cy-clock-now-functionNames\"><a href=\"#cy-clock-now-functionNames\" class=\"headerlink\" title=\"cy.clock( now, functionNames )\"></a><a href=\"#section-specify-which-functions-to-override\">cy.clock( <em>now</em>, <em>functionNames</em> )</a></h1><p>Same as above, but only overrides the functions in the array <code>functionNames</code>.</p>\n<hr>\n<h1 id=\"clock-API\"><a href=\"#clock-API\" class=\"headerlink\" title=\"clock API\"></a>clock API</h1><p><code>cy.clock</code> yields a <code>clock</code> object with the following methods. You can also access the <code>clock</code> object via <code>this.clock</code> in a <a href=\"https://on.cypress.io/api/then\" target=\"_blank\" rel=\"external\"><code>cy.then</code></a> callback.</p>\n<h2 id=\"clock-tick-milliseconds\"><a href=\"#clock-tick-milliseconds\" class=\"headerlink\" title=\"clock.tick(milliseconds)\"></a>clock.tick(<em>milliseconds</em>)</h2><p>Move the clock the specified number of <code>milliseconds</code>. Any timers within the affected range of time will be called.</p>\n<h2 id=\"clock-restore\"><a href=\"#clock-restore\" class=\"headerlink\" title=\"clock.restore()\"></a>clock.restore()</h2><p>Restore all overridden native functions. This is automatically called between tests, so should not generally be needed.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.clock</code>.</p>\n<p><strong>cy.clock( <em>options</em> )</strong></p>\n<p><strong>cy.clock( <em>now</em>,  <em>options</em> )</strong></p>\n<p><strong>cy.clock( <em>now</em>, <em>functionNames</em>,  <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Create-a-clock-and-use-it-to-trigger-a-setInterval\"><a href=\"#Create-a-clock-and-use-it-to-trigger-a-setInterval\" class=\"headerlink\" title=\"Create a clock and use it to trigger a setInterval\"></a>Create a clock and use it to trigger a setInterval</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// your app code</span></div><div class=\"line\"><span class=\"keyword\">var</span> seconds = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\">setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  $(<span class=\"string\">'#seconds-elapsed'</span>).text(++seconds + <span class=\"string\">' seconds'</span>)</div><div class=\"line\">&#125;, <span class=\"number\">1000</span>)</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// test code</span></div><div class=\"line\">cy</div><div class=\"line\">  .clock()</div><div class=\"line\">  .visit(<span class=\"string\">\"/index.html\"</span>)</div><div class=\"line\">  .tick(<span class=\"number\">1000</span>)</div><div class=\"line\">  .get(<span class=\"string\">\"#seconds-elapsed\"</span>)</div><div class=\"line\">    .should(<span class=\"string\">\"have.text\"</span>, <span class=\"string\">\"1 seconds\"</span>)</div><div class=\"line\">  .tick(<span class=\"number\">1000</span>)</div><div class=\"line\">  .get(<span class=\"string\">\"#seconds-elapsed\"</span>)</div><div class=\"line\">    .should(<span class=\"string\">\"have.text\"</span>, <span class=\"string\">\"2 seconds\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Specify-the-now-timestamp\"><a href=\"#Specify-the-now-timestamp\" class=\"headerlink\" title=\"Specify the now timestamp\"></a>Specify the now timestamp</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// your app code</span></div><div class=\"line\">$(<span class=\"string\">'#date'</span>).text(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toJSON())</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// test code</span></div><div class=\"line\"><span class=\"keyword\">const</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2017</span>, <span class=\"number\">2</span>, <span class=\"number\">14</span>).getTime() <span class=\"comment\">// March 14, 2017 timestamp</span></div><div class=\"line\"></div><div class=\"line\">cy</div><div class=\"line\">  .clock(now)</div><div class=\"line\">  .visit(<span class=\"string\">\"/index.html\"</span>)</div><div class=\"line\">  .get(<span class=\"string\">\"#date\"</span>)</div><div class=\"line\">    .contains(<span class=\"string\">\"2017-03-14\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Specify-which-functions-to-override\"><a href=\"#Specify-which-functions-to-override\" class=\"headerlink\" title=\"Specify which functions to override\"></a>Specify which functions to override</h2><p>This will only override <code>setTimeout</code> and <code>clearTimeout</code> and leave the other time-related functions as they are.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.clock(<span class=\"literal\">null</span>, [<span class=\"string\">\"setTimeout\"</span>, <span class=\"string\">\"clearTimeout\"</span>])</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Access-the-clock-object-to-synchronously-move-time\"><a href=\"#Access-the-clock-object-to-synchronously-move-time\" class=\"headerlink\" title=\"Access the clock object to synchronously move time\"></a>Access the clock object to synchronously move time</h2><p>In most cases, it’s easier to <a href=\"https://on.cypress.io/api/tick\" target=\"_blank\" rel=\"external\"><code>cy.tick</code></a> to move time, but you can also use <code>clock</code> object yielded by <code>cy.clock</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.clock().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">clock</span>) </span>&#123;</div><div class=\"line\">  clock.tick(<span class=\"number\">1000</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>You can call <code>cy.clock</code> again for this purpose later in a chain if necessary.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .clock()</div><div class=\"line\">  .get(<span class=\"string\">\"#foo\"</span>)</div><div class=\"line\">  .type(<span class=\"string\">\"Foo\"</span>)</div><div class=\"line\">  .clock().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">clock</span>) </span>&#123;</div><div class=\"line\">    clock.tick(<span class=\"number\">1000</span>)</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<p>The clock object is also available via <code>this.clock</code> in any <code>.then</code> callback.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .clock()</div><div class=\"line\">  .get(<span class=\"string\">\"#foo\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$foo</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.clock.tick(<span class=\"number\">1000</span>)</div><div class=\"line\">    <span class=\"comment\">// do something with $foo ...</span></div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Access-the-clock-object-to-restore-native-functions\"><a href=\"#Access-the-clock-object-to-restore-native-functions\" class=\"headerlink\" title=\"Access the clock object to restore native functions\"></a>Access the clock object to restore native functions</h2><p>In general, it should not be necessary to manually restore the native functions that <code>cy.clock</code> overrides, since this is done automatically between tests. But if you need to, the <code>clock</code> object yielded has <code>.restore</code> method.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.clock().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">clock</span>) </span>&#123;</div><div class=\"line\">  clock.restore()</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Or via <code>this.clock</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .clock()</div><div class=\"line\">  .get(<span class=\"string\">\"#foo\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$foo</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.clock.restore()</div><div class=\"line\">    <span class=\"comment\">// do something with $foo ...</span></div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Example-Recipe\"><a href=\"#Example-Recipe\" class=\"headerlink\" title=\"Example Recipe\"></a>Example Recipe</h2><p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/spy_stub_clock_spec.js\" target=\"_blank\" rel=\"external\">Check out our example recipe testing spying, stubbing and time</a>“,<br>  “title”: “Using cy.clock and cy.tick”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Create-a-clock-and-tick-it-1-second\"><a href=\"#Create-a-clock-and-tick-it-1-second\" class=\"headerlink\" title=\"Create a clock and tick it 1 second\"></a>Create a clock and tick it 1 second</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .clock()</div><div class=\"line\">  .tick(<span class=\"number\">1000</span>)</div></pre></td></tr></table></figure>\n<p>The command above will display in the command log as:</p>\n<p><img width=\"448\" alt=\"screen shot of command log\" src=\"https://cloud.githubusercontent.com/assets/1157043/22437918/059f60a6-e6f8-11e6-903d-d868e044615d.png\"></p>\n<p>When clicking on the <code>clock</code> command within the command log, the console outputs the following:</p>\n<p><img width=\"1059\" alt=\"screen shot of console output\" src=\"https://cloud.githubusercontent.com/assets/1157043/22437920/0786f9d8-e6f8-11e6-9e77-926b15aa8dae.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/guides/stubs-spies-clocks\" target=\"_blank\" rel=\"external\">Guide: Stubs, Spies and Clocks </a></li>\n<li><a href=\"https://github.com/cypress-io/cypress-example-recipes#controlling-behavior-with-spies-stubs-and-clocks\" target=\"_blank\" rel=\"external\">Recipe: Controlling Behavior with Spies, Stubs, and Clocks</a></li>\n<li><a href=\"https://on.cypress.io/api/tick\" target=\"_blank\" rel=\"external\">tick</a></li>\n<li><a href=\"https://on.cypress.io/api/spy\" target=\"_blank\" rel=\"external\">spy</a></li>\n<li><a href=\"https://on.cypress.io/api/stub\" target=\"_blank\" rel=\"external\">stub</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p><code>cy.clock</code> overrides native global functions related to time, so you can test code using those functions in an easier, synchronous way. This includes the <code>setTimeout</code>, <code>clearTimeout</code>, <code>setInterval</code>, and <code>clearInterval</code> functions as well as controlling <code>Date</code> objects. Note that this only applies to the <code>top</code> window on a web page. It will not override the time functions on any iframes embedded on the web page.</p>\n<p><code>cy.clock</code> automatically restores the native functions in between tests without you having to explicitly restore them. You can still manually restore the functions within a test by calling <code>.restore()</code> on the <code>clock</code> object that <code>cy.clock</code> yields.</p>\n<p><code>cy.clock</code> pairs with <a href=\"https://on.cypress.io/api/tick\"><code>cy.tick</code></a>, which moves the clock along a certain number of milliseconds.</p>\n<p>Subsequent calls to <code>cy.clock</code> will yield the <code>clock</code> object without re-overriding the native time functions.</p>\n<p>If you call <code>cy.clock</code> before visiting a page with <a href=\"https://on.cypress.io/api/visit\"><code>cy.visit</code></a>, the page’s native global functions will be overridden on window load, before any of your app code runs, so even if <code>setTimeout</code>, for example, is called on page load, it can still be controlled via <a href=\"https://on.cypress.io/api/tick\"><code>cy.tick</code></a>. This also applies if, during the course of a test, the page under test is reloaded or changed.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>a <code>clock</code> object. See <a href=\"#section-clock-api\">clock API</a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-clock\"><a href=\"#cy-clock\" class=\"headerlink\" title=\"cy.clock()\"></a><a href=\"#section-usage\">cy.clock()</a></h1><p>Replaces <code>setTimeout</code>, <code>clearTimeout</code>, <code>setInterval</code>, <code>clearInterval</code> and <code>Date</code> and allows them to be controlled synchronously via <a href=\"https://on.cypress.io/api/tick\"><code>cy.tick</code></a> or the yielded <code>clock</code> object (see <a href=\"#section-clock-api\">clock API</a>).</p>\n<p>The clock starts at the unix epoch (timestamp of 0). This means that when you instantiate <code>new Date</code> in your application, it will have a time of <code>January 1st, 1970</code>.</p>\n<hr>\n<h1 id=\"cy-clock-now\"><a href=\"#cy-clock-now\" class=\"headerlink\" title=\"cy.clock( now )\"></a><a href=\"#section-specify-the-now-timestamp\">cy.clock( <em>now</em> )</a></h1><p>Same as above, but starts the clock at the specified timestamp.</p>\n<hr>\n<h1 id=\"cy-clock-now-functionNames\"><a href=\"#cy-clock-now-functionNames\" class=\"headerlink\" title=\"cy.clock( now, functionNames )\"></a><a href=\"#section-specify-which-functions-to-override\">cy.clock( <em>now</em>, <em>functionNames</em> )</a></h1><p>Same as above, but only overrides the functions in the array <code>functionNames</code>.</p>\n<hr>\n<h1 id=\"clock-API\"><a href=\"#clock-API\" class=\"headerlink\" title=\"clock API\"></a>clock API</h1><p><code>cy.clock</code> yields a <code>clock</code> object with the following methods. You can also access the <code>clock</code> object via <code>this.clock</code> in a <a href=\"https://on.cypress.io/api/then\"><code>cy.then</code></a> callback.</p>\n<h2 id=\"clock-tick-milliseconds\"><a href=\"#clock-tick-milliseconds\" class=\"headerlink\" title=\"clock.tick(milliseconds)\"></a>clock.tick(<em>milliseconds</em>)</h2><p>Move the clock the specified number of <code>milliseconds</code>. Any timers within the affected range of time will be called.</p>\n<h2 id=\"clock-restore\"><a href=\"#clock-restore\" class=\"headerlink\" title=\"clock.restore()\"></a>clock.restore()</h2><p>Restore all overridden native functions. This is automatically called between tests, so should not generally be needed.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.clock</code>.</p>\n<p><strong>cy.clock( <em>options</em> )</strong></p>\n<p><strong>cy.clock( <em>now</em>,  <em>options</em> )</strong></p>\n<p><strong>cy.clock( <em>now</em>, <em>functionNames</em>,  <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Create-a-clock-and-use-it-to-trigger-a-setInterval\"><a href=\"#Create-a-clock-and-use-it-to-trigger-a-setInterval\" class=\"headerlink\" title=\"Create a clock and use it to trigger a setInterval\"></a>Create a clock and use it to trigger a setInterval</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// your app code</span></div><div class=\"line\"><span class=\"keyword\">var</span> seconds = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\">setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  $(<span class=\"string\">'#seconds-elapsed'</span>).text(++seconds + <span class=\"string\">' seconds'</span>)</div><div class=\"line\">&#125;, <span class=\"number\">1000</span>)</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// test code</span></div><div class=\"line\">cy</div><div class=\"line\">  .clock()</div><div class=\"line\">  .visit(<span class=\"string\">\"/index.html\"</span>)</div><div class=\"line\">  .tick(<span class=\"number\">1000</span>)</div><div class=\"line\">  .get(<span class=\"string\">\"#seconds-elapsed\"</span>)</div><div class=\"line\">    .should(<span class=\"string\">\"have.text\"</span>, <span class=\"string\">\"1 seconds\"</span>)</div><div class=\"line\">  .tick(<span class=\"number\">1000</span>)</div><div class=\"line\">  .get(<span class=\"string\">\"#seconds-elapsed\"</span>)</div><div class=\"line\">    .should(<span class=\"string\">\"have.text\"</span>, <span class=\"string\">\"2 seconds\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Specify-the-now-timestamp\"><a href=\"#Specify-the-now-timestamp\" class=\"headerlink\" title=\"Specify the now timestamp\"></a>Specify the now timestamp</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// your app code</span></div><div class=\"line\">$(<span class=\"string\">'#date'</span>).text(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toJSON())</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// test code</span></div><div class=\"line\"><span class=\"keyword\">const</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2017</span>, <span class=\"number\">2</span>, <span class=\"number\">14</span>).getTime() <span class=\"comment\">// March 14, 2017 timestamp</span></div><div class=\"line\"></div><div class=\"line\">cy</div><div class=\"line\">  .clock(now)</div><div class=\"line\">  .visit(<span class=\"string\">\"/index.html\"</span>)</div><div class=\"line\">  .get(<span class=\"string\">\"#date\"</span>)</div><div class=\"line\">    .contains(<span class=\"string\">\"2017-03-14\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Specify-which-functions-to-override\"><a href=\"#Specify-which-functions-to-override\" class=\"headerlink\" title=\"Specify which functions to override\"></a>Specify which functions to override</h2><p>This will only override <code>setTimeout</code> and <code>clearTimeout</code> and leave the other time-related functions as they are.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.clock(<span class=\"literal\">null</span>, [<span class=\"string\">\"setTimeout\"</span>, <span class=\"string\">\"clearTimeout\"</span>])</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Access-the-clock-object-to-synchronously-move-time\"><a href=\"#Access-the-clock-object-to-synchronously-move-time\" class=\"headerlink\" title=\"Access the clock object to synchronously move time\"></a>Access the clock object to synchronously move time</h2><p>In most cases, it’s easier to <a href=\"https://on.cypress.io/api/tick\"><code>cy.tick</code></a> to move time, but you can also use <code>clock</code> object yielded by <code>cy.clock</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.clock().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">clock</span>) </span>&#123;</div><div class=\"line\">  clock.tick(<span class=\"number\">1000</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>You can call <code>cy.clock</code> again for this purpose later in a chain if necessary.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .clock()</div><div class=\"line\">  .get(<span class=\"string\">\"#foo\"</span>)</div><div class=\"line\">  .type(<span class=\"string\">\"Foo\"</span>)</div><div class=\"line\">  .clock().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">clock</span>) </span>&#123;</div><div class=\"line\">    clock.tick(<span class=\"number\">1000</span>)</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<p>The clock object is also available via <code>this.clock</code> in any <code>.then</code> callback.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .clock()</div><div class=\"line\">  .get(<span class=\"string\">\"#foo\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$foo</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.clock.tick(<span class=\"number\">1000</span>)</div><div class=\"line\">    <span class=\"comment\">// do something with $foo ...</span></div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Access-the-clock-object-to-restore-native-functions\"><a href=\"#Access-the-clock-object-to-restore-native-functions\" class=\"headerlink\" title=\"Access the clock object to restore native functions\"></a>Access the clock object to restore native functions</h2><p>In general, it should not be necessary to manually restore the native functions that <code>cy.clock</code> overrides, since this is done automatically between tests. But if you need to, the <code>clock</code> object yielded has <code>.restore</code> method.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.clock().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">clock</span>) </span>&#123;</div><div class=\"line\">  clock.restore()</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Or via <code>this.clock</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .clock()</div><div class=\"line\">  .get(<span class=\"string\">\"#foo\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$foo</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.clock.restore()</div><div class=\"line\">    <span class=\"comment\">// do something with $foo ...</span></div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Example-Recipe\"><a href=\"#Example-Recipe\" class=\"headerlink\" title=\"Example Recipe\"></a>Example Recipe</h2><p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/spy_stub_clock_spec.js\">Check out our example recipe testing spying, stubbing and time</a>“,<br>  “title”: “Using cy.clock and cy.tick”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Create-a-clock-and-tick-it-1-second\"><a href=\"#Create-a-clock-and-tick-it-1-second\" class=\"headerlink\" title=\"Create a clock and tick it 1 second\"></a>Create a clock and tick it 1 second</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .clock()</div><div class=\"line\">  .tick(<span class=\"number\">1000</span>)</div></pre></td></tr></table></figure>\n<p>The command above will display in the command log as:</p>\n<p><img width=\"448\" alt=\"screen shot of command log\" src=\"https://cloud.githubusercontent.com/assets/1157043/22437918/059f60a6-e6f8-11e6-903d-d868e044615d.png\"></p>\n<p>When clicking on the <code>clock</code> command within the command log, the console outputs the following:</p>\n<p><img width=\"1059\" alt=\"screen shot of console output\" src=\"https://cloud.githubusercontent.com/assets/1157043/22437920/0786f9d8-e6f8-11e6-9e77-926b15aa8dae.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/guides/stubs-spies-clocks\">Guide: Stubs, Spies and Clocks </a></li>\n<li><a href=\"https://github.com/cypress-io/cypress-example-recipes#controlling-behavior-with-spies-stubs-and-clocks\">Recipe: Controlling Behavior with Spies, Stubs, and Clocks</a></li>\n<li><a href=\"https://on.cypress.io/api/tick\">tick</a></li>\n<li><a href=\"https://on.cypress.io/api/spy\">spy</a></li>\n<li><a href=\"https://on.cypress.io/api/stub\">stub</a></li>\n</ul>\n"},{"title":"click","_content":"\n`cy.click` is used to click a DOM element found int he previous command.  The DOM element must be in a \"clickable\" state prior to the click event happening (it must be visible and not covered by another element).\n\nCypress automatically scrolls the element into view prior to attempting the click.\n\nBy default, the click is issued at the exact center of the element. You can pass a [`position`](#section-position-usage) option to override this setting.\n\n**The following events are fired during click:** `mousedown`, `focus`, `mouseup`, `click`\n\n| | |\n|--- | --- |\n| **Returns** | the existing DOM subject |\n| **Timeout** | `cy.click` will wait and retry until the element is 'clickable' for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) or the duration of the `timeout` specified in the command's [options](#section-options) |\n\n***\n\n# [cy.click()](#section-usage)\n\nClick the DOM element.\n\n***\n\n# [cy.click( *position* )](#section-position-usage)\n\nClicks the element at the specified position. The `center` position is the default position.\n\nPosition | Default | Notes\n--- | --- | ---\n`center` | Yes | Clicks the exact center of the element\n`topLeft` | No | Clicks the top left corner of the element\n`topRight` | No | Clicks the top right corner of the element\n`bottomLeft` | No | Clicks the bottom left corner of the element\n`bottomRight` | No | Clicks the bottom right corner of the element\n\n***\n\n# [cy.click( *x*, *y* )](#section-coordinates-usage)\n\nYou can pass a relative `x` and `y` coordinate which will calculate distance in pixels from the top left corner of the element and isssue the click at the calculated coordinate.\n\n`x` and `y` must both be `Numbers`. Currently you cannot use `%` based arguments. [Open an issue](https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A) if you'd like this functionality.\n\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"Make sure not to issue a click outside of the width and height of the element. This will result in a `Command Timeout`\"\n}\n[/block]\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.click`.\n\n**[cy.click( *options* )](#options-usage)**\n**[cy.click( *position*, *options* )](#options-usage)**\n**[cy.click( *x*, *y*, *options* )](#options-usage)**\n\nOption | Default | Notes\n--- | --- | ---\n`force` | `false` | Forces click, disables error checking prior to click\n`multiple` | `false` | Enables serially clicking multiple elements\n`interval` | `16` | Interval which to retry a click\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry the click\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Click the button\n\n```javascript\n// returns <button>Save</button>\ncy.get(\"button\").click()\n```\n\n***\n\n# Position Usage\n\n## Specify a corner of the element to click\n\n```javascript\n// click is issued in the top right corner of the element\ncy.get(\"button\").click(\"topRight\")\n```\n\n***\n\n# Coordinates Usage\n\n## Specify explicit coordinates relative to the top left corner\n\n```javascript\n// the click will be issued inside of the element\n// 15px from the left and\n// 40px from the top\ncy.get(\"button\").click(15, 40)\n```\n\n***\n\n# Options Usage\n\n## Force a click regardless of visibility or other elements in front of the element\n\nThis is useful when you want the click issued no matter what. Forcing a click disables the error checking that happens prior to a click.\n\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"Be careful with this option because it allows the click to happen when it might actually be impossible for a real user to click.\"\n}\n[/block]\n\n```javascript\n// this will disable the built-in logic for ensuring\n// the element is visible, and is physically clickable\ncy.get(\"button\").click({force: true})\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe on testing hover and working with hidden elements](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/hover_hidden_elements.js)\",\n  \"title\": \"Dealing with hover and hidden elements\"\n}\n[/block]\n\n***\n\n## Force a click with position argument\n\n```javascript\ncy.get(\"button\").click(\"bottomLeft\", {force: true})\n```\n\n***\n\n## Force a click with relative coordinates\n\n```javascript\ncy.get(\"button\").click(5, 60, {force: true})\n```\n\n## Click all buttons found on the page\n\n```javascript\ncy.get(\"button\").click({multiple: true})\n```\n\n***\n\n# Known Issues\n\n## pointer-events: none\n\nCypress does not currently factor in `pointer-events: none` in its clicking algorithm. [Open an issue](https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A) if you need this to be fixed.\n\n***\n\n## Element removal during `mousedown` or `mouseup`\n\nThe spec states what should happen if the element clicked is removed from the DOM during `mousedown` or `mouseup`, but Cypress is not currently factoring this in. [Open an issue](https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A) if you need this to be fixed.\n\n***\n\n## Animations\n\nUnlike other testing frameworks, like Selenium, Cypress has built in logic for dealing with both CSS and JavaScript animations. Cypress will detect if an element is animating and will wait until the element reaches a clickable state. You will never deal with a situation where Cypress accidentally clicks the *wrong* element.\n\nHowever, sometimes when dealing with 3rd party plugins that animate using JavaScript, Cypress logic to scroll an element into view can be affected. Cypress (acting like a real user) will attempt to position the element onscreen by scrolling all parent elements that need to be scrolled (just like a real user) prior to making a click. This *may* have an adverse affect if a 3rd party plugin is bound to the `scroll` event. Cypress is so fast that sometimes there are timing issues where 3rd party plugins have incorrectly calculated animations and sometimes even prevent an element from displaying altogether.\n\nThese situations are rare, but if you're having a difficult time getting an element to click or experiencing seemingly *random* failures, you will save *yourself hours of debugging and headache* by simply issuing the `{force: true}` option to the click or by inserting a small delay prior to the click with [`cy.wait(ms)`](https://on.cypress.io/api/wait). It is almost never worth your time trying to debug finicky animation issues caused by 3rd party plugins.\n\nSo far the only library we've seen cause issues with is animating KendoUI's `dropdownlist`. By using `{force: true}` or inserting a small `wait` prior to a click, these issues completely go away.\n\n***\n\n# Notes\n\n## Events that are fired\n\n```javascript\ncy.get(\"button\").click()\n// mousedown\n// focus\n// mouseup\n// click\n```\n\nThe events are fired to spec, including the coordinates of where the event took place.\n\nAt the moment, `mouseover` and `mouseout` events are *not* fired but this will be done soon.\n\nAdditionally if the `mousedown` event causes the element to be removed from the DOM, the remaining events should continue to be fired, but to the resulting element left below the removed element.  This has also not been implemented but will be implemented at some point.\n\n***\n\n## Focus is given to the first focusable element\n\nJust like real browsers, clicking a `<span>`, for example, inside of a `<button>` will properly give the focus to the button, since that's what would happen in a real user scenario.\n\nHowever, Cypress additionally handles situations where a child descendent is clicked inside of a focusable parent, but actually isn't visually inside the parent (per the CSS Object Model). In those cases if no focusable parent is found the window is given focus instead (which matches a real browser).\n\n***\n\n## Mousedown cancellation will not cause focus\n\nIf the mousedown event has its default action prevented (`e.preventDefault()`) then the element will not receive focus as per the spec.\n\n***\n\n## Coordinates of a click\n\nThe coordinates of the click will be recorded the exact moment the click happens. When hovering over the `click` command, Cypress will display a red \"hitbox\" indicator on the snapshot showing you where the click event occurred on the page.\n\n***\n\n# Command Log\n\n## Click the button in the form that has text \"Create User\"\n\n```javascript\ncy.get(\"form\").find(\"button\").contains(\"Create User\").click()\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"590\" alt=\"screen shot 2015-11-29 at 1 07 27 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458988/3cd5bae8-969a-11e5-9938-40a553402992.png\">\n\nWhen clicking on `click` within the command log, the console outputs the following:\n\n<img width=\"759\" alt=\"screen shot 2015-11-29 at 1 07 49 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458989/4036493c-969a-11e5-8f98-377dfce1f2c1.png\">\n\n***\n\n# Errors\n\n## cy.click() can only be called on a single element.\n\nIf the subject passed to `cy.click()` are multiple elements, you need to write `cy.click({multiple: true})` to serially click each element one after another. Otherwise, ensure that your subject is only one element.\n\n## cy.click() cannot be called on a <select> element. Use cy.select() command instead to change the value.\n\nIn order to work with selecting `<select>` elements, [`cy.select()`](https://on.cypress.io/api/select) will afford better options than `cy.click()`.\n\n# Related\n\n- [dblclick](https://on.cypress.io/api/dblclick)\n- [check](https://on.cypress.io/api/check)\n- [select](https://on.cypress.io/api/select)\n- [submit](https://on.cypress.io/api/submit)\n","source":"api/commands/click.md","raw":"title: click\n---\n\n`cy.click` is used to click a DOM element found int he previous command.  The DOM element must be in a \"clickable\" state prior to the click event happening (it must be visible and not covered by another element).\n\nCypress automatically scrolls the element into view prior to attempting the click.\n\nBy default, the click is issued at the exact center of the element. You can pass a [`position`](#section-position-usage) option to override this setting.\n\n**The following events are fired during click:** `mousedown`, `focus`, `mouseup`, `click`\n\n| | |\n|--- | --- |\n| **Returns** | the existing DOM subject |\n| **Timeout** | `cy.click` will wait and retry until the element is 'clickable' for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) or the duration of the `timeout` specified in the command's [options](#section-options) |\n\n***\n\n# [cy.click()](#section-usage)\n\nClick the DOM element.\n\n***\n\n# [cy.click( *position* )](#section-position-usage)\n\nClicks the element at the specified position. The `center` position is the default position.\n\nPosition | Default | Notes\n--- | --- | ---\n`center` | Yes | Clicks the exact center of the element\n`topLeft` | No | Clicks the top left corner of the element\n`topRight` | No | Clicks the top right corner of the element\n`bottomLeft` | No | Clicks the bottom left corner of the element\n`bottomRight` | No | Clicks the bottom right corner of the element\n\n***\n\n# [cy.click( *x*, *y* )](#section-coordinates-usage)\n\nYou can pass a relative `x` and `y` coordinate which will calculate distance in pixels from the top left corner of the element and isssue the click at the calculated coordinate.\n\n`x` and `y` must both be `Numbers`. Currently you cannot use `%` based arguments. [Open an issue](https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A) if you'd like this functionality.\n\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"Make sure not to issue a click outside of the width and height of the element. This will result in a `Command Timeout`\"\n}\n[/block]\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.click`.\n\n**[cy.click( *options* )](#options-usage)**\n**[cy.click( *position*, *options* )](#options-usage)**\n**[cy.click( *x*, *y*, *options* )](#options-usage)**\n\nOption | Default | Notes\n--- | --- | ---\n`force` | `false` | Forces click, disables error checking prior to click\n`multiple` | `false` | Enables serially clicking multiple elements\n`interval` | `16` | Interval which to retry a click\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry the click\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Click the button\n\n```javascript\n// returns <button>Save</button>\ncy.get(\"button\").click()\n```\n\n***\n\n# Position Usage\n\n## Specify a corner of the element to click\n\n```javascript\n// click is issued in the top right corner of the element\ncy.get(\"button\").click(\"topRight\")\n```\n\n***\n\n# Coordinates Usage\n\n## Specify explicit coordinates relative to the top left corner\n\n```javascript\n// the click will be issued inside of the element\n// 15px from the left and\n// 40px from the top\ncy.get(\"button\").click(15, 40)\n```\n\n***\n\n# Options Usage\n\n## Force a click regardless of visibility or other elements in front of the element\n\nThis is useful when you want the click issued no matter what. Forcing a click disables the error checking that happens prior to a click.\n\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"Be careful with this option because it allows the click to happen when it might actually be impossible for a real user to click.\"\n}\n[/block]\n\n```javascript\n// this will disable the built-in logic for ensuring\n// the element is visible, and is physically clickable\ncy.get(\"button\").click({force: true})\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe on testing hover and working with hidden elements](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/hover_hidden_elements.js)\",\n  \"title\": \"Dealing with hover and hidden elements\"\n}\n[/block]\n\n***\n\n## Force a click with position argument\n\n```javascript\ncy.get(\"button\").click(\"bottomLeft\", {force: true})\n```\n\n***\n\n## Force a click with relative coordinates\n\n```javascript\ncy.get(\"button\").click(5, 60, {force: true})\n```\n\n## Click all buttons found on the page\n\n```javascript\ncy.get(\"button\").click({multiple: true})\n```\n\n***\n\n# Known Issues\n\n## pointer-events: none\n\nCypress does not currently factor in `pointer-events: none` in its clicking algorithm. [Open an issue](https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A) if you need this to be fixed.\n\n***\n\n## Element removal during `mousedown` or `mouseup`\n\nThe spec states what should happen if the element clicked is removed from the DOM during `mousedown` or `mouseup`, but Cypress is not currently factoring this in. [Open an issue](https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A) if you need this to be fixed.\n\n***\n\n## Animations\n\nUnlike other testing frameworks, like Selenium, Cypress has built in logic for dealing with both CSS and JavaScript animations. Cypress will detect if an element is animating and will wait until the element reaches a clickable state. You will never deal with a situation where Cypress accidentally clicks the *wrong* element.\n\nHowever, sometimes when dealing with 3rd party plugins that animate using JavaScript, Cypress logic to scroll an element into view can be affected. Cypress (acting like a real user) will attempt to position the element onscreen by scrolling all parent elements that need to be scrolled (just like a real user) prior to making a click. This *may* have an adverse affect if a 3rd party plugin is bound to the `scroll` event. Cypress is so fast that sometimes there are timing issues where 3rd party plugins have incorrectly calculated animations and sometimes even prevent an element from displaying altogether.\n\nThese situations are rare, but if you're having a difficult time getting an element to click or experiencing seemingly *random* failures, you will save *yourself hours of debugging and headache* by simply issuing the `{force: true}` option to the click or by inserting a small delay prior to the click with [`cy.wait(ms)`](https://on.cypress.io/api/wait). It is almost never worth your time trying to debug finicky animation issues caused by 3rd party plugins.\n\nSo far the only library we've seen cause issues with is animating KendoUI's `dropdownlist`. By using `{force: true}` or inserting a small `wait` prior to a click, these issues completely go away.\n\n***\n\n# Notes\n\n## Events that are fired\n\n```javascript\ncy.get(\"button\").click()\n// mousedown\n// focus\n// mouseup\n// click\n```\n\nThe events are fired to spec, including the coordinates of where the event took place.\n\nAt the moment, `mouseover` and `mouseout` events are *not* fired but this will be done soon.\n\nAdditionally if the `mousedown` event causes the element to be removed from the DOM, the remaining events should continue to be fired, but to the resulting element left below the removed element.  This has also not been implemented but will be implemented at some point.\n\n***\n\n## Focus is given to the first focusable element\n\nJust like real browsers, clicking a `<span>`, for example, inside of a `<button>` will properly give the focus to the button, since that's what would happen in a real user scenario.\n\nHowever, Cypress additionally handles situations where a child descendent is clicked inside of a focusable parent, but actually isn't visually inside the parent (per the CSS Object Model). In those cases if no focusable parent is found the window is given focus instead (which matches a real browser).\n\n***\n\n## Mousedown cancellation will not cause focus\n\nIf the mousedown event has its default action prevented (`e.preventDefault()`) then the element will not receive focus as per the spec.\n\n***\n\n## Coordinates of a click\n\nThe coordinates of the click will be recorded the exact moment the click happens. When hovering over the `click` command, Cypress will display a red \"hitbox\" indicator on the snapshot showing you where the click event occurred on the page.\n\n***\n\n# Command Log\n\n## Click the button in the form that has text \"Create User\"\n\n```javascript\ncy.get(\"form\").find(\"button\").contains(\"Create User\").click()\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"590\" alt=\"screen shot 2015-11-29 at 1 07 27 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458988/3cd5bae8-969a-11e5-9938-40a553402992.png\">\n\nWhen clicking on `click` within the command log, the console outputs the following:\n\n<img width=\"759\" alt=\"screen shot 2015-11-29 at 1 07 49 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458989/4036493c-969a-11e5-8f98-377dfce1f2c1.png\">\n\n***\n\n# Errors\n\n## cy.click() can only be called on a single element.\n\nIf the subject passed to `cy.click()` are multiple elements, you need to write `cy.click({multiple: true})` to serially click each element one after another. Otherwise, ensure that your subject is only one element.\n\n## cy.click() cannot be called on a <select> element. Use cy.select() command instead to change the value.\n\nIn order to work with selecting `<select>` elements, [`cy.select()`](https://on.cypress.io/api/select) will afford better options than `cy.click()`.\n\n# Related\n\n- [dblclick](https://on.cypress.io/api/dblclick)\n- [check](https://on.cypress.io/api/check)\n- [select](https://on.cypress.io/api/select)\n- [submit](https://on.cypress.io/api/submit)\n","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/click.html","comments":1,"layout":"page","_id":"cj1pc2g84000bk1g8wr37ub28","content":"<p><code>cy.click</code> is used to click a DOM element found int he previous command.  The DOM element must be in a “clickable” state prior to the click event happening (it must be visible and not covered by another element).</p>\n<p>Cypress automatically scrolls the element into view prior to attempting the click.</p>\n<p>By default, the click is issued at the exact center of the element. You can pass a <a href=\"#section-position-usage\"><code>position</code></a> option to override this setting.</p>\n<p><strong>The following events are fired during click:</strong> <code>mousedown</code>, <code>focus</code>, <code>mouseup</code>, <code>click</code></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the existing DOM subject</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.click</code> will wait and retry until the element is ‘clickable’ for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a> or the duration of the <code>timeout</code> specified in the command’s <a href=\"#section-options\">options</a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-click\"><a href=\"#cy-click\" class=\"headerlink\" title=\"cy.click()\"></a><a href=\"#section-usage\">cy.click()</a></h1><p>Click the DOM element.</p>\n<hr>\n<h1 id=\"cy-click-position\"><a href=\"#cy-click-position\" class=\"headerlink\" title=\"cy.click( position )\"></a><a href=\"#section-position-usage\">cy.click( <em>position</em> )</a></h1><p>Clicks the element at the specified position. The <code>center</code> position is the default position.</p>\n<table>\n<thead>\n<tr>\n<th>Position</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>center</code></td>\n<td>Yes</td>\n<td>Clicks the exact center of the element</td>\n</tr>\n<tr>\n<td><code>topLeft</code></td>\n<td>No</td>\n<td>Clicks the top left corner of the element</td>\n</tr>\n<tr>\n<td><code>topRight</code></td>\n<td>No</td>\n<td>Clicks the top right corner of the element</td>\n</tr>\n<tr>\n<td><code>bottomLeft</code></td>\n<td>No</td>\n<td>Clicks the bottom left corner of the element</td>\n</tr>\n<tr>\n<td><code>bottomRight</code></td>\n<td>No</td>\n<td>Clicks the bottom right corner of the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-click-x-y\"><a href=\"#cy-click-x-y\" class=\"headerlink\" title=\"cy.click( x, y )\"></a><a href=\"#section-coordinates-usage\">cy.click( <em>x</em>, <em>y</em> )</a></h1><p>You can pass a relative <code>x</code> and <code>y</code> coordinate which will calculate distance in pixels from the top left corner of the element and isssue the click at the calculated coordinate.</p>\n<p><code>x</code> and <code>y</code> must both be <code>Numbers</code>. Currently you cannot use <code>%</code> based arguments. <a href=\"https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A\" target=\"_blank\" rel=\"external\">Open an issue</a> if you’d like this functionality.</p>\n<p>[block:callout]<br>{<br>  “type”: “warning”,<br>  “body”: “Make sure not to issue a click outside of the width and height of the element. This will result in a <code>Command Timeout</code>“<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.click</code>.</p>\n<p><strong><a href=\"#options-usage\">cy.click( <em>options</em> )</a></strong><br><strong><a href=\"#options-usage\">cy.click( <em>position</em>, <em>options</em> )</a></strong><br><strong><a href=\"#options-usage\">cy.click( <em>x</em>, <em>y</em>, <em>options</em> )</a></strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>force</code></td>\n<td><code>false</code></td>\n<td>Forces click, disables error checking prior to click</td>\n</tr>\n<tr>\n<td><code>multiple</code></td>\n<td><code>false</code></td>\n<td>Enables serially clicking multiple elements</td>\n</tr>\n<tr>\n<td><code>interval</code></td>\n<td><code>16</code></td>\n<td>Interval which to retry a click</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry the click</td>\n</tr>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Click-the-button\"><a href=\"#Click-the-button\" class=\"headerlink\" title=\"Click the button\"></a>Click the button</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns &lt;button&gt;Save&lt;/button&gt;</span></div><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).click()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Position-Usage\"><a href=\"#Position-Usage\" class=\"headerlink\" title=\"Position Usage\"></a>Position Usage</h1><h2 id=\"Specify-a-corner-of-the-element-to-click\"><a href=\"#Specify-a-corner-of-the-element-to-click\" class=\"headerlink\" title=\"Specify a corner of the element to click\"></a>Specify a corner of the element to click</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// click is issued in the top right corner of the element</span></div><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).click(<span class=\"string\">\"topRight\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Coordinates-Usage\"><a href=\"#Coordinates-Usage\" class=\"headerlink\" title=\"Coordinates Usage\"></a>Coordinates Usage</h1><h2 id=\"Specify-explicit-coordinates-relative-to-the-top-left-corner\"><a href=\"#Specify-explicit-coordinates-relative-to-the-top-left-corner\" class=\"headerlink\" title=\"Specify explicit coordinates relative to the top left corner\"></a>Specify explicit coordinates relative to the top left corner</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// the click will be issued inside of the element</span></div><div class=\"line\"><span class=\"comment\">// 15px from the left and</span></div><div class=\"line\"><span class=\"comment\">// 40px from the top</span></div><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).click(<span class=\"number\">15</span>, <span class=\"number\">40</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Options-Usage\"><a href=\"#Options-Usage\" class=\"headerlink\" title=\"Options Usage\"></a>Options Usage</h1><h2 id=\"Force-a-click-regardless-of-visibility-or-other-elements-in-front-of-the-element\"><a href=\"#Force-a-click-regardless-of-visibility-or-other-elements-in-front-of-the-element\" class=\"headerlink\" title=\"Force a click regardless of visibility or other elements in front of the element\"></a>Force a click regardless of visibility or other elements in front of the element</h2><p>This is useful when you want the click issued no matter what. Forcing a click disables the error checking that happens prior to a click.</p>\n<p>[block:callout]<br>{<br>  “type”: “warning”,<br>  “body”: “Be careful with this option because it allows the click to happen when it might actually be impossible for a real user to click.”<br>}<br>[/block]</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// this will disable the built-in logic for ensuring</span></div><div class=\"line\"><span class=\"comment\">// the element is visible, and is physically clickable</span></div><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).click(&#123;<span class=\"attr\">force</span>: <span class=\"literal\">true</span>&#125;)</div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/hover_hidden_elements.js\" target=\"_blank\" rel=\"external\">Check out our example recipe on testing hover and working with hidden elements</a>“,<br>  “title”: “Dealing with hover and hidden elements”<br>}<br>[/block]</p>\n<hr>\n<h2 id=\"Force-a-click-with-position-argument\"><a href=\"#Force-a-click-with-position-argument\" class=\"headerlink\" title=\"Force a click with position argument\"></a>Force a click with position argument</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).click(<span class=\"string\">\"bottomLeft\"</span>, &#123;<span class=\"attr\">force</span>: <span class=\"literal\">true</span>&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Force-a-click-with-relative-coordinates\"><a href=\"#Force-a-click-with-relative-coordinates\" class=\"headerlink\" title=\"Force a click with relative coordinates\"></a>Force a click with relative coordinates</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).click(<span class=\"number\">5</span>, <span class=\"number\">60</span>, &#123;<span class=\"attr\">force</span>: <span class=\"literal\">true</span>&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Click-all-buttons-found-on-the-page\"><a href=\"#Click-all-buttons-found-on-the-page\" class=\"headerlink\" title=\"Click all buttons found on the page\"></a>Click all buttons found on the page</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).click(&#123;<span class=\"attr\">multiple</span>: <span class=\"literal\">true</span>&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Known-Issues\"><a href=\"#Known-Issues\" class=\"headerlink\" title=\"Known Issues\"></a>Known Issues</h1><h2 id=\"pointer-events-none\"><a href=\"#pointer-events-none\" class=\"headerlink\" title=\"pointer-events: none\"></a>pointer-events: none</h2><p>Cypress does not currently factor in <code>pointer-events: none</code> in its clicking algorithm. <a href=\"https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A\" target=\"_blank\" rel=\"external\">Open an issue</a> if you need this to be fixed.</p>\n<hr>\n<h2 id=\"Element-removal-during-mousedown-or-mouseup\"><a href=\"#Element-removal-during-mousedown-or-mouseup\" class=\"headerlink\" title=\"Element removal during mousedown or mouseup\"></a>Element removal during <code>mousedown</code> or <code>mouseup</code></h2><p>The spec states what should happen if the element clicked is removed from the DOM during <code>mousedown</code> or <code>mouseup</code>, but Cypress is not currently factoring this in. <a href=\"https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A\" target=\"_blank\" rel=\"external\">Open an issue</a> if you need this to be fixed.</p>\n<hr>\n<h2 id=\"Animations\"><a href=\"#Animations\" class=\"headerlink\" title=\"Animations\"></a>Animations</h2><p>Unlike other testing frameworks, like Selenium, Cypress has built in logic for dealing with both CSS and JavaScript animations. Cypress will detect if an element is animating and will wait until the element reaches a clickable state. You will never deal with a situation where Cypress accidentally clicks the <em>wrong</em> element.</p>\n<p>However, sometimes when dealing with 3rd party plugins that animate using JavaScript, Cypress logic to scroll an element into view can be affected. Cypress (acting like a real user) will attempt to position the element onscreen by scrolling all parent elements that need to be scrolled (just like a real user) prior to making a click. This <em>may</em> have an adverse affect if a 3rd party plugin is bound to the <code>scroll</code> event. Cypress is so fast that sometimes there are timing issues where 3rd party plugins have incorrectly calculated animations and sometimes even prevent an element from displaying altogether.</p>\n<p>These situations are rare, but if you’re having a difficult time getting an element to click or experiencing seemingly <em>random</em> failures, you will save <em>yourself hours of debugging and headache</em> by simply issuing the <code>{force: true}</code> option to the click or by inserting a small delay prior to the click with <a href=\"https://on.cypress.io/api/wait\" target=\"_blank\" rel=\"external\"><code>cy.wait(ms)</code></a>. It is almost never worth your time trying to debug finicky animation issues caused by 3rd party plugins.</p>\n<p>So far the only library we’ve seen cause issues with is animating KendoUI’s <code>dropdownlist</code>. By using <code>{force: true}</code> or inserting a small <code>wait</code> prior to a click, these issues completely go away.</p>\n<hr>\n<h1 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h1><h2 id=\"Events-that-are-fired\"><a href=\"#Events-that-are-fired\" class=\"headerlink\" title=\"Events that are fired\"></a>Events that are fired</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).click()</div><div class=\"line\"><span class=\"comment\">// mousedown</span></div><div class=\"line\"><span class=\"comment\">// focus</span></div><div class=\"line\"><span class=\"comment\">// mouseup</span></div><div class=\"line\"><span class=\"comment\">// click</span></div></pre></td></tr></table></figure>\n<p>The events are fired to spec, including the coordinates of where the event took place.</p>\n<p>At the moment, <code>mouseover</code> and <code>mouseout</code> events are <em>not</em> fired but this will be done soon.</p>\n<p>Additionally if the <code>mousedown</code> event causes the element to be removed from the DOM, the remaining events should continue to be fired, but to the resulting element left below the removed element.  This has also not been implemented but will be implemented at some point.</p>\n<hr>\n<h2 id=\"Focus-is-given-to-the-first-focusable-element\"><a href=\"#Focus-is-given-to-the-first-focusable-element\" class=\"headerlink\" title=\"Focus is given to the first focusable element\"></a>Focus is given to the first focusable element</h2><p>Just like real browsers, clicking a <code>&lt;span&gt;</code>, for example, inside of a <code>&lt;button&gt;</code> will properly give the focus to the button, since that’s what would happen in a real user scenario.</p>\n<p>However, Cypress additionally handles situations where a child descendent is clicked inside of a focusable parent, but actually isn’t visually inside the parent (per the CSS Object Model). In those cases if no focusable parent is found the window is given focus instead (which matches a real browser).</p>\n<hr>\n<h2 id=\"Mousedown-cancellation-will-not-cause-focus\"><a href=\"#Mousedown-cancellation-will-not-cause-focus\" class=\"headerlink\" title=\"Mousedown cancellation will not cause focus\"></a>Mousedown cancellation will not cause focus</h2><p>If the mousedown event has its default action prevented (<code>e.preventDefault()</code>) then the element will not receive focus as per the spec.</p>\n<hr>\n<h2 id=\"Coordinates-of-a-click\"><a href=\"#Coordinates-of-a-click\" class=\"headerlink\" title=\"Coordinates of a click\"></a>Coordinates of a click</h2><p>The coordinates of the click will be recorded the exact moment the click happens. When hovering over the <code>click</code> command, Cypress will display a red “hitbox” indicator on the snapshot showing you where the click event occurred on the page.</p>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Click-the-button-in-the-form-that-has-text-“Create-User”\"><a href=\"#Click-the-button-in-the-form-that-has-text-“Create-User”\" class=\"headerlink\" title=\"Click the button in the form that has text “Create User”\"></a>Click the button in the form that has text “Create User”</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"form\"</span>).find(<span class=\"string\">\"button\"</span>).contains(<span class=\"string\">\"Create User\"</span>).click()</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"590\" alt=\"screen shot 2015-11-29 at 1 07 27 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458988/3cd5bae8-969a-11e5-9938-40a553402992.png\"></p>\n<p>When clicking on <code>click</code> within the command log, the console outputs the following:</p>\n<p><img width=\"759\" alt=\"screen shot 2015-11-29 at 1 07 49 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458989/4036493c-969a-11e5-8f98-377dfce1f2c1.png\"></p>\n<hr>\n<h1 id=\"Errors\"><a href=\"#Errors\" class=\"headerlink\" title=\"Errors\"></a>Errors</h1><h2 id=\"cy-click-can-only-be-called-on-a-single-element\"><a href=\"#cy-click-can-only-be-called-on-a-single-element\" class=\"headerlink\" title=\"cy.click() can only be called on a single element.\"></a>cy.click() can only be called on a single element.</h2><p>If the subject passed to <code>cy.click()</code> are multiple elements, you need to write <code>cy.click({multiple: true})</code> to serially click each element one after another. Otherwise, ensure that your subject is only one element.</p>\n<h2 id=\"cy-click-cannot-be-called-on-a-element-Use-cy-select-command-instead-to-change-the-value\"><a href=\"#cy-click-cannot-be-called-on-a-element-Use-cy-select-command-instead-to-change-the-value\" class=\"headerlink\" title=\"cy.click() cannot be called on a  element. Use cy.select() command instead to change the value.\"></a>cy.click() cannot be called on a <select> element. Use cy.select() command instead to change the value.</select></h2><p>In order to work with selecting <code>&lt;select&gt;</code> elements, <a href=\"https://on.cypress.io/api/select\" target=\"_blank\" rel=\"external\"><code>cy.select()</code></a> will afford better options than <code>cy.click()</code>.</p>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/dblclick\" target=\"_blank\" rel=\"external\">dblclick</a></li>\n<li><a href=\"https://on.cypress.io/api/check\" target=\"_blank\" rel=\"external\">check</a></li>\n<li><a href=\"https://on.cypress.io/api/select\" target=\"_blank\" rel=\"external\">select</a></li>\n<li><a href=\"https://on.cypress.io/api/submit\" target=\"_blank\" rel=\"external\">submit</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p><code>cy.click</code> is used to click a DOM element found int he previous command.  The DOM element must be in a “clickable” state prior to the click event happening (it must be visible and not covered by another element).</p>\n<p>Cypress automatically scrolls the element into view prior to attempting the click.</p>\n<p>By default, the click is issued at the exact center of the element. You can pass a <a href=\"#section-position-usage\"><code>position</code></a> option to override this setting.</p>\n<p><strong>The following events are fired during click:</strong> <code>mousedown</code>, <code>focus</code>, <code>mouseup</code>, <code>click</code></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the existing DOM subject</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.click</code> will wait and retry until the element is ‘clickable’ for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a> or the duration of the <code>timeout</code> specified in the command’s <a href=\"#section-options\">options</a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-click\"><a href=\"#cy-click\" class=\"headerlink\" title=\"cy.click()\"></a><a href=\"#section-usage\">cy.click()</a></h1><p>Click the DOM element.</p>\n<hr>\n<h1 id=\"cy-click-position\"><a href=\"#cy-click-position\" class=\"headerlink\" title=\"cy.click( position )\"></a><a href=\"#section-position-usage\">cy.click( <em>position</em> )</a></h1><p>Clicks the element at the specified position. The <code>center</code> position is the default position.</p>\n<table>\n<thead>\n<tr>\n<th>Position</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>center</code></td>\n<td>Yes</td>\n<td>Clicks the exact center of the element</td>\n</tr>\n<tr>\n<td><code>topLeft</code></td>\n<td>No</td>\n<td>Clicks the top left corner of the element</td>\n</tr>\n<tr>\n<td><code>topRight</code></td>\n<td>No</td>\n<td>Clicks the top right corner of the element</td>\n</tr>\n<tr>\n<td><code>bottomLeft</code></td>\n<td>No</td>\n<td>Clicks the bottom left corner of the element</td>\n</tr>\n<tr>\n<td><code>bottomRight</code></td>\n<td>No</td>\n<td>Clicks the bottom right corner of the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-click-x-y\"><a href=\"#cy-click-x-y\" class=\"headerlink\" title=\"cy.click( x, y )\"></a><a href=\"#section-coordinates-usage\">cy.click( <em>x</em>, <em>y</em> )</a></h1><p>You can pass a relative <code>x</code> and <code>y</code> coordinate which will calculate distance in pixels from the top left corner of the element and isssue the click at the calculated coordinate.</p>\n<p><code>x</code> and <code>y</code> must both be <code>Numbers</code>. Currently you cannot use <code>%</code> based arguments. <a href=\"https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A\">Open an issue</a> if you’d like this functionality.</p>\n<p>[block:callout]<br>{<br>  “type”: “warning”,<br>  “body”: “Make sure not to issue a click outside of the width and height of the element. This will result in a <code>Command Timeout</code>“<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.click</code>.</p>\n<p><strong><a href=\"#options-usage\">cy.click( <em>options</em> )</a></strong><br><strong><a href=\"#options-usage\">cy.click( <em>position</em>, <em>options</em> )</a></strong><br><strong><a href=\"#options-usage\">cy.click( <em>x</em>, <em>y</em>, <em>options</em> )</a></strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>force</code></td>\n<td><code>false</code></td>\n<td>Forces click, disables error checking prior to click</td>\n</tr>\n<tr>\n<td><code>multiple</code></td>\n<td><code>false</code></td>\n<td>Enables serially clicking multiple elements</td>\n</tr>\n<tr>\n<td><code>interval</code></td>\n<td><code>16</code></td>\n<td>Interval which to retry a click</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry the click</td>\n</tr>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Click-the-button\"><a href=\"#Click-the-button\" class=\"headerlink\" title=\"Click the button\"></a>Click the button</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns &lt;button&gt;Save&lt;/button&gt;</span></div><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).click()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Position-Usage\"><a href=\"#Position-Usage\" class=\"headerlink\" title=\"Position Usage\"></a>Position Usage</h1><h2 id=\"Specify-a-corner-of-the-element-to-click\"><a href=\"#Specify-a-corner-of-the-element-to-click\" class=\"headerlink\" title=\"Specify a corner of the element to click\"></a>Specify a corner of the element to click</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// click is issued in the top right corner of the element</span></div><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).click(<span class=\"string\">\"topRight\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Coordinates-Usage\"><a href=\"#Coordinates-Usage\" class=\"headerlink\" title=\"Coordinates Usage\"></a>Coordinates Usage</h1><h2 id=\"Specify-explicit-coordinates-relative-to-the-top-left-corner\"><a href=\"#Specify-explicit-coordinates-relative-to-the-top-left-corner\" class=\"headerlink\" title=\"Specify explicit coordinates relative to the top left corner\"></a>Specify explicit coordinates relative to the top left corner</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// the click will be issued inside of the element</span></div><div class=\"line\"><span class=\"comment\">// 15px from the left and</span></div><div class=\"line\"><span class=\"comment\">// 40px from the top</span></div><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).click(<span class=\"number\">15</span>, <span class=\"number\">40</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Options-Usage\"><a href=\"#Options-Usage\" class=\"headerlink\" title=\"Options Usage\"></a>Options Usage</h1><h2 id=\"Force-a-click-regardless-of-visibility-or-other-elements-in-front-of-the-element\"><a href=\"#Force-a-click-regardless-of-visibility-or-other-elements-in-front-of-the-element\" class=\"headerlink\" title=\"Force a click regardless of visibility or other elements in front of the element\"></a>Force a click regardless of visibility or other elements in front of the element</h2><p>This is useful when you want the click issued no matter what. Forcing a click disables the error checking that happens prior to a click.</p>\n<p>[block:callout]<br>{<br>  “type”: “warning”,<br>  “body”: “Be careful with this option because it allows the click to happen when it might actually be impossible for a real user to click.”<br>}<br>[/block]</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// this will disable the built-in logic for ensuring</span></div><div class=\"line\"><span class=\"comment\">// the element is visible, and is physically clickable</span></div><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).click(&#123;<span class=\"attr\">force</span>: <span class=\"literal\">true</span>&#125;)</div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/hover_hidden_elements.js\">Check out our example recipe on testing hover and working with hidden elements</a>“,<br>  “title”: “Dealing with hover and hidden elements”<br>}<br>[/block]</p>\n<hr>\n<h2 id=\"Force-a-click-with-position-argument\"><a href=\"#Force-a-click-with-position-argument\" class=\"headerlink\" title=\"Force a click with position argument\"></a>Force a click with position argument</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).click(<span class=\"string\">\"bottomLeft\"</span>, &#123;<span class=\"attr\">force</span>: <span class=\"literal\">true</span>&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Force-a-click-with-relative-coordinates\"><a href=\"#Force-a-click-with-relative-coordinates\" class=\"headerlink\" title=\"Force a click with relative coordinates\"></a>Force a click with relative coordinates</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).click(<span class=\"number\">5</span>, <span class=\"number\">60</span>, &#123;<span class=\"attr\">force</span>: <span class=\"literal\">true</span>&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Click-all-buttons-found-on-the-page\"><a href=\"#Click-all-buttons-found-on-the-page\" class=\"headerlink\" title=\"Click all buttons found on the page\"></a>Click all buttons found on the page</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).click(&#123;<span class=\"attr\">multiple</span>: <span class=\"literal\">true</span>&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Known-Issues\"><a href=\"#Known-Issues\" class=\"headerlink\" title=\"Known Issues\"></a>Known Issues</h1><h2 id=\"pointer-events-none\"><a href=\"#pointer-events-none\" class=\"headerlink\" title=\"pointer-events: none\"></a>pointer-events: none</h2><p>Cypress does not currently factor in <code>pointer-events: none</code> in its clicking algorithm. <a href=\"https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A\">Open an issue</a> if you need this to be fixed.</p>\n<hr>\n<h2 id=\"Element-removal-during-mousedown-or-mouseup\"><a href=\"#Element-removal-during-mousedown-or-mouseup\" class=\"headerlink\" title=\"Element removal during mousedown or mouseup\"></a>Element removal during <code>mousedown</code> or <code>mouseup</code></h2><p>The spec states what should happen if the element clicked is removed from the DOM during <code>mousedown</code> or <code>mouseup</code>, but Cypress is not currently factoring this in. <a href=\"https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A\">Open an issue</a> if you need this to be fixed.</p>\n<hr>\n<h2 id=\"Animations\"><a href=\"#Animations\" class=\"headerlink\" title=\"Animations\"></a>Animations</h2><p>Unlike other testing frameworks, like Selenium, Cypress has built in logic for dealing with both CSS and JavaScript animations. Cypress will detect if an element is animating and will wait until the element reaches a clickable state. You will never deal with a situation where Cypress accidentally clicks the <em>wrong</em> element.</p>\n<p>However, sometimes when dealing with 3rd party plugins that animate using JavaScript, Cypress logic to scroll an element into view can be affected. Cypress (acting like a real user) will attempt to position the element onscreen by scrolling all parent elements that need to be scrolled (just like a real user) prior to making a click. This <em>may</em> have an adverse affect if a 3rd party plugin is bound to the <code>scroll</code> event. Cypress is so fast that sometimes there are timing issues where 3rd party plugins have incorrectly calculated animations and sometimes even prevent an element from displaying altogether.</p>\n<p>These situations are rare, but if you’re having a difficult time getting an element to click or experiencing seemingly <em>random</em> failures, you will save <em>yourself hours of debugging and headache</em> by simply issuing the <code>{force: true}</code> option to the click or by inserting a small delay prior to the click with <a href=\"https://on.cypress.io/api/wait\"><code>cy.wait(ms)</code></a>. It is almost never worth your time trying to debug finicky animation issues caused by 3rd party plugins.</p>\n<p>So far the only library we’ve seen cause issues with is animating KendoUI’s <code>dropdownlist</code>. By using <code>{force: true}</code> or inserting a small <code>wait</code> prior to a click, these issues completely go away.</p>\n<hr>\n<h1 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h1><h2 id=\"Events-that-are-fired\"><a href=\"#Events-that-are-fired\" class=\"headerlink\" title=\"Events that are fired\"></a>Events that are fired</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).click()</div><div class=\"line\"><span class=\"comment\">// mousedown</span></div><div class=\"line\"><span class=\"comment\">// focus</span></div><div class=\"line\"><span class=\"comment\">// mouseup</span></div><div class=\"line\"><span class=\"comment\">// click</span></div></pre></td></tr></table></figure>\n<p>The events are fired to spec, including the coordinates of where the event took place.</p>\n<p>At the moment, <code>mouseover</code> and <code>mouseout</code> events are <em>not</em> fired but this will be done soon.</p>\n<p>Additionally if the <code>mousedown</code> event causes the element to be removed from the DOM, the remaining events should continue to be fired, but to the resulting element left below the removed element.  This has also not been implemented but will be implemented at some point.</p>\n<hr>\n<h2 id=\"Focus-is-given-to-the-first-focusable-element\"><a href=\"#Focus-is-given-to-the-first-focusable-element\" class=\"headerlink\" title=\"Focus is given to the first focusable element\"></a>Focus is given to the first focusable element</h2><p>Just like real browsers, clicking a <code>&lt;span&gt;</code>, for example, inside of a <code>&lt;button&gt;</code> will properly give the focus to the button, since that’s what would happen in a real user scenario.</p>\n<p>However, Cypress additionally handles situations where a child descendent is clicked inside of a focusable parent, but actually isn’t visually inside the parent (per the CSS Object Model). In those cases if no focusable parent is found the window is given focus instead (which matches a real browser).</p>\n<hr>\n<h2 id=\"Mousedown-cancellation-will-not-cause-focus\"><a href=\"#Mousedown-cancellation-will-not-cause-focus\" class=\"headerlink\" title=\"Mousedown cancellation will not cause focus\"></a>Mousedown cancellation will not cause focus</h2><p>If the mousedown event has its default action prevented (<code>e.preventDefault()</code>) then the element will not receive focus as per the spec.</p>\n<hr>\n<h2 id=\"Coordinates-of-a-click\"><a href=\"#Coordinates-of-a-click\" class=\"headerlink\" title=\"Coordinates of a click\"></a>Coordinates of a click</h2><p>The coordinates of the click will be recorded the exact moment the click happens. When hovering over the <code>click</code> command, Cypress will display a red “hitbox” indicator on the snapshot showing you where the click event occurred on the page.</p>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Click-the-button-in-the-form-that-has-text-“Create-User”\"><a href=\"#Click-the-button-in-the-form-that-has-text-“Create-User”\" class=\"headerlink\" title=\"Click the button in the form that has text “Create User”\"></a>Click the button in the form that has text “Create User”</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"form\"</span>).find(<span class=\"string\">\"button\"</span>).contains(<span class=\"string\">\"Create User\"</span>).click()</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"590\" alt=\"screen shot 2015-11-29 at 1 07 27 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458988/3cd5bae8-969a-11e5-9938-40a553402992.png\"></p>\n<p>When clicking on <code>click</code> within the command log, the console outputs the following:</p>\n<p><img width=\"759\" alt=\"screen shot 2015-11-29 at 1 07 49 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458989/4036493c-969a-11e5-8f98-377dfce1f2c1.png\"></p>\n<hr>\n<h1 id=\"Errors\"><a href=\"#Errors\" class=\"headerlink\" title=\"Errors\"></a>Errors</h1><h2 id=\"cy-click-can-only-be-called-on-a-single-element\"><a href=\"#cy-click-can-only-be-called-on-a-single-element\" class=\"headerlink\" title=\"cy.click() can only be called on a single element.\"></a>cy.click() can only be called on a single element.</h2><p>If the subject passed to <code>cy.click()</code> are multiple elements, you need to write <code>cy.click({multiple: true})</code> to serially click each element one after another. Otherwise, ensure that your subject is only one element.</p>\n<h2 id=\"cy-click-cannot-be-called-on-a-element-Use-cy-select-command-instead-to-change-the-value\"><a href=\"#cy-click-cannot-be-called-on-a-element-Use-cy-select-command-instead-to-change-the-value\" class=\"headerlink\" title=\"cy.click() cannot be called on a  element. Use cy.select() command instead to change the value.\"></a>cy.click() cannot be called on a <select> element. Use cy.select() command instead to change the value.</h2><p>In order to work with selecting <code>&lt;select&gt;</code> elements, <a href=\"https://on.cypress.io/api/select\"><code>cy.select()</code></a> will afford better options than <code>cy.click()</code>.</p>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/dblclick\">dblclick</a></li>\n<li><a href=\"https://on.cypress.io/api/check\">check</a></li>\n<li><a href=\"https://on.cypress.io/api/select\">select</a></li>\n<li><a href=\"https://on.cypress.io/api/submit\">submit</a></li>\n</ul>\n"},{"title":"closest","_content":"\nGet the first DOM element that matches the selector whether it be itself or one of it's ancestors.\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.filter` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.closest( *selector* )](#section-selector-usage)\n\nFor each DOM element in the set, get the first DOM element that matches the selector by testing the DOM element itself and traversing up through its ancestors in the DOM tree.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.closest`.\n\n**cy.closest( *selector*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry getting the element\n\n***\n\n# Selector Usage\n\n## Find the closest element of the current subject with the class `nav`\n\n```javascript\ncy.get(\"li.active\").closest(\".nav\")\n```\n\n***\n\n# Command Log\n\n## Find the closest element of the current subject with the class `nav`\n\n```javascript\ncy.get(\"li.active\").closest(\".nav\")\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"530\" alt=\"screen shot 2015-11-27 at 2 07 28 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447200/500fe9ca-9510-11e5-8c77-8afb8325d937.png\">\n\nWhen clicking on the `closest` command within the command log, the console outputs the following:\n\n<img width=\"478\" alt=\"screen shot 2015-11-27 at 2 07 46 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447201/535515c4-9510-11e5-9cf5-088bf21f34ac.png\">\n\n***\n\n# Related\n\n- [parents](https://on.cypress.io/api/parents)\n- [next](https://on.cypress.io/api/next)\n- [first](https://on.cypress.io/api/first)","source":"api/commands/closest.md","raw":"title: closest\n---\n\nGet the first DOM element that matches the selector whether it be itself or one of it's ancestors.\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.filter` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.closest( *selector* )](#section-selector-usage)\n\nFor each DOM element in the set, get the first DOM element that matches the selector by testing the DOM element itself and traversing up through its ancestors in the DOM tree.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.closest`.\n\n**cy.closest( *selector*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry getting the element\n\n***\n\n# Selector Usage\n\n## Find the closest element of the current subject with the class `nav`\n\n```javascript\ncy.get(\"li.active\").closest(\".nav\")\n```\n\n***\n\n# Command Log\n\n## Find the closest element of the current subject with the class `nav`\n\n```javascript\ncy.get(\"li.active\").closest(\".nav\")\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"530\" alt=\"screen shot 2015-11-27 at 2 07 28 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447200/500fe9ca-9510-11e5-8c77-8afb8325d937.png\">\n\nWhen clicking on the `closest` command within the command log, the console outputs the following:\n\n<img width=\"478\" alt=\"screen shot 2015-11-27 at 2 07 46 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447201/535515c4-9510-11e5-9cf5-088bf21f34ac.png\">\n\n***\n\n# Related\n\n- [parents](https://on.cypress.io/api/parents)\n- [next](https://on.cypress.io/api/next)\n- [first](https://on.cypress.io/api/first)","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/closest.html","comments":1,"layout":"page","_id":"cj1pc2g84000ck1g8ohmolevm","content":"<p>Get the first DOM element that matches the selector whether it be itself or one of it’s ancestors.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.filter</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-closest-selector\"><a href=\"#cy-closest-selector\" class=\"headerlink\" title=\"cy.closest( selector )\"></a><a href=\"#section-selector-usage\">cy.closest( <em>selector</em> )</a></h1><p>For each DOM element in the set, get the first DOM element that matches the selector by testing the DOM element itself and traversing up through its ancestors in the DOM tree.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.closest</code>.</p>\n<p><strong>cy.closest( <em>selector</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry getting the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Selector-Usage\"><a href=\"#Selector-Usage\" class=\"headerlink\" title=\"Selector Usage\"></a>Selector Usage</h1><h2 id=\"Find-the-closest-element-of-the-current-subject-with-the-class-nav\"><a href=\"#Find-the-closest-element-of-the-current-subject-with-the-class-nav\" class=\"headerlink\" title=\"Find the closest element of the current subject with the class nav\"></a>Find the closest element of the current subject with the class <code>nav</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"li.active\"</span>).closest(<span class=\"string\">\".nav\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Find-the-closest-element-of-the-current-subject-with-the-class-nav-1\"><a href=\"#Find-the-closest-element-of-the-current-subject-with-the-class-nav-1\" class=\"headerlink\" title=\"Find the closest element of the current subject with the class nav\"></a>Find the closest element of the current subject with the class <code>nav</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"li.active\"</span>).closest(<span class=\"string\">\".nav\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"530\" alt=\"screen shot 2015-11-27 at 2 07 28 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447200/500fe9ca-9510-11e5-8c77-8afb8325d937.png\"></p>\n<p>When clicking on the <code>closest</code> command within the command log, the console outputs the following:</p>\n<p><img width=\"478\" alt=\"screen shot 2015-11-27 at 2 07 46 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447201/535515c4-9510-11e5-9cf5-088bf21f34ac.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/parents\" target=\"_blank\" rel=\"external\">parents</a></li>\n<li><a href=\"https://on.cypress.io/api/next\" target=\"_blank\" rel=\"external\">next</a></li>\n<li><a href=\"https://on.cypress.io/api/first\" target=\"_blank\" rel=\"external\">first</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Get the first DOM element that matches the selector whether it be itself or one of it’s ancestors.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.filter</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-closest-selector\"><a href=\"#cy-closest-selector\" class=\"headerlink\" title=\"cy.closest( selector )\"></a><a href=\"#section-selector-usage\">cy.closest( <em>selector</em> )</a></h1><p>For each DOM element in the set, get the first DOM element that matches the selector by testing the DOM element itself and traversing up through its ancestors in the DOM tree.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.closest</code>.</p>\n<p><strong>cy.closest( <em>selector</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry getting the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Selector-Usage\"><a href=\"#Selector-Usage\" class=\"headerlink\" title=\"Selector Usage\"></a>Selector Usage</h1><h2 id=\"Find-the-closest-element-of-the-current-subject-with-the-class-nav\"><a href=\"#Find-the-closest-element-of-the-current-subject-with-the-class-nav\" class=\"headerlink\" title=\"Find the closest element of the current subject with the class nav\"></a>Find the closest element of the current subject with the class <code>nav</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"li.active\"</span>).closest(<span class=\"string\">\".nav\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Find-the-closest-element-of-the-current-subject-with-the-class-nav-1\"><a href=\"#Find-the-closest-element-of-the-current-subject-with-the-class-nav-1\" class=\"headerlink\" title=\"Find the closest element of the current subject with the class nav\"></a>Find the closest element of the current subject with the class <code>nav</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"li.active\"</span>).closest(<span class=\"string\">\".nav\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"530\" alt=\"screen shot 2015-11-27 at 2 07 28 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447200/500fe9ca-9510-11e5-8c77-8afb8325d937.png\"></p>\n<p>When clicking on the <code>closest</code> command within the command log, the console outputs the following:</p>\n<p><img width=\"478\" alt=\"screen shot 2015-11-27 at 2 07 46 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447201/535515c4-9510-11e5-9cf5-088bf21f34ac.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/parents\">parents</a></li>\n<li><a href=\"https://on.cypress.io/api/next\">next</a></li>\n<li><a href=\"https://on.cypress.io/api/first\">first</a></li>\n</ul>\n"},{"title":"contains","_content":"\nGet the DOM element containing the text. DOM elements can contain *more* than the desired text and still match. Additionally, Cypress will prefer some DOM elements over the deepest element found.\n\n**Preference order:**\n\n- `input[type='submit']`\n- `button`\n- `a`\n- `label`\n\n| | |\n|--- | --- |\n| **Returns** | the deepest DOM element containing the text  |\n| **Timeout** | `cy.contains` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.contains( *text* )](#section-text-usage)\n\nGet the deepest DOM element containing the text.\n\n***\n\n# [cy.contains( *number* )](#section-number-usage)\n\nGet the deepest DOM element containing the number.\n\n***\n\n# [cy.contains( *regexp* )](#section-regular-expression-usage)\n\nGet the deepest DOM element containing the text matching the regular expression.\n\n***\n\n# [cy.contains( *selector*, *text* )](#section-selector-and-text-usage)\n\nSpecify a selector to filter DOM elements containing the text. Cypress will **ignore** it's default preference for the specified selector. Using a selector allows you to return more *shallow* elements in the tree which contain the specific text.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.contains`.\n\n**cy.contains( *text*, *options* )**\n**cy.contains( *selector*, *text*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry finding an element\n\n***\n\n# Text Usage\n\n## Find the first element containing some text\n\n```html\n<ul>\n  <li>apples</li>\n  <li>oranges</li>\n  <li>bananas</li>\n</ul>\n```\n\n```javascript\n// returns <li>apples</li>\ncy.contains(\"apples\")\n```\n\n***\n\n## Find the input[type='submit'] by value\n\n```html\n<div id=\"main\">\n  <form>\n    <div>\n      <label>name</label>\n      <input name=\"name\" />\n    </div>\n    <div>\n      <label>age</label>\n      <input name=\"age\" />\n    </div>\n    <input type=\"submit\" value=\"submit the form!\" />\n  </form>\n</div>\n```\n\n```javascript\n// get the form element\n// search inside its descendants for the content 'submit the form!'\n// find the input[type='submit'] element\n// click it\ncy.get(\"form\").contains(\"submit the form!\").click()\n```\n\n***\n\n## Favor of `button` over other deeper elements\n\n```html\n<form>\n  <button>\n    <i class=\"fa fa-search\"></i>\n    <span>Search</span>\n  </button>\n</form>\n```\n\n```javascript\n// even though the <span> is the deepest element that contains: \"Search\"\n// Cypress will automatically favor button elements higher in the chain\n\n// in this case the <button> is returned which is why we can now drill\n// into its children\ncy.contains(\"Search\").children(\"i\").should(\"have.class\", \"fa-search\")\n```\n\n***\n\n## Favor of `a` over other deeper elements\n\n```html\n<nav>\n  <a href=\"/dashboard\">\n    <span>Dashboard</span>\n  </a>\n  <a href=\"/users\">\n    <span>Users</span>\n  </a>\n  <a href=\"/signout\">\n    <span>Sign Out</span>\n  </a>\n</nav>\n```\n\n```javascript\n// even though the <span> is the deepest element that contains: \"Sign Out\"\n// Cypress will automatically favor anchor elements higher in the chain\n\n// in this case we can assert on the anchors properties\ncy.get(\"nav\").contains(\"Sign Out\").should(\"have.attr\", \"href\", \"/signout\")\n```\n\n***\n\n## Favor of `label` over other deeper elements\n\n```html\n<form>\n  <label>\n    <span>Name:</span>\n    <input name=\"name\" />\n  </label>\n  <label>\n    <span>Age:</span>\n    <input name=\"age\" />\n  </label>\n</form>\n```\n\n```javascript\n// even though the <span> is the deepest element that contains: \"Age\"\n// Cypress will favor label elements higher in the chain\n\n// additionally we can omit the colon as long as the element\n// at least contains the text 'Age'\n\ncy.contains(\"Age\").find(\"input\").type(\"29\")\n```\n\n***\n\n## Only the *first* matched element will be returned\n\n```html\n<ul id=\"header\">\n  <li>Welcome, Jane Lane</li>\n</ul>\n<div id=\"main\">\n  <span>These users have 10 connections with Jane Lane</span>\n  <ul>\n    <li>User 1</li>\n    <li>User 2</li>\n    <li>User 3</li>\n  </ul>\n</div>\n```\n\n```javascript\n// this will return the <li> in the #header since that is the first\n// element that contains the text \"Jane Lane\"\ncy.contains(\"Jane Lane\")\n\n// if you want to select the <span> inside of #main instead\n// you need to scope the contains first\n\n//now the <span> is returned\ncy.get(\"#main\").contains(\"Jane Lane\")\n```\n\n***\n\n# Number Usage\n\n## Find the first element containing some number\n\n```html\n<button class=\"btn btn-primary\" type=\"button\">\n  Messages <span class=\"badge\">4</span>\n</button>\n```\n\n```javascript\n// even though the <span> is the deepest element that contains: 4\n// Cypress will automatically favor button elements higher in the chain\n\n// in this case the <button> is returned\ncy.contains(4)\n```\n\n***\n\n# Regular Expression Usage\n\n## Find the first element with text matching the regular expression\n\n```html\n<ul>\n  <li>apples</li>\n  <li>oranges</li>\n  <li>bananas</li>\n</ul>\n```\n\n```javascript\n// <li>bananas</li> is returned\ncy.contains(/^b\\w+/)\n```\n\n***\n\n# Selector and Text Usage\n\n## Specify a selector to return a specific element\n\n```html\n<html>\n  <body>\n    <ul>\n      <li>apples</li>\n      <li>oranges</li>\n      <li>bananas</li>\n    </ul>\n  </body>\n</html>\n```\n\n```javascript\n// technically the <html>, <body>, <ul>, and first <li> all contain \"apples\"\n\n// normally Cypress would return the first <li> since that is the deepest\n// element that contains: \"apples\"\n\n// to override this behavior, pass a 'ul' selector\n// this returns the ul element since it also contains the text\n\n// returns <ul>...</ul>\ncy.contains(\"ul\", \"apples\")\n```\n\n***\n\n# Notes\n\n## Dual command can be either parent or child\n\n`cy.contains` is a dual command.  This means it can act as both a `parent` and a `child` command.  Read more about [issuing commands](https://on.cypress.io/guides/issuing-commands) if this is unfamiliar.\n\nBecause it is a dual command it can either *begin* a chain of commands or work off of an *existing* subject.\n\n**Start a chain of commands**\n\n```javascript\n// search from the root scope (default: document)\ncy.contains(\"some content\")\n```\n\n**Find content within an existing scope**\n\n```javascript\n// search within an existing subject for the content\n// contains is now scoped to the <aside> element and will\n// only search its DOM descendants for the content\ncy.get(\"#main\").find(\"aside\").contains(\"Add a user\")\n```\n\n**Be wary of chaining multiple contains**\n\n```javascript\n// let's imagine a scenario where you click a user's delete button\n// and a dialog appears asking you to confirm this deletion.\n\n// the following will not work:\ncy\n  .contains(\"Delete User\").click()\n\n  // because this is chained off of the existing button subject\n  // Cypress will look inside of the existing button subject\n  // for the new content\n\n  // in other words Cypress will look inside of the element\n  // containing \"Delete User\" for the content: \"Yes I'm sure!\"\n  .contains(\"Yes, I'm sure!\").click()\n\n```\n\n**End previous chains to get back to the root scope**\n\n```javascript\ncy\n  // explicitly .end() the previous chain\n  .contains(\"Delete User\").click().end()\n\n  // Cypress will now search the root scope\n  // for this content (default: document)\n  .contains(\"Yes, I'm sure!\").click()\n```\n\n```javascript\n// alternatively just call cy again which\n// automatically creates a new chain from the root scope\ncy.contains(\"Delete User\").click()\ncy.contains(\"Yes I'm sure!\").click()\n```\n\n```javascript\n// you can also do this\ncy\n  .contains(\"Delete User\").click()\n\n  // by using the parent command .get() we automatically\n  // abort previous chains and change the scope to #dialog\n  // which contains the content we're looking for\n  .get(\"#dialog\").contains(\"Yes I'm sure!\").click()\n```\n\n***\n\n# Command Log\n\n## Element contains text \"New User\"\n\n<img width=\"536\" alt=\"screen shot 2015-11-27 at 1 43 22 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446973/009ac32c-950d-11e5-9eaa-09f8b8ddf086.png\">\n\nWhen clicking on the `contains` command within the command log, the console outputs the following:\n\n<img width=\"477\" alt=\"screen shot 2015-11-27 at 1 43 50 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446977/04b31be4-950d-11e5-811e-4fd83d364d00.png\">\n\n***\n\n# Related\n\n- [get](https://on.cypress.io/api/get)\n- [within](https://on.cypress.io/api/within)\n- [root](https://on.cypress.io/api/root)","source":"api/commands/contains.md","raw":"title: contains\n---\n\nGet the DOM element containing the text. DOM elements can contain *more* than the desired text and still match. Additionally, Cypress will prefer some DOM elements over the deepest element found.\n\n**Preference order:**\n\n- `input[type='submit']`\n- `button`\n- `a`\n- `label`\n\n| | |\n|--- | --- |\n| **Returns** | the deepest DOM element containing the text  |\n| **Timeout** | `cy.contains` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.contains( *text* )](#section-text-usage)\n\nGet the deepest DOM element containing the text.\n\n***\n\n# [cy.contains( *number* )](#section-number-usage)\n\nGet the deepest DOM element containing the number.\n\n***\n\n# [cy.contains( *regexp* )](#section-regular-expression-usage)\n\nGet the deepest DOM element containing the text matching the regular expression.\n\n***\n\n# [cy.contains( *selector*, *text* )](#section-selector-and-text-usage)\n\nSpecify a selector to filter DOM elements containing the text. Cypress will **ignore** it's default preference for the specified selector. Using a selector allows you to return more *shallow* elements in the tree which contain the specific text.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.contains`.\n\n**cy.contains( *text*, *options* )**\n**cy.contains( *selector*, *text*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry finding an element\n\n***\n\n# Text Usage\n\n## Find the first element containing some text\n\n```html\n<ul>\n  <li>apples</li>\n  <li>oranges</li>\n  <li>bananas</li>\n</ul>\n```\n\n```javascript\n// returns <li>apples</li>\ncy.contains(\"apples\")\n```\n\n***\n\n## Find the input[type='submit'] by value\n\n```html\n<div id=\"main\">\n  <form>\n    <div>\n      <label>name</label>\n      <input name=\"name\" />\n    </div>\n    <div>\n      <label>age</label>\n      <input name=\"age\" />\n    </div>\n    <input type=\"submit\" value=\"submit the form!\" />\n  </form>\n</div>\n```\n\n```javascript\n// get the form element\n// search inside its descendants for the content 'submit the form!'\n// find the input[type='submit'] element\n// click it\ncy.get(\"form\").contains(\"submit the form!\").click()\n```\n\n***\n\n## Favor of `button` over other deeper elements\n\n```html\n<form>\n  <button>\n    <i class=\"fa fa-search\"></i>\n    <span>Search</span>\n  </button>\n</form>\n```\n\n```javascript\n// even though the <span> is the deepest element that contains: \"Search\"\n// Cypress will automatically favor button elements higher in the chain\n\n// in this case the <button> is returned which is why we can now drill\n// into its children\ncy.contains(\"Search\").children(\"i\").should(\"have.class\", \"fa-search\")\n```\n\n***\n\n## Favor of `a` over other deeper elements\n\n```html\n<nav>\n  <a href=\"/dashboard\">\n    <span>Dashboard</span>\n  </a>\n  <a href=\"/users\">\n    <span>Users</span>\n  </a>\n  <a href=\"/signout\">\n    <span>Sign Out</span>\n  </a>\n</nav>\n```\n\n```javascript\n// even though the <span> is the deepest element that contains: \"Sign Out\"\n// Cypress will automatically favor anchor elements higher in the chain\n\n// in this case we can assert on the anchors properties\ncy.get(\"nav\").contains(\"Sign Out\").should(\"have.attr\", \"href\", \"/signout\")\n```\n\n***\n\n## Favor of `label` over other deeper elements\n\n```html\n<form>\n  <label>\n    <span>Name:</span>\n    <input name=\"name\" />\n  </label>\n  <label>\n    <span>Age:</span>\n    <input name=\"age\" />\n  </label>\n</form>\n```\n\n```javascript\n// even though the <span> is the deepest element that contains: \"Age\"\n// Cypress will favor label elements higher in the chain\n\n// additionally we can omit the colon as long as the element\n// at least contains the text 'Age'\n\ncy.contains(\"Age\").find(\"input\").type(\"29\")\n```\n\n***\n\n## Only the *first* matched element will be returned\n\n```html\n<ul id=\"header\">\n  <li>Welcome, Jane Lane</li>\n</ul>\n<div id=\"main\">\n  <span>These users have 10 connections with Jane Lane</span>\n  <ul>\n    <li>User 1</li>\n    <li>User 2</li>\n    <li>User 3</li>\n  </ul>\n</div>\n```\n\n```javascript\n// this will return the <li> in the #header since that is the first\n// element that contains the text \"Jane Lane\"\ncy.contains(\"Jane Lane\")\n\n// if you want to select the <span> inside of #main instead\n// you need to scope the contains first\n\n//now the <span> is returned\ncy.get(\"#main\").contains(\"Jane Lane\")\n```\n\n***\n\n# Number Usage\n\n## Find the first element containing some number\n\n```html\n<button class=\"btn btn-primary\" type=\"button\">\n  Messages <span class=\"badge\">4</span>\n</button>\n```\n\n```javascript\n// even though the <span> is the deepest element that contains: 4\n// Cypress will automatically favor button elements higher in the chain\n\n// in this case the <button> is returned\ncy.contains(4)\n```\n\n***\n\n# Regular Expression Usage\n\n## Find the first element with text matching the regular expression\n\n```html\n<ul>\n  <li>apples</li>\n  <li>oranges</li>\n  <li>bananas</li>\n</ul>\n```\n\n```javascript\n// <li>bananas</li> is returned\ncy.contains(/^b\\w+/)\n```\n\n***\n\n# Selector and Text Usage\n\n## Specify a selector to return a specific element\n\n```html\n<html>\n  <body>\n    <ul>\n      <li>apples</li>\n      <li>oranges</li>\n      <li>bananas</li>\n    </ul>\n  </body>\n</html>\n```\n\n```javascript\n// technically the <html>, <body>, <ul>, and first <li> all contain \"apples\"\n\n// normally Cypress would return the first <li> since that is the deepest\n// element that contains: \"apples\"\n\n// to override this behavior, pass a 'ul' selector\n// this returns the ul element since it also contains the text\n\n// returns <ul>...</ul>\ncy.contains(\"ul\", \"apples\")\n```\n\n***\n\n# Notes\n\n## Dual command can be either parent or child\n\n`cy.contains` is a dual command.  This means it can act as both a `parent` and a `child` command.  Read more about [issuing commands](https://on.cypress.io/guides/issuing-commands) if this is unfamiliar.\n\nBecause it is a dual command it can either *begin* a chain of commands or work off of an *existing* subject.\n\n**Start a chain of commands**\n\n```javascript\n// search from the root scope (default: document)\ncy.contains(\"some content\")\n```\n\n**Find content within an existing scope**\n\n```javascript\n// search within an existing subject for the content\n// contains is now scoped to the <aside> element and will\n// only search its DOM descendants for the content\ncy.get(\"#main\").find(\"aside\").contains(\"Add a user\")\n```\n\n**Be wary of chaining multiple contains**\n\n```javascript\n// let's imagine a scenario where you click a user's delete button\n// and a dialog appears asking you to confirm this deletion.\n\n// the following will not work:\ncy\n  .contains(\"Delete User\").click()\n\n  // because this is chained off of the existing button subject\n  // Cypress will look inside of the existing button subject\n  // for the new content\n\n  // in other words Cypress will look inside of the element\n  // containing \"Delete User\" for the content: \"Yes I'm sure!\"\n  .contains(\"Yes, I'm sure!\").click()\n\n```\n\n**End previous chains to get back to the root scope**\n\n```javascript\ncy\n  // explicitly .end() the previous chain\n  .contains(\"Delete User\").click().end()\n\n  // Cypress will now search the root scope\n  // for this content (default: document)\n  .contains(\"Yes, I'm sure!\").click()\n```\n\n```javascript\n// alternatively just call cy again which\n// automatically creates a new chain from the root scope\ncy.contains(\"Delete User\").click()\ncy.contains(\"Yes I'm sure!\").click()\n```\n\n```javascript\n// you can also do this\ncy\n  .contains(\"Delete User\").click()\n\n  // by using the parent command .get() we automatically\n  // abort previous chains and change the scope to #dialog\n  // which contains the content we're looking for\n  .get(\"#dialog\").contains(\"Yes I'm sure!\").click()\n```\n\n***\n\n# Command Log\n\n## Element contains text \"New User\"\n\n<img width=\"536\" alt=\"screen shot 2015-11-27 at 1 43 22 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446973/009ac32c-950d-11e5-9eaa-09f8b8ddf086.png\">\n\nWhen clicking on the `contains` command within the command log, the console outputs the following:\n\n<img width=\"477\" alt=\"screen shot 2015-11-27 at 1 43 50 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446977/04b31be4-950d-11e5-811e-4fd83d364d00.png\">\n\n***\n\n# Related\n\n- [get](https://on.cypress.io/api/get)\n- [within](https://on.cypress.io/api/within)\n- [root](https://on.cypress.io/api/root)","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/contains.html","comments":1,"layout":"page","_id":"cj1pc2g85000dk1g8frrg5240","content":"<p>Get the DOM element containing the text. DOM elements can contain <em>more</em> than the desired text and still match. Additionally, Cypress will prefer some DOM elements over the deepest element found.</p>\n<p><strong>Preference order:</strong></p>\n<ul>\n<li><code>input[type=&#39;submit&#39;]</code></li>\n<li><code>button</code></li>\n<li><code>a</code></li>\n<li><code>label</code></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the deepest DOM element containing the text</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.contains</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-contains-text\"><a href=\"#cy-contains-text\" class=\"headerlink\" title=\"cy.contains( text )\"></a><a href=\"#section-text-usage\">cy.contains( <em>text</em> )</a></h1><p>Get the deepest DOM element containing the text.</p>\n<hr>\n<h1 id=\"cy-contains-number\"><a href=\"#cy-contains-number\" class=\"headerlink\" title=\"cy.contains( number )\"></a><a href=\"#section-number-usage\">cy.contains( <em>number</em> )</a></h1><p>Get the deepest DOM element containing the number.</p>\n<hr>\n<h1 id=\"cy-contains-regexp\"><a href=\"#cy-contains-regexp\" class=\"headerlink\" title=\"cy.contains( regexp )\"></a><a href=\"#section-regular-expression-usage\">cy.contains( <em>regexp</em> )</a></h1><p>Get the deepest DOM element containing the text matching the regular expression.</p>\n<hr>\n<h1 id=\"cy-contains-selector-text\"><a href=\"#cy-contains-selector-text\" class=\"headerlink\" title=\"cy.contains( selector, text )\"></a><a href=\"#section-selector-and-text-usage\">cy.contains( <em>selector</em>, <em>text</em> )</a></h1><p>Specify a selector to filter DOM elements containing the text. Cypress will <strong>ignore</strong> it’s default preference for the specified selector. Using a selector allows you to return more <em>shallow</em> elements in the tree which contain the specific text.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.contains</code>.</p>\n<p><strong>cy.contains( <em>text</em>, <em>options</em> )</strong><br><strong>cy.contains( <em>selector</em>, <em>text</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry finding an element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Text-Usage\"><a href=\"#Text-Usage\" class=\"headerlink\" title=\"Text Usage\"></a>Text Usage</h1><h2 id=\"Find-the-first-element-containing-some-text\"><a href=\"#Find-the-first-element-containing-some-text\" class=\"headerlink\" title=\"Find the first element containing some text\"></a>Find the first element containing some text</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>apples<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>oranges<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>bananas<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns &lt;li&gt;apples&lt;/li&gt;</span></div><div class=\"line\">cy.contains(<span class=\"string\">\"apples\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Find-the-input-type-’submit’-by-value\"><a href=\"#Find-the-input-type-’submit’-by-value\" class=\"headerlink\" title=\"Find the input[type=’submit’] by value\"></a>Find the input[type=’submit’] by value</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"main\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>age<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"submit the form!\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// get the form element</span></div><div class=\"line\"><span class=\"comment\">// search inside its descendants for the content 'submit the form!'</span></div><div class=\"line\"><span class=\"comment\">// find the input[type='submit'] element</span></div><div class=\"line\"><span class=\"comment\">// click it</span></div><div class=\"line\">cy.get(<span class=\"string\">\"form\"</span>).contains(<span class=\"string\">\"submit the form!\"</span>).click()</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Favor-of-button-over-other-deeper-elements\"><a href=\"#Favor-of-button-over-other-deeper-elements\" class=\"headerlink\" title=\"Favor of button over other deeper elements\"></a>Favor of <code>button</code> over other deeper elements</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-search\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Search<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// even though the &lt;span&gt; is the deepest element that contains: \"Search\"</span></div><div class=\"line\"><span class=\"comment\">// Cypress will automatically favor button elements higher in the chain</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// in this case the &lt;button&gt; is returned which is why we can now drill</span></div><div class=\"line\"><span class=\"comment\">// into its children</span></div><div class=\"line\">cy.contains(<span class=\"string\">\"Search\"</span>).children(<span class=\"string\">\"i\"</span>).should(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"fa-search\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Favor-of-a-over-other-deeper-elements\"><a href=\"#Favor-of-a-over-other-deeper-elements\" class=\"headerlink\" title=\"Favor of a over other deeper elements\"></a>Favor of <code>a</code> over other deeper elements</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/dashboard\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Dashboard<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/users\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Users<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/signout\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Sign Out<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// even though the &lt;span&gt; is the deepest element that contains: \"Sign Out\"</span></div><div class=\"line\"><span class=\"comment\">// Cypress will automatically favor anchor elements higher in the chain</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// in this case we can assert on the anchors properties</span></div><div class=\"line\">cy.get(<span class=\"string\">\"nav\"</span>).contains(<span class=\"string\">\"Sign Out\"</span>).should(<span class=\"string\">\"have.attr\"</span>, <span class=\"string\">\"href\"</span>, <span class=\"string\">\"/signout\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Favor-of-label-over-other-deeper-elements\"><a href=\"#Favor-of-label-over-other-deeper-elements\" class=\"headerlink\" title=\"Favor of label over other deeper elements\"></a>Favor of <code>label</code> over other deeper elements</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Name:<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Age:<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// even though the &lt;span&gt; is the deepest element that contains: \"Age\"</span></div><div class=\"line\"><span class=\"comment\">// Cypress will favor label elements higher in the chain</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// additionally we can omit the colon as long as the element</span></div><div class=\"line\"><span class=\"comment\">// at least contains the text 'Age'</span></div><div class=\"line\"></div><div class=\"line\">cy.contains(<span class=\"string\">\"Age\"</span>).find(<span class=\"string\">\"input\"</span>).type(<span class=\"string\">\"29\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Only-the-first-matched-element-will-be-returned\"><a href=\"#Only-the-first-matched-element-will-be-returned\" class=\"headerlink\" title=\"Only the first matched element will be returned\"></a>Only the <em>first</em> matched element will be returned</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"header\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Welcome, Jane Lane<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"main\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>These users have 10 connections with Jane Lane<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>User 1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>User 2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>User 3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// this will return the &lt;li&gt; in the #header since that is the first</span></div><div class=\"line\"><span class=\"comment\">// element that contains the text \"Jane Lane\"</span></div><div class=\"line\">cy.contains(<span class=\"string\">\"Jane Lane\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// if you want to select the &lt;span&gt; inside of #main instead</span></div><div class=\"line\"><span class=\"comment\">// you need to scope the contains first</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//now the &lt;span&gt; is returned</span></div><div class=\"line\">cy.get(<span class=\"string\">\"#main\"</span>).contains(<span class=\"string\">\"Jane Lane\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Number-Usage\"><a href=\"#Number-Usage\" class=\"headerlink\" title=\"Number Usage\"></a>Number Usage</h1><h2 id=\"Find-the-first-element-containing-some-number\"><a href=\"#Find-the-first-element-containing-some-number\" class=\"headerlink\" title=\"Find the first element containing some number\"></a>Find the first element containing some number</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span>&gt;</span></div><div class=\"line\">  Messages <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"badge\"</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// even though the &lt;span&gt; is the deepest element that contains: 4</span></div><div class=\"line\"><span class=\"comment\">// Cypress will automatically favor button elements higher in the chain</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// in this case the &lt;button&gt; is returned</span></div><div class=\"line\">cy.contains(<span class=\"number\">4</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Regular-Expression-Usage\"><a href=\"#Regular-Expression-Usage\" class=\"headerlink\" title=\"Regular Expression Usage\"></a>Regular Expression Usage</h1><h2 id=\"Find-the-first-element-with-text-matching-the-regular-expression\"><a href=\"#Find-the-first-element-with-text-matching-the-regular-expression\" class=\"headerlink\" title=\"Find the first element with text matching the regular expression\"></a>Find the first element with text matching the regular expression</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>apples<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>oranges<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>bananas<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// &lt;li&gt;bananas&lt;/li&gt; is returned</span></div><div class=\"line\">cy.contains(<span class=\"regexp\">/^b\\w+/</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Selector-and-Text-Usage\"><a href=\"#Selector-and-Text-Usage\" class=\"headerlink\" title=\"Selector and Text Usage\"></a>Selector and Text Usage</h1><h2 id=\"Specify-a-selector-to-return-a-specific-element\"><a href=\"#Specify-a-selector-to-return-a-specific-element\" class=\"headerlink\" title=\"Specify a selector to return a specific element\"></a>Specify a selector to return a specific element</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>apples<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>oranges<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>bananas<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// technically the &lt;html&gt;, &lt;body&gt;, &lt;ul&gt;, and first &lt;li&gt; all contain \"apples\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// normally Cypress would return the first &lt;li&gt; since that is the deepest</span></div><div class=\"line\"><span class=\"comment\">// element that contains: \"apples\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// to override this behavior, pass a 'ul' selector</span></div><div class=\"line\"><span class=\"comment\">// this returns the ul element since it also contains the text</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// returns &lt;ul&gt;...&lt;/ul&gt;</span></div><div class=\"line\">cy.contains(<span class=\"string\">\"ul\"</span>, <span class=\"string\">\"apples\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h1><h2 id=\"Dual-command-can-be-either-parent-or-child\"><a href=\"#Dual-command-can-be-either-parent-or-child\" class=\"headerlink\" title=\"Dual command can be either parent or child\"></a>Dual command can be either parent or child</h2><p><code>cy.contains</code> is a dual command.  This means it can act as both a <code>parent</code> and a <code>child</code> command.  Read more about <a href=\"https://on.cypress.io/guides/issuing-commands\" target=\"_blank\" rel=\"external\">issuing commands</a> if this is unfamiliar.</p>\n<p>Because it is a dual command it can either <em>begin</em> a chain of commands or work off of an <em>existing</em> subject.</p>\n<p><strong>Start a chain of commands</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// search from the root scope (default: document)</span></div><div class=\"line\">cy.contains(<span class=\"string\">\"some content\"</span>)</div></pre></td></tr></table></figure>\n<p><strong>Find content within an existing scope</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// search within an existing subject for the content</span></div><div class=\"line\"><span class=\"comment\">// contains is now scoped to the &lt;aside&gt; element and will</span></div><div class=\"line\"><span class=\"comment\">// only search its DOM descendants for the content</span></div><div class=\"line\">cy.get(<span class=\"string\">\"#main\"</span>).find(<span class=\"string\">\"aside\"</span>).contains(<span class=\"string\">\"Add a user\"</span>)</div></pre></td></tr></table></figure>\n<p><strong>Be wary of chaining multiple contains</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// let's imagine a scenario where you click a user's delete button</span></div><div class=\"line\"><span class=\"comment\">// and a dialog appears asking you to confirm this deletion.</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// the following will not work:</span></div><div class=\"line\">cy</div><div class=\"line\">  .contains(<span class=\"string\">\"Delete User\"</span>).click()</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// because this is chained off of the existing button subject</span></div><div class=\"line\">  <span class=\"comment\">// Cypress will look inside of the existing button subject</span></div><div class=\"line\">  <span class=\"comment\">// for the new content</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// in other words Cypress will look inside of the element</span></div><div class=\"line\">  <span class=\"comment\">// containing \"Delete User\" for the content: \"Yes I'm sure!\"</span></div><div class=\"line\">  .contains(<span class=\"string\">\"Yes, I'm sure!\"</span>).click()</div></pre></td></tr></table></figure>\n<p><strong>End previous chains to get back to the root scope</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  <span class=\"comment\">// explicitly .end() the previous chain</span></div><div class=\"line\">  .contains(<span class=\"string\">\"Delete User\"</span>).click().end()</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Cypress will now search the root scope</span></div><div class=\"line\">  <span class=\"comment\">// for this content (default: document)</span></div><div class=\"line\">  .contains(<span class=\"string\">\"Yes, I'm sure!\"</span>).click()</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// alternatively just call cy again which</span></div><div class=\"line\"><span class=\"comment\">// automatically creates a new chain from the root scope</span></div><div class=\"line\">cy.contains(<span class=\"string\">\"Delete User\"</span>).click()</div><div class=\"line\">cy.contains(<span class=\"string\">\"Yes I'm sure!\"</span>).click()</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// you can also do this</span></div><div class=\"line\">cy</div><div class=\"line\">  .contains(<span class=\"string\">\"Delete User\"</span>).click()</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// by using the parent command .get() we automatically</span></div><div class=\"line\">  <span class=\"comment\">// abort previous chains and change the scope to #dialog</span></div><div class=\"line\">  <span class=\"comment\">// which contains the content we're looking for</span></div><div class=\"line\">  .get(<span class=\"string\">\"#dialog\"</span>).contains(<span class=\"string\">\"Yes I'm sure!\"</span>).click()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Element-contains-text-“New-User”\"><a href=\"#Element-contains-text-“New-User”\" class=\"headerlink\" title=\"Element contains text “New User”\"></a>Element contains text “New User”</h2><p><img width=\"536\" alt=\"screen shot 2015-11-27 at 1 43 22 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446973/009ac32c-950d-11e5-9eaa-09f8b8ddf086.png\"></p>\n<p>When clicking on the <code>contains</code> command within the command log, the console outputs the following:</p>\n<p><img width=\"477\" alt=\"screen shot 2015-11-27 at 1 43 50 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446977/04b31be4-950d-11e5-811e-4fd83d364d00.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/get\" target=\"_blank\" rel=\"external\">get</a></li>\n<li><a href=\"https://on.cypress.io/api/within\" target=\"_blank\" rel=\"external\">within</a></li>\n<li><a href=\"https://on.cypress.io/api/root\" target=\"_blank\" rel=\"external\">root</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Get the DOM element containing the text. DOM elements can contain <em>more</em> than the desired text and still match. Additionally, Cypress will prefer some DOM elements over the deepest element found.</p>\n<p><strong>Preference order:</strong></p>\n<ul>\n<li><code>input[type=&#39;submit&#39;]</code></li>\n<li><code>button</code></li>\n<li><code>a</code></li>\n<li><code>label</code></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the deepest DOM element containing the text</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.contains</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-contains-text\"><a href=\"#cy-contains-text\" class=\"headerlink\" title=\"cy.contains( text )\"></a><a href=\"#section-text-usage\">cy.contains( <em>text</em> )</a></h1><p>Get the deepest DOM element containing the text.</p>\n<hr>\n<h1 id=\"cy-contains-number\"><a href=\"#cy-contains-number\" class=\"headerlink\" title=\"cy.contains( number )\"></a><a href=\"#section-number-usage\">cy.contains( <em>number</em> )</a></h1><p>Get the deepest DOM element containing the number.</p>\n<hr>\n<h1 id=\"cy-contains-regexp\"><a href=\"#cy-contains-regexp\" class=\"headerlink\" title=\"cy.contains( regexp )\"></a><a href=\"#section-regular-expression-usage\">cy.contains( <em>regexp</em> )</a></h1><p>Get the deepest DOM element containing the text matching the regular expression.</p>\n<hr>\n<h1 id=\"cy-contains-selector-text\"><a href=\"#cy-contains-selector-text\" class=\"headerlink\" title=\"cy.contains( selector, text )\"></a><a href=\"#section-selector-and-text-usage\">cy.contains( <em>selector</em>, <em>text</em> )</a></h1><p>Specify a selector to filter DOM elements containing the text. Cypress will <strong>ignore</strong> it’s default preference for the specified selector. Using a selector allows you to return more <em>shallow</em> elements in the tree which contain the specific text.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.contains</code>.</p>\n<p><strong>cy.contains( <em>text</em>, <em>options</em> )</strong><br><strong>cy.contains( <em>selector</em>, <em>text</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry finding an element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Text-Usage\"><a href=\"#Text-Usage\" class=\"headerlink\" title=\"Text Usage\"></a>Text Usage</h1><h2 id=\"Find-the-first-element-containing-some-text\"><a href=\"#Find-the-first-element-containing-some-text\" class=\"headerlink\" title=\"Find the first element containing some text\"></a>Find the first element containing some text</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>apples<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>oranges<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>bananas<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns &lt;li&gt;apples&lt;/li&gt;</span></div><div class=\"line\">cy.contains(<span class=\"string\">\"apples\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Find-the-input-type-’submit’-by-value\"><a href=\"#Find-the-input-type-’submit’-by-value\" class=\"headerlink\" title=\"Find the input[type=’submit’] by value\"></a>Find the input[type=’submit’] by value</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"main\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>age<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"submit the form!\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// get the form element</span></div><div class=\"line\"><span class=\"comment\">// search inside its descendants for the content 'submit the form!'</span></div><div class=\"line\"><span class=\"comment\">// find the input[type='submit'] element</span></div><div class=\"line\"><span class=\"comment\">// click it</span></div><div class=\"line\">cy.get(<span class=\"string\">\"form\"</span>).contains(<span class=\"string\">\"submit the form!\"</span>).click()</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Favor-of-button-over-other-deeper-elements\"><a href=\"#Favor-of-button-over-other-deeper-elements\" class=\"headerlink\" title=\"Favor of button over other deeper elements\"></a>Favor of <code>button</code> over other deeper elements</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-search\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Search<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// even though the &lt;span&gt; is the deepest element that contains: \"Search\"</span></div><div class=\"line\"><span class=\"comment\">// Cypress will automatically favor button elements higher in the chain</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// in this case the &lt;button&gt; is returned which is why we can now drill</span></div><div class=\"line\"><span class=\"comment\">// into its children</span></div><div class=\"line\">cy.contains(<span class=\"string\">\"Search\"</span>).children(<span class=\"string\">\"i\"</span>).should(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"fa-search\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Favor-of-a-over-other-deeper-elements\"><a href=\"#Favor-of-a-over-other-deeper-elements\" class=\"headerlink\" title=\"Favor of a over other deeper elements\"></a>Favor of <code>a</code> over other deeper elements</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/dashboard\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Dashboard<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/users\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Users<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/signout\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Sign Out<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// even though the &lt;span&gt; is the deepest element that contains: \"Sign Out\"</span></div><div class=\"line\"><span class=\"comment\">// Cypress will automatically favor anchor elements higher in the chain</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// in this case we can assert on the anchors properties</span></div><div class=\"line\">cy.get(<span class=\"string\">\"nav\"</span>).contains(<span class=\"string\">\"Sign Out\"</span>).should(<span class=\"string\">\"have.attr\"</span>, <span class=\"string\">\"href\"</span>, <span class=\"string\">\"/signout\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Favor-of-label-over-other-deeper-elements\"><a href=\"#Favor-of-label-over-other-deeper-elements\" class=\"headerlink\" title=\"Favor of label over other deeper elements\"></a>Favor of <code>label</code> over other deeper elements</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Name:<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Age:<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// even though the &lt;span&gt; is the deepest element that contains: \"Age\"</span></div><div class=\"line\"><span class=\"comment\">// Cypress will favor label elements higher in the chain</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// additionally we can omit the colon as long as the element</span></div><div class=\"line\"><span class=\"comment\">// at least contains the text 'Age'</span></div><div class=\"line\"></div><div class=\"line\">cy.contains(<span class=\"string\">\"Age\"</span>).find(<span class=\"string\">\"input\"</span>).type(<span class=\"string\">\"29\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Only-the-first-matched-element-will-be-returned\"><a href=\"#Only-the-first-matched-element-will-be-returned\" class=\"headerlink\" title=\"Only the first matched element will be returned\"></a>Only the <em>first</em> matched element will be returned</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"header\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Welcome, Jane Lane<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"main\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>These users have 10 connections with Jane Lane<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>User 1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>User 2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>User 3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// this will return the &lt;li&gt; in the #header since that is the first</span></div><div class=\"line\"><span class=\"comment\">// element that contains the text \"Jane Lane\"</span></div><div class=\"line\">cy.contains(<span class=\"string\">\"Jane Lane\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// if you want to select the &lt;span&gt; inside of #main instead</span></div><div class=\"line\"><span class=\"comment\">// you need to scope the contains first</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//now the &lt;span&gt; is returned</span></div><div class=\"line\">cy.get(<span class=\"string\">\"#main\"</span>).contains(<span class=\"string\">\"Jane Lane\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Number-Usage\"><a href=\"#Number-Usage\" class=\"headerlink\" title=\"Number Usage\"></a>Number Usage</h1><h2 id=\"Find-the-first-element-containing-some-number\"><a href=\"#Find-the-first-element-containing-some-number\" class=\"headerlink\" title=\"Find the first element containing some number\"></a>Find the first element containing some number</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span>&gt;</span></div><div class=\"line\">  Messages <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"badge\"</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// even though the &lt;span&gt; is the deepest element that contains: 4</span></div><div class=\"line\"><span class=\"comment\">// Cypress will automatically favor button elements higher in the chain</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// in this case the &lt;button&gt; is returned</span></div><div class=\"line\">cy.contains(<span class=\"number\">4</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Regular-Expression-Usage\"><a href=\"#Regular-Expression-Usage\" class=\"headerlink\" title=\"Regular Expression Usage\"></a>Regular Expression Usage</h1><h2 id=\"Find-the-first-element-with-text-matching-the-regular-expression\"><a href=\"#Find-the-first-element-with-text-matching-the-regular-expression\" class=\"headerlink\" title=\"Find the first element with text matching the regular expression\"></a>Find the first element with text matching the regular expression</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>apples<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>oranges<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>bananas<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// &lt;li&gt;bananas&lt;/li&gt; is returned</span></div><div class=\"line\">cy.contains(<span class=\"regexp\">/^b\\w+/</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Selector-and-Text-Usage\"><a href=\"#Selector-and-Text-Usage\" class=\"headerlink\" title=\"Selector and Text Usage\"></a>Selector and Text Usage</h1><h2 id=\"Specify-a-selector-to-return-a-specific-element\"><a href=\"#Specify-a-selector-to-return-a-specific-element\" class=\"headerlink\" title=\"Specify a selector to return a specific element\"></a>Specify a selector to return a specific element</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>apples<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>oranges<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>bananas<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// technically the &lt;html&gt;, &lt;body&gt;, &lt;ul&gt;, and first &lt;li&gt; all contain \"apples\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// normally Cypress would return the first &lt;li&gt; since that is the deepest</span></div><div class=\"line\"><span class=\"comment\">// element that contains: \"apples\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// to override this behavior, pass a 'ul' selector</span></div><div class=\"line\"><span class=\"comment\">// this returns the ul element since it also contains the text</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// returns &lt;ul&gt;...&lt;/ul&gt;</span></div><div class=\"line\">cy.contains(<span class=\"string\">\"ul\"</span>, <span class=\"string\">\"apples\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h1><h2 id=\"Dual-command-can-be-either-parent-or-child\"><a href=\"#Dual-command-can-be-either-parent-or-child\" class=\"headerlink\" title=\"Dual command can be either parent or child\"></a>Dual command can be either parent or child</h2><p><code>cy.contains</code> is a dual command.  This means it can act as both a <code>parent</code> and a <code>child</code> command.  Read more about <a href=\"https://on.cypress.io/guides/issuing-commands\">issuing commands</a> if this is unfamiliar.</p>\n<p>Because it is a dual command it can either <em>begin</em> a chain of commands or work off of an <em>existing</em> subject.</p>\n<p><strong>Start a chain of commands</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// search from the root scope (default: document)</span></div><div class=\"line\">cy.contains(<span class=\"string\">\"some content\"</span>)</div></pre></td></tr></table></figure>\n<p><strong>Find content within an existing scope</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// search within an existing subject for the content</span></div><div class=\"line\"><span class=\"comment\">// contains is now scoped to the &lt;aside&gt; element and will</span></div><div class=\"line\"><span class=\"comment\">// only search its DOM descendants for the content</span></div><div class=\"line\">cy.get(<span class=\"string\">\"#main\"</span>).find(<span class=\"string\">\"aside\"</span>).contains(<span class=\"string\">\"Add a user\"</span>)</div></pre></td></tr></table></figure>\n<p><strong>Be wary of chaining multiple contains</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// let's imagine a scenario where you click a user's delete button</span></div><div class=\"line\"><span class=\"comment\">// and a dialog appears asking you to confirm this deletion.</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// the following will not work:</span></div><div class=\"line\">cy</div><div class=\"line\">  .contains(<span class=\"string\">\"Delete User\"</span>).click()</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// because this is chained off of the existing button subject</span></div><div class=\"line\">  <span class=\"comment\">// Cypress will look inside of the existing button subject</span></div><div class=\"line\">  <span class=\"comment\">// for the new content</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// in other words Cypress will look inside of the element</span></div><div class=\"line\">  <span class=\"comment\">// containing \"Delete User\" for the content: \"Yes I'm sure!\"</span></div><div class=\"line\">  .contains(<span class=\"string\">\"Yes, I'm sure!\"</span>).click()</div></pre></td></tr></table></figure>\n<p><strong>End previous chains to get back to the root scope</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  <span class=\"comment\">// explicitly .end() the previous chain</span></div><div class=\"line\">  .contains(<span class=\"string\">\"Delete User\"</span>).click().end()</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Cypress will now search the root scope</span></div><div class=\"line\">  <span class=\"comment\">// for this content (default: document)</span></div><div class=\"line\">  .contains(<span class=\"string\">\"Yes, I'm sure!\"</span>).click()</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// alternatively just call cy again which</span></div><div class=\"line\"><span class=\"comment\">// automatically creates a new chain from the root scope</span></div><div class=\"line\">cy.contains(<span class=\"string\">\"Delete User\"</span>).click()</div><div class=\"line\">cy.contains(<span class=\"string\">\"Yes I'm sure!\"</span>).click()</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// you can also do this</span></div><div class=\"line\">cy</div><div class=\"line\">  .contains(<span class=\"string\">\"Delete User\"</span>).click()</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// by using the parent command .get() we automatically</span></div><div class=\"line\">  <span class=\"comment\">// abort previous chains and change the scope to #dialog</span></div><div class=\"line\">  <span class=\"comment\">// which contains the content we're looking for</span></div><div class=\"line\">  .get(<span class=\"string\">\"#dialog\"</span>).contains(<span class=\"string\">\"Yes I'm sure!\"</span>).click()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Element-contains-text-“New-User”\"><a href=\"#Element-contains-text-“New-User”\" class=\"headerlink\" title=\"Element contains text “New User”\"></a>Element contains text “New User”</h2><p><img width=\"536\" alt=\"screen shot 2015-11-27 at 1 43 22 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446973/009ac32c-950d-11e5-9eaa-09f8b8ddf086.png\"></p>\n<p>When clicking on the <code>contains</code> command within the command log, the console outputs the following:</p>\n<p><img width=\"477\" alt=\"screen shot 2015-11-27 at 1 43 50 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446977/04b31be4-950d-11e5-811e-4fd83d364d00.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/get\">get</a></li>\n<li><a href=\"https://on.cypress.io/api/within\">within</a></li>\n<li><a href=\"https://on.cypress.io/api/root\">root</a></li>\n</ul>\n"},{"title":"dblclick","_content":"\nDouble-click on the DOM element in the previous command.\n\n**The following events are fired during dblclick:** `dblclick`\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.dblclick` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.dblclick()](#section-usage)\n\nDouble-click the current subject.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.dblclick`.\n\n**cy.dblclick(*options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Double click an anchor link\n\n```html\n<a href='#nav1'>Menu</a>\n```\n\n```javascript\n// returns the <a> for further chaining\ncy.get(\"#nav1\").dblclick()\n```\n\n***\n\n# Command Log\n\n## Double click on a calendar schedule\n\n```javascript\ncy.get(\"[data-schedule-id='4529114']:first\").dblclick()\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"585\" alt=\"screen shot 2015-11-29 at 1 12 02 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459013/035a6c5e-969b-11e5-935f-dce5c8efbdd6.png\">\n\nWhen clicking on `dblclick` within the command log, the console outputs the following:\n\n<img width=\"836\" alt=\"screen shot 2015-11-29 at 1 12 26 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459015/0755e216-969b-11e5-9f7e-ed04245d75ef.png\">\n\n***\n\n# Related\n\n- [click](https://on.cypress.io/api/click)","source":"api/commands/dblclick.md","raw":"title: dblclick\n---\n\nDouble-click on the DOM element in the previous command.\n\n**The following events are fired during dblclick:** `dblclick`\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.dblclick` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.dblclick()](#section-usage)\n\nDouble-click the current subject.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.dblclick`.\n\n**cy.dblclick(*options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Double click an anchor link\n\n```html\n<a href='#nav1'>Menu</a>\n```\n\n```javascript\n// returns the <a> for further chaining\ncy.get(\"#nav1\").dblclick()\n```\n\n***\n\n# Command Log\n\n## Double click on a calendar schedule\n\n```javascript\ncy.get(\"[data-schedule-id='4529114']:first\").dblclick()\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"585\" alt=\"screen shot 2015-11-29 at 1 12 02 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459013/035a6c5e-969b-11e5-935f-dce5c8efbdd6.png\">\n\nWhen clicking on `dblclick` within the command log, the console outputs the following:\n\n<img width=\"836\" alt=\"screen shot 2015-11-29 at 1 12 26 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459015/0755e216-969b-11e5-9f7e-ed04245d75ef.png\">\n\n***\n\n# Related\n\n- [click](https://on.cypress.io/api/click)","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/dblclick.html","comments":1,"layout":"page","_id":"cj1pc2g85000ek1g8xv3y1m8q","content":"<p>Double-click on the DOM element in the previous command.</p>\n<p><strong>The following events are fired during dblclick:</strong> <code>dblclick</code></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.dblclick</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-dblclick\"><a href=\"#cy-dblclick\" class=\"headerlink\" title=\"cy.dblclick()\"></a><a href=\"#section-usage\">cy.dblclick()</a></h1><p>Double-click the current subject.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.dblclick</code>.</p>\n<p><strong>cy.dblclick(<em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Double-click-an-anchor-link\"><a href=\"#Double-click-an-anchor-link\" class=\"headerlink\" title=\"Double click an anchor link\"></a>Double click an anchor link</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">'#nav1'</span>&gt;</span>Menu<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns the &lt;a&gt; for further chaining</span></div><div class=\"line\">cy.get(<span class=\"string\">\"#nav1\"</span>).dblclick()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Double-click-on-a-calendar-schedule\"><a href=\"#Double-click-on-a-calendar-schedule\" class=\"headerlink\" title=\"Double click on a calendar schedule\"></a>Double click on a calendar schedule</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"[data-schedule-id='4529114']:first\"</span>).dblclick()</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"585\" alt=\"screen shot 2015-11-29 at 1 12 02 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459013/035a6c5e-969b-11e5-935f-dce5c8efbdd6.png\"></p>\n<p>When clicking on <code>dblclick</code> within the command log, the console outputs the following:</p>\n<p><img width=\"836\" alt=\"screen shot 2015-11-29 at 1 12 26 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459015/0755e216-969b-11e5-9f7e-ed04245d75ef.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/click\" target=\"_blank\" rel=\"external\">click</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Double-click on the DOM element in the previous command.</p>\n<p><strong>The following events are fired during dblclick:</strong> <code>dblclick</code></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.dblclick</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-dblclick\"><a href=\"#cy-dblclick\" class=\"headerlink\" title=\"cy.dblclick()\"></a><a href=\"#section-usage\">cy.dblclick()</a></h1><p>Double-click the current subject.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.dblclick</code>.</p>\n<p><strong>cy.dblclick(<em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Double-click-an-anchor-link\"><a href=\"#Double-click-an-anchor-link\" class=\"headerlink\" title=\"Double click an anchor link\"></a>Double click an anchor link</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">'#nav1'</span>&gt;</span>Menu<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns the &lt;a&gt; for further chaining</span></div><div class=\"line\">cy.get(<span class=\"string\">\"#nav1\"</span>).dblclick()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Double-click-on-a-calendar-schedule\"><a href=\"#Double-click-on-a-calendar-schedule\" class=\"headerlink\" title=\"Double click on a calendar schedule\"></a>Double click on a calendar schedule</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"[data-schedule-id='4529114']:first\"</span>).dblclick()</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"585\" alt=\"screen shot 2015-11-29 at 1 12 02 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459013/035a6c5e-969b-11e5-935f-dce5c8efbdd6.png\"></p>\n<p>When clicking on <code>dblclick</code> within the command log, the console outputs the following:</p>\n<p><img width=\"836\" alt=\"screen shot 2015-11-29 at 1 12 26 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459015/0755e216-969b-11e5-9f7e-ed04245d75ef.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/click\">click</a></li>\n</ul>\n"},{"title":"debug","_content":"\n`cy.debug` sets a `debugger` and logs the subject from the previous command.\n\nMake sure you have your Developer Tools open for `cy.debug` to hit the breakpoint.\n\n| | |\n|--- | --- |\n| **Returns** | the subject from the previous command for further chaining. |\n| **Timeout** | *cannot timeout* |\n\n***\n\n# [cy.debug()](#section-usage)\n\nDebug the previous command.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.debug`.\n\n**cy.debug(*options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Log out the current subject for debugging\n\n```javascript\n// Cypress will log out the current subject and other\n// useful debugging information to your console\ncy.get(\"a\").debug().should(\"have.attr\", \"href\")\n```\n\n***\n\n# Related\n\n- [pause](https://on.cypress.io/api/pause)","source":"api/commands/debug.md","raw":"title: debug\n---\n\n`cy.debug` sets a `debugger` and logs the subject from the previous command.\n\nMake sure you have your Developer Tools open for `cy.debug` to hit the breakpoint.\n\n| | |\n|--- | --- |\n| **Returns** | the subject from the previous command for further chaining. |\n| **Timeout** | *cannot timeout* |\n\n***\n\n# [cy.debug()](#section-usage)\n\nDebug the previous command.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.debug`.\n\n**cy.debug(*options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Log out the current subject for debugging\n\n```javascript\n// Cypress will log out the current subject and other\n// useful debugging information to your console\ncy.get(\"a\").debug().should(\"have.attr\", \"href\")\n```\n\n***\n\n# Related\n\n- [pause](https://on.cypress.io/api/pause)","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/debug.html","comments":1,"layout":"page","_id":"cj1pc2g86000fk1g8d0wc2m1z","content":"<p><code>cy.debug</code> sets a <code>debugger</code> and logs the subject from the previous command.</p>\n<p>Make sure you have your Developer Tools open for <code>cy.debug</code> to hit the breakpoint.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the subject from the previous command for further chaining.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><em>cannot timeout</em></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-debug\"><a href=\"#cy-debug\" class=\"headerlink\" title=\"cy.debug()\"></a><a href=\"#section-usage\">cy.debug()</a></h1><p>Debug the previous command.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.debug</code>.</p>\n<p><strong>cy.debug(<em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Log-out-the-current-subject-for-debugging\"><a href=\"#Log-out-the-current-subject-for-debugging\" class=\"headerlink\" title=\"Log out the current subject for debugging\"></a>Log out the current subject for debugging</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Cypress will log out the current subject and other</span></div><div class=\"line\"><span class=\"comment\">// useful debugging information to your console</span></div><div class=\"line\">cy.get(<span class=\"string\">\"a\"</span>).debug().should(<span class=\"string\">\"have.attr\"</span>, <span class=\"string\">\"href\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/pause\" target=\"_blank\" rel=\"external\">pause</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p><code>cy.debug</code> sets a <code>debugger</code> and logs the subject from the previous command.</p>\n<p>Make sure you have your Developer Tools open for <code>cy.debug</code> to hit the breakpoint.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the subject from the previous command for further chaining.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><em>cannot timeout</em></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-debug\"><a href=\"#cy-debug\" class=\"headerlink\" title=\"cy.debug()\"></a><a href=\"#section-usage\">cy.debug()</a></h1><p>Debug the previous command.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.debug</code>.</p>\n<p><strong>cy.debug(<em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Log-out-the-current-subject-for-debugging\"><a href=\"#Log-out-the-current-subject-for-debugging\" class=\"headerlink\" title=\"Log out the current subject for debugging\"></a>Log out the current subject for debugging</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Cypress will log out the current subject and other</span></div><div class=\"line\"><span class=\"comment\">// useful debugging information to your console</span></div><div class=\"line\">cy.get(<span class=\"string\">\"a\"</span>).debug().should(<span class=\"string\">\"have.attr\"</span>, <span class=\"string\">\"href\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/pause\">pause</a></li>\n</ul>\n"},{"title":"document","_content":"\nGet the document and work with its properties or methods.\n\n| | |\n|--- | --- |\n| **Returns** | the `window.document` object |\n| **Timeout** | `cy.document` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.document()](#section-usage)\n\nGet the document.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.document`.\n\n**cy.document(*options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Get document and do some work\n\n```javascript\ncy.document().then(function(document) {\n  // work with document element\n});\n```\n\n## Make an assertion about the document\n\n```javascript\ncy.document().its(\"contentType\").should(\"eq\", \"text/html\")\n```\n\n***\n\n# Command Log\n\n## Get the document\n\n```javascript\ncy.document()\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"588\" alt=\"screen shot 2015-11-29 at 2 00 09 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459311/aab8fe88-96a1-11e5-9b72-b0501204030d.png\">\n\nWhen clicking on `document` within the command log, the console outputs the following:\n\n<img width=\"491\" alt=\"screen shot 2015-11-29 at 2 00 22 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459314/ad27d7e8-96a1-11e5-8d1c-9c4ede6c54aa.png\">\n\n***\n\n# Related\n\n- [window](https://on.cypress.io/api/window)","source":"api/commands/document.md","raw":"title: document\n---\n\nGet the document and work with its properties or methods.\n\n| | |\n|--- | --- |\n| **Returns** | the `window.document` object |\n| **Timeout** | `cy.document` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.document()](#section-usage)\n\nGet the document.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.document`.\n\n**cy.document(*options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Get document and do some work\n\n```javascript\ncy.document().then(function(document) {\n  // work with document element\n});\n```\n\n## Make an assertion about the document\n\n```javascript\ncy.document().its(\"contentType\").should(\"eq\", \"text/html\")\n```\n\n***\n\n# Command Log\n\n## Get the document\n\n```javascript\ncy.document()\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"588\" alt=\"screen shot 2015-11-29 at 2 00 09 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459311/aab8fe88-96a1-11e5-9b72-b0501204030d.png\">\n\nWhen clicking on `document` within the command log, the console outputs the following:\n\n<img width=\"491\" alt=\"screen shot 2015-11-29 at 2 00 22 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459314/ad27d7e8-96a1-11e5-8d1c-9c4ede6c54aa.png\">\n\n***\n\n# Related\n\n- [window](https://on.cypress.io/api/window)","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/document.html","comments":1,"layout":"page","_id":"cj1pc2g86000gk1g8j3w7v373","content":"<p>Get the document and work with its properties or methods.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the <code>window.document</code> object</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.document</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-document\"><a href=\"#cy-document\" class=\"headerlink\" title=\"cy.document()\"></a><a href=\"#section-usage\">cy.document()</a></h1><p>Get the document.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.document</code>.</p>\n<p><strong>cy.document(<em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Get-document-and-do-some-work\"><a href=\"#Get-document-and-do-some-work\" class=\"headerlink\" title=\"Get document and do some work\"></a>Get document and do some work</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.document().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">document</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// work with document element</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"Make-an-assertion-about-the-document\"><a href=\"#Make-an-assertion-about-the-document\" class=\"headerlink\" title=\"Make an assertion about the document\"></a>Make an assertion about the document</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.document().its(<span class=\"string\">\"contentType\"</span>).should(<span class=\"string\">\"eq\"</span>, <span class=\"string\">\"text/html\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Get-the-document\"><a href=\"#Get-the-document\" class=\"headerlink\" title=\"Get the document\"></a>Get the document</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.document()</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"588\" alt=\"screen shot 2015-11-29 at 2 00 09 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459311/aab8fe88-96a1-11e5-9b72-b0501204030d.png\"></p>\n<p>When clicking on <code>document</code> within the command log, the console outputs the following:</p>\n<p><img width=\"491\" alt=\"screen shot 2015-11-29 at 2 00 22 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459314/ad27d7e8-96a1-11e5-8d1c-9c4ede6c54aa.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/window\" target=\"_blank\" rel=\"external\">window</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Get the document and work with its properties or methods.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the <code>window.document</code> object</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.document</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-document\"><a href=\"#cy-document\" class=\"headerlink\" title=\"cy.document()\"></a><a href=\"#section-usage\">cy.document()</a></h1><p>Get the document.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.document</code>.</p>\n<p><strong>cy.document(<em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Get-document-and-do-some-work\"><a href=\"#Get-document-and-do-some-work\" class=\"headerlink\" title=\"Get document and do some work\"></a>Get document and do some work</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.document().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">document</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// work with document element</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"Make-an-assertion-about-the-document\"><a href=\"#Make-an-assertion-about-the-document\" class=\"headerlink\" title=\"Make an assertion about the document\"></a>Make an assertion about the document</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.document().its(<span class=\"string\">\"contentType\"</span>).should(<span class=\"string\">\"eq\"</span>, <span class=\"string\">\"text/html\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Get-the-document\"><a href=\"#Get-the-document\" class=\"headerlink\" title=\"Get the document\"></a>Get the document</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.document()</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"588\" alt=\"screen shot 2015-11-29 at 2 00 09 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459311/aab8fe88-96a1-11e5-9b72-b0501204030d.png\"></p>\n<p>When clicking on <code>document</code> within the command log, the console outputs the following:</p>\n<p><img width=\"491\" alt=\"screen shot 2015-11-29 at 2 00 22 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459314/ad27d7e8-96a1-11e5-8d1c-9c4ede6c54aa.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/window\">window</a></li>\n</ul>\n"},{"title":"each","_content":"\nThe `cy.each()` will iterate through an array like structure (arrays and objects with a `length` property).\n\nEach time the callback function runs, it is invoked with three arguments: `value`, `index`, and `collection`.\n\nIf your callback function returns a `Promise` it will be awaited before iterating over the next element in the collection.\n\nYou can stop the loop early by returning `false` in the callback function.\n\n| | |\n|--- | --- |\n| **Returns** | the original array subject given to `cy.each()` |\n| **Timeout** | `cy.each` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.each( *function* )](#section-usage)\n\nIterate over an array-like structure.\n\n***\n\n# Usage\n\n## Iterate over an array of DOM elements\n\n```javascript\ncy\n  .get(\"ul>li\")\n  .each(function($el, index, $list){\n    // $el is wrapped jquery element\n    if ($el.someMethod() === \"something\") {\n      // wrap this element so we can\n      // use cypress commands on it\n      cy.wrap($el).click()\n    } else {\n      // do something else\n    }\n  })\n```\n\n***\n\n## Promises are awaited\n\n```javascript\ncy\n  .wrap([1,2,3])\n  .each(function(num, index, array){\n    // promises returned are automatically\n    // awaited on before calling the next item\n    return new Cypress.Promise(function(resolve){\n      setTimeout(function(){\n        resolve()\n      }, num * 100)\n    })\n  })\n```\n\n## The original subject is always returned\n\n```javascript\ncy\n  .get(\"li\").should(\"have.length\", 3)\n  .each(function($li, index, $lis){\n    // no matter what we return here\n    // the next subject will still\n    // be the collection of <li>\n    return \"something else\"\n  })\n  .then(function($lis){\n    expect($lis).to.have.length(3) // true\n  })\n```\n\n# Errors\n\n## cy.each() can only operate on an array like subject.\n\nThis error occurs when the subject passed to `cy.each()` does not have a `length` property. Ensure the subject passed to `cy.each()` is an array-like structure.\n\n***\n\n# Related\n\n- [spread](https://on.cypress.io/api/spread)\n- [then](https://on.cypress.io/api/then)","source":"api/commands/each.md","raw":"title: each\n---\n\nThe `cy.each()` will iterate through an array like structure (arrays and objects with a `length` property).\n\nEach time the callback function runs, it is invoked with three arguments: `value`, `index`, and `collection`.\n\nIf your callback function returns a `Promise` it will be awaited before iterating over the next element in the collection.\n\nYou can stop the loop early by returning `false` in the callback function.\n\n| | |\n|--- | --- |\n| **Returns** | the original array subject given to `cy.each()` |\n| **Timeout** | `cy.each` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.each( *function* )](#section-usage)\n\nIterate over an array-like structure.\n\n***\n\n# Usage\n\n## Iterate over an array of DOM elements\n\n```javascript\ncy\n  .get(\"ul>li\")\n  .each(function($el, index, $list){\n    // $el is wrapped jquery element\n    if ($el.someMethod() === \"something\") {\n      // wrap this element so we can\n      // use cypress commands on it\n      cy.wrap($el).click()\n    } else {\n      // do something else\n    }\n  })\n```\n\n***\n\n## Promises are awaited\n\n```javascript\ncy\n  .wrap([1,2,3])\n  .each(function(num, index, array){\n    // promises returned are automatically\n    // awaited on before calling the next item\n    return new Cypress.Promise(function(resolve){\n      setTimeout(function(){\n        resolve()\n      }, num * 100)\n    })\n  })\n```\n\n## The original subject is always returned\n\n```javascript\ncy\n  .get(\"li\").should(\"have.length\", 3)\n  .each(function($li, index, $lis){\n    // no matter what we return here\n    // the next subject will still\n    // be the collection of <li>\n    return \"something else\"\n  })\n  .then(function($lis){\n    expect($lis).to.have.length(3) // true\n  })\n```\n\n# Errors\n\n## cy.each() can only operate on an array like subject.\n\nThis error occurs when the subject passed to `cy.each()` does not have a `length` property. Ensure the subject passed to `cy.each()` is an array-like structure.\n\n***\n\n# Related\n\n- [spread](https://on.cypress.io/api/spread)\n- [then](https://on.cypress.io/api/then)","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/each.html","comments":1,"layout":"page","_id":"cj1pc2g87000hk1g8m47yty4d","content":"<p>The <code>cy.each()</code> will iterate through an array like structure (arrays and objects with a <code>length</code> property).</p>\n<p>Each time the callback function runs, it is invoked with three arguments: <code>value</code>, <code>index</code>, and <code>collection</code>.</p>\n<p>If your callback function returns a <code>Promise</code> it will be awaited before iterating over the next element in the collection.</p>\n<p>You can stop the loop early by returning <code>false</code> in the callback function.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the original array subject given to <code>cy.each()</code></td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.each</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-each-function\"><a href=\"#cy-each-function\" class=\"headerlink\" title=\"cy.each( function )\"></a><a href=\"#section-usage\">cy.each( <em>function</em> )</a></h1><p>Iterate over an array-like structure.</p>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Iterate-over-an-array-of-DOM-elements\"><a href=\"#Iterate-over-an-array-of-DOM-elements\" class=\"headerlink\" title=\"Iterate over an array of DOM elements\"></a>Iterate over an array of DOM elements</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"ul&gt;li\"</span>)</div><div class=\"line\">  .each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$el, index, $list</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// $el is wrapped jquery element</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ($el.someMethod() === <span class=\"string\">\"something\"</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">// wrap this element so we can</span></div><div class=\"line\">      <span class=\"comment\">// use cypress commands on it</span></div><div class=\"line\">      cy.wrap($el).click()</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// do something else</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Promises-are-awaited\"><a href=\"#Promises-are-awaited\" class=\"headerlink\" title=\"Promises are awaited\"></a>Promises are awaited</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .wrap([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</div><div class=\"line\">  .each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num, index, array</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// promises returned are automatically</span></div><div class=\"line\">    <span class=\"comment\">// awaited on before calling the next item</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Cypress.Promise(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>)</span>&#123;</div><div class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        resolve()</div><div class=\"line\">      &#125;, num * <span class=\"number\">100</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"The-original-subject-is-always-returned\"><a href=\"#The-original-subject-is-always-returned\" class=\"headerlink\" title=\"The original subject is always returned\"></a>The original subject is always returned</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"li\"</span>).should(<span class=\"string\">\"have.length\"</span>, <span class=\"number\">3</span>)</div><div class=\"line\">  .each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$li, index, $lis</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// no matter what we return here</span></div><div class=\"line\">    <span class=\"comment\">// the next subject will still</span></div><div class=\"line\">    <span class=\"comment\">// be the collection of &lt;li&gt;</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"something else\"</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$lis</span>)</span>&#123;</div><div class=\"line\">    expect($lis).to.have.length(<span class=\"number\">3</span>) <span class=\"comment\">// true</span></div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<h1 id=\"Errors\"><a href=\"#Errors\" class=\"headerlink\" title=\"Errors\"></a>Errors</h1><h2 id=\"cy-each-can-only-operate-on-an-array-like-subject\"><a href=\"#cy-each-can-only-operate-on-an-array-like-subject\" class=\"headerlink\" title=\"cy.each() can only operate on an array like subject.\"></a>cy.each() can only operate on an array like subject.</h2><p>This error occurs when the subject passed to <code>cy.each()</code> does not have a <code>length</code> property. Ensure the subject passed to <code>cy.each()</code> is an array-like structure.</p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/spread\" target=\"_blank\" rel=\"external\">spread</a></li>\n<li><a href=\"https://on.cypress.io/api/then\" target=\"_blank\" rel=\"external\">then</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>The <code>cy.each()</code> will iterate through an array like structure (arrays and objects with a <code>length</code> property).</p>\n<p>Each time the callback function runs, it is invoked with three arguments: <code>value</code>, <code>index</code>, and <code>collection</code>.</p>\n<p>If your callback function returns a <code>Promise</code> it will be awaited before iterating over the next element in the collection.</p>\n<p>You can stop the loop early by returning <code>false</code> in the callback function.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the original array subject given to <code>cy.each()</code></td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.each</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-each-function\"><a href=\"#cy-each-function\" class=\"headerlink\" title=\"cy.each( function )\"></a><a href=\"#section-usage\">cy.each( <em>function</em> )</a></h1><p>Iterate over an array-like structure.</p>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Iterate-over-an-array-of-DOM-elements\"><a href=\"#Iterate-over-an-array-of-DOM-elements\" class=\"headerlink\" title=\"Iterate over an array of DOM elements\"></a>Iterate over an array of DOM elements</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"ul&gt;li\"</span>)</div><div class=\"line\">  .each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$el, index, $list</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// $el is wrapped jquery element</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ($el.someMethod() === <span class=\"string\">\"something\"</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">// wrap this element so we can</span></div><div class=\"line\">      <span class=\"comment\">// use cypress commands on it</span></div><div class=\"line\">      cy.wrap($el).click()</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// do something else</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Promises-are-awaited\"><a href=\"#Promises-are-awaited\" class=\"headerlink\" title=\"Promises are awaited\"></a>Promises are awaited</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .wrap([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</div><div class=\"line\">  .each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num, index, array</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// promises returned are automatically</span></div><div class=\"line\">    <span class=\"comment\">// awaited on before calling the next item</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Cypress.Promise(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>)</span>&#123;</div><div class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        resolve()</div><div class=\"line\">      &#125;, num * <span class=\"number\">100</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"The-original-subject-is-always-returned\"><a href=\"#The-original-subject-is-always-returned\" class=\"headerlink\" title=\"The original subject is always returned\"></a>The original subject is always returned</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"li\"</span>).should(<span class=\"string\">\"have.length\"</span>, <span class=\"number\">3</span>)</div><div class=\"line\">  .each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$li, index, $lis</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// no matter what we return here</span></div><div class=\"line\">    <span class=\"comment\">// the next subject will still</span></div><div class=\"line\">    <span class=\"comment\">// be the collection of &lt;li&gt;</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"something else\"</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$lis</span>)</span>&#123;</div><div class=\"line\">    expect($lis).to.have.length(<span class=\"number\">3</span>) <span class=\"comment\">// true</span></div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<h1 id=\"Errors\"><a href=\"#Errors\" class=\"headerlink\" title=\"Errors\"></a>Errors</h1><h2 id=\"cy-each-can-only-operate-on-an-array-like-subject\"><a href=\"#cy-each-can-only-operate-on-an-array-like-subject\" class=\"headerlink\" title=\"cy.each() can only operate on an array like subject.\"></a>cy.each() can only operate on an array like subject.</h2><p>This error occurs when the subject passed to <code>cy.each()</code> does not have a <code>length</code> property. Ensure the subject passed to <code>cy.each()</code> is an array-like structure.</p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/spread\">spread</a></li>\n<li><a href=\"https://on.cypress.io/api/then\">then</a></li>\n</ul>\n"},{"title":"end","_content":"\nEnds the Cypress command chain and returns `null`. This is equivalent to the jQuery `end()` method.\n\n| | |\n|--- | --- |\n| **Returns** | `null` |\n| **Timeout** | cannot timeout |\n\n***\n\n# [cy.end()](#section-usage)\n\nEnd the command chain.\n\n***\n\n# Usage\n\n```javascript\n// cy.end is useful when you want to end a chain of commands\n// and force Cypress to re-query from the root element\ncy\n  .contains(\"User: Cheryl\").click().end() // ends the current chain and returns null\n\n  // queries the entire document again\n  .contains(\"User: Charles\").click()\n```\n\n***\n\n# Command Log\n\n## `end` does *not* log in the command log\n\n```javascript\ncy\n  .contains(\".modal-title\", \"Select Folder Type\").end()\n  .contains(\"li\", \"Maintenance\").should(\"have.class\", \"active\")\n```\n\nThe commands above will display in the command log as:\n\n![screen shot 2016-01-21 at 11 28 39 am](https://cloud.githubusercontent.com/assets/1271364/12486875/8aa69ff0-c032-11e5-815d-b29a5020271a.png)\n\n***\n\n# Related\n\n- [root](https://on.cypress.io/api/root)\n- [within](https://on.cypress.io/api/within)","source":"api/commands/end.md","raw":"title: end\n---\n\nEnds the Cypress command chain and returns `null`. This is equivalent to the jQuery `end()` method.\n\n| | |\n|--- | --- |\n| **Returns** | `null` |\n| **Timeout** | cannot timeout |\n\n***\n\n# [cy.end()](#section-usage)\n\nEnd the command chain.\n\n***\n\n# Usage\n\n```javascript\n// cy.end is useful when you want to end a chain of commands\n// and force Cypress to re-query from the root element\ncy\n  .contains(\"User: Cheryl\").click().end() // ends the current chain and returns null\n\n  // queries the entire document again\n  .contains(\"User: Charles\").click()\n```\n\n***\n\n# Command Log\n\n## `end` does *not* log in the command log\n\n```javascript\ncy\n  .contains(\".modal-title\", \"Select Folder Type\").end()\n  .contains(\"li\", \"Maintenance\").should(\"have.class\", \"active\")\n```\n\nThe commands above will display in the command log as:\n\n![screen shot 2016-01-21 at 11 28 39 am](https://cloud.githubusercontent.com/assets/1271364/12486875/8aa69ff0-c032-11e5-815d-b29a5020271a.png)\n\n***\n\n# Related\n\n- [root](https://on.cypress.io/api/root)\n- [within](https://on.cypress.io/api/within)","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/end.html","comments":1,"layout":"page","_id":"cj1pc2g87000ik1g8arrl3c6m","content":"<p>Ends the Cypress command chain and returns <code>null</code>. This is equivalent to the jQuery <code>end()</code> method.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td><code>null</code></td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td>cannot timeout</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-end\"><a href=\"#cy-end\" class=\"headerlink\" title=\"cy.end()\"></a><a href=\"#section-usage\">cy.end()</a></h1><p>End the command chain.</p>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// cy.end is useful when you want to end a chain of commands</span></div><div class=\"line\"><span class=\"comment\">// and force Cypress to re-query from the root element</span></div><div class=\"line\">cy</div><div class=\"line\">  .contains(<span class=\"string\">\"User: Cheryl\"</span>).click().end() <span class=\"comment\">// ends the current chain and returns null</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// queries the entire document again</span></div><div class=\"line\">  .contains(<span class=\"string\">\"User: Charles\"</span>).click()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"end-does-not-log-in-the-command-log\"><a href=\"#end-does-not-log-in-the-command-log\" class=\"headerlink\" title=\"end does not log in the command log\"></a><code>end</code> does <em>not</em> log in the command log</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .contains(<span class=\"string\">\".modal-title\"</span>, <span class=\"string\">\"Select Folder Type\"</span>).end()</div><div class=\"line\">  .contains(<span class=\"string\">\"li\"</span>, <span class=\"string\">\"Maintenance\"</span>).should(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"active\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/12486875/8aa69ff0-c032-11e5-815d-b29a5020271a.png\" alt=\"screen shot 2016-01-21 at 11 28 39 am\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/root\" target=\"_blank\" rel=\"external\">root</a></li>\n<li><a href=\"https://on.cypress.io/api/within\" target=\"_blank\" rel=\"external\">within</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Ends the Cypress command chain and returns <code>null</code>. This is equivalent to the jQuery <code>end()</code> method.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td><code>null</code></td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td>cannot timeout</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-end\"><a href=\"#cy-end\" class=\"headerlink\" title=\"cy.end()\"></a><a href=\"#section-usage\">cy.end()</a></h1><p>End the command chain.</p>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// cy.end is useful when you want to end a chain of commands</span></div><div class=\"line\"><span class=\"comment\">// and force Cypress to re-query from the root element</span></div><div class=\"line\">cy</div><div class=\"line\">  .contains(<span class=\"string\">\"User: Cheryl\"</span>).click().end() <span class=\"comment\">// ends the current chain and returns null</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// queries the entire document again</span></div><div class=\"line\">  .contains(<span class=\"string\">\"User: Charles\"</span>).click()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"end-does-not-log-in-the-command-log\"><a href=\"#end-does-not-log-in-the-command-log\" class=\"headerlink\" title=\"end does not log in the command log\"></a><code>end</code> does <em>not</em> log in the command log</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .contains(<span class=\"string\">\".modal-title\"</span>, <span class=\"string\">\"Select Folder Type\"</span>).end()</div><div class=\"line\">  .contains(<span class=\"string\">\"li\"</span>, <span class=\"string\">\"Maintenance\"</span>).should(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"active\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/12486875/8aa69ff0-c032-11e5-815d-b29a5020271a.png\" alt=\"screen shot 2016-01-21 at 11 28 39 am\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/root\">root</a></li>\n<li><a href=\"https://on.cypress.io/api/within\">within</a></li>\n</ul>\n"},{"title":"eq","_content":"\nGet a DOM element in an array of elements at the specific index.\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.eq` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.eq( *index* )](#section-index-usage)\n\nReduce the set of matched DOM elements to the one at the specified index.\n\n***\n\n# [cy.eq( *indexFromEnd* )](#section-index-from-end-usage)\n\nProviding a negative number indicates a position starting from the end of the set, rather than the beginning.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.eq`.\n\n**cy.eq( *index*, *options* )**\n**cy.eq( *indexFromEnd*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry getting the element\n\n***\n\n# Index Usage\n\n## Find the 2nd element within the elements\n\n```html\n<ul>\n  <li>tabby</li>\n  <li>siamese</li>\n  <li>persian</li>\n  <li>sphynx</li>\n  <li>burmese</li>\n</ul>\n```\n\n```javascript\ncy.get(\"li\").eq(1).should(\"contain\", \"siamese\") // true\n```\n\n***\n\n# Index Form End Usage\n\n## Find the 2nd from the last element within the elements\n\n```html\n<ul>\n  <li>tabby</li>\n  <li>siamese</li>\n  <li>persian</li>\n  <li>sphynx</li>\n  <li>burmese</li>\n</ul>\n```\n\n```javascript\ncy.get(\"li\").eq(-2).should(\"contain\", \"sphynx\") // true\n```\n\n***\n\n# Command Log\n\n## Find the 4th `li` in the navigation\n\n```javascript\ncy.get(\".left-nav.nav\").find(\">li\").eq(3)\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"532\" alt=\"screen shot 2015-11-27 at 2 11 47 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447231/e225e1f2-9510-11e5-8615-4a5b42ef71c1.png\">\n\nWhen clicking on the `eq` command within the command log, the console outputs the following:\n\n<img width=\"569\" alt=\"screen shot 2015-11-27 at 2 12 03 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447234/e594ce52-9510-11e5-8794-712a7dbeae55.png\">\n\n***\n\n# Related\n\n- [first](https://on.cypress.io/api/first)\n- [last](https://on.cypress.io/api/last)","source":"api/commands/eq.md","raw":"title: eq\n---\n\nGet a DOM element in an array of elements at the specific index.\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.eq` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.eq( *index* )](#section-index-usage)\n\nReduce the set of matched DOM elements to the one at the specified index.\n\n***\n\n# [cy.eq( *indexFromEnd* )](#section-index-from-end-usage)\n\nProviding a negative number indicates a position starting from the end of the set, rather than the beginning.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.eq`.\n\n**cy.eq( *index*, *options* )**\n**cy.eq( *indexFromEnd*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry getting the element\n\n***\n\n# Index Usage\n\n## Find the 2nd element within the elements\n\n```html\n<ul>\n  <li>tabby</li>\n  <li>siamese</li>\n  <li>persian</li>\n  <li>sphynx</li>\n  <li>burmese</li>\n</ul>\n```\n\n```javascript\ncy.get(\"li\").eq(1).should(\"contain\", \"siamese\") // true\n```\n\n***\n\n# Index Form End Usage\n\n## Find the 2nd from the last element within the elements\n\n```html\n<ul>\n  <li>tabby</li>\n  <li>siamese</li>\n  <li>persian</li>\n  <li>sphynx</li>\n  <li>burmese</li>\n</ul>\n```\n\n```javascript\ncy.get(\"li\").eq(-2).should(\"contain\", \"sphynx\") // true\n```\n\n***\n\n# Command Log\n\n## Find the 4th `li` in the navigation\n\n```javascript\ncy.get(\".left-nav.nav\").find(\">li\").eq(3)\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"532\" alt=\"screen shot 2015-11-27 at 2 11 47 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447231/e225e1f2-9510-11e5-8615-4a5b42ef71c1.png\">\n\nWhen clicking on the `eq` command within the command log, the console outputs the following:\n\n<img width=\"569\" alt=\"screen shot 2015-11-27 at 2 12 03 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447234/e594ce52-9510-11e5-8794-712a7dbeae55.png\">\n\n***\n\n# Related\n\n- [first](https://on.cypress.io/api/first)\n- [last](https://on.cypress.io/api/last)","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/eq.html","comments":1,"layout":"page","_id":"cj1pc2g89000jk1g8afmjnqyf","content":"<p>Get a DOM element in an array of elements at the specific index.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.eq</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-eq-index\"><a href=\"#cy-eq-index\" class=\"headerlink\" title=\"cy.eq( index )\"></a><a href=\"#section-index-usage\">cy.eq( <em>index</em> )</a></h1><p>Reduce the set of matched DOM elements to the one at the specified index.</p>\n<hr>\n<h1 id=\"cy-eq-indexFromEnd\"><a href=\"#cy-eq-indexFromEnd\" class=\"headerlink\" title=\"cy.eq( indexFromEnd )\"></a><a href=\"#section-index-from-end-usage\">cy.eq( <em>indexFromEnd</em> )</a></h1><p>Providing a negative number indicates a position starting from the end of the set, rather than the beginning.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.eq</code>.</p>\n<p><strong>cy.eq( <em>index</em>, <em>options</em> )</strong><br><strong>cy.eq( <em>indexFromEnd</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry getting the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Index-Usage\"><a href=\"#Index-Usage\" class=\"headerlink\" title=\"Index Usage\"></a>Index Usage</h1><h2 id=\"Find-the-2nd-element-within-the-elements\"><a href=\"#Find-the-2nd-element-within-the-elements\" class=\"headerlink\" title=\"Find the 2nd element within the elements\"></a>Find the 2nd element within the elements</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>tabby<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>siamese<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>persian<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>sphynx<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>burmese<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"li\"</span>).eq(<span class=\"number\">1</span>).should(<span class=\"string\">\"contain\"</span>, <span class=\"string\">\"siamese\"</span>) <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Index-Form-End-Usage\"><a href=\"#Index-Form-End-Usage\" class=\"headerlink\" title=\"Index Form End Usage\"></a>Index Form End Usage</h1><h2 id=\"Find-the-2nd-from-the-last-element-within-the-elements\"><a href=\"#Find-the-2nd-from-the-last-element-within-the-elements\" class=\"headerlink\" title=\"Find the 2nd from the last element within the elements\"></a>Find the 2nd from the last element within the elements</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>tabby<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>siamese<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>persian<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>sphynx<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>burmese<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"li\"</span>).eq(<span class=\"number\">-2</span>).should(<span class=\"string\">\"contain\"</span>, <span class=\"string\">\"sphynx\"</span>) <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Find-the-4th-li-in-the-navigation\"><a href=\"#Find-the-4th-li-in-the-navigation\" class=\"headerlink\" title=\"Find the 4th li in the navigation\"></a>Find the 4th <code>li</code> in the navigation</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\".left-nav.nav\"</span>).find(<span class=\"string\">\"&gt;li\"</span>).eq(<span class=\"number\">3</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"532\" alt=\"screen shot 2015-11-27 at 2 11 47 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447231/e225e1f2-9510-11e5-8615-4a5b42ef71c1.png\"></p>\n<p>When clicking on the <code>eq</code> command within the command log, the console outputs the following:</p>\n<p><img width=\"569\" alt=\"screen shot 2015-11-27 at 2 12 03 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447234/e594ce52-9510-11e5-8794-712a7dbeae55.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/first\" target=\"_blank\" rel=\"external\">first</a></li>\n<li><a href=\"https://on.cypress.io/api/last\" target=\"_blank\" rel=\"external\">last</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Get a DOM element in an array of elements at the specific index.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.eq</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-eq-index\"><a href=\"#cy-eq-index\" class=\"headerlink\" title=\"cy.eq( index )\"></a><a href=\"#section-index-usage\">cy.eq( <em>index</em> )</a></h1><p>Reduce the set of matched DOM elements to the one at the specified index.</p>\n<hr>\n<h1 id=\"cy-eq-indexFromEnd\"><a href=\"#cy-eq-indexFromEnd\" class=\"headerlink\" title=\"cy.eq( indexFromEnd )\"></a><a href=\"#section-index-from-end-usage\">cy.eq( <em>indexFromEnd</em> )</a></h1><p>Providing a negative number indicates a position starting from the end of the set, rather than the beginning.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.eq</code>.</p>\n<p><strong>cy.eq( <em>index</em>, <em>options</em> )</strong><br><strong>cy.eq( <em>indexFromEnd</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry getting the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Index-Usage\"><a href=\"#Index-Usage\" class=\"headerlink\" title=\"Index Usage\"></a>Index Usage</h1><h2 id=\"Find-the-2nd-element-within-the-elements\"><a href=\"#Find-the-2nd-element-within-the-elements\" class=\"headerlink\" title=\"Find the 2nd element within the elements\"></a>Find the 2nd element within the elements</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>tabby<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>siamese<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>persian<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>sphynx<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>burmese<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"li\"</span>).eq(<span class=\"number\">1</span>).should(<span class=\"string\">\"contain\"</span>, <span class=\"string\">\"siamese\"</span>) <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Index-Form-End-Usage\"><a href=\"#Index-Form-End-Usage\" class=\"headerlink\" title=\"Index Form End Usage\"></a>Index Form End Usage</h1><h2 id=\"Find-the-2nd-from-the-last-element-within-the-elements\"><a href=\"#Find-the-2nd-from-the-last-element-within-the-elements\" class=\"headerlink\" title=\"Find the 2nd from the last element within the elements\"></a>Find the 2nd from the last element within the elements</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>tabby<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>siamese<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>persian<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>sphynx<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>burmese<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"li\"</span>).eq(<span class=\"number\">-2</span>).should(<span class=\"string\">\"contain\"</span>, <span class=\"string\">\"sphynx\"</span>) <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Find-the-4th-li-in-the-navigation\"><a href=\"#Find-the-4th-li-in-the-navigation\" class=\"headerlink\" title=\"Find the 4th li in the navigation\"></a>Find the 4th <code>li</code> in the navigation</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\".left-nav.nav\"</span>).find(<span class=\"string\">\"&gt;li\"</span>).eq(<span class=\"number\">3</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"532\" alt=\"screen shot 2015-11-27 at 2 11 47 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447231/e225e1f2-9510-11e5-8615-4a5b42ef71c1.png\"></p>\n<p>When clicking on the <code>eq</code> command within the command log, the console outputs the following:</p>\n<p><img width=\"569\" alt=\"screen shot 2015-11-27 at 2 12 03 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447234/e594ce52-9510-11e5-8794-712a7dbeae55.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/first\">first</a></li>\n<li><a href=\"https://on.cypress.io/api/last\">last</a></li>\n</ul>\n"},{"title":"exec","_content":"\nAllows you to execute a system command. The system command can be anything you would normally run on the command line, such as `npm run build`, `rake db:seed`, etc.\n\n`cy.exec` provides an escape hatch for running arbitrary system commands, so you can take actions necessary for your test, but outside the scope of Cypress. This is great for running build scripts, seeding your test database, starting or killing processes, etc.\n\n`cy.exec` does not support commands that don't exit, such as `rails server`, a task that runs a watch, or any process that needs to be manually interrupted to stop. A command must exit within the timeout or Cypress will kill the command's process and fail the current test.\n\nWe don't recommend executing commands that take a long time to exit. Cypress will not continue running any other commands until `cy.exec` has finished, so a long-running command will drastically slow down your test cycle.\n\nThe current working directory is set to the project root (the directory that contains cypress.json).\n\n| | |\n|--- | --- |\n| **Returns** | an object with the exit `code`, the `stdout`, and the `stderr` |\n| **Timeout** | `cy.exec` will allow the command to execute for the duration of the [`execTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.exec( *command* )](#section-command-usage)\n\nExecute a system command.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.exec`.\n\n**cy.exec( *command*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`execTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to allow the command to execute\n`failOnNonZeroExit` | `true` | Fail if the command exits with a non-zero code\n`env` | `{}` | Object of environment variables to set before the command executes (e.g. { USERNAME: 'johndoe' }). Will be merged with existing system environment variables\n\n***\n\n# Usage\n\n## Run a build command\n\n```javascript\ncy\n  .exec(\"npm run build\")\n  .then(function (result) {\n    // subject is now the result object\n    // {\n    //   code: 0,\n    //   stdout: \"Files successfully built\",\n    //   stderr: \"\"\n    // }\n  })\n```\n\n## Seed the database and assert it was successful\n\n```javascript\ncy.exec(\"rake db:seed\").its(\"code\").should(\"eq\", 0)\n```\n\n## Run an arbitrary script and assert its output\n\n```javascript\ncy.exec(\"npm run my-script\").its(\"stdout\").should(\"contain\", \"Done running the script\")\n```\n\n## Change the timeout\n\n```javascript\n// will fail if script takes longer than 20 seconds to finish\ncy.exec(\"npm run build\", { timeout: 20000 });\n```\n\n## Choose not to fail on non-zero exit and assert on code and stderr\n\n```javascript\ncy\n  .exec(\"man bear pig\", { failOnNonZeroExit: false })\n  .its(\"code\").should(\"eq\", 1)\n  .its(\"stderr\").should(\"contain\", \"No manual entry for bear\")\n```\n\n## Specify environment variables\n\n```javascript\ncy\n  .exec(\"echo $USERNAME\", { env: { USERNAME: \"johndoe\" } })\n  .its(\"stdout\").should(\"contain\", \"johndoe\")\n```\n\n## Write to a file to create a fixture from response body\n```javascript\ncy\n  .server()\n  .route(\"POST\", \"/comments\").as(\"postComment\")\n  .get(\".add-comment\").click()\n  .wait(\"@postComment\").then(function(xhr){\n    cy\n      .exec(\"echo '\" + JSON.stringify(xhr.responseBody) + \"'>cypress/fixtures/comment.json\")\n      .fixture(\"comment.json\").should(\"deep.eq\", xhr.responseBody)\n  })\n```\n\n***\n\n# Command Log\n\n## List the contents of cypress.json\n\n```javascript\ncy.exec(\"cat cypress.json\")\n```\n\nThe command above will display in the command log as:\n\n<img width=\"445\" alt=\"screen shot of command log\" src=\"https://cloud.githubusercontent.com/assets/1157043/15369507/e03a7eca-1d00-11e6-8558-396d8c9b6d98.png\">\n\nWhen clicking on the `exec` command within the command log, the console outputs the following:\n\n<img width=\"758\" alt=\"screen shot of console output\" src=\"https://cloud.githubusercontent.com/assets/1157043/15969867/e3ab646e-2eff-11e6-9199-987ca2f74025.png\">\n","source":"api/commands/exec.md","raw":"title: exec\n---\n\nAllows you to execute a system command. The system command can be anything you would normally run on the command line, such as `npm run build`, `rake db:seed`, etc.\n\n`cy.exec` provides an escape hatch for running arbitrary system commands, so you can take actions necessary for your test, but outside the scope of Cypress. This is great for running build scripts, seeding your test database, starting or killing processes, etc.\n\n`cy.exec` does not support commands that don't exit, such as `rails server`, a task that runs a watch, or any process that needs to be manually interrupted to stop. A command must exit within the timeout or Cypress will kill the command's process and fail the current test.\n\nWe don't recommend executing commands that take a long time to exit. Cypress will not continue running any other commands until `cy.exec` has finished, so a long-running command will drastically slow down your test cycle.\n\nThe current working directory is set to the project root (the directory that contains cypress.json).\n\n| | |\n|--- | --- |\n| **Returns** | an object with the exit `code`, the `stdout`, and the `stderr` |\n| **Timeout** | `cy.exec` will allow the command to execute for the duration of the [`execTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.exec( *command* )](#section-command-usage)\n\nExecute a system command.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.exec`.\n\n**cy.exec( *command*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`execTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to allow the command to execute\n`failOnNonZeroExit` | `true` | Fail if the command exits with a non-zero code\n`env` | `{}` | Object of environment variables to set before the command executes (e.g. { USERNAME: 'johndoe' }). Will be merged with existing system environment variables\n\n***\n\n# Usage\n\n## Run a build command\n\n```javascript\ncy\n  .exec(\"npm run build\")\n  .then(function (result) {\n    // subject is now the result object\n    // {\n    //   code: 0,\n    //   stdout: \"Files successfully built\",\n    //   stderr: \"\"\n    // }\n  })\n```\n\n## Seed the database and assert it was successful\n\n```javascript\ncy.exec(\"rake db:seed\").its(\"code\").should(\"eq\", 0)\n```\n\n## Run an arbitrary script and assert its output\n\n```javascript\ncy.exec(\"npm run my-script\").its(\"stdout\").should(\"contain\", \"Done running the script\")\n```\n\n## Change the timeout\n\n```javascript\n// will fail if script takes longer than 20 seconds to finish\ncy.exec(\"npm run build\", { timeout: 20000 });\n```\n\n## Choose not to fail on non-zero exit and assert on code and stderr\n\n```javascript\ncy\n  .exec(\"man bear pig\", { failOnNonZeroExit: false })\n  .its(\"code\").should(\"eq\", 1)\n  .its(\"stderr\").should(\"contain\", \"No manual entry for bear\")\n```\n\n## Specify environment variables\n\n```javascript\ncy\n  .exec(\"echo $USERNAME\", { env: { USERNAME: \"johndoe\" } })\n  .its(\"stdout\").should(\"contain\", \"johndoe\")\n```\n\n## Write to a file to create a fixture from response body\n```javascript\ncy\n  .server()\n  .route(\"POST\", \"/comments\").as(\"postComment\")\n  .get(\".add-comment\").click()\n  .wait(\"@postComment\").then(function(xhr){\n    cy\n      .exec(\"echo '\" + JSON.stringify(xhr.responseBody) + \"'>cypress/fixtures/comment.json\")\n      .fixture(\"comment.json\").should(\"deep.eq\", xhr.responseBody)\n  })\n```\n\n***\n\n# Command Log\n\n## List the contents of cypress.json\n\n```javascript\ncy.exec(\"cat cypress.json\")\n```\n\nThe command above will display in the command log as:\n\n<img width=\"445\" alt=\"screen shot of command log\" src=\"https://cloud.githubusercontent.com/assets/1157043/15369507/e03a7eca-1d00-11e6-8558-396d8c9b6d98.png\">\n\nWhen clicking on the `exec` command within the command log, the console outputs the following:\n\n<img width=\"758\" alt=\"screen shot of console output\" src=\"https://cloud.githubusercontent.com/assets/1157043/15969867/e3ab646e-2eff-11e6-9199-987ca2f74025.png\">\n","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/exec.html","comments":1,"layout":"page","_id":"cj1pc2g89000kk1g8sntbi051","content":"<p>Allows you to execute a system command. The system command can be anything you would normally run on the command line, such as <code>npm run build</code>, <code>rake db:seed</code>, etc.</p>\n<p><code>cy.exec</code> provides an escape hatch for running arbitrary system commands, so you can take actions necessary for your test, but outside the scope of Cypress. This is great for running build scripts, seeding your test database, starting or killing processes, etc.</p>\n<p><code>cy.exec</code> does not support commands that don’t exit, such as <code>rails server</code>, a task that runs a watch, or any process that needs to be manually interrupted to stop. A command must exit within the timeout or Cypress will kill the command’s process and fail the current test.</p>\n<p>We don’t recommend executing commands that take a long time to exit. Cypress will not continue running any other commands until <code>cy.exec</code> has finished, so a long-running command will drastically slow down your test cycle.</p>\n<p>The current working directory is set to the project root (the directory that contains cypress.json).</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>an object with the exit <code>code</code>, the <code>stdout</code>, and the <code>stderr</code></td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.exec</code> will allow the command to execute for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>execTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-exec-command\"><a href=\"#cy-exec-command\" class=\"headerlink\" title=\"cy.exec( command )\"></a><a href=\"#section-command-usage\">cy.exec( <em>command</em> )</a></h1><p>Execute a system command.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.exec</code>.</p>\n<p><strong>cy.exec( <em>command</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>execTimeout</code></a></td>\n<td>Total time to allow the command to execute</td>\n</tr>\n<tr>\n<td><code>failOnNonZeroExit</code></td>\n<td><code>true</code></td>\n<td>Fail if the command exits with a non-zero code</td>\n</tr>\n<tr>\n<td><code>env</code></td>\n<td><code>{}</code></td>\n<td>Object of environment variables to set before the command executes (e.g. { USERNAME: ‘johndoe’ }). Will be merged with existing system environment variables</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Run-a-build-command\"><a href=\"#Run-a-build-command\" class=\"headerlink\" title=\"Run a build command\"></a>Run a build command</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .exec(<span class=\"string\">\"npm run build\"</span>)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// subject is now the result object</span></div><div class=\"line\">    <span class=\"comment\">// &#123;</span></div><div class=\"line\">    <span class=\"comment\">//   code: 0,</span></div><div class=\"line\">    <span class=\"comment\">//   stdout: \"Files successfully built\",</span></div><div class=\"line\">    <span class=\"comment\">//   stderr: \"\"</span></div><div class=\"line\">    <span class=\"comment\">// &#125;</span></div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Seed-the-database-and-assert-it-was-successful\"><a href=\"#Seed-the-database-and-assert-it-was-successful\" class=\"headerlink\" title=\"Seed the database and assert it was successful\"></a>Seed the database and assert it was successful</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.exec(<span class=\"string\">\"rake db:seed\"</span>).its(<span class=\"string\">\"code\"</span>).should(<span class=\"string\">\"eq\"</span>, <span class=\"number\">0</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"Run-an-arbitrary-script-and-assert-its-output\"><a href=\"#Run-an-arbitrary-script-and-assert-its-output\" class=\"headerlink\" title=\"Run an arbitrary script and assert its output\"></a>Run an arbitrary script and assert its output</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.exec(<span class=\"string\">\"npm run my-script\"</span>).its(<span class=\"string\">\"stdout\"</span>).should(<span class=\"string\">\"contain\"</span>, <span class=\"string\">\"Done running the script\"</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"Change-the-timeout\"><a href=\"#Change-the-timeout\" class=\"headerlink\" title=\"Change the timeout\"></a>Change the timeout</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// will fail if script takes longer than 20 seconds to finish</span></div><div class=\"line\">cy.exec(<span class=\"string\">\"npm run build\"</span>, &#123; <span class=\"attr\">timeout</span>: <span class=\"number\">20000</span> &#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"Choose-not-to-fail-on-non-zero-exit-and-assert-on-code-and-stderr\"><a href=\"#Choose-not-to-fail-on-non-zero-exit-and-assert-on-code-and-stderr\" class=\"headerlink\" title=\"Choose not to fail on non-zero exit and assert on code and stderr\"></a>Choose not to fail on non-zero exit and assert on code and stderr</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .exec(<span class=\"string\">\"man bear pig\"</span>, &#123; <span class=\"attr\">failOnNonZeroExit</span>: <span class=\"literal\">false</span> &#125;)</div><div class=\"line\">  .its(<span class=\"string\">\"code\"</span>).should(<span class=\"string\">\"eq\"</span>, <span class=\"number\">1</span>)</div><div class=\"line\">  .its(<span class=\"string\">\"stderr\"</span>).should(<span class=\"string\">\"contain\"</span>, <span class=\"string\">\"No manual entry for bear\"</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"Specify-environment-variables\"><a href=\"#Specify-environment-variables\" class=\"headerlink\" title=\"Specify environment variables\"></a>Specify environment variables</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .exec(<span class=\"string\">\"echo $USERNAME\"</span>, &#123; <span class=\"attr\">env</span>: &#123; <span class=\"attr\">USERNAME</span>: <span class=\"string\">\"johndoe\"</span> &#125; &#125;)</div><div class=\"line\">  .its(<span class=\"string\">\"stdout\"</span>).should(<span class=\"string\">\"contain\"</span>, <span class=\"string\">\"johndoe\"</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"Write-to-a-file-to-create-a-fixture-from-response-body\"><a href=\"#Write-to-a-file-to-create-a-fixture-from-response-body\" class=\"headerlink\" title=\"Write to a file to create a fixture from response body\"></a>Write to a file to create a fixture from response body</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"string\">\"POST\"</span>, <span class=\"string\">\"/comments\"</span>).as(<span class=\"string\">\"postComment\"</span>)</div><div class=\"line\">  .get(<span class=\"string\">\".add-comment\"</span>).click()</div><div class=\"line\">  .wait(<span class=\"string\">\"@postComment\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">xhr</span>)</span>&#123;</div><div class=\"line\">    cy</div><div class=\"line\">      .exec(<span class=\"string\">\"echo '\"</span> + <span class=\"built_in\">JSON</span>.stringify(xhr.responseBody) + <span class=\"string\">\"'&gt;cypress/fixtures/comment.json\"</span>)</div><div class=\"line\">      .fixture(<span class=\"string\">\"comment.json\"</span>).should(<span class=\"string\">\"deep.eq\"</span>, xhr.responseBody)</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"List-the-contents-of-cypress-json\"><a href=\"#List-the-contents-of-cypress-json\" class=\"headerlink\" title=\"List the contents of cypress.json\"></a>List the contents of cypress.json</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.exec(<span class=\"string\">\"cat cypress.json\"</span>)</div></pre></td></tr></table></figure>\n<p>The command above will display in the command log as:</p>\n<p><img width=\"445\" alt=\"screen shot of command log\" src=\"https://cloud.githubusercontent.com/assets/1157043/15369507/e03a7eca-1d00-11e6-8558-396d8c9b6d98.png\"></p>\n<p>When clicking on the <code>exec</code> command within the command log, the console outputs the following:</p>\n<p><img width=\"758\" alt=\"screen shot of console output\" src=\"https://cloud.githubusercontent.com/assets/1157043/15969867/e3ab646e-2eff-11e6-9199-987ca2f74025.png\"></p>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Allows you to execute a system command. The system command can be anything you would normally run on the command line, such as <code>npm run build</code>, <code>rake db:seed</code>, etc.</p>\n<p><code>cy.exec</code> provides an escape hatch for running arbitrary system commands, so you can take actions necessary for your test, but outside the scope of Cypress. This is great for running build scripts, seeding your test database, starting or killing processes, etc.</p>\n<p><code>cy.exec</code> does not support commands that don’t exit, such as <code>rails server</code>, a task that runs a watch, or any process that needs to be manually interrupted to stop. A command must exit within the timeout or Cypress will kill the command’s process and fail the current test.</p>\n<p>We don’t recommend executing commands that take a long time to exit. Cypress will not continue running any other commands until <code>cy.exec</code> has finished, so a long-running command will drastically slow down your test cycle.</p>\n<p>The current working directory is set to the project root (the directory that contains cypress.json).</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>an object with the exit <code>code</code>, the <code>stdout</code>, and the <code>stderr</code></td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.exec</code> will allow the command to execute for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>execTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-exec-command\"><a href=\"#cy-exec-command\" class=\"headerlink\" title=\"cy.exec( command )\"></a><a href=\"#section-command-usage\">cy.exec( <em>command</em> )</a></h1><p>Execute a system command.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.exec</code>.</p>\n<p><strong>cy.exec( <em>command</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>execTimeout</code></a></td>\n<td>Total time to allow the command to execute</td>\n</tr>\n<tr>\n<td><code>failOnNonZeroExit</code></td>\n<td><code>true</code></td>\n<td>Fail if the command exits with a non-zero code</td>\n</tr>\n<tr>\n<td><code>env</code></td>\n<td><code>{}</code></td>\n<td>Object of environment variables to set before the command executes (e.g. { USERNAME: ‘johndoe’ }). Will be merged with existing system environment variables</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Run-a-build-command\"><a href=\"#Run-a-build-command\" class=\"headerlink\" title=\"Run a build command\"></a>Run a build command</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .exec(<span class=\"string\">\"npm run build\"</span>)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// subject is now the result object</span></div><div class=\"line\">    <span class=\"comment\">// &#123;</span></div><div class=\"line\">    <span class=\"comment\">//   code: 0,</span></div><div class=\"line\">    <span class=\"comment\">//   stdout: \"Files successfully built\",</span></div><div class=\"line\">    <span class=\"comment\">//   stderr: \"\"</span></div><div class=\"line\">    <span class=\"comment\">// &#125;</span></div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Seed-the-database-and-assert-it-was-successful\"><a href=\"#Seed-the-database-and-assert-it-was-successful\" class=\"headerlink\" title=\"Seed the database and assert it was successful\"></a>Seed the database and assert it was successful</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.exec(<span class=\"string\">\"rake db:seed\"</span>).its(<span class=\"string\">\"code\"</span>).should(<span class=\"string\">\"eq\"</span>, <span class=\"number\">0</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"Run-an-arbitrary-script-and-assert-its-output\"><a href=\"#Run-an-arbitrary-script-and-assert-its-output\" class=\"headerlink\" title=\"Run an arbitrary script and assert its output\"></a>Run an arbitrary script and assert its output</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.exec(<span class=\"string\">\"npm run my-script\"</span>).its(<span class=\"string\">\"stdout\"</span>).should(<span class=\"string\">\"contain\"</span>, <span class=\"string\">\"Done running the script\"</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"Change-the-timeout\"><a href=\"#Change-the-timeout\" class=\"headerlink\" title=\"Change the timeout\"></a>Change the timeout</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// will fail if script takes longer than 20 seconds to finish</span></div><div class=\"line\">cy.exec(<span class=\"string\">\"npm run build\"</span>, &#123; <span class=\"attr\">timeout</span>: <span class=\"number\">20000</span> &#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"Choose-not-to-fail-on-non-zero-exit-and-assert-on-code-and-stderr\"><a href=\"#Choose-not-to-fail-on-non-zero-exit-and-assert-on-code-and-stderr\" class=\"headerlink\" title=\"Choose not to fail on non-zero exit and assert on code and stderr\"></a>Choose not to fail on non-zero exit and assert on code and stderr</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .exec(<span class=\"string\">\"man bear pig\"</span>, &#123; <span class=\"attr\">failOnNonZeroExit</span>: <span class=\"literal\">false</span> &#125;)</div><div class=\"line\">  .its(<span class=\"string\">\"code\"</span>).should(<span class=\"string\">\"eq\"</span>, <span class=\"number\">1</span>)</div><div class=\"line\">  .its(<span class=\"string\">\"stderr\"</span>).should(<span class=\"string\">\"contain\"</span>, <span class=\"string\">\"No manual entry for bear\"</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"Specify-environment-variables\"><a href=\"#Specify-environment-variables\" class=\"headerlink\" title=\"Specify environment variables\"></a>Specify environment variables</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .exec(<span class=\"string\">\"echo $USERNAME\"</span>, &#123; <span class=\"attr\">env</span>: &#123; <span class=\"attr\">USERNAME</span>: <span class=\"string\">\"johndoe\"</span> &#125; &#125;)</div><div class=\"line\">  .its(<span class=\"string\">\"stdout\"</span>).should(<span class=\"string\">\"contain\"</span>, <span class=\"string\">\"johndoe\"</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"Write-to-a-file-to-create-a-fixture-from-response-body\"><a href=\"#Write-to-a-file-to-create-a-fixture-from-response-body\" class=\"headerlink\" title=\"Write to a file to create a fixture from response body\"></a>Write to a file to create a fixture from response body</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"string\">\"POST\"</span>, <span class=\"string\">\"/comments\"</span>).as(<span class=\"string\">\"postComment\"</span>)</div><div class=\"line\">  .get(<span class=\"string\">\".add-comment\"</span>).click()</div><div class=\"line\">  .wait(<span class=\"string\">\"@postComment\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">xhr</span>)</span>&#123;</div><div class=\"line\">    cy</div><div class=\"line\">      .exec(<span class=\"string\">\"echo '\"</span> + <span class=\"built_in\">JSON</span>.stringify(xhr.responseBody) + <span class=\"string\">\"'&gt;cypress/fixtures/comment.json\"</span>)</div><div class=\"line\">      .fixture(<span class=\"string\">\"comment.json\"</span>).should(<span class=\"string\">\"deep.eq\"</span>, xhr.responseBody)</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"List-the-contents-of-cypress-json\"><a href=\"#List-the-contents-of-cypress-json\" class=\"headerlink\" title=\"List the contents of cypress.json\"></a>List the contents of cypress.json</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.exec(<span class=\"string\">\"cat cypress.json\"</span>)</div></pre></td></tr></table></figure>\n<p>The command above will display in the command log as:</p>\n<p><img width=\"445\" alt=\"screen shot of command log\" src=\"https://cloud.githubusercontent.com/assets/1157043/15369507/e03a7eca-1d00-11e6-8558-396d8c9b6d98.png\"></p>\n<p>When clicking on the <code>exec</code> command within the command log, the console outputs the following:</p>\n<p><img width=\"758\" alt=\"screen shot of console output\" src=\"https://cloud.githubusercontent.com/assets/1157043/15969867/e3ab646e-2eff-11e6-9199-987ca2f74025.png\"></p>\n"},{"title":"filter","_content":"\nGet DOM elements that match a specific selector. Opposite of [`cy.not()`](https://on.cypress.io/api/not)\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.filter` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.filter( *selector* )](#section-selector-usage)\n\nReduce the set of matched DOM elements to those that match the selector.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.filter`.\n\n**cy.filter( *selector*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry getting the element\n\n***\n\n# Selector Usage\n\n## Filter the current subject to the element with the class `active`.\n\n```html\n<ul>\n  <li>Home</li>\n  <li class=\"active\">About</li>\n  <li>Services</li>\n  <li>Pricing</li>\n  <li>Contact</li>\n</ul>\n```\n\n```javascript\n// returns <li>About</li>\ncy.get(\"ul\").find(\">li\").filter(\".active\")\n```\n\n***\n\n# Command Log\n\n## Filter the `li`'s to the `li` with the class `active`.\n\n```javascript\ncy.get(\".left-nav>.nav\").find(\">li\").filter(\".active\")\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"522\" alt=\"screen shot 2015-11-27 at 2 15 53 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447263/7176e824-9511-11e5-93cc-fa10b3b94482.png\">\n\nWhen clicking on the `filter` command within the command log, the console outputs the following:\n\n<img width=\"503\" alt=\"screen shot 2015-11-27 at 2 16 09 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447266/74b643a4-9511-11e5-8b42-6f6dfbdfb2a8.png\">\n\n# Related\n\n- [not](https://on.cypress.io/api/not)","source":"api/commands/filter.md","raw":"title: filter\n---\n\nGet DOM elements that match a specific selector. Opposite of [`cy.not()`](https://on.cypress.io/api/not)\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.filter` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.filter( *selector* )](#section-selector-usage)\n\nReduce the set of matched DOM elements to those that match the selector.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.filter`.\n\n**cy.filter( *selector*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry getting the element\n\n***\n\n# Selector Usage\n\n## Filter the current subject to the element with the class `active`.\n\n```html\n<ul>\n  <li>Home</li>\n  <li class=\"active\">About</li>\n  <li>Services</li>\n  <li>Pricing</li>\n  <li>Contact</li>\n</ul>\n```\n\n```javascript\n// returns <li>About</li>\ncy.get(\"ul\").find(\">li\").filter(\".active\")\n```\n\n***\n\n# Command Log\n\n## Filter the `li`'s to the `li` with the class `active`.\n\n```javascript\ncy.get(\".left-nav>.nav\").find(\">li\").filter(\".active\")\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"522\" alt=\"screen shot 2015-11-27 at 2 15 53 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447263/7176e824-9511-11e5-93cc-fa10b3b94482.png\">\n\nWhen clicking on the `filter` command within the command log, the console outputs the following:\n\n<img width=\"503\" alt=\"screen shot 2015-11-27 at 2 16 09 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447266/74b643a4-9511-11e5-8b42-6f6dfbdfb2a8.png\">\n\n# Related\n\n- [not](https://on.cypress.io/api/not)","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/filter.html","comments":1,"layout":"page","_id":"cj1pc2g8a000lk1g8qobfotla","content":"<p>Get DOM elements that match a specific selector. Opposite of <a href=\"https://on.cypress.io/api/not\" target=\"_blank\" rel=\"external\"><code>cy.not()</code></a></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.filter</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-filter-selector\"><a href=\"#cy-filter-selector\" class=\"headerlink\" title=\"cy.filter( selector )\"></a><a href=\"#section-selector-usage\">cy.filter( <em>selector</em> )</a></h1><p>Reduce the set of matched DOM elements to those that match the selector.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.filter</code>.</p>\n<p><strong>cy.filter( <em>selector</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry getting the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Selector-Usage\"><a href=\"#Selector-Usage\" class=\"headerlink\" title=\"Selector Usage\"></a>Selector Usage</h1><h2 id=\"Filter-the-current-subject-to-the-element-with-the-class-active\"><a href=\"#Filter-the-current-subject-to-the-element-with-the-class-active\" class=\"headerlink\" title=\"Filter the current subject to the element with the class active.\"></a>Filter the current subject to the element with the class <code>active</code>.</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active\"</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Services<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Pricing<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Contact<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns &lt;li&gt;About&lt;/li&gt;</span></div><div class=\"line\">cy.get(<span class=\"string\">\"ul\"</span>).find(<span class=\"string\">\"&gt;li\"</span>).filter(<span class=\"string\">\".active\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Filter-the-li‘s-to-the-li-with-the-class-active\"><a href=\"#Filter-the-li‘s-to-the-li-with-the-class-active\" class=\"headerlink\" title=\"Filter the li‘s to the li with the class active.\"></a>Filter the <code>li</code>‘s to the <code>li</code> with the class <code>active</code>.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\".left-nav&gt;.nav\"</span>).find(<span class=\"string\">\"&gt;li\"</span>).filter(<span class=\"string\">\".active\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"522\" alt=\"screen shot 2015-11-27 at 2 15 53 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447263/7176e824-9511-11e5-93cc-fa10b3b94482.png\"></p>\n<p>When clicking on the <code>filter</code> command within the command log, the console outputs the following:</p>\n<p><img width=\"503\" alt=\"screen shot 2015-11-27 at 2 16 09 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447266/74b643a4-9511-11e5-8b42-6f6dfbdfb2a8.png\"></p>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/not\" target=\"_blank\" rel=\"external\">not</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Get DOM elements that match a specific selector. Opposite of <a href=\"https://on.cypress.io/api/not\"><code>cy.not()</code></a></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.filter</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-filter-selector\"><a href=\"#cy-filter-selector\" class=\"headerlink\" title=\"cy.filter( selector )\"></a><a href=\"#section-selector-usage\">cy.filter( <em>selector</em> )</a></h1><p>Reduce the set of matched DOM elements to those that match the selector.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.filter</code>.</p>\n<p><strong>cy.filter( <em>selector</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry getting the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Selector-Usage\"><a href=\"#Selector-Usage\" class=\"headerlink\" title=\"Selector Usage\"></a>Selector Usage</h1><h2 id=\"Filter-the-current-subject-to-the-element-with-the-class-active\"><a href=\"#Filter-the-current-subject-to-the-element-with-the-class-active\" class=\"headerlink\" title=\"Filter the current subject to the element with the class active.\"></a>Filter the current subject to the element with the class <code>active</code>.</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active\"</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Services<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Pricing<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Contact<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns &lt;li&gt;About&lt;/li&gt;</span></div><div class=\"line\">cy.get(<span class=\"string\">\"ul\"</span>).find(<span class=\"string\">\"&gt;li\"</span>).filter(<span class=\"string\">\".active\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Filter-the-li‘s-to-the-li-with-the-class-active\"><a href=\"#Filter-the-li‘s-to-the-li-with-the-class-active\" class=\"headerlink\" title=\"Filter the li‘s to the li with the class active.\"></a>Filter the <code>li</code>‘s to the <code>li</code> with the class <code>active</code>.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\".left-nav&gt;.nav\"</span>).find(<span class=\"string\">\"&gt;li\"</span>).filter(<span class=\"string\">\".active\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"522\" alt=\"screen shot 2015-11-27 at 2 15 53 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447263/7176e824-9511-11e5-93cc-fa10b3b94482.png\"></p>\n<p>When clicking on the <code>filter</code> command within the command log, the console outputs the following:</p>\n<p><img width=\"503\" alt=\"screen shot 2015-11-27 at 2 16 09 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447266/74b643a4-9511-11e5-8b42-6f6dfbdfb2a8.png\"></p>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/not\">not</a></li>\n</ul>\n"},{"title":"find","_content":"\nGet the descendents DOM elements of a specific selector.\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.find` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.find( *selector* )](#section-selector-usage)\n\nGet the descendants of each DOM element in the current set of matched DOM elements within the selector.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.find`.\n\n**cy.find( *selector*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry getting the element\n\n***\n\n# Selector Usage\n\n## Get li's within parent\n\n```html\n<ul id=\"parent\">\n  <li class=\"first\"></li>\n  <li class=\"second\"></li>\n</ul>\n```\n\n```javascript\n// returns [<li class=\"first\"></li>, <li class=\"second\"></li>]\ncy.get(\"#parent\").find(\"li\")\n```\n\n***\n\n# Command Log\n\n## Find the `li`'s within the nav\n\n```javascript\ncy.get(\".left-nav>.nav\").find(\">li\")\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"522\" alt=\"screen shot 2015-11-27 at 2 19 38 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447309/f6a9be4a-9511-11e5-84a5-a111215bf1e6.png\">\n\nWhen clicking on the `find` command within the command log, the console outputs the following:\n\n<img width=\"516\" alt=\"screen shot 2015-11-27 at 2 19 54 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447312/fa3679cc-9511-11e5-9bea-904f8c70063d.png\">\n\n***\n\n# Related\n\n- [get](https://on.cypress.io/api/get)","source":"api/commands/find.md","raw":"title: find\n---\n\nGet the descendents DOM elements of a specific selector.\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.find` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.find( *selector* )](#section-selector-usage)\n\nGet the descendants of each DOM element in the current set of matched DOM elements within the selector.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.find`.\n\n**cy.find( *selector*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry getting the element\n\n***\n\n# Selector Usage\n\n## Get li's within parent\n\n```html\n<ul id=\"parent\">\n  <li class=\"first\"></li>\n  <li class=\"second\"></li>\n</ul>\n```\n\n```javascript\n// returns [<li class=\"first\"></li>, <li class=\"second\"></li>]\ncy.get(\"#parent\").find(\"li\")\n```\n\n***\n\n# Command Log\n\n## Find the `li`'s within the nav\n\n```javascript\ncy.get(\".left-nav>.nav\").find(\">li\")\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"522\" alt=\"screen shot 2015-11-27 at 2 19 38 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447309/f6a9be4a-9511-11e5-84a5-a111215bf1e6.png\">\n\nWhen clicking on the `find` command within the command log, the console outputs the following:\n\n<img width=\"516\" alt=\"screen shot 2015-11-27 at 2 19 54 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447312/fa3679cc-9511-11e5-9bea-904f8c70063d.png\">\n\n***\n\n# Related\n\n- [get](https://on.cypress.io/api/get)","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/find.html","comments":1,"layout":"page","_id":"cj1pc2g8a000mk1g8n6zimjfc","content":"<p>Get the descendents DOM elements of a specific selector.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.find</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-find-selector\"><a href=\"#cy-find-selector\" class=\"headerlink\" title=\"cy.find( selector )\"></a><a href=\"#section-selector-usage\">cy.find( <em>selector</em> )</a></h1><p>Get the descendants of each DOM element in the current set of matched DOM elements within the selector.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.find</code>.</p>\n<p><strong>cy.find( <em>selector</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry getting the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Selector-Usage\"><a href=\"#Selector-Usage\" class=\"headerlink\" title=\"Selector Usage\"></a>Selector Usage</h1><h2 id=\"Get-li’s-within-parent\"><a href=\"#Get-li’s-within-parent\" class=\"headerlink\" title=\"Get li’s within parent\"></a>Get li’s within parent</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"parent\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"first\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"second\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns [&lt;li class=\"first\"&gt;&lt;/li&gt;, &lt;li class=\"second\"&gt;&lt;/li&gt;]</span></div><div class=\"line\">cy.get(<span class=\"string\">\"#parent\"</span>).find(<span class=\"string\">\"li\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Find-the-li‘s-within-the-nav\"><a href=\"#Find-the-li‘s-within-the-nav\" class=\"headerlink\" title=\"Find the li‘s within the nav\"></a>Find the <code>li</code>‘s within the nav</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\".left-nav&gt;.nav\"</span>).find(<span class=\"string\">\"&gt;li\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"522\" alt=\"screen shot 2015-11-27 at 2 19 38 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447309/f6a9be4a-9511-11e5-84a5-a111215bf1e6.png\"></p>\n<p>When clicking on the <code>find</code> command within the command log, the console outputs the following:</p>\n<p><img width=\"516\" alt=\"screen shot 2015-11-27 at 2 19 54 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447312/fa3679cc-9511-11e5-9bea-904f8c70063d.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/get\" target=\"_blank\" rel=\"external\">get</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Get the descendents DOM elements of a specific selector.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.find</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-find-selector\"><a href=\"#cy-find-selector\" class=\"headerlink\" title=\"cy.find( selector )\"></a><a href=\"#section-selector-usage\">cy.find( <em>selector</em> )</a></h1><p>Get the descendants of each DOM element in the current set of matched DOM elements within the selector.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.find</code>.</p>\n<p><strong>cy.find( <em>selector</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry getting the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Selector-Usage\"><a href=\"#Selector-Usage\" class=\"headerlink\" title=\"Selector Usage\"></a>Selector Usage</h1><h2 id=\"Get-li’s-within-parent\"><a href=\"#Get-li’s-within-parent\" class=\"headerlink\" title=\"Get li’s within parent\"></a>Get li’s within parent</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"parent\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"first\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"second\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns [&lt;li class=\"first\"&gt;&lt;/li&gt;, &lt;li class=\"second\"&gt;&lt;/li&gt;]</span></div><div class=\"line\">cy.get(<span class=\"string\">\"#parent\"</span>).find(<span class=\"string\">\"li\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Find-the-li‘s-within-the-nav\"><a href=\"#Find-the-li‘s-within-the-nav\" class=\"headerlink\" title=\"Find the li‘s within the nav\"></a>Find the <code>li</code>‘s within the nav</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\".left-nav&gt;.nav\"</span>).find(<span class=\"string\">\"&gt;li\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"522\" alt=\"screen shot 2015-11-27 at 2 19 38 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447309/f6a9be4a-9511-11e5-84a5-a111215bf1e6.png\"></p>\n<p>When clicking on the <code>find</code> command within the command log, the console outputs the following:</p>\n<p><img width=\"516\" alt=\"screen shot 2015-11-27 at 2 19 54 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447312/fa3679cc-9511-11e5-9bea-904f8c70063d.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/get\">get</a></li>\n</ul>\n"},{"title":"first","_content":"\nGet the first DOM element within a set of DOM elements.\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.first` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.first()](#section-usage)\n\nReduce the set of matched DOM elements to the first in the set.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.first`.\n\n**cy.first(*options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry getting the element\n\n***\n\n# Usage\n\n## Get the first list item in a list.\n\n```html\n<ul>\n  <li class=\"one\">Knick knack on my thumb</li>\n  <li class=\"two\">Knick knack on my shoe</li>\n  <li class=\"three\">Knick knack on my knee</li>\n  <li class=\"four\">Knick knack on my door</li>\n</ul>\n```\n\n```javascript\n// returns <li class=\"one\">Knick knack on my thumb</li>\ncy.get(\"ul\").first()\n```\n\n***\n\n# Command Log\n\n## Find the first `input` in the `form`\n\n```javascript\ncy.get(\"form\").find(\"input\").first()\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"527\" alt=\"screen shot 2015-11-29 at 12 28 08 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458770/d9439ee6-9694-11e5-8754-b2641ba44883.png\">\n\nWhen clicking on `first` within the command log, the console outputs the following:\n\n<img width=\"616\" alt=\"screen shot 2015-11-29 at 12 28 23 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458771/db8cb516-9694-11e5-86c2-cf3bbb9a666d.png\">\n\n***\n\n# Related\n\n- [last](https://on.cypress.io/api/last)","source":"api/commands/first.md","raw":"title: first\n---\n\nGet the first DOM element within a set of DOM elements.\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.first` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.first()](#section-usage)\n\nReduce the set of matched DOM elements to the first in the set.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.first`.\n\n**cy.first(*options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry getting the element\n\n***\n\n# Usage\n\n## Get the first list item in a list.\n\n```html\n<ul>\n  <li class=\"one\">Knick knack on my thumb</li>\n  <li class=\"two\">Knick knack on my shoe</li>\n  <li class=\"three\">Knick knack on my knee</li>\n  <li class=\"four\">Knick knack on my door</li>\n</ul>\n```\n\n```javascript\n// returns <li class=\"one\">Knick knack on my thumb</li>\ncy.get(\"ul\").first()\n```\n\n***\n\n# Command Log\n\n## Find the first `input` in the `form`\n\n```javascript\ncy.get(\"form\").find(\"input\").first()\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"527\" alt=\"screen shot 2015-11-29 at 12 28 08 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458770/d9439ee6-9694-11e5-8754-b2641ba44883.png\">\n\nWhen clicking on `first` within the command log, the console outputs the following:\n\n<img width=\"616\" alt=\"screen shot 2015-11-29 at 12 28 23 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458771/db8cb516-9694-11e5-86c2-cf3bbb9a666d.png\">\n\n***\n\n# Related\n\n- [last](https://on.cypress.io/api/last)","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/first.html","comments":1,"layout":"page","_id":"cj1pc2g8a000nk1g8hvrx164p","content":"<p>Get the first DOM element within a set of DOM elements.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.first</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-first\"><a href=\"#cy-first\" class=\"headerlink\" title=\"cy.first()\"></a><a href=\"#section-usage\">cy.first()</a></h1><p>Reduce the set of matched DOM elements to the first in the set.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.first</code>.</p>\n<p><strong>cy.first(<em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry getting the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Get-the-first-list-item-in-a-list\"><a href=\"#Get-the-first-list-item-in-a-list\" class=\"headerlink\" title=\"Get the first list item in a list.\"></a>Get the first list item in a list.</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"one\"</span>&gt;</span>Knick knack on my thumb<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"two\"</span>&gt;</span>Knick knack on my shoe<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"three\"</span>&gt;</span>Knick knack on my knee<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"four\"</span>&gt;</span>Knick knack on my door<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns &lt;li class=\"one\"&gt;Knick knack on my thumb&lt;/li&gt;</span></div><div class=\"line\">cy.get(<span class=\"string\">\"ul\"</span>).first()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Find-the-first-input-in-the-form\"><a href=\"#Find-the-first-input-in-the-form\" class=\"headerlink\" title=\"Find the first input in the form\"></a>Find the first <code>input</code> in the <code>form</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"form\"</span>).find(<span class=\"string\">\"input\"</span>).first()</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"527\" alt=\"screen shot 2015-11-29 at 12 28 08 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458770/d9439ee6-9694-11e5-8754-b2641ba44883.png\"></p>\n<p>When clicking on <code>first</code> within the command log, the console outputs the following:</p>\n<p><img width=\"616\" alt=\"screen shot 2015-11-29 at 12 28 23 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458771/db8cb516-9694-11e5-86c2-cf3bbb9a666d.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/last\" target=\"_blank\" rel=\"external\">last</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Get the first DOM element within a set of DOM elements.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.first</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-first\"><a href=\"#cy-first\" class=\"headerlink\" title=\"cy.first()\"></a><a href=\"#section-usage\">cy.first()</a></h1><p>Reduce the set of matched DOM elements to the first in the set.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.first</code>.</p>\n<p><strong>cy.first(<em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry getting the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Get-the-first-list-item-in-a-list\"><a href=\"#Get-the-first-list-item-in-a-list\" class=\"headerlink\" title=\"Get the first list item in a list.\"></a>Get the first list item in a list.</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"one\"</span>&gt;</span>Knick knack on my thumb<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"two\"</span>&gt;</span>Knick knack on my shoe<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"three\"</span>&gt;</span>Knick knack on my knee<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"four\"</span>&gt;</span>Knick knack on my door<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns &lt;li class=\"one\"&gt;Knick knack on my thumb&lt;/li&gt;</span></div><div class=\"line\">cy.get(<span class=\"string\">\"ul\"</span>).first()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Find-the-first-input-in-the-form\"><a href=\"#Find-the-first-input-in-the-form\" class=\"headerlink\" title=\"Find the first input in the form\"></a>Find the first <code>input</code> in the <code>form</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"form\"</span>).find(<span class=\"string\">\"input\"</span>).first()</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"527\" alt=\"screen shot 2015-11-29 at 12 28 08 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458770/d9439ee6-9694-11e5-8754-b2641ba44883.png\"></p>\n<p>When clicking on <code>first</code> within the command log, the console outputs the following:</p>\n<p><img width=\"616\" alt=\"screen shot 2015-11-29 at 12 28 23 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458771/db8cb516-9694-11e5-86c2-cf3bbb9a666d.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/last\">last</a></li>\n</ul>\n"},{"title":"fixture","_content":"\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Read about Creating Fixtures first.](https://on.cypress.io/guides/creating-fixtures)\",\n  \"title\": \"New to Cypress?\"\n}\n[/block]\n\nLoads a single fixture file. Image fixtures will be sent as `base64`.\n\nIf an extension is omitted, Cypress will attempt to resolve the fixture by order of these extensions:\n\n* `.json`\n* `.js`\n* `.coffee`\n* `.html`\n* `.txt`\n* `.csv`\n* `.png`\n* `.jpg`\n* `.jpeg`\n* `.gif`\n* `.tif`\n* `.tiff`\n* `.zip`\n\n| | |\n|--- | --- |\n| **Returns** | the contents of the file, formatted by file extension |\n| **Timeout** | `cy.fixture` will wait up for the duration of [`responseTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) for the server to process this command. |\n\n***\n\n# [cy.fixture( *fixture* )](#section-single-fixture-usage)\n\nLoads the fixture at the specified filepath within the [`fixturesFolder`](https://on.cypress.io/guides/configuration#section-folders), which defaults to `cypress/fixtures`.\n\n***\n\n# [cy.fixture( *fixture*, *encoding* )](#section-encoding)\n\nLoads the fixture at the specified filepath within the [`fixturesFolder`](https://on.cypress.io/guides/configuration#section-folders), which defaults to `cypress/fixtures`, using the encoding specified when reading the file.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.fixture`.\n\n**[cy.fixture( *fixture*, *options* )](#options-usage)**\n\n**[cy.fixture( *fixture*, *encoding*, *options* )](#options-usage)**\n\nOption | Default | Notes\n--- | --- | ---\n`timeout` | [`responseTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to wait for the `cy.fixture` command to be processed\n\n***\n\n# Single Fixture Usage\n\n## Load the `users.json` fixture\n\n```javascript\ncy.fixture(\"users.json\")\n```\n\n***\n\n## Omit the fixture file's extension\n\n```javascript\ncy.fixture(\"admin\")\n```\n\nWhen no extension is passed to `cy.fixture`, Cypress will search for files with the specified name within the [`fixturesFolder`](https://on.cypress.io/guides/configuration#section-folders), which defaults to `cypress/fixtures`, and resolve the first one. The above example would resolve in the following order:\n\n1. `{fixturesFolder}/admin.json`\n2. `{fixturesFolder}/admin.js`\n3. `{fixturesFolder}/admin.coffee`\n4. `{fixturesFolder}/admin.html`\n5. `{fixturesFolder}/admin.txt`\n6. `{fixturesFolder}/admin.csv`\n7. `{fixturesFolder}/admin.png`\n8. `{fixturesFolder}/admin.jpg`\n9. `{fixturesFolder}/admin.jpeg`\n10. `{fixturesFolder}/admin.gif`\n11. `{fixturesFolder}/admin.tif`\n12. `{fixturesFolder}/admin.tiff`\n13. `{fixturesFolder}/admin.zip`\n\n***\n\n## Image fixtures will be sent by default as `base64`\n\n```javascript\ncy.fixture(\"images/logo.png\").then(function(logo){\n  // logo will be encoded as base64\n  // and should look something like this:\n  // aIJKnwxydrB10NVWqhlmmC+ZiWs7otHotSAAAOw==...\n})\n```\n\n***\n\n## Change encoding of Image fixture\n\n```javascript\ncy.fixture(\"images/logo.png\", \"binary\").then(function(logo){\n  // logo will be encoded as binary\n  // and should look something like this:\n  // 000000000000000000000000000000000000000000...\n})\n```\n\n***\n\n# Notes\n\n## Nesting\n\nYou can nest fixtures within folders and reference them by defining the path to the file:\n\n`{fixturesFolder}/users/admin.json`\n\n```javascript\ncy.fixture(\"users/admin.json\")\n```\n\n***\n\n## Validation\n\nCypress will automatically validate your fixtures. If your `.json`, `.js`, or `.coffee` files contain syntax errors, they will automatically be shown in the Command Log.\n\n***\n\n## Formatting\n\nCypress automatically formats your fixture files. That means you can paste in a single line of `json` and the next time Cypress serves this fixture, it will format / indent the `json`, which makes it easier to read and debug.\n\n***\n\n## Encoding\n\nCypress automatically determines the encoding for the following file types:\n\n* `.json`\n* `.js`\n* `.coffee`\n* `.html`\n* `.txt`\n* `.csv`\n* `.png`\n* `.jpg`\n* `.jpeg`\n* `.gif`\n* `.tif`\n* `.tiff`\n* `.zip`\n\nFor other types of files, they will be read as `utf8` by default. You can specify a different encoding by passing it as the [second argument](https://on.cypress.io/api/fixture#section--cy-fixture-fixture-encoding-section-encoding-).\n\n```javascript\ncy.fixture(\"foo.bmp\", \"base64\")\n```\n\nThe following encodings are supported:\n\n* `ascii`\n* `base64`\n* `binary`\n* `hex`\n* `latin1`\n* `utf8`\n* `utf-8`\n* `ucs2`\n* `ucs-2`\n* `utf16le`\n* `utf-16le`\n\n***\n\n# Usage with `cy.route()`\n\n## Using fixture or fx shortcuts\n\nFixtures can be referenced directly by the special keywords: `fixture:` or `fx:`.\n\nThis enables you to set a fixture as the response for a route without having to first use the `cy.fixture` command.\n\n```javascript\ncy.route(\"GET\", /users/, \"fixture:users\") // this works\ncy.route(\"GET\", /users/, \"fx:users\")      // this also works\n```\n\nThis saves you from having to explicitly load the fixture first (like [below](https://on.cypress.io/api/fixture#section-using-cy-then-to-access-fixture-data)).\n\n## Using cy.then to access fixture data\n\n```javascript\ncy\n  .fixture(\"users\").then(function(json){\n    cy.route(\"GET\", /users/, json)\n  })\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe using cy.fixture to bootstrap data for our application.](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/bootstrapping_app_test_data_spec.js)\",\n  \"title\": \"Using cy.fixture for response data\"\n}\n[/block]\n\n## Using an alias to access a fixture\n\nHowever if you still need access to the fixture data, instead of [yielding the fixture's data](https://on.cypress.io/api/fixture#section-using-cy-then-to-access-fixture-data), we can make use of [aliasing](https://on.cypress.io/guides/using-aliases).\n\nUsing an alias provides the benefit of terseness and readability.\n\n```javascript\ncy\n  .fixture(\"users\").as(\"usersJSON\")\n  .route(\"GET\", /users/, \"@usersJSON\")\n\n  // ...later on...\n\n  .then(function(){\n    // we have access to this.usersJSON since it was aliased\n    this.usersJSON\n  })\n```\n\n## Modifying fixture data before using it\n\nYou can also modify fixture data directly before passing it along to the route.\n\n```javascript\ncy\n  .fixture(\"user\").then(function(user){\n    user.firstName = \"Jane\"\n\n    cy.route(\"GET\", \"/users/1\", user)\n  })\n  .visit(\"/users\")\n  .get(\".user\").should(\"include\", \"Jane\")\n})\n```\n\n***\n\n# Command Log\n\n## `fixture` does *not* log in the command log\n\n***\n\n# Related\n\n- [Guide: Creating Fixtures](https://on.cypress.io/guides/creating-fixtures)\n- [Recipe: Bootstrapping App Test Data](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/bootstrapping_app_test_data_spec.js)\n- [route](https://on.cypress.io/api/route)\n- [then](https://on.cypress.io/api/then)\n","source":"api/commands/fixture.md","raw":"title: fixture\n---\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Read about Creating Fixtures first.](https://on.cypress.io/guides/creating-fixtures)\",\n  \"title\": \"New to Cypress?\"\n}\n[/block]\n\nLoads a single fixture file. Image fixtures will be sent as `base64`.\n\nIf an extension is omitted, Cypress will attempt to resolve the fixture by order of these extensions:\n\n* `.json`\n* `.js`\n* `.coffee`\n* `.html`\n* `.txt`\n* `.csv`\n* `.png`\n* `.jpg`\n* `.jpeg`\n* `.gif`\n* `.tif`\n* `.tiff`\n* `.zip`\n\n| | |\n|--- | --- |\n| **Returns** | the contents of the file, formatted by file extension |\n| **Timeout** | `cy.fixture` will wait up for the duration of [`responseTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) for the server to process this command. |\n\n***\n\n# [cy.fixture( *fixture* )](#section-single-fixture-usage)\n\nLoads the fixture at the specified filepath within the [`fixturesFolder`](https://on.cypress.io/guides/configuration#section-folders), which defaults to `cypress/fixtures`.\n\n***\n\n# [cy.fixture( *fixture*, *encoding* )](#section-encoding)\n\nLoads the fixture at the specified filepath within the [`fixturesFolder`](https://on.cypress.io/guides/configuration#section-folders), which defaults to `cypress/fixtures`, using the encoding specified when reading the file.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.fixture`.\n\n**[cy.fixture( *fixture*, *options* )](#options-usage)**\n\n**[cy.fixture( *fixture*, *encoding*, *options* )](#options-usage)**\n\nOption | Default | Notes\n--- | --- | ---\n`timeout` | [`responseTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to wait for the `cy.fixture` command to be processed\n\n***\n\n# Single Fixture Usage\n\n## Load the `users.json` fixture\n\n```javascript\ncy.fixture(\"users.json\")\n```\n\n***\n\n## Omit the fixture file's extension\n\n```javascript\ncy.fixture(\"admin\")\n```\n\nWhen no extension is passed to `cy.fixture`, Cypress will search for files with the specified name within the [`fixturesFolder`](https://on.cypress.io/guides/configuration#section-folders), which defaults to `cypress/fixtures`, and resolve the first one. The above example would resolve in the following order:\n\n1. `{fixturesFolder}/admin.json`\n2. `{fixturesFolder}/admin.js`\n3. `{fixturesFolder}/admin.coffee`\n4. `{fixturesFolder}/admin.html`\n5. `{fixturesFolder}/admin.txt`\n6. `{fixturesFolder}/admin.csv`\n7. `{fixturesFolder}/admin.png`\n8. `{fixturesFolder}/admin.jpg`\n9. `{fixturesFolder}/admin.jpeg`\n10. `{fixturesFolder}/admin.gif`\n11. `{fixturesFolder}/admin.tif`\n12. `{fixturesFolder}/admin.tiff`\n13. `{fixturesFolder}/admin.zip`\n\n***\n\n## Image fixtures will be sent by default as `base64`\n\n```javascript\ncy.fixture(\"images/logo.png\").then(function(logo){\n  // logo will be encoded as base64\n  // and should look something like this:\n  // aIJKnwxydrB10NVWqhlmmC+ZiWs7otHotSAAAOw==...\n})\n```\n\n***\n\n## Change encoding of Image fixture\n\n```javascript\ncy.fixture(\"images/logo.png\", \"binary\").then(function(logo){\n  // logo will be encoded as binary\n  // and should look something like this:\n  // 000000000000000000000000000000000000000000...\n})\n```\n\n***\n\n# Notes\n\n## Nesting\n\nYou can nest fixtures within folders and reference them by defining the path to the file:\n\n`{fixturesFolder}/users/admin.json`\n\n```javascript\ncy.fixture(\"users/admin.json\")\n```\n\n***\n\n## Validation\n\nCypress will automatically validate your fixtures. If your `.json`, `.js`, or `.coffee` files contain syntax errors, they will automatically be shown in the Command Log.\n\n***\n\n## Formatting\n\nCypress automatically formats your fixture files. That means you can paste in a single line of `json` and the next time Cypress serves this fixture, it will format / indent the `json`, which makes it easier to read and debug.\n\n***\n\n## Encoding\n\nCypress automatically determines the encoding for the following file types:\n\n* `.json`\n* `.js`\n* `.coffee`\n* `.html`\n* `.txt`\n* `.csv`\n* `.png`\n* `.jpg`\n* `.jpeg`\n* `.gif`\n* `.tif`\n* `.tiff`\n* `.zip`\n\nFor other types of files, they will be read as `utf8` by default. You can specify a different encoding by passing it as the [second argument](https://on.cypress.io/api/fixture#section--cy-fixture-fixture-encoding-section-encoding-).\n\n```javascript\ncy.fixture(\"foo.bmp\", \"base64\")\n```\n\nThe following encodings are supported:\n\n* `ascii`\n* `base64`\n* `binary`\n* `hex`\n* `latin1`\n* `utf8`\n* `utf-8`\n* `ucs2`\n* `ucs-2`\n* `utf16le`\n* `utf-16le`\n\n***\n\n# Usage with `cy.route()`\n\n## Using fixture or fx shortcuts\n\nFixtures can be referenced directly by the special keywords: `fixture:` or `fx:`.\n\nThis enables you to set a fixture as the response for a route without having to first use the `cy.fixture` command.\n\n```javascript\ncy.route(\"GET\", /users/, \"fixture:users\") // this works\ncy.route(\"GET\", /users/, \"fx:users\")      // this also works\n```\n\nThis saves you from having to explicitly load the fixture first (like [below](https://on.cypress.io/api/fixture#section-using-cy-then-to-access-fixture-data)).\n\n## Using cy.then to access fixture data\n\n```javascript\ncy\n  .fixture(\"users\").then(function(json){\n    cy.route(\"GET\", /users/, json)\n  })\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe using cy.fixture to bootstrap data for our application.](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/bootstrapping_app_test_data_spec.js)\",\n  \"title\": \"Using cy.fixture for response data\"\n}\n[/block]\n\n## Using an alias to access a fixture\n\nHowever if you still need access to the fixture data, instead of [yielding the fixture's data](https://on.cypress.io/api/fixture#section-using-cy-then-to-access-fixture-data), we can make use of [aliasing](https://on.cypress.io/guides/using-aliases).\n\nUsing an alias provides the benefit of terseness and readability.\n\n```javascript\ncy\n  .fixture(\"users\").as(\"usersJSON\")\n  .route(\"GET\", /users/, \"@usersJSON\")\n\n  // ...later on...\n\n  .then(function(){\n    // we have access to this.usersJSON since it was aliased\n    this.usersJSON\n  })\n```\n\n## Modifying fixture data before using it\n\nYou can also modify fixture data directly before passing it along to the route.\n\n```javascript\ncy\n  .fixture(\"user\").then(function(user){\n    user.firstName = \"Jane\"\n\n    cy.route(\"GET\", \"/users/1\", user)\n  })\n  .visit(\"/users\")\n  .get(\".user\").should(\"include\", \"Jane\")\n})\n```\n\n***\n\n# Command Log\n\n## `fixture` does *not* log in the command log\n\n***\n\n# Related\n\n- [Guide: Creating Fixtures](https://on.cypress.io/guides/creating-fixtures)\n- [Recipe: Bootstrapping App Test Data](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/bootstrapping_app_test_data_spec.js)\n- [route](https://on.cypress.io/api/route)\n- [then](https://on.cypress.io/api/then)\n","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/fixture.html","comments":1,"layout":"page","_id":"cj1pc2g8b000ok1g8mvezx1zy","content":"<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://on.cypress.io/guides/creating-fixtures\" target=\"_blank\" rel=\"external\">Read about Creating Fixtures first.</a>“,<br>  “title”: “New to Cypress?”<br>}<br>[/block]</p>\n<p>Loads a single fixture file. Image fixtures will be sent as <code>base64</code>.</p>\n<p>If an extension is omitted, Cypress will attempt to resolve the fixture by order of these extensions:</p>\n<ul>\n<li><code>.json</code></li>\n<li><code>.js</code></li>\n<li><code>.coffee</code></li>\n<li><code>.html</code></li>\n<li><code>.txt</code></li>\n<li><code>.csv</code></li>\n<li><code>.png</code></li>\n<li><code>.jpg</code></li>\n<li><code>.jpeg</code></li>\n<li><code>.gif</code></li>\n<li><code>.tif</code></li>\n<li><code>.tiff</code></li>\n<li><code>.zip</code></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the contents of the file, formatted by file extension</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.fixture</code> will wait up for the duration of <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>responseTimeout</code></a> for the server to process this command.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-fixture-fixture\"><a href=\"#cy-fixture-fixture\" class=\"headerlink\" title=\"cy.fixture( fixture )\"></a><a href=\"#section-single-fixture-usage\">cy.fixture( <em>fixture</em> )</a></h1><p>Loads the fixture at the specified filepath within the <a href=\"https://on.cypress.io/guides/configuration#section-folders\" target=\"_blank\" rel=\"external\"><code>fixturesFolder</code></a>, which defaults to <code>cypress/fixtures</code>.</p>\n<hr>\n<h1 id=\"cy-fixture-fixture-encoding\"><a href=\"#cy-fixture-fixture-encoding\" class=\"headerlink\" title=\"cy.fixture( fixture, encoding )\"></a><a href=\"#section-encoding\">cy.fixture( <em>fixture</em>, <em>encoding</em> )</a></h1><p>Loads the fixture at the specified filepath within the <a href=\"https://on.cypress.io/guides/configuration#section-folders\" target=\"_blank\" rel=\"external\"><code>fixturesFolder</code></a>, which defaults to <code>cypress/fixtures</code>, using the encoding specified when reading the file.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.fixture</code>.</p>\n<p><strong><a href=\"#options-usage\">cy.fixture( <em>fixture</em>, <em>options</em> )</a></strong></p>\n<p><strong><a href=\"#options-usage\">cy.fixture( <em>fixture</em>, <em>encoding</em>, <em>options</em> )</a></strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>responseTimeout</code></a></td>\n<td>Total time to wait for the <code>cy.fixture</code> command to be processed</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Single-Fixture-Usage\"><a href=\"#Single-Fixture-Usage\" class=\"headerlink\" title=\"Single Fixture Usage\"></a>Single Fixture Usage</h1><h2 id=\"Load-the-users-json-fixture\"><a href=\"#Load-the-users-json-fixture\" class=\"headerlink\" title=\"Load the users.json fixture\"></a>Load the <code>users.json</code> fixture</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.fixture(<span class=\"string\">\"users.json\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Omit-the-fixture-file’s-extension\"><a href=\"#Omit-the-fixture-file’s-extension\" class=\"headerlink\" title=\"Omit the fixture file’s extension\"></a>Omit the fixture file’s extension</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.fixture(<span class=\"string\">\"admin\"</span>)</div></pre></td></tr></table></figure>\n<p>When no extension is passed to <code>cy.fixture</code>, Cypress will search for files with the specified name within the <a href=\"https://on.cypress.io/guides/configuration#section-folders\" target=\"_blank\" rel=\"external\"><code>fixturesFolder</code></a>, which defaults to <code>cypress/fixtures</code>, and resolve the first one. The above example would resolve in the following order:</p>\n<ol>\n<li><code>{fixturesFolder}/admin.json</code></li>\n<li><code>{fixturesFolder}/admin.js</code></li>\n<li><code>{fixturesFolder}/admin.coffee</code></li>\n<li><code>{fixturesFolder}/admin.html</code></li>\n<li><code>{fixturesFolder}/admin.txt</code></li>\n<li><code>{fixturesFolder}/admin.csv</code></li>\n<li><code>{fixturesFolder}/admin.png</code></li>\n<li><code>{fixturesFolder}/admin.jpg</code></li>\n<li><code>{fixturesFolder}/admin.jpeg</code></li>\n<li><code>{fixturesFolder}/admin.gif</code></li>\n<li><code>{fixturesFolder}/admin.tif</code></li>\n<li><code>{fixturesFolder}/admin.tiff</code></li>\n<li><code>{fixturesFolder}/admin.zip</code></li>\n</ol>\n<hr>\n<h2 id=\"Image-fixtures-will-be-sent-by-default-as-base64\"><a href=\"#Image-fixtures-will-be-sent-by-default-as-base64\" class=\"headerlink\" title=\"Image fixtures will be sent by default as base64\"></a>Image fixtures will be sent by default as <code>base64</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.fixture(<span class=\"string\">\"images/logo.png\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">logo</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// logo will be encoded as base64</span></div><div class=\"line\">  <span class=\"comment\">// and should look something like this:</span></div><div class=\"line\">  <span class=\"comment\">// aIJKnwxydrB10NVWqhlmmC+ZiWs7otHotSAAAOw==...</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Change-encoding-of-Image-fixture\"><a href=\"#Change-encoding-of-Image-fixture\" class=\"headerlink\" title=\"Change encoding of Image fixture\"></a>Change encoding of Image fixture</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.fixture(<span class=\"string\">\"images/logo.png\"</span>, <span class=\"string\">\"binary\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">logo</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// logo will be encoded as binary</span></div><div class=\"line\">  <span class=\"comment\">// and should look something like this:</span></div><div class=\"line\">  <span class=\"comment\">// 000000000000000000000000000000000000000000...</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h1><h2 id=\"Nesting\"><a href=\"#Nesting\" class=\"headerlink\" title=\"Nesting\"></a>Nesting</h2><p>You can nest fixtures within folders and reference them by defining the path to the file:</p>\n<p><code>{fixturesFolder}/users/admin.json</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.fixture(<span class=\"string\">\"users/admin.json\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Validation\"><a href=\"#Validation\" class=\"headerlink\" title=\"Validation\"></a>Validation</h2><p>Cypress will automatically validate your fixtures. If your <code>.json</code>, <code>.js</code>, or <code>.coffee</code> files contain syntax errors, they will automatically be shown in the Command Log.</p>\n<hr>\n<h2 id=\"Formatting\"><a href=\"#Formatting\" class=\"headerlink\" title=\"Formatting\"></a>Formatting</h2><p>Cypress automatically formats your fixture files. That means you can paste in a single line of <code>json</code> and the next time Cypress serves this fixture, it will format / indent the <code>json</code>, which makes it easier to read and debug.</p>\n<hr>\n<h2 id=\"Encoding\"><a href=\"#Encoding\" class=\"headerlink\" title=\"Encoding\"></a>Encoding</h2><p>Cypress automatically determines the encoding for the following file types:</p>\n<ul>\n<li><code>.json</code></li>\n<li><code>.js</code></li>\n<li><code>.coffee</code></li>\n<li><code>.html</code></li>\n<li><code>.txt</code></li>\n<li><code>.csv</code></li>\n<li><code>.png</code></li>\n<li><code>.jpg</code></li>\n<li><code>.jpeg</code></li>\n<li><code>.gif</code></li>\n<li><code>.tif</code></li>\n<li><code>.tiff</code></li>\n<li><code>.zip</code></li>\n</ul>\n<p>For other types of files, they will be read as <code>utf8</code> by default. You can specify a different encoding by passing it as the <a href=\"https://on.cypress.io/api/fixture#section--cy-fixture-fixture-encoding-section-encoding-\" target=\"_blank\" rel=\"external\">second argument</a>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.fixture(<span class=\"string\">\"foo.bmp\"</span>, <span class=\"string\">\"base64\"</span>)</div></pre></td></tr></table></figure>\n<p>The following encodings are supported:</p>\n<ul>\n<li><code>ascii</code></li>\n<li><code>base64</code></li>\n<li><code>binary</code></li>\n<li><code>hex</code></li>\n<li><code>latin1</code></li>\n<li><code>utf8</code></li>\n<li><code>utf-8</code></li>\n<li><code>ucs2</code></li>\n<li><code>ucs-2</code></li>\n<li><code>utf16le</code></li>\n<li><code>utf-16le</code></li>\n</ul>\n<hr>\n<h1 id=\"Usage-with-cy-route\"><a href=\"#Usage-with-cy-route\" class=\"headerlink\" title=\"Usage with cy.route()\"></a>Usage with <code>cy.route()</code></h1><h2 id=\"Using-fixture-or-fx-shortcuts\"><a href=\"#Using-fixture-or-fx-shortcuts\" class=\"headerlink\" title=\"Using fixture or fx shortcuts\"></a>Using fixture or fx shortcuts</h2><p>Fixtures can be referenced directly by the special keywords: <code>fixture:</code> or <code>fx:</code>.</p>\n<p>This enables you to set a fixture as the response for a route without having to first use the <code>cy.fixture</code> command.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.route(<span class=\"string\">\"GET\"</span>, /users/, <span class=\"string\">\"fixture:users\"</span>) <span class=\"comment\">// this works</span></div><div class=\"line\">cy.route(<span class=\"string\">\"GET\"</span>, /users/, <span class=\"string\">\"fx:users\"</span>)      <span class=\"comment\">// this also works</span></div></pre></td></tr></table></figure>\n<p>This saves you from having to explicitly load the fixture first (like <a href=\"https://on.cypress.io/api/fixture#section-using-cy-then-to-access-fixture-data\" target=\"_blank\" rel=\"external\">below</a>).</p>\n<h2 id=\"Using-cy-then-to-access-fixture-data\"><a href=\"#Using-cy-then-to-access-fixture-data\" class=\"headerlink\" title=\"Using cy.then to access fixture data\"></a>Using cy.then to access fixture data</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .fixture(<span class=\"string\">\"users\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">json</span>)</span>&#123;</div><div class=\"line\">    cy.route(<span class=\"string\">\"GET\"</span>, /users/, json)</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/bootstrapping_app_test_data_spec.js\" target=\"_blank\" rel=\"external\">Check out our example recipe using cy.fixture to bootstrap data for our application.</a>“,<br>  “title”: “Using cy.fixture for response data”<br>}<br>[/block]</p>\n<h2 id=\"Using-an-alias-to-access-a-fixture\"><a href=\"#Using-an-alias-to-access-a-fixture\" class=\"headerlink\" title=\"Using an alias to access a fixture\"></a>Using an alias to access a fixture</h2><p>However if you still need access to the fixture data, instead of <a href=\"https://on.cypress.io/api/fixture#section-using-cy-then-to-access-fixture-data\" target=\"_blank\" rel=\"external\">yielding the fixture’s data</a>, we can make use of <a href=\"https://on.cypress.io/guides/using-aliases\" target=\"_blank\" rel=\"external\">aliasing</a>.</p>\n<p>Using an alias provides the benefit of terseness and readability.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .fixture(<span class=\"string\">\"users\"</span>).as(<span class=\"string\">\"usersJSON\"</span>)</div><div class=\"line\">  .route(<span class=\"string\">\"GET\"</span>, /users/, <span class=\"string\">\"@usersJSON\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// ...later on...</span></div><div class=\"line\"></div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// we have access to this.usersJSON since it was aliased</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.usersJSON</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Modifying-fixture-data-before-using-it\"><a href=\"#Modifying-fixture-data-before-using-it\" class=\"headerlink\" title=\"Modifying fixture data before using it\"></a>Modifying fixture data before using it</h2><p>You can also modify fixture data directly before passing it along to the route.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .fixture(<span class=\"string\">\"user\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">user</span>)</span>&#123;</div><div class=\"line\">    user.firstName = <span class=\"string\">\"Jane\"</span></div><div class=\"line\"></div><div class=\"line\">    cy.route(<span class=\"string\">\"GET\"</span>, <span class=\"string\">\"/users/1\"</span>, user)</div><div class=\"line\">  &#125;)</div><div class=\"line\">  .visit(<span class=\"string\">\"/users\"</span>)</div><div class=\"line\">  .get(<span class=\"string\">\".user\"</span>).should(<span class=\"string\">\"include\"</span>, <span class=\"string\">\"Jane\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"fixture-does-not-log-in-the-command-log\"><a href=\"#fixture-does-not-log-in-the-command-log\" class=\"headerlink\" title=\"fixture does not log in the command log\"></a><code>fixture</code> does <em>not</em> log in the command log</h2><hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/guides/creating-fixtures\" target=\"_blank\" rel=\"external\">Guide: Creating Fixtures</a></li>\n<li><a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/bootstrapping_app_test_data_spec.js\" target=\"_blank\" rel=\"external\">Recipe: Bootstrapping App Test Data</a></li>\n<li><a href=\"https://on.cypress.io/api/route\" target=\"_blank\" rel=\"external\">route</a></li>\n<li><a href=\"https://on.cypress.io/api/then\" target=\"_blank\" rel=\"external\">then</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://on.cypress.io/guides/creating-fixtures\">Read about Creating Fixtures first.</a>“,<br>  “title”: “New to Cypress?”<br>}<br>[/block]</p>\n<p>Loads a single fixture file. Image fixtures will be sent as <code>base64</code>.</p>\n<p>If an extension is omitted, Cypress will attempt to resolve the fixture by order of these extensions:</p>\n<ul>\n<li><code>.json</code></li>\n<li><code>.js</code></li>\n<li><code>.coffee</code></li>\n<li><code>.html</code></li>\n<li><code>.txt</code></li>\n<li><code>.csv</code></li>\n<li><code>.png</code></li>\n<li><code>.jpg</code></li>\n<li><code>.jpeg</code></li>\n<li><code>.gif</code></li>\n<li><code>.tif</code></li>\n<li><code>.tiff</code></li>\n<li><code>.zip</code></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the contents of the file, formatted by file extension</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.fixture</code> will wait up for the duration of <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>responseTimeout</code></a> for the server to process this command.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-fixture-fixture\"><a href=\"#cy-fixture-fixture\" class=\"headerlink\" title=\"cy.fixture( fixture )\"></a><a href=\"#section-single-fixture-usage\">cy.fixture( <em>fixture</em> )</a></h1><p>Loads the fixture at the specified filepath within the <a href=\"https://on.cypress.io/guides/configuration#section-folders\"><code>fixturesFolder</code></a>, which defaults to <code>cypress/fixtures</code>.</p>\n<hr>\n<h1 id=\"cy-fixture-fixture-encoding\"><a href=\"#cy-fixture-fixture-encoding\" class=\"headerlink\" title=\"cy.fixture( fixture, encoding )\"></a><a href=\"#section-encoding\">cy.fixture( <em>fixture</em>, <em>encoding</em> )</a></h1><p>Loads the fixture at the specified filepath within the <a href=\"https://on.cypress.io/guides/configuration#section-folders\"><code>fixturesFolder</code></a>, which defaults to <code>cypress/fixtures</code>, using the encoding specified when reading the file.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.fixture</code>.</p>\n<p><strong><a href=\"#options-usage\">cy.fixture( <em>fixture</em>, <em>options</em> )</a></strong></p>\n<p><strong><a href=\"#options-usage\">cy.fixture( <em>fixture</em>, <em>encoding</em>, <em>options</em> )</a></strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>responseTimeout</code></a></td>\n<td>Total time to wait for the <code>cy.fixture</code> command to be processed</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Single-Fixture-Usage\"><a href=\"#Single-Fixture-Usage\" class=\"headerlink\" title=\"Single Fixture Usage\"></a>Single Fixture Usage</h1><h2 id=\"Load-the-users-json-fixture\"><a href=\"#Load-the-users-json-fixture\" class=\"headerlink\" title=\"Load the users.json fixture\"></a>Load the <code>users.json</code> fixture</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.fixture(<span class=\"string\">\"users.json\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Omit-the-fixture-file’s-extension\"><a href=\"#Omit-the-fixture-file’s-extension\" class=\"headerlink\" title=\"Omit the fixture file’s extension\"></a>Omit the fixture file’s extension</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.fixture(<span class=\"string\">\"admin\"</span>)</div></pre></td></tr></table></figure>\n<p>When no extension is passed to <code>cy.fixture</code>, Cypress will search for files with the specified name within the <a href=\"https://on.cypress.io/guides/configuration#section-folders\"><code>fixturesFolder</code></a>, which defaults to <code>cypress/fixtures</code>, and resolve the first one. The above example would resolve in the following order:</p>\n<ol>\n<li><code>{fixturesFolder}/admin.json</code></li>\n<li><code>{fixturesFolder}/admin.js</code></li>\n<li><code>{fixturesFolder}/admin.coffee</code></li>\n<li><code>{fixturesFolder}/admin.html</code></li>\n<li><code>{fixturesFolder}/admin.txt</code></li>\n<li><code>{fixturesFolder}/admin.csv</code></li>\n<li><code>{fixturesFolder}/admin.png</code></li>\n<li><code>{fixturesFolder}/admin.jpg</code></li>\n<li><code>{fixturesFolder}/admin.jpeg</code></li>\n<li><code>{fixturesFolder}/admin.gif</code></li>\n<li><code>{fixturesFolder}/admin.tif</code></li>\n<li><code>{fixturesFolder}/admin.tiff</code></li>\n<li><code>{fixturesFolder}/admin.zip</code></li>\n</ol>\n<hr>\n<h2 id=\"Image-fixtures-will-be-sent-by-default-as-base64\"><a href=\"#Image-fixtures-will-be-sent-by-default-as-base64\" class=\"headerlink\" title=\"Image fixtures will be sent by default as base64\"></a>Image fixtures will be sent by default as <code>base64</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.fixture(<span class=\"string\">\"images/logo.png\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">logo</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// logo will be encoded as base64</span></div><div class=\"line\">  <span class=\"comment\">// and should look something like this:</span></div><div class=\"line\">  <span class=\"comment\">// aIJKnwxydrB10NVWqhlmmC+ZiWs7otHotSAAAOw==...</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Change-encoding-of-Image-fixture\"><a href=\"#Change-encoding-of-Image-fixture\" class=\"headerlink\" title=\"Change encoding of Image fixture\"></a>Change encoding of Image fixture</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.fixture(<span class=\"string\">\"images/logo.png\"</span>, <span class=\"string\">\"binary\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">logo</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// logo will be encoded as binary</span></div><div class=\"line\">  <span class=\"comment\">// and should look something like this:</span></div><div class=\"line\">  <span class=\"comment\">// 000000000000000000000000000000000000000000...</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h1><h2 id=\"Nesting\"><a href=\"#Nesting\" class=\"headerlink\" title=\"Nesting\"></a>Nesting</h2><p>You can nest fixtures within folders and reference them by defining the path to the file:</p>\n<p><code>{fixturesFolder}/users/admin.json</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.fixture(<span class=\"string\">\"users/admin.json\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Validation\"><a href=\"#Validation\" class=\"headerlink\" title=\"Validation\"></a>Validation</h2><p>Cypress will automatically validate your fixtures. If your <code>.json</code>, <code>.js</code>, or <code>.coffee</code> files contain syntax errors, they will automatically be shown in the Command Log.</p>\n<hr>\n<h2 id=\"Formatting\"><a href=\"#Formatting\" class=\"headerlink\" title=\"Formatting\"></a>Formatting</h2><p>Cypress automatically formats your fixture files. That means you can paste in a single line of <code>json</code> and the next time Cypress serves this fixture, it will format / indent the <code>json</code>, which makes it easier to read and debug.</p>\n<hr>\n<h2 id=\"Encoding\"><a href=\"#Encoding\" class=\"headerlink\" title=\"Encoding\"></a>Encoding</h2><p>Cypress automatically determines the encoding for the following file types:</p>\n<ul>\n<li><code>.json</code></li>\n<li><code>.js</code></li>\n<li><code>.coffee</code></li>\n<li><code>.html</code></li>\n<li><code>.txt</code></li>\n<li><code>.csv</code></li>\n<li><code>.png</code></li>\n<li><code>.jpg</code></li>\n<li><code>.jpeg</code></li>\n<li><code>.gif</code></li>\n<li><code>.tif</code></li>\n<li><code>.tiff</code></li>\n<li><code>.zip</code></li>\n</ul>\n<p>For other types of files, they will be read as <code>utf8</code> by default. You can specify a different encoding by passing it as the <a href=\"https://on.cypress.io/api/fixture#section--cy-fixture-fixture-encoding-section-encoding-\">second argument</a>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.fixture(<span class=\"string\">\"foo.bmp\"</span>, <span class=\"string\">\"base64\"</span>)</div></pre></td></tr></table></figure>\n<p>The following encodings are supported:</p>\n<ul>\n<li><code>ascii</code></li>\n<li><code>base64</code></li>\n<li><code>binary</code></li>\n<li><code>hex</code></li>\n<li><code>latin1</code></li>\n<li><code>utf8</code></li>\n<li><code>utf-8</code></li>\n<li><code>ucs2</code></li>\n<li><code>ucs-2</code></li>\n<li><code>utf16le</code></li>\n<li><code>utf-16le</code></li>\n</ul>\n<hr>\n<h1 id=\"Usage-with-cy-route\"><a href=\"#Usage-with-cy-route\" class=\"headerlink\" title=\"Usage with cy.route()\"></a>Usage with <code>cy.route()</code></h1><h2 id=\"Using-fixture-or-fx-shortcuts\"><a href=\"#Using-fixture-or-fx-shortcuts\" class=\"headerlink\" title=\"Using fixture or fx shortcuts\"></a>Using fixture or fx shortcuts</h2><p>Fixtures can be referenced directly by the special keywords: <code>fixture:</code> or <code>fx:</code>.</p>\n<p>This enables you to set a fixture as the response for a route without having to first use the <code>cy.fixture</code> command.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.route(<span class=\"string\">\"GET\"</span>, /users/, <span class=\"string\">\"fixture:users\"</span>) <span class=\"comment\">// this works</span></div><div class=\"line\">cy.route(<span class=\"string\">\"GET\"</span>, /users/, <span class=\"string\">\"fx:users\"</span>)      <span class=\"comment\">// this also works</span></div></pre></td></tr></table></figure>\n<p>This saves you from having to explicitly load the fixture first (like <a href=\"https://on.cypress.io/api/fixture#section-using-cy-then-to-access-fixture-data\">below</a>).</p>\n<h2 id=\"Using-cy-then-to-access-fixture-data\"><a href=\"#Using-cy-then-to-access-fixture-data\" class=\"headerlink\" title=\"Using cy.then to access fixture data\"></a>Using cy.then to access fixture data</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .fixture(<span class=\"string\">\"users\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">json</span>)</span>&#123;</div><div class=\"line\">    cy.route(<span class=\"string\">\"GET\"</span>, /users/, json)</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/bootstrapping_app_test_data_spec.js\">Check out our example recipe using cy.fixture to bootstrap data for our application.</a>“,<br>  “title”: “Using cy.fixture for response data”<br>}<br>[/block]</p>\n<h2 id=\"Using-an-alias-to-access-a-fixture\"><a href=\"#Using-an-alias-to-access-a-fixture\" class=\"headerlink\" title=\"Using an alias to access a fixture\"></a>Using an alias to access a fixture</h2><p>However if you still need access to the fixture data, instead of <a href=\"https://on.cypress.io/api/fixture#section-using-cy-then-to-access-fixture-data\">yielding the fixture’s data</a>, we can make use of <a href=\"https://on.cypress.io/guides/using-aliases\">aliasing</a>.</p>\n<p>Using an alias provides the benefit of terseness and readability.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .fixture(<span class=\"string\">\"users\"</span>).as(<span class=\"string\">\"usersJSON\"</span>)</div><div class=\"line\">  .route(<span class=\"string\">\"GET\"</span>, /users/, <span class=\"string\">\"@usersJSON\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// ...later on...</span></div><div class=\"line\"></div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// we have access to this.usersJSON since it was aliased</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.usersJSON</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Modifying-fixture-data-before-using-it\"><a href=\"#Modifying-fixture-data-before-using-it\" class=\"headerlink\" title=\"Modifying fixture data before using it\"></a>Modifying fixture data before using it</h2><p>You can also modify fixture data directly before passing it along to the route.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .fixture(<span class=\"string\">\"user\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">user</span>)</span>&#123;</div><div class=\"line\">    user.firstName = <span class=\"string\">\"Jane\"</span></div><div class=\"line\"></div><div class=\"line\">    cy.route(<span class=\"string\">\"GET\"</span>, <span class=\"string\">\"/users/1\"</span>, user)</div><div class=\"line\">  &#125;)</div><div class=\"line\">  .visit(<span class=\"string\">\"/users\"</span>)</div><div class=\"line\">  .get(<span class=\"string\">\".user\"</span>).should(<span class=\"string\">\"include\"</span>, <span class=\"string\">\"Jane\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"fixture-does-not-log-in-the-command-log\"><a href=\"#fixture-does-not-log-in-the-command-log\" class=\"headerlink\" title=\"fixture does not log in the command log\"></a><code>fixture</code> does <em>not</em> log in the command log</h2><hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/guides/creating-fixtures\">Guide: Creating Fixtures</a></li>\n<li><a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/bootstrapping_app_test_data_spec.js\">Recipe: Bootstrapping App Test Data</a></li>\n<li><a href=\"https://on.cypress.io/api/route\">route</a></li>\n<li><a href=\"https://on.cypress.io/api/then\">then</a></li>\n</ul>\n"},{"title":"focus","_content":"\nFocus on a DOM element. If there is currently a different DOM element currently with focus, Cypress will issue a `blur` event to that element first.\n\n**The following events are fired during focus:** `focusin`, `focus`\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.focus` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.focus()](#section-usage)\n\nFocus on the DOM element found in the previous command.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.focus`.\n\n**cy.focus( *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Focus on the current subject.\n\n```javascript\ncy.get(\"[name='comment']\").focus()\n```\n\nFocus, type, and blur the current subject.\n\n```javascript\n// returns the <textarea> for further chaining\ncy.get(\"[name='comment']\").focus().type(\"Nice Product!\").blur()\n```\n\n***\n\n# Command Log\n\n## Focus the textarea.\n\n```javascript\ncy.get(\"[name='comment']\").focus()\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"524\" alt=\"screen shot 2015-11-27 at 1 32 37 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446856/6c2c36f4-950b-11e5-89c6-9bf14a448b23.png\">\n\nWhen clicking on the `focus` command within the command log, the console outputs the following:\n\n<img width=\"526\" alt=\"screen shot 2015-11-27 at 1 33 00 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446857/703fa6c2-950b-11e5-9686-ce6b558cfd92.png\">\n\n***\n\n# Errors\n\n## cy.focus() can only be called on a valid focusable element.\n\nEnsure the element you are trying to call `cy.focus()` on is a [focusable element](https://www.w3.org/TR/html5/editing.html#focusable). Most commonly, you'll want to ensure that the element is not disabled although there are [other factors](https://www.w3.org/TR/html5/editing.html#focusable).\n\n## cy.focus() timed out because your browser did not receive any focus events. This is a known bug in Chrome when it is not the currently focused window.\n\nIf you see this error, you may want to ensure that the main browser window is currently focused. This means not being focused in debugger or any other window when the command is executed.\n\n# Related\n\n- [focused](https://on.cypress.io/api/focused)\n- [blur](https://on.cypress.io/api/blur)\n- [click](https://on.cypress.io/api/click)","source":"api/commands/focus.md","raw":"title: focus\n---\n\nFocus on a DOM element. If there is currently a different DOM element currently with focus, Cypress will issue a `blur` event to that element first.\n\n**The following events are fired during focus:** `focusin`, `focus`\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.focus` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.focus()](#section-usage)\n\nFocus on the DOM element found in the previous command.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.focus`.\n\n**cy.focus( *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Focus on the current subject.\n\n```javascript\ncy.get(\"[name='comment']\").focus()\n```\n\nFocus, type, and blur the current subject.\n\n```javascript\n// returns the <textarea> for further chaining\ncy.get(\"[name='comment']\").focus().type(\"Nice Product!\").blur()\n```\n\n***\n\n# Command Log\n\n## Focus the textarea.\n\n```javascript\ncy.get(\"[name='comment']\").focus()\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"524\" alt=\"screen shot 2015-11-27 at 1 32 37 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446856/6c2c36f4-950b-11e5-89c6-9bf14a448b23.png\">\n\nWhen clicking on the `focus` command within the command log, the console outputs the following:\n\n<img width=\"526\" alt=\"screen shot 2015-11-27 at 1 33 00 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446857/703fa6c2-950b-11e5-9686-ce6b558cfd92.png\">\n\n***\n\n# Errors\n\n## cy.focus() can only be called on a valid focusable element.\n\nEnsure the element you are trying to call `cy.focus()` on is a [focusable element](https://www.w3.org/TR/html5/editing.html#focusable). Most commonly, you'll want to ensure that the element is not disabled although there are [other factors](https://www.w3.org/TR/html5/editing.html#focusable).\n\n## cy.focus() timed out because your browser did not receive any focus events. This is a known bug in Chrome when it is not the currently focused window.\n\nIf you see this error, you may want to ensure that the main browser window is currently focused. This means not being focused in debugger or any other window when the command is executed.\n\n# Related\n\n- [focused](https://on.cypress.io/api/focused)\n- [blur](https://on.cypress.io/api/blur)\n- [click](https://on.cypress.io/api/click)","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/focus.html","comments":1,"layout":"page","_id":"cj1pc2g8b000pk1g8z96eteqx","content":"<p>Focus on a DOM element. If there is currently a different DOM element currently with focus, Cypress will issue a <code>blur</code> event to that element first.</p>\n<p><strong>The following events are fired during focus:</strong> <code>focusin</code>, <code>focus</code></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.focus</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-focus\"><a href=\"#cy-focus\" class=\"headerlink\" title=\"cy.focus()\"></a><a href=\"#section-usage\">cy.focus()</a></h1><p>Focus on the DOM element found in the previous command.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.focus</code>.</p>\n<p><strong>cy.focus( <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Focus-on-the-current-subject\"><a href=\"#Focus-on-the-current-subject\" class=\"headerlink\" title=\"Focus on the current subject.\"></a>Focus on the current subject.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"[name='comment']\"</span>).focus()</div></pre></td></tr></table></figure>\n<p>Focus, type, and blur the current subject.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns the &lt;textarea&gt; for further chaining</span></div><div class=\"line\">cy.get(<span class=\"string\">\"[name='comment']\"</span>).focus().type(<span class=\"string\">\"Nice Product!\"</span>).blur()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Focus-the-textarea\"><a href=\"#Focus-the-textarea\" class=\"headerlink\" title=\"Focus the textarea.\"></a>Focus the textarea.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"[name='comment']\"</span>).focus()</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"524\" alt=\"screen shot 2015-11-27 at 1 32 37 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446856/6c2c36f4-950b-11e5-89c6-9bf14a448b23.png\"></p>\n<p>When clicking on the <code>focus</code> command within the command log, the console outputs the following:</p>\n<p><img width=\"526\" alt=\"screen shot 2015-11-27 at 1 33 00 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446857/703fa6c2-950b-11e5-9686-ce6b558cfd92.png\"></p>\n<hr>\n<h1 id=\"Errors\"><a href=\"#Errors\" class=\"headerlink\" title=\"Errors\"></a>Errors</h1><h2 id=\"cy-focus-can-only-be-called-on-a-valid-focusable-element\"><a href=\"#cy-focus-can-only-be-called-on-a-valid-focusable-element\" class=\"headerlink\" title=\"cy.focus() can only be called on a valid focusable element.\"></a>cy.focus() can only be called on a valid focusable element.</h2><p>Ensure the element you are trying to call <code>cy.focus()</code> on is a <a href=\"https://www.w3.org/TR/html5/editing.html#focusable\" target=\"_blank\" rel=\"external\">focusable element</a>. Most commonly, you’ll want to ensure that the element is not disabled although there are <a href=\"https://www.w3.org/TR/html5/editing.html#focusable\" target=\"_blank\" rel=\"external\">other factors</a>.</p>\n<h2 id=\"cy-focus-timed-out-because-your-browser-did-not-receive-any-focus-events-This-is-a-known-bug-in-Chrome-when-it-is-not-the-currently-focused-window\"><a href=\"#cy-focus-timed-out-because-your-browser-did-not-receive-any-focus-events-This-is-a-known-bug-in-Chrome-when-it-is-not-the-currently-focused-window\" class=\"headerlink\" title=\"cy.focus() timed out because your browser did not receive any focus events. This is a known bug in Chrome when it is not the currently focused window.\"></a>cy.focus() timed out because your browser did not receive any focus events. This is a known bug in Chrome when it is not the currently focused window.</h2><p>If you see this error, you may want to ensure that the main browser window is currently focused. This means not being focused in debugger or any other window when the command is executed.</p>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/focused\" target=\"_blank\" rel=\"external\">focused</a></li>\n<li><a href=\"https://on.cypress.io/api/blur\" target=\"_blank\" rel=\"external\">blur</a></li>\n<li><a href=\"https://on.cypress.io/api/click\" target=\"_blank\" rel=\"external\">click</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Focus on a DOM element. If there is currently a different DOM element currently with focus, Cypress will issue a <code>blur</code> event to that element first.</p>\n<p><strong>The following events are fired during focus:</strong> <code>focusin</code>, <code>focus</code></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.focus</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-focus\"><a href=\"#cy-focus\" class=\"headerlink\" title=\"cy.focus()\"></a><a href=\"#section-usage\">cy.focus()</a></h1><p>Focus on the DOM element found in the previous command.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.focus</code>.</p>\n<p><strong>cy.focus( <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Focus-on-the-current-subject\"><a href=\"#Focus-on-the-current-subject\" class=\"headerlink\" title=\"Focus on the current subject.\"></a>Focus on the current subject.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"[name='comment']\"</span>).focus()</div></pre></td></tr></table></figure>\n<p>Focus, type, and blur the current subject.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns the &lt;textarea&gt; for further chaining</span></div><div class=\"line\">cy.get(<span class=\"string\">\"[name='comment']\"</span>).focus().type(<span class=\"string\">\"Nice Product!\"</span>).blur()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Focus-the-textarea\"><a href=\"#Focus-the-textarea\" class=\"headerlink\" title=\"Focus the textarea.\"></a>Focus the textarea.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"[name='comment']\"</span>).focus()</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"524\" alt=\"screen shot 2015-11-27 at 1 32 37 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446856/6c2c36f4-950b-11e5-89c6-9bf14a448b23.png\"></p>\n<p>When clicking on the <code>focus</code> command within the command log, the console outputs the following:</p>\n<p><img width=\"526\" alt=\"screen shot 2015-11-27 at 1 33 00 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446857/703fa6c2-950b-11e5-9686-ce6b558cfd92.png\"></p>\n<hr>\n<h1 id=\"Errors\"><a href=\"#Errors\" class=\"headerlink\" title=\"Errors\"></a>Errors</h1><h2 id=\"cy-focus-can-only-be-called-on-a-valid-focusable-element\"><a href=\"#cy-focus-can-only-be-called-on-a-valid-focusable-element\" class=\"headerlink\" title=\"cy.focus() can only be called on a valid focusable element.\"></a>cy.focus() can only be called on a valid focusable element.</h2><p>Ensure the element you are trying to call <code>cy.focus()</code> on is a <a href=\"https://www.w3.org/TR/html5/editing.html#focusable\">focusable element</a>. Most commonly, you’ll want to ensure that the element is not disabled although there are <a href=\"https://www.w3.org/TR/html5/editing.html#focusable\">other factors</a>.</p>\n<h2 id=\"cy-focus-timed-out-because-your-browser-did-not-receive-any-focus-events-This-is-a-known-bug-in-Chrome-when-it-is-not-the-currently-focused-window\"><a href=\"#cy-focus-timed-out-because-your-browser-did-not-receive-any-focus-events-This-is-a-known-bug-in-Chrome-when-it-is-not-the-currently-focused-window\" class=\"headerlink\" title=\"cy.focus() timed out because your browser did not receive any focus events. This is a known bug in Chrome when it is not the currently focused window.\"></a>cy.focus() timed out because your browser did not receive any focus events. This is a known bug in Chrome when it is not the currently focused window.</h2><p>If you see this error, you may want to ensure that the main browser window is currently focused. This means not being focused in debugger or any other window when the command is executed.</p>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/focused\">focused</a></li>\n<li><a href=\"https://on.cypress.io/api/blur\">blur</a></li>\n<li><a href=\"https://on.cypress.io/api/click\">click</a></li>\n</ul>\n"},{"title":"focused","_content":"\nGet the DOM element that is currently focused.\n\n| | |\n|--- | --- |\n| **Returns** | the current DOM element that is focused or `null` |\n| **Timeout** | `cy.focused` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.focused()](#section-usage)\n\nGet the focused DOM element.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.focused`.\n\n**cy.focused( *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Get the element that is focused.\n\n```javascript\ncy.focused()\n```\n\n***\n\n## Make an assertion on the focused element.\n\n```javascript\ncy.focused().should(\"have.attr\", \"name\", \"username\")\n```\n\n***\n\n# Command Log\n\n## Make an assertion on the focused element.\n\n```javascript\ncy.focused().should(\"have.attr\", \"name\").and(\"eq\", \"num\")\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"523\" alt=\"screen shot 2015-11-27 at 1 01 51 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446780/f71fb350-9509-11e5-963a-a6940fbc63b6.png\">\n\nWhen clicking on the `focused` command within the command log, the console outputs the following:\n\n<img width=\"407\" alt=\"screen shot 2015-11-27 at 1 02 02 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446771/d104a6d0-9509-11e5-9464-2e397cb1eb24.png\">\n\n***\n\n# Related\n\n- [focus](https://on.cypress.io/api/focus)\n- [blur](https://on.cypress.io/api/blur)","source":"api/commands/focused.md","raw":"title: focused\n---\n\nGet the DOM element that is currently focused.\n\n| | |\n|--- | --- |\n| **Returns** | the current DOM element that is focused or `null` |\n| **Timeout** | `cy.focused` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.focused()](#section-usage)\n\nGet the focused DOM element.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.focused`.\n\n**cy.focused( *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Get the element that is focused.\n\n```javascript\ncy.focused()\n```\n\n***\n\n## Make an assertion on the focused element.\n\n```javascript\ncy.focused().should(\"have.attr\", \"name\", \"username\")\n```\n\n***\n\n# Command Log\n\n## Make an assertion on the focused element.\n\n```javascript\ncy.focused().should(\"have.attr\", \"name\").and(\"eq\", \"num\")\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"523\" alt=\"screen shot 2015-11-27 at 1 01 51 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446780/f71fb350-9509-11e5-963a-a6940fbc63b6.png\">\n\nWhen clicking on the `focused` command within the command log, the console outputs the following:\n\n<img width=\"407\" alt=\"screen shot 2015-11-27 at 1 02 02 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446771/d104a6d0-9509-11e5-9464-2e397cb1eb24.png\">\n\n***\n\n# Related\n\n- [focus](https://on.cypress.io/api/focus)\n- [blur](https://on.cypress.io/api/blur)","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/focused.html","comments":1,"layout":"page","_id":"cj1pc2g8b000qk1g8b6xv5e8r","content":"<p>Get the DOM element that is currently focused.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the current DOM element that is focused or <code>null</code></td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.focused</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-focused\"><a href=\"#cy-focused\" class=\"headerlink\" title=\"cy.focused()\"></a><a href=\"#section-usage\">cy.focused()</a></h1><p>Get the focused DOM element.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.focused</code>.</p>\n<p><strong>cy.focused( <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Get-the-element-that-is-focused\"><a href=\"#Get-the-element-that-is-focused\" class=\"headerlink\" title=\"Get the element that is focused.\"></a>Get the element that is focused.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.focused()</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Make-an-assertion-on-the-focused-element\"><a href=\"#Make-an-assertion-on-the-focused-element\" class=\"headerlink\" title=\"Make an assertion on the focused element.\"></a>Make an assertion on the focused element.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.focused().should(<span class=\"string\">\"have.attr\"</span>, <span class=\"string\">\"name\"</span>, <span class=\"string\">\"username\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Make-an-assertion-on-the-focused-element-1\"><a href=\"#Make-an-assertion-on-the-focused-element-1\" class=\"headerlink\" title=\"Make an assertion on the focused element.\"></a>Make an assertion on the focused element.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.focused().should(<span class=\"string\">\"have.attr\"</span>, <span class=\"string\">\"name\"</span>).and(<span class=\"string\">\"eq\"</span>, <span class=\"string\">\"num\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"523\" alt=\"screen shot 2015-11-27 at 1 01 51 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446780/f71fb350-9509-11e5-963a-a6940fbc63b6.png\"></p>\n<p>When clicking on the <code>focused</code> command within the command log, the console outputs the following:</p>\n<p><img width=\"407\" alt=\"screen shot 2015-11-27 at 1 02 02 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446771/d104a6d0-9509-11e5-9464-2e397cb1eb24.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/focus\" target=\"_blank\" rel=\"external\">focus</a></li>\n<li><a href=\"https://on.cypress.io/api/blur\" target=\"_blank\" rel=\"external\">blur</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Get the DOM element that is currently focused.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the current DOM element that is focused or <code>null</code></td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.focused</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-focused\"><a href=\"#cy-focused\" class=\"headerlink\" title=\"cy.focused()\"></a><a href=\"#section-usage\">cy.focused()</a></h1><p>Get the focused DOM element.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.focused</code>.</p>\n<p><strong>cy.focused( <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Get-the-element-that-is-focused\"><a href=\"#Get-the-element-that-is-focused\" class=\"headerlink\" title=\"Get the element that is focused.\"></a>Get the element that is focused.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.focused()</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Make-an-assertion-on-the-focused-element\"><a href=\"#Make-an-assertion-on-the-focused-element\" class=\"headerlink\" title=\"Make an assertion on the focused element.\"></a>Make an assertion on the focused element.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.focused().should(<span class=\"string\">\"have.attr\"</span>, <span class=\"string\">\"name\"</span>, <span class=\"string\">\"username\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Make-an-assertion-on-the-focused-element-1\"><a href=\"#Make-an-assertion-on-the-focused-element-1\" class=\"headerlink\" title=\"Make an assertion on the focused element.\"></a>Make an assertion on the focused element.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.focused().should(<span class=\"string\">\"have.attr\"</span>, <span class=\"string\">\"name\"</span>).and(<span class=\"string\">\"eq\"</span>, <span class=\"string\">\"num\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"523\" alt=\"screen shot 2015-11-27 at 1 01 51 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446780/f71fb350-9509-11e5-963a-a6940fbc63b6.png\"></p>\n<p>When clicking on the <code>focused</code> command within the command log, the console outputs the following:</p>\n<p><img width=\"407\" alt=\"screen shot 2015-11-27 at 1 02 02 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446771/d104a6d0-9509-11e5-9464-2e397cb1eb24.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/focus\">focus</a></li>\n<li><a href=\"https://on.cypress.io/api/blur\">blur</a></li>\n</ul>\n"},{"title":"get","_content":"\nGet one or more DOM elements by selector or [alias](https://on.cypress.io/guides/using-aliases).\n\n`cy.get` supports all CSS based selectors. It is analogous to jQuery's `$(...)` in that any selector you pass to jQuery you can also pass to `cy.get`.\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.get` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.get( *selector* )](#section-selector-usage)\n\nFinds one or more DOM elements based on the selector.\n\n***\n\n# [cy.get( *alias* )](#section-alias-usage)\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Read about using aliases first.](https://on.cypress.io/guides/using-aliases)\",\n  \"title\": \"New to Cypress?\"\n}\n[/block]\n\nYou can pass in the `@` character and the name of an alias as a parameter to find an [aliased](https://on.cypress.io/guides/using-aliases) element.\n\nInternally Cypress keeps a cache of all aliased elements.  If the element currently exists in the DOM, it is immediately returned.  If the element no longer exists, Cypress will re-query the element based on the previous selector path to find it again.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.get`.\n\n**cy.get( *selector*, *options* )**\n**cy.get( *alias*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry getting the element\n\n***\n\n# Selector Usage\n\n## Find the element with an id of main\n\n```javascript\ncy.get(\"#main\")\n```\n\n***\n\n## Find the first `li` descendent within a `ul`\n\n```javascript\ncy.get(\"ul li:first\")\n```\n\n***\n\n## Find the element with class dropdown-menu and click it.\n\n```javascript\ncy\n  .get(\".dropdown-menu\").click()\n\n  // Break out of the previous command chain and\n  // query for #search from the root document.\n  .get(\"#search\").type(\"mogwai\")\n```\n\n***\n\n## Reset the current scope in a [`cy.within`](https://on.cypress.io/api/within)\n\n```javascript\n// Find form and scope all new queries to within form.\ncy.get(\"form\").within(function(){\n  cy\n    // Find the input within form and type Pamela\n    .get(\"input\").type(\"Pamela\")\n    // Find the element textarea within form and type in it\n    .get(\"textarea\").type(\"is a developer\")\n})\n```\n\n***\n\n# Alias Usage\n\nFor a detailed explanation of aliasing, [read more about aliasing here](https://on.cypress.io/guides/using-aliases).\n\n## Retrieve aliased `todos` elements\n\n```javascript\ncy.get(\"ul#todos\").as(\"todos\")\n\n//...hack hack hack...\n\n//later retrieve the todos\ncy.get(\"@todos\")\n```\n\n***\n\n## Alias the `submitBtn` in a `beforeEach`\n\n```javascript\nbeforeEach(function(){\n  cy.get(\"button[type=submit]\").as(\"submitBtn\")\n})\n\nit(\"disables on click\", function(){\n  cy.get(\"@submitBtn\").should(\"be.disabled\")\n})\n```\n\n***\n\n# Command Log\n\n## Get an input and assert on the value\n\n```javascript\ncy\n  .get(\"input[name='firstName']\")\n  .should(\"have.value\", \"Homer\")\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"524\" alt=\"screen shot 2015-11-27 at 1 24 20 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446808/5d2f2180-950a-11e5-8645-4f0f14321f86.png\">\n\nWhen clicking on the `get` command within the command log, the console outputs the following:\n\n<img width=\"543\" alt=\"screen shot 2015-11-27 at 1 24 45 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446809/61a6f4f4-950a-11e5-9b23-a9efa1fbccfc.png\">\n\n# Related\n\n- [contains](https://on.cypress.io/api/contains)\n- [within](https://on.cypress.io/api/within)\n- [find](https://on.cypress.io/api/find)\n- [root](https://on.cypress.io/api/root)","source":"api/commands/get.md","raw":"title: get\n---\n\nGet one or more DOM elements by selector or [alias](https://on.cypress.io/guides/using-aliases).\n\n`cy.get` supports all CSS based selectors. It is analogous to jQuery's `$(...)` in that any selector you pass to jQuery you can also pass to `cy.get`.\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.get` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.get( *selector* )](#section-selector-usage)\n\nFinds one or more DOM elements based on the selector.\n\n***\n\n# [cy.get( *alias* )](#section-alias-usage)\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Read about using aliases first.](https://on.cypress.io/guides/using-aliases)\",\n  \"title\": \"New to Cypress?\"\n}\n[/block]\n\nYou can pass in the `@` character and the name of an alias as a parameter to find an [aliased](https://on.cypress.io/guides/using-aliases) element.\n\nInternally Cypress keeps a cache of all aliased elements.  If the element currently exists in the DOM, it is immediately returned.  If the element no longer exists, Cypress will re-query the element based on the previous selector path to find it again.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.get`.\n\n**cy.get( *selector*, *options* )**\n**cy.get( *alias*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry getting the element\n\n***\n\n# Selector Usage\n\n## Find the element with an id of main\n\n```javascript\ncy.get(\"#main\")\n```\n\n***\n\n## Find the first `li` descendent within a `ul`\n\n```javascript\ncy.get(\"ul li:first\")\n```\n\n***\n\n## Find the element with class dropdown-menu and click it.\n\n```javascript\ncy\n  .get(\".dropdown-menu\").click()\n\n  // Break out of the previous command chain and\n  // query for #search from the root document.\n  .get(\"#search\").type(\"mogwai\")\n```\n\n***\n\n## Reset the current scope in a [`cy.within`](https://on.cypress.io/api/within)\n\n```javascript\n// Find form and scope all new queries to within form.\ncy.get(\"form\").within(function(){\n  cy\n    // Find the input within form and type Pamela\n    .get(\"input\").type(\"Pamela\")\n    // Find the element textarea within form and type in it\n    .get(\"textarea\").type(\"is a developer\")\n})\n```\n\n***\n\n# Alias Usage\n\nFor a detailed explanation of aliasing, [read more about aliasing here](https://on.cypress.io/guides/using-aliases).\n\n## Retrieve aliased `todos` elements\n\n```javascript\ncy.get(\"ul#todos\").as(\"todos\")\n\n//...hack hack hack...\n\n//later retrieve the todos\ncy.get(\"@todos\")\n```\n\n***\n\n## Alias the `submitBtn` in a `beforeEach`\n\n```javascript\nbeforeEach(function(){\n  cy.get(\"button[type=submit]\").as(\"submitBtn\")\n})\n\nit(\"disables on click\", function(){\n  cy.get(\"@submitBtn\").should(\"be.disabled\")\n})\n```\n\n***\n\n# Command Log\n\n## Get an input and assert on the value\n\n```javascript\ncy\n  .get(\"input[name='firstName']\")\n  .should(\"have.value\", \"Homer\")\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"524\" alt=\"screen shot 2015-11-27 at 1 24 20 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446808/5d2f2180-950a-11e5-8645-4f0f14321f86.png\">\n\nWhen clicking on the `get` command within the command log, the console outputs the following:\n\n<img width=\"543\" alt=\"screen shot 2015-11-27 at 1 24 45 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446809/61a6f4f4-950a-11e5-9b23-a9efa1fbccfc.png\">\n\n# Related\n\n- [contains](https://on.cypress.io/api/contains)\n- [within](https://on.cypress.io/api/within)\n- [find](https://on.cypress.io/api/find)\n- [root](https://on.cypress.io/api/root)","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/get.html","comments":1,"layout":"page","_id":"cj1pc2g8c000rk1g8dw3oc0gm","content":"<p>Get one or more DOM elements by selector or <a href=\"https://on.cypress.io/guides/using-aliases\" target=\"_blank\" rel=\"external\">alias</a>.</p>\n<p><code>cy.get</code> supports all CSS based selectors. It is analogous to jQuery’s <code>$(...)</code> in that any selector you pass to jQuery you can also pass to <code>cy.get</code>.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.get</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-get-selector\"><a href=\"#cy-get-selector\" class=\"headerlink\" title=\"cy.get( selector )\"></a><a href=\"#section-selector-usage\">cy.get( <em>selector</em> )</a></h1><p>Finds one or more DOM elements based on the selector.</p>\n<hr>\n<h1 id=\"cy-get-alias\"><a href=\"#cy-get-alias\" class=\"headerlink\" title=\"cy.get( alias )\"></a><a href=\"#section-alias-usage\">cy.get( <em>alias</em> )</a></h1><p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://on.cypress.io/guides/using-aliases\" target=\"_blank\" rel=\"external\">Read about using aliases first.</a>“,<br>  “title”: “New to Cypress?”<br>}<br>[/block]</p>\n<p>You can pass in the <code>@</code> character and the name of an alias as a parameter to find an <a href=\"https://on.cypress.io/guides/using-aliases\" target=\"_blank\" rel=\"external\">aliased</a> element.</p>\n<p>Internally Cypress keeps a cache of all aliased elements.  If the element currently exists in the DOM, it is immediately returned.  If the element no longer exists, Cypress will re-query the element based on the previous selector path to find it again.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.get</code>.</p>\n<p><strong>cy.get( <em>selector</em>, <em>options</em> )</strong><br><strong>cy.get( <em>alias</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry getting the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Selector-Usage\"><a href=\"#Selector-Usage\" class=\"headerlink\" title=\"Selector Usage\"></a>Selector Usage</h1><h2 id=\"Find-the-element-with-an-id-of-main\"><a href=\"#Find-the-element-with-an-id-of-main\" class=\"headerlink\" title=\"Find the element with an id of main\"></a>Find the element with an id of main</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"#main\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Find-the-first-li-descendent-within-a-ul\"><a href=\"#Find-the-first-li-descendent-within-a-ul\" class=\"headerlink\" title=\"Find the first li descendent within a ul\"></a>Find the first <code>li</code> descendent within a <code>ul</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"ul li:first\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Find-the-element-with-class-dropdown-menu-and-click-it\"><a href=\"#Find-the-element-with-class-dropdown-menu-and-click-it\" class=\"headerlink\" title=\"Find the element with class dropdown-menu and click it.\"></a>Find the element with class dropdown-menu and click it.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\".dropdown-menu\"</span>).click()</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Break out of the previous command chain and</span></div><div class=\"line\">  <span class=\"comment\">// query for #search from the root document.</span></div><div class=\"line\">  .get(<span class=\"string\">\"#search\"</span>).type(<span class=\"string\">\"mogwai\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Reset-the-current-scope-in-a-cy-within\"><a href=\"#Reset-the-current-scope-in-a-cy-within\" class=\"headerlink\" title=\"Reset the current scope in a cy.within\"></a>Reset the current scope in a <a href=\"https://on.cypress.io/api/within\" target=\"_blank\" rel=\"external\"><code>cy.within</code></a></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Find form and scope all new queries to within form.</span></div><div class=\"line\">cy.get(<span class=\"string\">\"form\"</span>).within(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  cy</div><div class=\"line\">    <span class=\"comment\">// Find the input within form and type Pamela</span></div><div class=\"line\">    .get(<span class=\"string\">\"input\"</span>).type(<span class=\"string\">\"Pamela\"</span>)</div><div class=\"line\">    <span class=\"comment\">// Find the element textarea within form and type in it</span></div><div class=\"line\">    .get(<span class=\"string\">\"textarea\"</span>).type(<span class=\"string\">\"is a developer\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Alias-Usage\"><a href=\"#Alias-Usage\" class=\"headerlink\" title=\"Alias Usage\"></a>Alias Usage</h1><p>For a detailed explanation of aliasing, <a href=\"https://on.cypress.io/guides/using-aliases\" target=\"_blank\" rel=\"external\">read more about aliasing here</a>.</p>\n<h2 id=\"Retrieve-aliased-todos-elements\"><a href=\"#Retrieve-aliased-todos-elements\" class=\"headerlink\" title=\"Retrieve aliased todos elements\"></a>Retrieve aliased <code>todos</code> elements</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"ul#todos\"</span>).as(<span class=\"string\">\"todos\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//...hack hack hack...</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//later retrieve the todos</span></div><div class=\"line\">cy.get(<span class=\"string\">\"@todos\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Alias-the-submitBtn-in-a-beforeEach\"><a href=\"#Alias-the-submitBtn-in-a-beforeEach\" class=\"headerlink\" title=\"Alias the submitBtn in a beforeEach\"></a>Alias the <code>submitBtn</code> in a <code>beforeEach</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">beforeEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  cy.get(<span class=\"string\">\"button[type=submit]\"</span>).as(<span class=\"string\">\"submitBtn\"</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">it(<span class=\"string\">\"disables on click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  cy.get(<span class=\"string\">\"@submitBtn\"</span>).should(<span class=\"string\">\"be.disabled\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Get-an-input-and-assert-on-the-value\"><a href=\"#Get-an-input-and-assert-on-the-value\" class=\"headerlink\" title=\"Get an input and assert on the value\"></a>Get an input and assert on the value</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"input[name='firstName']\"</span>)</div><div class=\"line\">  .should(<span class=\"string\">\"have.value\"</span>, <span class=\"string\">\"Homer\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"524\" alt=\"screen shot 2015-11-27 at 1 24 20 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446808/5d2f2180-950a-11e5-8645-4f0f14321f86.png\"></p>\n<p>When clicking on the <code>get</code> command within the command log, the console outputs the following:</p>\n<p><img width=\"543\" alt=\"screen shot 2015-11-27 at 1 24 45 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446809/61a6f4f4-950a-11e5-9b23-a9efa1fbccfc.png\"></p>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/contains\" target=\"_blank\" rel=\"external\">contains</a></li>\n<li><a href=\"https://on.cypress.io/api/within\" target=\"_blank\" rel=\"external\">within</a></li>\n<li><a href=\"https://on.cypress.io/api/find\" target=\"_blank\" rel=\"external\">find</a></li>\n<li><a href=\"https://on.cypress.io/api/root\" target=\"_blank\" rel=\"external\">root</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Get one or more DOM elements by selector or <a href=\"https://on.cypress.io/guides/using-aliases\">alias</a>.</p>\n<p><code>cy.get</code> supports all CSS based selectors. It is analogous to jQuery’s <code>$(...)</code> in that any selector you pass to jQuery you can also pass to <code>cy.get</code>.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.get</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-get-selector\"><a href=\"#cy-get-selector\" class=\"headerlink\" title=\"cy.get( selector )\"></a><a href=\"#section-selector-usage\">cy.get( <em>selector</em> )</a></h1><p>Finds one or more DOM elements based on the selector.</p>\n<hr>\n<h1 id=\"cy-get-alias\"><a href=\"#cy-get-alias\" class=\"headerlink\" title=\"cy.get( alias )\"></a><a href=\"#section-alias-usage\">cy.get( <em>alias</em> )</a></h1><p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://on.cypress.io/guides/using-aliases\">Read about using aliases first.</a>“,<br>  “title”: “New to Cypress?”<br>}<br>[/block]</p>\n<p>You can pass in the <code>@</code> character and the name of an alias as a parameter to find an <a href=\"https://on.cypress.io/guides/using-aliases\">aliased</a> element.</p>\n<p>Internally Cypress keeps a cache of all aliased elements.  If the element currently exists in the DOM, it is immediately returned.  If the element no longer exists, Cypress will re-query the element based on the previous selector path to find it again.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.get</code>.</p>\n<p><strong>cy.get( <em>selector</em>, <em>options</em> )</strong><br><strong>cy.get( <em>alias</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry getting the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Selector-Usage\"><a href=\"#Selector-Usage\" class=\"headerlink\" title=\"Selector Usage\"></a>Selector Usage</h1><h2 id=\"Find-the-element-with-an-id-of-main\"><a href=\"#Find-the-element-with-an-id-of-main\" class=\"headerlink\" title=\"Find the element with an id of main\"></a>Find the element with an id of main</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"#main\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Find-the-first-li-descendent-within-a-ul\"><a href=\"#Find-the-first-li-descendent-within-a-ul\" class=\"headerlink\" title=\"Find the first li descendent within a ul\"></a>Find the first <code>li</code> descendent within a <code>ul</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"ul li:first\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Find-the-element-with-class-dropdown-menu-and-click-it\"><a href=\"#Find-the-element-with-class-dropdown-menu-and-click-it\" class=\"headerlink\" title=\"Find the element with class dropdown-menu and click it.\"></a>Find the element with class dropdown-menu and click it.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\".dropdown-menu\"</span>).click()</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Break out of the previous command chain and</span></div><div class=\"line\">  <span class=\"comment\">// query for #search from the root document.</span></div><div class=\"line\">  .get(<span class=\"string\">\"#search\"</span>).type(<span class=\"string\">\"mogwai\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Reset-the-current-scope-in-a-cy-within\"><a href=\"#Reset-the-current-scope-in-a-cy-within\" class=\"headerlink\" title=\"Reset the current scope in a cy.within\"></a>Reset the current scope in a <a href=\"https://on.cypress.io/api/within\"><code>cy.within</code></a></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Find form and scope all new queries to within form.</span></div><div class=\"line\">cy.get(<span class=\"string\">\"form\"</span>).within(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  cy</div><div class=\"line\">    <span class=\"comment\">// Find the input within form and type Pamela</span></div><div class=\"line\">    .get(<span class=\"string\">\"input\"</span>).type(<span class=\"string\">\"Pamela\"</span>)</div><div class=\"line\">    <span class=\"comment\">// Find the element textarea within form and type in it</span></div><div class=\"line\">    .get(<span class=\"string\">\"textarea\"</span>).type(<span class=\"string\">\"is a developer\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Alias-Usage\"><a href=\"#Alias-Usage\" class=\"headerlink\" title=\"Alias Usage\"></a>Alias Usage</h1><p>For a detailed explanation of aliasing, <a href=\"https://on.cypress.io/guides/using-aliases\">read more about aliasing here</a>.</p>\n<h2 id=\"Retrieve-aliased-todos-elements\"><a href=\"#Retrieve-aliased-todos-elements\" class=\"headerlink\" title=\"Retrieve aliased todos elements\"></a>Retrieve aliased <code>todos</code> elements</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"ul#todos\"</span>).as(<span class=\"string\">\"todos\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//...hack hack hack...</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//later retrieve the todos</span></div><div class=\"line\">cy.get(<span class=\"string\">\"@todos\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Alias-the-submitBtn-in-a-beforeEach\"><a href=\"#Alias-the-submitBtn-in-a-beforeEach\" class=\"headerlink\" title=\"Alias the submitBtn in a beforeEach\"></a>Alias the <code>submitBtn</code> in a <code>beforeEach</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">beforeEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  cy.get(<span class=\"string\">\"button[type=submit]\"</span>).as(<span class=\"string\">\"submitBtn\"</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">it(<span class=\"string\">\"disables on click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  cy.get(<span class=\"string\">\"@submitBtn\"</span>).should(<span class=\"string\">\"be.disabled\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Get-an-input-and-assert-on-the-value\"><a href=\"#Get-an-input-and-assert-on-the-value\" class=\"headerlink\" title=\"Get an input and assert on the value\"></a>Get an input and assert on the value</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"input[name='firstName']\"</span>)</div><div class=\"line\">  .should(<span class=\"string\">\"have.value\"</span>, <span class=\"string\">\"Homer\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"524\" alt=\"screen shot 2015-11-27 at 1 24 20 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446808/5d2f2180-950a-11e5-8645-4f0f14321f86.png\"></p>\n<p>When clicking on the <code>get</code> command within the command log, the console outputs the following:</p>\n<p><img width=\"543\" alt=\"screen shot 2015-11-27 at 1 24 45 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11446809/61a6f4f4-950a-11e5-9b23-a9efa1fbccfc.png\"></p>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/contains\">contains</a></li>\n<li><a href=\"https://on.cypress.io/api/within\">within</a></li>\n<li><a href=\"https://on.cypress.io/api/find\">find</a></li>\n<li><a href=\"https://on.cypress.io/api/root\">root</a></li>\n</ul>\n"},{"title":"getcookie","_content":"\nGet a browser cookie.\n\n| | |\n|--- | --- |\n| **Returns** | a cookie object literal |\n| **Timeout** | `cy.getCookie` will wait up for the duration of [`responseTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) for the automation server to process this command. |\n\n***\n\n# [cy.getCookie( *name* )](#section-usage)\n\nGets a browser cookie by its name.\n\nThis object will have the following properties:\n\n| Properties |\n| --- |\n| `name` |\n| `value` |\n| `path` |\n| `domain` |\n| `httpOnly` |\n| `secure` |\n| `expiry` |\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.getCookie`.\n\n**cy.getCookie( *name*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`timeout` | [`responseTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to wait for the `cy.getCookie` command to be processed\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Get `session_id` cookie after logging in\n\nIn this example, on first login our server sends us back a session cookie.\n\n```javascript\ncy\n  .login('bob@example.com', 'p@ssw0rd') // example of a custom command\n  .getCookie('session_id')\n    .should('have.property', 'value', '189jd09sufh33aaiidhf99d09')\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Check out our example recipes using cy.getCookie to test [logging in using HTML web forms](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_html_web_form_spec.js), [logging in using XHR web forms](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_xhr_web_form_spec.js) and [logging in with single sign on](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_single_sign_on_spec.js)\",\n  \"title\": \"Using cy.getCookie to test login\"\n}\n[/block]\n\n***\n\n# Command Log\n\n## Get cookie\n\n```javascript\ncy\n  .getCookie('fakeCookie1')\n    .should('have.property', 'value', '123ABC')\n```\n\nThe commands above will display in the command log as:\n\n![screen shot 2016-05-10 at 12 12 13 pm](https://cloud.githubusercontent.com/assets/1271364/15153750/7a1caa40-16a8-11e6-9f70-3858dacb6792.png)\n\nWhen clicking on `getCookie` within the command log, the console outputs the following:\n\n![screen shot 2016-05-10 at 12 12 05 pm](https://cloud.githubusercontent.com/assets/1271364/15153749/7a18b00c-16a8-11e6-86ad-ea969f46bb6c.png)\n\n***\n\n# Related\n\n- [clearCookie](https://on.cypress.io/api/clearcookie)\n- [clearCookies](https://on.cypress.io/api/clearcookies)\n- [getCookies](https://on.cypress.io/api/getcookies)\n- [setCookie](https://on.cypress.io/api/setcookie)\n- [Cypress Cookies API](https://on.cypress.io/api/cookies)\n","source":"api/commands/getcookie.md","raw":"title: getcookie\n---\n\nGet a browser cookie.\n\n| | |\n|--- | --- |\n| **Returns** | a cookie object literal |\n| **Timeout** | `cy.getCookie` will wait up for the duration of [`responseTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) for the automation server to process this command. |\n\n***\n\n# [cy.getCookie( *name* )](#section-usage)\n\nGets a browser cookie by its name.\n\nThis object will have the following properties:\n\n| Properties |\n| --- |\n| `name` |\n| `value` |\n| `path` |\n| `domain` |\n| `httpOnly` |\n| `secure` |\n| `expiry` |\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.getCookie`.\n\n**cy.getCookie( *name*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`timeout` | [`responseTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to wait for the `cy.getCookie` command to be processed\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Get `session_id` cookie after logging in\n\nIn this example, on first login our server sends us back a session cookie.\n\n```javascript\ncy\n  .login('bob@example.com', 'p@ssw0rd') // example of a custom command\n  .getCookie('session_id')\n    .should('have.property', 'value', '189jd09sufh33aaiidhf99d09')\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Check out our example recipes using cy.getCookie to test [logging in using HTML web forms](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_html_web_form_spec.js), [logging in using XHR web forms](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_xhr_web_form_spec.js) and [logging in with single sign on](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_single_sign_on_spec.js)\",\n  \"title\": \"Using cy.getCookie to test login\"\n}\n[/block]\n\n***\n\n# Command Log\n\n## Get cookie\n\n```javascript\ncy\n  .getCookie('fakeCookie1')\n    .should('have.property', 'value', '123ABC')\n```\n\nThe commands above will display in the command log as:\n\n![screen shot 2016-05-10 at 12 12 13 pm](https://cloud.githubusercontent.com/assets/1271364/15153750/7a1caa40-16a8-11e6-9f70-3858dacb6792.png)\n\nWhen clicking on `getCookie` within the command log, the console outputs the following:\n\n![screen shot 2016-05-10 at 12 12 05 pm](https://cloud.githubusercontent.com/assets/1271364/15153749/7a18b00c-16a8-11e6-86ad-ea969f46bb6c.png)\n\n***\n\n# Related\n\n- [clearCookie](https://on.cypress.io/api/clearcookie)\n- [clearCookies](https://on.cypress.io/api/clearcookies)\n- [getCookies](https://on.cypress.io/api/getcookies)\n- [setCookie](https://on.cypress.io/api/setcookie)\n- [Cypress Cookies API](https://on.cypress.io/api/cookies)\n","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/getcookie.html","comments":1,"layout":"page","_id":"cj1pc2g8c000sk1g8wsqd0t7i","content":"<p>Get a browser cookie.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>a cookie object literal</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.getCookie</code> will wait up for the duration of <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>responseTimeout</code></a> for the automation server to process this command.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-getCookie-name\"><a href=\"#cy-getCookie-name\" class=\"headerlink\" title=\"cy.getCookie( name )\"></a><a href=\"#section-usage\">cy.getCookie( <em>name</em> )</a></h1><p>Gets a browser cookie by its name.</p>\n<p>This object will have the following properties:</p>\n<table>\n<thead>\n<tr>\n<th>Properties</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>name</code></td>\n</tr>\n<tr>\n<td><code>value</code></td>\n</tr>\n<tr>\n<td><code>path</code></td>\n</tr>\n<tr>\n<td><code>domain</code></td>\n</tr>\n<tr>\n<td><code>httpOnly</code></td>\n</tr>\n<tr>\n<td><code>secure</code></td>\n</tr>\n<tr>\n<td><code>expiry</code></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.getCookie</code>.</p>\n<p><strong>cy.getCookie( <em>name</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>responseTimeout</code></a></td>\n<td>Total time to wait for the <code>cy.getCookie</code> command to be processed</td>\n</tr>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Get-session-id-cookie-after-logging-in\"><a href=\"#Get-session-id-cookie-after-logging-in\" class=\"headerlink\" title=\"Get session_id cookie after logging in\"></a>Get <code>session_id</code> cookie after logging in</h2><p>In this example, on first login our server sends us back a session cookie.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .login(<span class=\"string\">'bob@example.com'</span>, <span class=\"string\">'p@ssw0rd'</span>) <span class=\"comment\">// example of a custom command</span></div><div class=\"line\">  .getCookie(<span class=\"string\">'session_id'</span>)</div><div class=\"line\">    .should(<span class=\"string\">'have.property'</span>, <span class=\"string\">'value'</span>, <span class=\"string\">'189jd09sufh33aaiidhf99d09'</span>)</div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “Check out our example recipes using cy.getCookie to test <a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_html_web_form_spec.js\" target=\"_blank\" rel=\"external\">logging in using HTML web forms</a>, <a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_xhr_web_form_spec.js\" target=\"_blank\" rel=\"external\">logging in using XHR web forms</a> and <a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_single_sign_on_spec.js\" target=\"_blank\" rel=\"external\">logging in with single sign on</a>“,<br>  “title”: “Using cy.getCookie to test login”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Get-cookie\"><a href=\"#Get-cookie\" class=\"headerlink\" title=\"Get cookie\"></a>Get cookie</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .getCookie(<span class=\"string\">'fakeCookie1'</span>)</div><div class=\"line\">    .should(<span class=\"string\">'have.property'</span>, <span class=\"string\">'value'</span>, <span class=\"string\">'123ABC'</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/15153750/7a1caa40-16a8-11e6-9f70-3858dacb6792.png\" alt=\"screen shot 2016-05-10 at 12 12 13 pm\"></p>\n<p>When clicking on <code>getCookie</code> within the command log, the console outputs the following:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/15153749/7a18b00c-16a8-11e6-86ad-ea969f46bb6c.png\" alt=\"screen shot 2016-05-10 at 12 12 05 pm\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/clearcookie\" target=\"_blank\" rel=\"external\">clearCookie</a></li>\n<li><a href=\"https://on.cypress.io/api/clearcookies\" target=\"_blank\" rel=\"external\">clearCookies</a></li>\n<li><a href=\"https://on.cypress.io/api/getcookies\" target=\"_blank\" rel=\"external\">getCookies</a></li>\n<li><a href=\"https://on.cypress.io/api/setcookie\" target=\"_blank\" rel=\"external\">setCookie</a></li>\n<li><a href=\"https://on.cypress.io/api/cookies\" target=\"_blank\" rel=\"external\">Cypress Cookies API</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Get a browser cookie.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>a cookie object literal</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.getCookie</code> will wait up for the duration of <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>responseTimeout</code></a> for the automation server to process this command.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-getCookie-name\"><a href=\"#cy-getCookie-name\" class=\"headerlink\" title=\"cy.getCookie( name )\"></a><a href=\"#section-usage\">cy.getCookie( <em>name</em> )</a></h1><p>Gets a browser cookie by its name.</p>\n<p>This object will have the following properties:</p>\n<table>\n<thead>\n<tr>\n<th>Properties</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>name</code></td>\n</tr>\n<tr>\n<td><code>value</code></td>\n</tr>\n<tr>\n<td><code>path</code></td>\n</tr>\n<tr>\n<td><code>domain</code></td>\n</tr>\n<tr>\n<td><code>httpOnly</code></td>\n</tr>\n<tr>\n<td><code>secure</code></td>\n</tr>\n<tr>\n<td><code>expiry</code></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.getCookie</code>.</p>\n<p><strong>cy.getCookie( <em>name</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>responseTimeout</code></a></td>\n<td>Total time to wait for the <code>cy.getCookie</code> command to be processed</td>\n</tr>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Get-session-id-cookie-after-logging-in\"><a href=\"#Get-session-id-cookie-after-logging-in\" class=\"headerlink\" title=\"Get session_id cookie after logging in\"></a>Get <code>session_id</code> cookie after logging in</h2><p>In this example, on first login our server sends us back a session cookie.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .login(<span class=\"string\">'bob@example.com'</span>, <span class=\"string\">'p@ssw0rd'</span>) <span class=\"comment\">// example of a custom command</span></div><div class=\"line\">  .getCookie(<span class=\"string\">'session_id'</span>)</div><div class=\"line\">    .should(<span class=\"string\">'have.property'</span>, <span class=\"string\">'value'</span>, <span class=\"string\">'189jd09sufh33aaiidhf99d09'</span>)</div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “Check out our example recipes using cy.getCookie to test <a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_html_web_form_spec.js\">logging in using HTML web forms</a>, <a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_xhr_web_form_spec.js\">logging in using XHR web forms</a> and <a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_single_sign_on_spec.js\">logging in with single sign on</a>“,<br>  “title”: “Using cy.getCookie to test login”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Get-cookie\"><a href=\"#Get-cookie\" class=\"headerlink\" title=\"Get cookie\"></a>Get cookie</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .getCookie(<span class=\"string\">'fakeCookie1'</span>)</div><div class=\"line\">    .should(<span class=\"string\">'have.property'</span>, <span class=\"string\">'value'</span>, <span class=\"string\">'123ABC'</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/15153750/7a1caa40-16a8-11e6-9f70-3858dacb6792.png\" alt=\"screen shot 2016-05-10 at 12 12 13 pm\"></p>\n<p>When clicking on <code>getCookie</code> within the command log, the console outputs the following:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/15153749/7a18b00c-16a8-11e6-86ad-ea969f46bb6c.png\" alt=\"screen shot 2016-05-10 at 12 12 05 pm\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/clearcookie\">clearCookie</a></li>\n<li><a href=\"https://on.cypress.io/api/clearcookies\">clearCookies</a></li>\n<li><a href=\"https://on.cypress.io/api/getcookies\">getCookies</a></li>\n<li><a href=\"https://on.cypress.io/api/setcookie\">setCookie</a></li>\n<li><a href=\"https://on.cypress.io/api/cookies\">Cypress Cookies API</a></li>\n</ul>\n"},{"title":"getcookies","_content":"\nGets all of the browser cookies.\n\n| | |\n|--- | --- |\n| **Returns** | an array of cookie objects |\n| **Timeout** | `cy.getCookies` will wait up for the duration of [`responseTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) for the automation server to process this command.  |\n\n***\n\n# [cy.getCookies()](#section-usage)\n\nGets the browser cookies.\n\nEach cookie object will have the following properties:\n\n| Properties |\n| --- |\n| `name` |\n| `value` |\n| `path` |\n| `domain` |\n| `httpOnly` |\n| `secure` |\n| `expiry` |\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.getCookies`.\n\n**[cy.getCookies(*options* )](#options-usage)**\n\nOption | Default | Notes\n--- | --- | ---\n`timeout` | [`responseTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to wait for the `cy.getCookies` command to be processed\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Get cookies after logging in\n\nIn this example, on first login our server sends us back a session cookie.\n\n```javascript\ncy\n  .login(\"bob@example.com\", \"p@ssw0rd\") // example of a custom command\n  .getCookies()\n    .should('have.length', 1)\n    .then(function(cookies) {\n      expect(cookies[0]).to.have.property('name', 'session_id')\n    })\n```\n\n***\n\n# Command Log\n\n## Get cookies\n\n```javascript\ncy\n  .getCookies()\n    .should('have.length', 1)\n    .then( function(cookies) {\n      // each cookie has these properties\n      expect(cookies[0]).to.have.property('name', 'fakeCookie1')\n      expect(cookies[0]).to.have.property('value', '123ABC')\n      expect(cookies[0]).to.have.property('domain')\n      expect(cookies[0]).to.have.property('httpOnly')\n      expect(cookies[0]).to.have.property('path')\n      expect(cookies[0]).to.have.property('secure')\n    })\n```\n\nThe commands above will display in the command log as:\n\n![screen shot 2016-05-10 at 12 06 46 pm](https://cloud.githubusercontent.com/assets/1271364/15153582/bc370c32-16a7-11e6-94b5-add51d7df7e5.png)\n\nWhen clicking on `getCookies` within the command log, the console outputs the following:\n\n![screen shot 2016-05-10 at 12 07 00 pm](https://cloud.githubusercontent.com/assets/1271364/15153583/bc374300-16a7-11e6-8e40-2cba54b95a5a.png)\n\n***\n\n# Related\n\n- [clearCookie](https://on.cypress.io/api/clearcookie)\n- [clearCookies](https://on.cypress.io/api/clearcookies)\n- [getCookie](https://on.cypress.io/api/getcookie)\n- [setCookie](https://on.cypress.io/api/setcookie)\n- [Cypress Cookies API](https://on.cypress.io/api/cookies)","source":"api/commands/getcookies.md","raw":"title: getcookies\n---\n\nGets all of the browser cookies.\n\n| | |\n|--- | --- |\n| **Returns** | an array of cookie objects |\n| **Timeout** | `cy.getCookies` will wait up for the duration of [`responseTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) for the automation server to process this command.  |\n\n***\n\n# [cy.getCookies()](#section-usage)\n\nGets the browser cookies.\n\nEach cookie object will have the following properties:\n\n| Properties |\n| --- |\n| `name` |\n| `value` |\n| `path` |\n| `domain` |\n| `httpOnly` |\n| `secure` |\n| `expiry` |\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.getCookies`.\n\n**[cy.getCookies(*options* )](#options-usage)**\n\nOption | Default | Notes\n--- | --- | ---\n`timeout` | [`responseTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to wait for the `cy.getCookies` command to be processed\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Get cookies after logging in\n\nIn this example, on first login our server sends us back a session cookie.\n\n```javascript\ncy\n  .login(\"bob@example.com\", \"p@ssw0rd\") // example of a custom command\n  .getCookies()\n    .should('have.length', 1)\n    .then(function(cookies) {\n      expect(cookies[0]).to.have.property('name', 'session_id')\n    })\n```\n\n***\n\n# Command Log\n\n## Get cookies\n\n```javascript\ncy\n  .getCookies()\n    .should('have.length', 1)\n    .then( function(cookies) {\n      // each cookie has these properties\n      expect(cookies[0]).to.have.property('name', 'fakeCookie1')\n      expect(cookies[0]).to.have.property('value', '123ABC')\n      expect(cookies[0]).to.have.property('domain')\n      expect(cookies[0]).to.have.property('httpOnly')\n      expect(cookies[0]).to.have.property('path')\n      expect(cookies[0]).to.have.property('secure')\n    })\n```\n\nThe commands above will display in the command log as:\n\n![screen shot 2016-05-10 at 12 06 46 pm](https://cloud.githubusercontent.com/assets/1271364/15153582/bc370c32-16a7-11e6-94b5-add51d7df7e5.png)\n\nWhen clicking on `getCookies` within the command log, the console outputs the following:\n\n![screen shot 2016-05-10 at 12 07 00 pm](https://cloud.githubusercontent.com/assets/1271364/15153583/bc374300-16a7-11e6-8e40-2cba54b95a5a.png)\n\n***\n\n# Related\n\n- [clearCookie](https://on.cypress.io/api/clearcookie)\n- [clearCookies](https://on.cypress.io/api/clearcookies)\n- [getCookie](https://on.cypress.io/api/getcookie)\n- [setCookie](https://on.cypress.io/api/setcookie)\n- [Cypress Cookies API](https://on.cypress.io/api/cookies)","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/getcookies.html","comments":1,"layout":"page","_id":"cj1pc2g8d000tk1g82ti4gtz1","content":"<p>Gets all of the browser cookies.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>an array of cookie objects</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.getCookies</code> will wait up for the duration of <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>responseTimeout</code></a> for the automation server to process this command.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-getCookies\"><a href=\"#cy-getCookies\" class=\"headerlink\" title=\"cy.getCookies()\"></a><a href=\"#section-usage\">cy.getCookies()</a></h1><p>Gets the browser cookies.</p>\n<p>Each cookie object will have the following properties:</p>\n<table>\n<thead>\n<tr>\n<th>Properties</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>name</code></td>\n</tr>\n<tr>\n<td><code>value</code></td>\n</tr>\n<tr>\n<td><code>path</code></td>\n</tr>\n<tr>\n<td><code>domain</code></td>\n</tr>\n<tr>\n<td><code>httpOnly</code></td>\n</tr>\n<tr>\n<td><code>secure</code></td>\n</tr>\n<tr>\n<td><code>expiry</code></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.getCookies</code>.</p>\n<p><strong><a href=\"#options-usage\">cy.getCookies(<em>options</em> )</a></strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>responseTimeout</code></a></td>\n<td>Total time to wait for the <code>cy.getCookies</code> command to be processed</td>\n</tr>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Get-cookies-after-logging-in\"><a href=\"#Get-cookies-after-logging-in\" class=\"headerlink\" title=\"Get cookies after logging in\"></a>Get cookies after logging in</h2><p>In this example, on first login our server sends us back a session cookie.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .login(<span class=\"string\">\"bob@example.com\"</span>, <span class=\"string\">\"p@ssw0rd\"</span>) <span class=\"comment\">// example of a custom command</span></div><div class=\"line\">  .getCookies()</div><div class=\"line\">    .should(<span class=\"string\">'have.length'</span>, <span class=\"number\">1</span>)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cookies</span>) </span>&#123;</div><div class=\"line\">      expect(cookies[<span class=\"number\">0</span>]).to.have.property(<span class=\"string\">'name'</span>, <span class=\"string\">'session_id'</span>)</div><div class=\"line\">    &#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Get-cookies\"><a href=\"#Get-cookies\" class=\"headerlink\" title=\"Get cookies\"></a>Get cookies</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .getCookies()</div><div class=\"line\">    .should(<span class=\"string\">'have.length'</span>, <span class=\"number\">1</span>)</div><div class=\"line\">    .then( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cookies</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// each cookie has these properties</span></div><div class=\"line\">      expect(cookies[<span class=\"number\">0</span>]).to.have.property(<span class=\"string\">'name'</span>, <span class=\"string\">'fakeCookie1'</span>)</div><div class=\"line\">      expect(cookies[<span class=\"number\">0</span>]).to.have.property(<span class=\"string\">'value'</span>, <span class=\"string\">'123ABC'</span>)</div><div class=\"line\">      expect(cookies[<span class=\"number\">0</span>]).to.have.property(<span class=\"string\">'domain'</span>)</div><div class=\"line\">      expect(cookies[<span class=\"number\">0</span>]).to.have.property(<span class=\"string\">'httpOnly'</span>)</div><div class=\"line\">      expect(cookies[<span class=\"number\">0</span>]).to.have.property(<span class=\"string\">'path'</span>)</div><div class=\"line\">      expect(cookies[<span class=\"number\">0</span>]).to.have.property(<span class=\"string\">'secure'</span>)</div><div class=\"line\">    &#125;)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/15153582/bc370c32-16a7-11e6-94b5-add51d7df7e5.png\" alt=\"screen shot 2016-05-10 at 12 06 46 pm\"></p>\n<p>When clicking on <code>getCookies</code> within the command log, the console outputs the following:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/15153583/bc374300-16a7-11e6-8e40-2cba54b95a5a.png\" alt=\"screen shot 2016-05-10 at 12 07 00 pm\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/clearcookie\" target=\"_blank\" rel=\"external\">clearCookie</a></li>\n<li><a href=\"https://on.cypress.io/api/clearcookies\" target=\"_blank\" rel=\"external\">clearCookies</a></li>\n<li><a href=\"https://on.cypress.io/api/getcookie\" target=\"_blank\" rel=\"external\">getCookie</a></li>\n<li><a href=\"https://on.cypress.io/api/setcookie\" target=\"_blank\" rel=\"external\">setCookie</a></li>\n<li><a href=\"https://on.cypress.io/api/cookies\" target=\"_blank\" rel=\"external\">Cypress Cookies API</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Gets all of the browser cookies.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>an array of cookie objects</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.getCookies</code> will wait up for the duration of <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>responseTimeout</code></a> for the automation server to process this command.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-getCookies\"><a href=\"#cy-getCookies\" class=\"headerlink\" title=\"cy.getCookies()\"></a><a href=\"#section-usage\">cy.getCookies()</a></h1><p>Gets the browser cookies.</p>\n<p>Each cookie object will have the following properties:</p>\n<table>\n<thead>\n<tr>\n<th>Properties</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>name</code></td>\n</tr>\n<tr>\n<td><code>value</code></td>\n</tr>\n<tr>\n<td><code>path</code></td>\n</tr>\n<tr>\n<td><code>domain</code></td>\n</tr>\n<tr>\n<td><code>httpOnly</code></td>\n</tr>\n<tr>\n<td><code>secure</code></td>\n</tr>\n<tr>\n<td><code>expiry</code></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.getCookies</code>.</p>\n<p><strong><a href=\"#options-usage\">cy.getCookies(<em>options</em> )</a></strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>responseTimeout</code></a></td>\n<td>Total time to wait for the <code>cy.getCookies</code> command to be processed</td>\n</tr>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Get-cookies-after-logging-in\"><a href=\"#Get-cookies-after-logging-in\" class=\"headerlink\" title=\"Get cookies after logging in\"></a>Get cookies after logging in</h2><p>In this example, on first login our server sends us back a session cookie.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .login(<span class=\"string\">\"bob@example.com\"</span>, <span class=\"string\">\"p@ssw0rd\"</span>) <span class=\"comment\">// example of a custom command</span></div><div class=\"line\">  .getCookies()</div><div class=\"line\">    .should(<span class=\"string\">'have.length'</span>, <span class=\"number\">1</span>)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cookies</span>) </span>&#123;</div><div class=\"line\">      expect(cookies[<span class=\"number\">0</span>]).to.have.property(<span class=\"string\">'name'</span>, <span class=\"string\">'session_id'</span>)</div><div class=\"line\">    &#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Get-cookies\"><a href=\"#Get-cookies\" class=\"headerlink\" title=\"Get cookies\"></a>Get cookies</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .getCookies()</div><div class=\"line\">    .should(<span class=\"string\">'have.length'</span>, <span class=\"number\">1</span>)</div><div class=\"line\">    .then( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cookies</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// each cookie has these properties</span></div><div class=\"line\">      expect(cookies[<span class=\"number\">0</span>]).to.have.property(<span class=\"string\">'name'</span>, <span class=\"string\">'fakeCookie1'</span>)</div><div class=\"line\">      expect(cookies[<span class=\"number\">0</span>]).to.have.property(<span class=\"string\">'value'</span>, <span class=\"string\">'123ABC'</span>)</div><div class=\"line\">      expect(cookies[<span class=\"number\">0</span>]).to.have.property(<span class=\"string\">'domain'</span>)</div><div class=\"line\">      expect(cookies[<span class=\"number\">0</span>]).to.have.property(<span class=\"string\">'httpOnly'</span>)</div><div class=\"line\">      expect(cookies[<span class=\"number\">0</span>]).to.have.property(<span class=\"string\">'path'</span>)</div><div class=\"line\">      expect(cookies[<span class=\"number\">0</span>]).to.have.property(<span class=\"string\">'secure'</span>)</div><div class=\"line\">    &#125;)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/15153582/bc370c32-16a7-11e6-94b5-add51d7df7e5.png\" alt=\"screen shot 2016-05-10 at 12 06 46 pm\"></p>\n<p>When clicking on <code>getCookies</code> within the command log, the console outputs the following:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/15153583/bc374300-16a7-11e6-8e40-2cba54b95a5a.png\" alt=\"screen shot 2016-05-10 at 12 07 00 pm\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/clearcookie\">clearCookie</a></li>\n<li><a href=\"https://on.cypress.io/api/clearcookies\">clearCookies</a></li>\n<li><a href=\"https://on.cypress.io/api/getcookie\">getCookie</a></li>\n<li><a href=\"https://on.cypress.io/api/setcookie\">setCookie</a></li>\n<li><a href=\"https://on.cypress.io/api/cookies\">Cypress Cookies API</a></li>\n</ul>\n"},{"title":"hash","_content":"\nGet the current URL hash. This is the same as [`cy.location().hash`](https://on.cypress.io/api/location)\n\n| | |\n|--- | --- |\n| **Returns** | the current URL hash as a string, including the `#` character. If no `#` character is present, an empty string will be returned. |\n| **Timeout** | *cannot timeout* |\n\n***\n\n# [cy.hash()](#section-usage)\n\nGet the current URL hash.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.hash`.\n\n**cy.hash( *options* )**\n**cy.hash( *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Assert that the hash is `#/users/1` given the remote URL: `http://localhost:8000/app/#/users/1`\n\n```javascript\n// Hash returns #/users/1\ncy.hash().should(\"eq\", \"#/users/1\") // => true\n```\n\n***\n\n## Assert that the hash matches via RegExp\n\n```html\n<ul id=\"users\">\n  <li>\n    <a href=\"#/users/8fc45b67-d2e5-465a-b822-b281d9c8e4d1\">Fred</a>\n  </li>\n</ul>\n```\n\n```javascript\ncy\n  .get(\"#users li\").find(\"a\")\n  .hash().should(\"match\", /users\\/.+$/) // => true\n```\n\n***\n\n# Notes\n\n## Hash is a shortcut for `cy.location().hash`\n\nThese 3 assertions are all the same.\n\n```javascript\n// 1. verbose\ncy.location().then(function(location){\n  expect(location.hash).to.eq(\"#/users/1\")\n})\n\n// 2. better\ncy.location().its(\"hash\").should(\"eq\", \"#/users/1\")\n\n// 3. best\ncy.hash().should(\"eq\", \"#/users/1\")\n```\n\n***\n\n# Command Log\n\n## Assert that the hash matches `#users/new`\n\n```javascript\ncy.hash().should(\"eq\", \"#users/new\")\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"581\" alt=\"screen shot 2015-11-29 at 1 34 12 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459152/ed737be4-969d-11e5-823e-1d12cd7d03b1.png\">\n\nWhen clicking on `hash` within the command log, the console outputs the following:\n\n<img width=\"472\" alt=\"screen shot 2015-11-29 at 1 34 17 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459153/f0aa6476-969d-11e5-9851-302957f9eb0f.png\">\n\n***\n\n# Related\n\n- [location](https://on.cypress.io/api/location)\n- [url](https://on.cypress.io/api/url)","source":"api/commands/hash.md","raw":"title: hash\n---\n\nGet the current URL hash. This is the same as [`cy.location().hash`](https://on.cypress.io/api/location)\n\n| | |\n|--- | --- |\n| **Returns** | the current URL hash as a string, including the `#` character. If no `#` character is present, an empty string will be returned. |\n| **Timeout** | *cannot timeout* |\n\n***\n\n# [cy.hash()](#section-usage)\n\nGet the current URL hash.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.hash`.\n\n**cy.hash( *options* )**\n**cy.hash( *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Assert that the hash is `#/users/1` given the remote URL: `http://localhost:8000/app/#/users/1`\n\n```javascript\n// Hash returns #/users/1\ncy.hash().should(\"eq\", \"#/users/1\") // => true\n```\n\n***\n\n## Assert that the hash matches via RegExp\n\n```html\n<ul id=\"users\">\n  <li>\n    <a href=\"#/users/8fc45b67-d2e5-465a-b822-b281d9c8e4d1\">Fred</a>\n  </li>\n</ul>\n```\n\n```javascript\ncy\n  .get(\"#users li\").find(\"a\")\n  .hash().should(\"match\", /users\\/.+$/) // => true\n```\n\n***\n\n# Notes\n\n## Hash is a shortcut for `cy.location().hash`\n\nThese 3 assertions are all the same.\n\n```javascript\n// 1. verbose\ncy.location().then(function(location){\n  expect(location.hash).to.eq(\"#/users/1\")\n})\n\n// 2. better\ncy.location().its(\"hash\").should(\"eq\", \"#/users/1\")\n\n// 3. best\ncy.hash().should(\"eq\", \"#/users/1\")\n```\n\n***\n\n# Command Log\n\n## Assert that the hash matches `#users/new`\n\n```javascript\ncy.hash().should(\"eq\", \"#users/new\")\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"581\" alt=\"screen shot 2015-11-29 at 1 34 12 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459152/ed737be4-969d-11e5-823e-1d12cd7d03b1.png\">\n\nWhen clicking on `hash` within the command log, the console outputs the following:\n\n<img width=\"472\" alt=\"screen shot 2015-11-29 at 1 34 17 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459153/f0aa6476-969d-11e5-9851-302957f9eb0f.png\">\n\n***\n\n# Related\n\n- [location](https://on.cypress.io/api/location)\n- [url](https://on.cypress.io/api/url)","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/hash.html","comments":1,"layout":"page","_id":"cj1pc2g8d000uk1g82ubh7914","content":"<p>Get the current URL hash. This is the same as <a href=\"https://on.cypress.io/api/location\" target=\"_blank\" rel=\"external\"><code>cy.location().hash</code></a></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the current URL hash as a string, including the <code>#</code> character. If no <code>#</code> character is present, an empty string will be returned.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><em>cannot timeout</em></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-hash\"><a href=\"#cy-hash\" class=\"headerlink\" title=\"cy.hash()\"></a><a href=\"#section-usage\">cy.hash()</a></h1><p>Get the current URL hash.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.hash</code>.</p>\n<p><strong>cy.hash( <em>options</em> )</strong><br><strong>cy.hash( <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Assert-that-the-hash-is-users-1-given-the-remote-URL-http-localhost-8000-app-users-1\"><a href=\"#Assert-that-the-hash-is-users-1-given-the-remote-URL-http-localhost-8000-app-users-1\" class=\"headerlink\" title=\"Assert that the hash is #/users/1 given the remote URL: http://localhost:8000/app/#/users/1\"></a>Assert that the hash is <code>#/users/1</code> given the remote URL: <code>http://localhost:8000/app/#/users/1</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Hash returns #/users/1</span></div><div class=\"line\">cy.hash().should(<span class=\"string\">\"eq\"</span>, <span class=\"string\">\"#/users/1\"</span>) <span class=\"comment\">// =&gt; true</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Assert-that-the-hash-matches-via-RegExp\"><a href=\"#Assert-that-the-hash-matches-via-RegExp\" class=\"headerlink\" title=\"Assert that the hash matches via RegExp\"></a>Assert that the hash matches via RegExp</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"users\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#/users/8fc45b67-d2e5-465a-b822-b281d9c8e4d1\"</span>&gt;</span>Fred<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"#users li\"</span>).find(<span class=\"string\">\"a\"</span>)</div><div class=\"line\">  .hash().should(<span class=\"string\">\"match\"</span>, /users\\/.+$/) <span class=\"comment\">// =&gt; true</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h1><h2 id=\"Hash-is-a-shortcut-for-cy-location-hash\"><a href=\"#Hash-is-a-shortcut-for-cy-location-hash\" class=\"headerlink\" title=\"Hash is a shortcut for cy.location().hash\"></a>Hash is a shortcut for <code>cy.location().hash</code></h2><p>These 3 assertions are all the same.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 1. verbose</span></div><div class=\"line\">cy.location().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">location</span>)</span>&#123;</div><div class=\"line\">  expect(location.hash).to.eq(<span class=\"string\">\"#/users/1\"</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 2. better</span></div><div class=\"line\">cy.location().its(<span class=\"string\">\"hash\"</span>).should(<span class=\"string\">\"eq\"</span>, <span class=\"string\">\"#/users/1\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 3. best</span></div><div class=\"line\">cy.hash().should(<span class=\"string\">\"eq\"</span>, <span class=\"string\">\"#/users/1\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Assert-that-the-hash-matches-users-new\"><a href=\"#Assert-that-the-hash-matches-users-new\" class=\"headerlink\" title=\"Assert that the hash matches #users/new\"></a>Assert that the hash matches <code>#users/new</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.hash().should(<span class=\"string\">\"eq\"</span>, <span class=\"string\">\"#users/new\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"581\" alt=\"screen shot 2015-11-29 at 1 34 12 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459152/ed737be4-969d-11e5-823e-1d12cd7d03b1.png\"></p>\n<p>When clicking on <code>hash</code> within the command log, the console outputs the following:</p>\n<p><img width=\"472\" alt=\"screen shot 2015-11-29 at 1 34 17 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459153/f0aa6476-969d-11e5-9851-302957f9eb0f.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/location\" target=\"_blank\" rel=\"external\">location</a></li>\n<li><a href=\"https://on.cypress.io/api/url\" target=\"_blank\" rel=\"external\">url</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Get the current URL hash. This is the same as <a href=\"https://on.cypress.io/api/location\"><code>cy.location().hash</code></a></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the current URL hash as a string, including the <code>#</code> character. If no <code>#</code> character is present, an empty string will be returned.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><em>cannot timeout</em></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-hash\"><a href=\"#cy-hash\" class=\"headerlink\" title=\"cy.hash()\"></a><a href=\"#section-usage\">cy.hash()</a></h1><p>Get the current URL hash.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.hash</code>.</p>\n<p><strong>cy.hash( <em>options</em> )</strong><br><strong>cy.hash( <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Assert-that-the-hash-is-users-1-given-the-remote-URL-http-localhost-8000-app-users-1\"><a href=\"#Assert-that-the-hash-is-users-1-given-the-remote-URL-http-localhost-8000-app-users-1\" class=\"headerlink\" title=\"Assert that the hash is #/users/1 given the remote URL: http://localhost:8000/app/#/users/1\"></a>Assert that the hash is <code>#/users/1</code> given the remote URL: <code>http://localhost:8000/app/#/users/1</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Hash returns #/users/1</span></div><div class=\"line\">cy.hash().should(<span class=\"string\">\"eq\"</span>, <span class=\"string\">\"#/users/1\"</span>) <span class=\"comment\">// =&gt; true</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Assert-that-the-hash-matches-via-RegExp\"><a href=\"#Assert-that-the-hash-matches-via-RegExp\" class=\"headerlink\" title=\"Assert that the hash matches via RegExp\"></a>Assert that the hash matches via RegExp</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"users\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#/users/8fc45b67-d2e5-465a-b822-b281d9c8e4d1\"</span>&gt;</span>Fred<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"#users li\"</span>).find(<span class=\"string\">\"a\"</span>)</div><div class=\"line\">  .hash().should(<span class=\"string\">\"match\"</span>, /users\\/.+$/) <span class=\"comment\">// =&gt; true</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h1><h2 id=\"Hash-is-a-shortcut-for-cy-location-hash\"><a href=\"#Hash-is-a-shortcut-for-cy-location-hash\" class=\"headerlink\" title=\"Hash is a shortcut for cy.location().hash\"></a>Hash is a shortcut for <code>cy.location().hash</code></h2><p>These 3 assertions are all the same.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 1. verbose</span></div><div class=\"line\">cy.location().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">location</span>)</span>&#123;</div><div class=\"line\">  expect(location.hash).to.eq(<span class=\"string\">\"#/users/1\"</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 2. better</span></div><div class=\"line\">cy.location().its(<span class=\"string\">\"hash\"</span>).should(<span class=\"string\">\"eq\"</span>, <span class=\"string\">\"#/users/1\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 3. best</span></div><div class=\"line\">cy.hash().should(<span class=\"string\">\"eq\"</span>, <span class=\"string\">\"#/users/1\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Assert-that-the-hash-matches-users-new\"><a href=\"#Assert-that-the-hash-matches-users-new\" class=\"headerlink\" title=\"Assert that the hash matches #users/new\"></a>Assert that the hash matches <code>#users/new</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.hash().should(<span class=\"string\">\"eq\"</span>, <span class=\"string\">\"#users/new\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"581\" alt=\"screen shot 2015-11-29 at 1 34 12 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459152/ed737be4-969d-11e5-823e-1d12cd7d03b1.png\"></p>\n<p>When clicking on <code>hash</code> within the command log, the console outputs the following:</p>\n<p><img width=\"472\" alt=\"screen shot 2015-11-29 at 1 34 17 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459153/f0aa6476-969d-11e5-9851-302957f9eb0f.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/location\">location</a></li>\n<li><a href=\"https://on.cypress.io/api/url\">url</a></li>\n</ul>\n"},{"title":"go","_content":"\nNavigate back or forward to the previous or next URL in the browser's history. If going forward or back causes a full page refresh, Cypress will wait for the new page to load before moving on to new commands. Cypress additionally handles situations where a page load was not caused (such as hash routing) and will resolve immediately.\n\n| | |\n|--- | --- |\n| **Returns** | the `window` object |\n| **Timeout** | `cy.go` will retry for the duration of the [pageLoadTimeout](https://on.cypress.io/guides/configuration#section-timeouts) or the duration of the `timeout` specified in the command's [options](#section-options).  |\n\n***\n\n# [cy.go( *direction* )](#section-direction-usage)\n\nNavigate back or forward to the URL in a specific direction (`back` or `forward`).\n\n***\n\n# [cy.go( *number* )](#section-number-usage)\n\nNavigate back or forward going to the URL within a specific history position (-1 goes back one page, 1 goes forward one page).\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.go`.\n\n**cy.go( *direction*, *options* )**\n**cy.go( *number*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`timeout`      | [pageLoadTimeout](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry the visit\n`log` | `true` | whether to display command in command log\n\n***\n\n# Direction Usage\n\n## Go back in browser's history\n\n```javascript\ncy.go(\"back\")   // equivalent to clicking back button\n```\n\n***\n\n## Go forward in browser's history\n\n```javascript\ncy.go(\"forward\") // equivalent to clicking forward button\n```\n\n***\n\n# Number Usage\n\n## Go back in browser's history\n\n```javascript\ncy.go(-1)       // equivalent to clicking back button\n```\n\n***\n\n## Go forward in browser's history\n\n```javascript\ncy.go(1)        // equivalent to clicking forward button\n```\n\n***\n\n# Command Log\n\n## Go back in browser's history\n\n```javascript\ncy\n  .visit(\"http://localhost:8000/folders\")\n  .go(\"back\")\n```\n\nThe commands above will display in the command log as:\n\n![screen shot 2016-01-21 at 1 45 25 pm](https://cloud.githubusercontent.com/assets/1271364/12491029/c33087f0-c046-11e5-8475-4e6c35296085.png)\n\nWhen clicking on the `get` command within the command log, the console outputs the following:\n\n![screen shot 2016-01-21 at 1 46 02 pm](https://cloud.githubusercontent.com/assets/1271364/12491359/b22e569c-c048-11e5-8ec3-f46217a19fc1.png)\n\n***\n\n# Errors\n\n## cy.go() accepts only a string or number argument\n\n`cy.go()` specifically accepts the string arguments `back` or `forward` or a number argument to navigate to a specific position in the history.\n\n## cy.go() cannot accept '0'. The number must be greater or less than '0'.\n\nEnsure the number passed to `cy.go()` navigates forward or backward in history. For example, -1 goes back one page, 1 goes forward one page.\n\n***\n\n# Related\n\n- [visit](https://on.cypress.io/api/visit)\n","source":"api/commands/go.md","raw":"title: go\n---\n\nNavigate back or forward to the previous or next URL in the browser's history. If going forward or back causes a full page refresh, Cypress will wait for the new page to load before moving on to new commands. Cypress additionally handles situations where a page load was not caused (such as hash routing) and will resolve immediately.\n\n| | |\n|--- | --- |\n| **Returns** | the `window` object |\n| **Timeout** | `cy.go` will retry for the duration of the [pageLoadTimeout](https://on.cypress.io/guides/configuration#section-timeouts) or the duration of the `timeout` specified in the command's [options](#section-options).  |\n\n***\n\n# [cy.go( *direction* )](#section-direction-usage)\n\nNavigate back or forward to the URL in a specific direction (`back` or `forward`).\n\n***\n\n# [cy.go( *number* )](#section-number-usage)\n\nNavigate back or forward going to the URL within a specific history position (-1 goes back one page, 1 goes forward one page).\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.go`.\n\n**cy.go( *direction*, *options* )**\n**cy.go( *number*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`timeout`      | [pageLoadTimeout](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry the visit\n`log` | `true` | whether to display command in command log\n\n***\n\n# Direction Usage\n\n## Go back in browser's history\n\n```javascript\ncy.go(\"back\")   // equivalent to clicking back button\n```\n\n***\n\n## Go forward in browser's history\n\n```javascript\ncy.go(\"forward\") // equivalent to clicking forward button\n```\n\n***\n\n# Number Usage\n\n## Go back in browser's history\n\n```javascript\ncy.go(-1)       // equivalent to clicking back button\n```\n\n***\n\n## Go forward in browser's history\n\n```javascript\ncy.go(1)        // equivalent to clicking forward button\n```\n\n***\n\n# Command Log\n\n## Go back in browser's history\n\n```javascript\ncy\n  .visit(\"http://localhost:8000/folders\")\n  .go(\"back\")\n```\n\nThe commands above will display in the command log as:\n\n![screen shot 2016-01-21 at 1 45 25 pm](https://cloud.githubusercontent.com/assets/1271364/12491029/c33087f0-c046-11e5-8475-4e6c35296085.png)\n\nWhen clicking on the `get` command within the command log, the console outputs the following:\n\n![screen shot 2016-01-21 at 1 46 02 pm](https://cloud.githubusercontent.com/assets/1271364/12491359/b22e569c-c048-11e5-8ec3-f46217a19fc1.png)\n\n***\n\n# Errors\n\n## cy.go() accepts only a string or number argument\n\n`cy.go()` specifically accepts the string arguments `back` or `forward` or a number argument to navigate to a specific position in the history.\n\n## cy.go() cannot accept '0'. The number must be greater or less than '0'.\n\nEnsure the number passed to `cy.go()` navigates forward or backward in history. For example, -1 goes back one page, 1 goes forward one page.\n\n***\n\n# Related\n\n- [visit](https://on.cypress.io/api/visit)\n","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/go.html","comments":1,"layout":"page","_id":"cj1pc2g8d000vk1g8w8wa66tu","content":"<p>Navigate back or forward to the previous or next URL in the browser’s history. If going forward or back causes a full page refresh, Cypress will wait for the new page to load before moving on to new commands. Cypress additionally handles situations where a page load was not caused (such as hash routing) and will resolve immediately.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the <code>window</code> object</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.go</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\">pageLoadTimeout</a> or the duration of the <code>timeout</code> specified in the command’s <a href=\"#section-options\">options</a>.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-go-direction\"><a href=\"#cy-go-direction\" class=\"headerlink\" title=\"cy.go( direction )\"></a><a href=\"#section-direction-usage\">cy.go( <em>direction</em> )</a></h1><p>Navigate back or forward to the URL in a specific direction (<code>back</code> or <code>forward</code>).</p>\n<hr>\n<h1 id=\"cy-go-number\"><a href=\"#cy-go-number\" class=\"headerlink\" title=\"cy.go( number )\"></a><a href=\"#section-number-usage\">cy.go( <em>number</em> )</a></h1><p>Navigate back or forward going to the URL within a specific history position (-1 goes back one page, 1 goes forward one page).</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.go</code>.</p>\n<p><strong>cy.go( <em>direction</em>, <em>options</em> )</strong><br><strong>cy.go( <em>number</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\">pageLoadTimeout</a></td>\n<td>Total time to retry the visit</td>\n</tr>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Direction-Usage\"><a href=\"#Direction-Usage\" class=\"headerlink\" title=\"Direction Usage\"></a>Direction Usage</h1><h2 id=\"Go-back-in-browser’s-history\"><a href=\"#Go-back-in-browser’s-history\" class=\"headerlink\" title=\"Go back in browser’s history\"></a>Go back in browser’s history</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.go(<span class=\"string\">\"back\"</span>)   <span class=\"comment\">// equivalent to clicking back button</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Go-forward-in-browser’s-history\"><a href=\"#Go-forward-in-browser’s-history\" class=\"headerlink\" title=\"Go forward in browser’s history\"></a>Go forward in browser’s history</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.go(<span class=\"string\">\"forward\"</span>) <span class=\"comment\">// equivalent to clicking forward button</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Number-Usage\"><a href=\"#Number-Usage\" class=\"headerlink\" title=\"Number Usage\"></a>Number Usage</h1><h2 id=\"Go-back-in-browser’s-history-1\"><a href=\"#Go-back-in-browser’s-history-1\" class=\"headerlink\" title=\"Go back in browser’s history\"></a>Go back in browser’s history</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.go(<span class=\"number\">-1</span>)       <span class=\"comment\">// equivalent to clicking back button</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Go-forward-in-browser’s-history-1\"><a href=\"#Go-forward-in-browser’s-history-1\" class=\"headerlink\" title=\"Go forward in browser’s history\"></a>Go forward in browser’s history</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.go(<span class=\"number\">1</span>)        <span class=\"comment\">// equivalent to clicking forward button</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Go-back-in-browser’s-history-2\"><a href=\"#Go-back-in-browser’s-history-2\" class=\"headerlink\" title=\"Go back in browser’s history\"></a>Go back in browser’s history</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .visit(<span class=\"string\">\"http://localhost:8000/folders\"</span>)</div><div class=\"line\">  .go(<span class=\"string\">\"back\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/12491029/c33087f0-c046-11e5-8475-4e6c35296085.png\" alt=\"screen shot 2016-01-21 at 1 45 25 pm\"></p>\n<p>When clicking on the <code>get</code> command within the command log, the console outputs the following:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/12491359/b22e569c-c048-11e5-8ec3-f46217a19fc1.png\" alt=\"screen shot 2016-01-21 at 1 46 02 pm\"></p>\n<hr>\n<h1 id=\"Errors\"><a href=\"#Errors\" class=\"headerlink\" title=\"Errors\"></a>Errors</h1><h2 id=\"cy-go-accepts-only-a-string-or-number-argument\"><a href=\"#cy-go-accepts-only-a-string-or-number-argument\" class=\"headerlink\" title=\"cy.go() accepts only a string or number argument\"></a>cy.go() accepts only a string or number argument</h2><p><code>cy.go()</code> specifically accepts the string arguments <code>back</code> or <code>forward</code> or a number argument to navigate to a specific position in the history.</p>\n<h2 id=\"cy-go-cannot-accept-‘0’-The-number-must-be-greater-or-less-than-‘0’\"><a href=\"#cy-go-cannot-accept-‘0’-The-number-must-be-greater-or-less-than-‘0’\" class=\"headerlink\" title=\"cy.go() cannot accept ‘0’. The number must be greater or less than ‘0’.\"></a>cy.go() cannot accept ‘0’. The number must be greater or less than ‘0’.</h2><p>Ensure the number passed to <code>cy.go()</code> navigates forward or backward in history. For example, -1 goes back one page, 1 goes forward one page.</p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/visit\" target=\"_blank\" rel=\"external\">visit</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Navigate back or forward to the previous or next URL in the browser’s history. If going forward or back causes a full page refresh, Cypress will wait for the new page to load before moving on to new commands. Cypress additionally handles situations where a page load was not caused (such as hash routing) and will resolve immediately.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the <code>window</code> object</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.go</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\">pageLoadTimeout</a> or the duration of the <code>timeout</code> specified in the command’s <a href=\"#section-options\">options</a>.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-go-direction\"><a href=\"#cy-go-direction\" class=\"headerlink\" title=\"cy.go( direction )\"></a><a href=\"#section-direction-usage\">cy.go( <em>direction</em> )</a></h1><p>Navigate back or forward to the URL in a specific direction (<code>back</code> or <code>forward</code>).</p>\n<hr>\n<h1 id=\"cy-go-number\"><a href=\"#cy-go-number\" class=\"headerlink\" title=\"cy.go( number )\"></a><a href=\"#section-number-usage\">cy.go( <em>number</em> )</a></h1><p>Navigate back or forward going to the URL within a specific history position (-1 goes back one page, 1 goes forward one page).</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.go</code>.</p>\n<p><strong>cy.go( <em>direction</em>, <em>options</em> )</strong><br><strong>cy.go( <em>number</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\">pageLoadTimeout</a></td>\n<td>Total time to retry the visit</td>\n</tr>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Direction-Usage\"><a href=\"#Direction-Usage\" class=\"headerlink\" title=\"Direction Usage\"></a>Direction Usage</h1><h2 id=\"Go-back-in-browser’s-history\"><a href=\"#Go-back-in-browser’s-history\" class=\"headerlink\" title=\"Go back in browser’s history\"></a>Go back in browser’s history</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.go(<span class=\"string\">\"back\"</span>)   <span class=\"comment\">// equivalent to clicking back button</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Go-forward-in-browser’s-history\"><a href=\"#Go-forward-in-browser’s-history\" class=\"headerlink\" title=\"Go forward in browser’s history\"></a>Go forward in browser’s history</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.go(<span class=\"string\">\"forward\"</span>) <span class=\"comment\">// equivalent to clicking forward button</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Number-Usage\"><a href=\"#Number-Usage\" class=\"headerlink\" title=\"Number Usage\"></a>Number Usage</h1><h2 id=\"Go-back-in-browser’s-history-1\"><a href=\"#Go-back-in-browser’s-history-1\" class=\"headerlink\" title=\"Go back in browser’s history\"></a>Go back in browser’s history</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.go(<span class=\"number\">-1</span>)       <span class=\"comment\">// equivalent to clicking back button</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Go-forward-in-browser’s-history-1\"><a href=\"#Go-forward-in-browser’s-history-1\" class=\"headerlink\" title=\"Go forward in browser’s history\"></a>Go forward in browser’s history</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.go(<span class=\"number\">1</span>)        <span class=\"comment\">// equivalent to clicking forward button</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Go-back-in-browser’s-history-2\"><a href=\"#Go-back-in-browser’s-history-2\" class=\"headerlink\" title=\"Go back in browser’s history\"></a>Go back in browser’s history</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .visit(<span class=\"string\">\"http://localhost:8000/folders\"</span>)</div><div class=\"line\">  .go(<span class=\"string\">\"back\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/12491029/c33087f0-c046-11e5-8475-4e6c35296085.png\" alt=\"screen shot 2016-01-21 at 1 45 25 pm\"></p>\n<p>When clicking on the <code>get</code> command within the command log, the console outputs the following:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/12491359/b22e569c-c048-11e5-8ec3-f46217a19fc1.png\" alt=\"screen shot 2016-01-21 at 1 46 02 pm\"></p>\n<hr>\n<h1 id=\"Errors\"><a href=\"#Errors\" class=\"headerlink\" title=\"Errors\"></a>Errors</h1><h2 id=\"cy-go-accepts-only-a-string-or-number-argument\"><a href=\"#cy-go-accepts-only-a-string-or-number-argument\" class=\"headerlink\" title=\"cy.go() accepts only a string or number argument\"></a>cy.go() accepts only a string or number argument</h2><p><code>cy.go()</code> specifically accepts the string arguments <code>back</code> or <code>forward</code> or a number argument to navigate to a specific position in the history.</p>\n<h2 id=\"cy-go-cannot-accept-‘0’-The-number-must-be-greater-or-less-than-‘0’\"><a href=\"#cy-go-cannot-accept-‘0’-The-number-must-be-greater-or-less-than-‘0’\" class=\"headerlink\" title=\"cy.go() cannot accept ‘0’. The number must be greater or less than ‘0’.\"></a>cy.go() cannot accept ‘0’. The number must be greater or less than ‘0’.</h2><p>Ensure the number passed to <code>cy.go()</code> navigates forward or backward in history. For example, -1 goes back one page, 1 goes forward one page.</p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/visit\">visit</a></li>\n</ul>\n"},{"title":"hover","_content":"\n**Cypress does not have a `cy.hover()` command.** See [Issue #10](https://github.com/cypress-io/cypress/issues/10).\n\nIf `cy.hover()` is used, an error will display and redirect you to this page.\n\n## Workaround\n\nSometimes an element has specific logic on hover and you *do* need to \"hover\" in Cypress. Maybe the element doesn't even display to be clickable until you hover over another element.\n\nOftentimes you can use [`cy.invoke`](https://on.cypress.io/api/invoke) or [`cy.wrap`](https://on.cypress.io/api/wrap) to show the element before you perform the action.\n\n**Example of showing an element in order to perform action**\n```javascript\ncy.get(\".content\").invoke(\"show\").click()\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe on testing hover and working with hidden elements](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/hover_hidden_elements.js)\",\n  \"title\": \"Dealing with hover and hidden elements\"\n}\n[/block]\n\nYou can also force the action to be performed on the element regardless of whether the element is visible or not.\n\n**Example of clicking on a hidden element**\n```javascript\ncy.get(\".content\").click({force: true})\n```\n\n**Example of checking a hidden element**\n```javascript\ncy.get(\".checkbox\").check({force: true})\n```\n\n***\n\n# Related\n\n- [Recipe: Dealing with Hover and Hidden Elements](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/hover_hidden_elements.js)\n- [invoke](https://on.cypress.io/api/invoke)\n- [wrap](https://on.cypress.io/api/wrap)\n","source":"api/commands/hover.md","raw":"title: hover\n---\n\n**Cypress does not have a `cy.hover()` command.** See [Issue #10](https://github.com/cypress-io/cypress/issues/10).\n\nIf `cy.hover()` is used, an error will display and redirect you to this page.\n\n## Workaround\n\nSometimes an element has specific logic on hover and you *do* need to \"hover\" in Cypress. Maybe the element doesn't even display to be clickable until you hover over another element.\n\nOftentimes you can use [`cy.invoke`](https://on.cypress.io/api/invoke) or [`cy.wrap`](https://on.cypress.io/api/wrap) to show the element before you perform the action.\n\n**Example of showing an element in order to perform action**\n```javascript\ncy.get(\".content\").invoke(\"show\").click()\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe on testing hover and working with hidden elements](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/hover_hidden_elements.js)\",\n  \"title\": \"Dealing with hover and hidden elements\"\n}\n[/block]\n\nYou can also force the action to be performed on the element regardless of whether the element is visible or not.\n\n**Example of clicking on a hidden element**\n```javascript\ncy.get(\".content\").click({force: true})\n```\n\n**Example of checking a hidden element**\n```javascript\ncy.get(\".checkbox\").check({force: true})\n```\n\n***\n\n# Related\n\n- [Recipe: Dealing with Hover and Hidden Elements](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/hover_hidden_elements.js)\n- [invoke](https://on.cypress.io/api/invoke)\n- [wrap](https://on.cypress.io/api/wrap)\n","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/hover.html","comments":1,"layout":"page","_id":"cj1pc2g8e000wk1g8pnd5vhnn","content":"<p><strong>Cypress does not have a <code>cy.hover()</code> command.</strong> See <a href=\"https://github.com/cypress-io/cypress/issues/10\" target=\"_blank\" rel=\"external\">Issue #10</a>.</p>\n<p>If <code>cy.hover()</code> is used, an error will display and redirect you to this page.</p>\n<h2 id=\"Workaround\"><a href=\"#Workaround\" class=\"headerlink\" title=\"Workaround\"></a>Workaround</h2><p>Sometimes an element has specific logic on hover and you <em>do</em> need to “hover” in Cypress. Maybe the element doesn’t even display to be clickable until you hover over another element.</p>\n<p>Oftentimes you can use <a href=\"https://on.cypress.io/api/invoke\" target=\"_blank\" rel=\"external\"><code>cy.invoke</code></a> or <a href=\"https://on.cypress.io/api/wrap\" target=\"_blank\" rel=\"external\"><code>cy.wrap</code></a> to show the element before you perform the action.</p>\n<p><strong>Example of showing an element in order to perform action</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\".content\"</span>).invoke(<span class=\"string\">\"show\"</span>).click()</div></pre></td></tr></table></figure></p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/hover_hidden_elements.js\" target=\"_blank\" rel=\"external\">Check out our example recipe on testing hover and working with hidden elements</a>“,<br>  “title”: “Dealing with hover and hidden elements”<br>}<br>[/block]</p>\n<p>You can also force the action to be performed on the element regardless of whether the element is visible or not.</p>\n<p><strong>Example of clicking on a hidden element</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\".content\"</span>).click(&#123;<span class=\"attr\">force</span>: <span class=\"literal\">true</span>&#125;)</div></pre></td></tr></table></figure></p>\n<p><strong>Example of checking a hidden element</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\".checkbox\"</span>).check(&#123;<span class=\"attr\">force</span>: <span class=\"literal\">true</span>&#125;)</div></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/hover_hidden_elements.js\" target=\"_blank\" rel=\"external\">Recipe: Dealing with Hover and Hidden Elements</a></li>\n<li><a href=\"https://on.cypress.io/api/invoke\" target=\"_blank\" rel=\"external\">invoke</a></li>\n<li><a href=\"https://on.cypress.io/api/wrap\" target=\"_blank\" rel=\"external\">wrap</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p><strong>Cypress does not have a <code>cy.hover()</code> command.</strong> See <a href=\"https://github.com/cypress-io/cypress/issues/10\">Issue #10</a>.</p>\n<p>If <code>cy.hover()</code> is used, an error will display and redirect you to this page.</p>\n<h2 id=\"Workaround\"><a href=\"#Workaround\" class=\"headerlink\" title=\"Workaround\"></a>Workaround</h2><p>Sometimes an element has specific logic on hover and you <em>do</em> need to “hover” in Cypress. Maybe the element doesn’t even display to be clickable until you hover over another element.</p>\n<p>Oftentimes you can use <a href=\"https://on.cypress.io/api/invoke\"><code>cy.invoke</code></a> or <a href=\"https://on.cypress.io/api/wrap\"><code>cy.wrap</code></a> to show the element before you perform the action.</p>\n<p><strong>Example of showing an element in order to perform action</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\".content\"</span>).invoke(<span class=\"string\">\"show\"</span>).click()</div></pre></td></tr></table></figure></p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/hover_hidden_elements.js\">Check out our example recipe on testing hover and working with hidden elements</a>“,<br>  “title”: “Dealing with hover and hidden elements”<br>}<br>[/block]</p>\n<p>You can also force the action to be performed on the element regardless of whether the element is visible or not.</p>\n<p><strong>Example of clicking on a hidden element</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\".content\"</span>).click(&#123;<span class=\"attr\">force</span>: <span class=\"literal\">true</span>&#125;)</div></pre></td></tr></table></figure></p>\n<p><strong>Example of checking a hidden element</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\".checkbox\"</span>).check(&#123;<span class=\"attr\">force</span>: <span class=\"literal\">true</span>&#125;)</div></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/hover_hidden_elements.js\">Recipe: Dealing with Hover and Hidden Elements</a></li>\n<li><a href=\"https://on.cypress.io/api/invoke\">invoke</a></li>\n<li><a href=\"https://on.cypress.io/api/wrap\">wrap</a></li>\n</ul>\n"},{"title":"invoke","_content":"\n`cy.invoke` invokes functions on the current subject.\n\nIf you want to call a regular property that is not a function on the current subject, use [`cy.its`](https://on.cypress.io/api/its).\n\n| | |\n|--- | --- |\n| **Returns** | the return value of the invoked property |\n| **Timeout** | `cy.invoke` cannot timeout unless you've added assertions. The assertions will retry for the duration of [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts)  |\n\n***\n\n# [cy.invoke( *functionName* )](#section-function-usage)\n\nInvokes the function with the specified name\n\n***\n\n# [cy.invoke( *functionName*, **arguments* )](#section-function-with-arguments-usage)\n\nInvokes the function with the specified name and forwards any additional arguments to the function call. There are no limits to the number of arguments.\n\n***\n\n# Function Usage\n\n## Assert on a function after invoke\n\n```javascript\nvar fn = function(){\n  return \"bar\"\n}\n\ncy.wrap({foo: fn}).invoke(\"foo\").should(\"eq\", \"bar\") // true\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe where we use cy.invoke('text') to test against HTML content](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/bootstrapping_app_test_data_spec.js)\",\n  \"title\": \"Using cy.invoke('text')\"\n}\n[/block]\n\n## Properties that are functions are invoked\n\n```javascript\n// force a hidden div to be 'display: block'\n// so we can interact with its children elements\ncy\n  .get(\"div.container\").should(\"be.hidden\") // true\n\n  .invoke(\"show\") // call the jquery method 'show' on the 'div.container'\n    .should(\"be.visible\") // true\n    .find(\"input\").type(\"Cypress is great\")\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe where we use cy.invoke('show') and cy.invoke('trigger') to click an element that is only visible on hover](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/hover_hidden_elements.js)\",\n  \"title\": \"Using cy.invoke('show') and cy.invoke('trigger')\"\n}\n[/block]\n\n***\n\n## Useful for 3rd party plugins\n\n```javascript\n// as a slightly verbose approach\ncy.get(\"input\").invoke(\"getKendoDropDownList\").then(function(dropDownList){\n  // the return of $input.getKendoDropDownList() has now become the new subject\n\n  // whatever the select method returns becomes the next subject after this\n  return dropDownList.select(\"apples\")\n})\n```\n\n***\n\n## We can rewrite the previous example in a more terse way and add an assertion.\n\n```javascript\ncy\n  .get(\"input\")\n    .invoke(\"getKendoDropDownList\")\n    .invoke(\"select\", \"apples\")\n  .its(\"val\").should(\"match\", /apples/)\n```\n\n***\n\n# Function with Arguments Usage\n\n## Send specific arguments to the function\n\n```javascript\nvar fn = function(a, b, c){\n  return a + b + c\n}\n\ncy\n  .wrap({sum: fn})\n  .invoke(\"sum\", 2, 4, 6)\n    .should(\"be.gt\", 10) // true\n    .and(\"be.lt\", 20) // true\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe where we use cy.invoke('removeAttr', 'target') to test clicking on a link without opening in a new tab](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/tab_handling_anchor_links_spec.js)\",\n  \"title\": \"Using cy.invoke('removeAttr', 'target')\"\n}\n[/block]\n\n## Arguments are automatically forwarded to the function\n\n```javascript\ncy\n  .get(\"img\").invoke(\"attr\", \"src\")\n    .should(\"include\", \"myLogo\")\n```\n\n***\n\n# Related\n\n- [its](https://on.cypress.io/api/its)\n- [wrap](https://on.cypress.io/api/wrap)\n- [then](https://on.cypress.io/api/then)\n- [stub](https://on.cypress.io/api/stub)\n- [spy](https://on.cypress.io/api/spy)\n","source":"api/commands/invoke.md","raw":"title: invoke\n---\n\n`cy.invoke` invokes functions on the current subject.\n\nIf you want to call a regular property that is not a function on the current subject, use [`cy.its`](https://on.cypress.io/api/its).\n\n| | |\n|--- | --- |\n| **Returns** | the return value of the invoked property |\n| **Timeout** | `cy.invoke` cannot timeout unless you've added assertions. The assertions will retry for the duration of [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts)  |\n\n***\n\n# [cy.invoke( *functionName* )](#section-function-usage)\n\nInvokes the function with the specified name\n\n***\n\n# [cy.invoke( *functionName*, **arguments* )](#section-function-with-arguments-usage)\n\nInvokes the function with the specified name and forwards any additional arguments to the function call. There are no limits to the number of arguments.\n\n***\n\n# Function Usage\n\n## Assert on a function after invoke\n\n```javascript\nvar fn = function(){\n  return \"bar\"\n}\n\ncy.wrap({foo: fn}).invoke(\"foo\").should(\"eq\", \"bar\") // true\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe where we use cy.invoke('text') to test against HTML content](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/bootstrapping_app_test_data_spec.js)\",\n  \"title\": \"Using cy.invoke('text')\"\n}\n[/block]\n\n## Properties that are functions are invoked\n\n```javascript\n// force a hidden div to be 'display: block'\n// so we can interact with its children elements\ncy\n  .get(\"div.container\").should(\"be.hidden\") // true\n\n  .invoke(\"show\") // call the jquery method 'show' on the 'div.container'\n    .should(\"be.visible\") // true\n    .find(\"input\").type(\"Cypress is great\")\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe where we use cy.invoke('show') and cy.invoke('trigger') to click an element that is only visible on hover](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/hover_hidden_elements.js)\",\n  \"title\": \"Using cy.invoke('show') and cy.invoke('trigger')\"\n}\n[/block]\n\n***\n\n## Useful for 3rd party plugins\n\n```javascript\n// as a slightly verbose approach\ncy.get(\"input\").invoke(\"getKendoDropDownList\").then(function(dropDownList){\n  // the return of $input.getKendoDropDownList() has now become the new subject\n\n  // whatever the select method returns becomes the next subject after this\n  return dropDownList.select(\"apples\")\n})\n```\n\n***\n\n## We can rewrite the previous example in a more terse way and add an assertion.\n\n```javascript\ncy\n  .get(\"input\")\n    .invoke(\"getKendoDropDownList\")\n    .invoke(\"select\", \"apples\")\n  .its(\"val\").should(\"match\", /apples/)\n```\n\n***\n\n# Function with Arguments Usage\n\n## Send specific arguments to the function\n\n```javascript\nvar fn = function(a, b, c){\n  return a + b + c\n}\n\ncy\n  .wrap({sum: fn})\n  .invoke(\"sum\", 2, 4, 6)\n    .should(\"be.gt\", 10) // true\n    .and(\"be.lt\", 20) // true\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe where we use cy.invoke('removeAttr', 'target') to test clicking on a link without opening in a new tab](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/tab_handling_anchor_links_spec.js)\",\n  \"title\": \"Using cy.invoke('removeAttr', 'target')\"\n}\n[/block]\n\n## Arguments are automatically forwarded to the function\n\n```javascript\ncy\n  .get(\"img\").invoke(\"attr\", \"src\")\n    .should(\"include\", \"myLogo\")\n```\n\n***\n\n# Related\n\n- [its](https://on.cypress.io/api/its)\n- [wrap](https://on.cypress.io/api/wrap)\n- [then](https://on.cypress.io/api/then)\n- [stub](https://on.cypress.io/api/stub)\n- [spy](https://on.cypress.io/api/spy)\n","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/invoke.html","comments":1,"layout":"page","_id":"cj1pc2g8e000xk1g802q951by","content":"<p><code>cy.invoke</code> invokes functions on the current subject.</p>\n<p>If you want to call a regular property that is not a function on the current subject, use <a href=\"https://on.cypress.io/api/its\" target=\"_blank\" rel=\"external\"><code>cy.its</code></a>.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the return value of the invoked property</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.invoke</code> cannot timeout unless you’ve added assertions. The assertions will retry for the duration of <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-invoke-functionName\"><a href=\"#cy-invoke-functionName\" class=\"headerlink\" title=\"cy.invoke( functionName )\"></a><a href=\"#section-function-usage\">cy.invoke( <em>functionName</em> )</a></h1><p>Invokes the function with the specified name</p>\n<hr>\n<h1 id=\"cy-invoke-functionName-arguments\"><a href=\"#cy-invoke-functionName-arguments\" class=\"headerlink\" title=\"cy.invoke( functionName, *arguments )\"></a><a href=\"#section-function-with-arguments-usage\">cy.invoke( <em>functionName</em>, <em>*arguments</em> )</a></h1><p>Invokes the function with the specified name and forwards any additional arguments to the function call. There are no limits to the number of arguments.</p>\n<hr>\n<h1 id=\"Function-Usage\"><a href=\"#Function-Usage\" class=\"headerlink\" title=\"Function Usage\"></a>Function Usage</h1><h2 id=\"Assert-on-a-function-after-invoke\"><a href=\"#Assert-on-a-function-after-invoke\" class=\"headerlink\" title=\"Assert on a function after invoke\"></a>Assert on a function after invoke</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">cy.wrap(&#123;<span class=\"attr\">foo</span>: fn&#125;).invoke(<span class=\"string\">\"foo\"</span>).should(<span class=\"string\">\"eq\"</span>, <span class=\"string\">\"bar\"</span>) <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/bootstrapping_app_test_data_spec.js\" target=\"_blank\" rel=\"external\">Check out our example recipe where we use cy.invoke(‘text’) to test against HTML content</a>“,<br>  “title”: “Using cy.invoke(‘text’)”<br>}<br>[/block]</p>\n<h2 id=\"Properties-that-are-functions-are-invoked\"><a href=\"#Properties-that-are-functions-are-invoked\" class=\"headerlink\" title=\"Properties that are functions are invoked\"></a>Properties that are functions are invoked</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// force a hidden div to be 'display: block'</span></div><div class=\"line\"><span class=\"comment\">// so we can interact with its children elements</span></div><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"div.container\"</span>).should(<span class=\"string\">\"be.hidden\"</span>) <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\">  .invoke(<span class=\"string\">\"show\"</span>) <span class=\"comment\">// call the jquery method 'show' on the 'div.container'</span></div><div class=\"line\">    .should(<span class=\"string\">\"be.visible\"</span>) <span class=\"comment\">// true</span></div><div class=\"line\">    .find(<span class=\"string\">\"input\"</span>).type(<span class=\"string\">\"Cypress is great\"</span>)</div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/hover_hidden_elements.js\" target=\"_blank\" rel=\"external\">Check out our example recipe where we use cy.invoke(‘show’) and cy.invoke(‘trigger’) to click an element that is only visible on hover</a>“,<br>  “title”: “Using cy.invoke(‘show’) and cy.invoke(‘trigger’)”<br>}<br>[/block]</p>\n<hr>\n<h2 id=\"Useful-for-3rd-party-plugins\"><a href=\"#Useful-for-3rd-party-plugins\" class=\"headerlink\" title=\"Useful for 3rd party plugins\"></a>Useful for 3rd party plugins</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// as a slightly verbose approach</span></div><div class=\"line\">cy.get(<span class=\"string\">\"input\"</span>).invoke(<span class=\"string\">\"getKendoDropDownList\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dropDownList</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// the return of $input.getKendoDropDownList() has now become the new subject</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// whatever the select method returns becomes the next subject after this</span></div><div class=\"line\">  <span class=\"keyword\">return</span> dropDownList.select(<span class=\"string\">\"apples\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"We-can-rewrite-the-previous-example-in-a-more-terse-way-and-add-an-assertion\"><a href=\"#We-can-rewrite-the-previous-example-in-a-more-terse-way-and-add-an-assertion\" class=\"headerlink\" title=\"We can rewrite the previous example in a more terse way and add an assertion.\"></a>We can rewrite the previous example in a more terse way and add an assertion.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"input\"</span>)</div><div class=\"line\">    .invoke(<span class=\"string\">\"getKendoDropDownList\"</span>)</div><div class=\"line\">    .invoke(<span class=\"string\">\"select\"</span>, <span class=\"string\">\"apples\"</span>)</div><div class=\"line\">  .its(<span class=\"string\">\"val\"</span>).should(<span class=\"string\">\"match\"</span>, /apples/)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Function-with-Arguments-Usage\"><a href=\"#Function-with-Arguments-Usage\" class=\"headerlink\" title=\"Function with Arguments Usage\"></a>Function with Arguments Usage</h1><h2 id=\"Send-specific-arguments-to-the-function\"><a href=\"#Send-specific-arguments-to-the-function\" class=\"headerlink\" title=\"Send specific arguments to the function\"></a>Send specific arguments to the function</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b, c</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> a + b + c</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">cy</div><div class=\"line\">  .wrap(&#123;<span class=\"attr\">sum</span>: fn&#125;)</div><div class=\"line\">  .invoke(<span class=\"string\">\"sum\"</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>)</div><div class=\"line\">    .should(<span class=\"string\">\"be.gt\"</span>, <span class=\"number\">10</span>) <span class=\"comment\">// true</span></div><div class=\"line\">    .and(<span class=\"string\">\"be.lt\"</span>, <span class=\"number\">20</span>) <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/tab_handling_anchor_links_spec.js\" target=\"_blank\" rel=\"external\">Check out our example recipe where we use cy.invoke(‘removeAttr’, ‘target’) to test clicking on a link without opening in a new tab</a>“,<br>  “title”: “Using cy.invoke(‘removeAttr’, ‘target’)”<br>}<br>[/block]</p>\n<h2 id=\"Arguments-are-automatically-forwarded-to-the-function\"><a href=\"#Arguments-are-automatically-forwarded-to-the-function\" class=\"headerlink\" title=\"Arguments are automatically forwarded to the function\"></a>Arguments are automatically forwarded to the function</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"img\"</span>).invoke(<span class=\"string\">\"attr\"</span>, <span class=\"string\">\"src\"</span>)</div><div class=\"line\">    .should(<span class=\"string\">\"include\"</span>, <span class=\"string\">\"myLogo\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/its\" target=\"_blank\" rel=\"external\">its</a></li>\n<li><a href=\"https://on.cypress.io/api/wrap\" target=\"_blank\" rel=\"external\">wrap</a></li>\n<li><a href=\"https://on.cypress.io/api/then\" target=\"_blank\" rel=\"external\">then</a></li>\n<li><a href=\"https://on.cypress.io/api/stub\" target=\"_blank\" rel=\"external\">stub</a></li>\n<li><a href=\"https://on.cypress.io/api/spy\" target=\"_blank\" rel=\"external\">spy</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p><code>cy.invoke</code> invokes functions on the current subject.</p>\n<p>If you want to call a regular property that is not a function on the current subject, use <a href=\"https://on.cypress.io/api/its\"><code>cy.its</code></a>.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the return value of the invoked property</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.invoke</code> cannot timeout unless you’ve added assertions. The assertions will retry for the duration of <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-invoke-functionName\"><a href=\"#cy-invoke-functionName\" class=\"headerlink\" title=\"cy.invoke( functionName )\"></a><a href=\"#section-function-usage\">cy.invoke( <em>functionName</em> )</a></h1><p>Invokes the function with the specified name</p>\n<hr>\n<h1 id=\"cy-invoke-functionName-arguments\"><a href=\"#cy-invoke-functionName-arguments\" class=\"headerlink\" title=\"cy.invoke( functionName, *arguments )\"></a><a href=\"#section-function-with-arguments-usage\">cy.invoke( <em>functionName</em>, <em>*arguments</em> )</a></h1><p>Invokes the function with the specified name and forwards any additional arguments to the function call. There are no limits to the number of arguments.</p>\n<hr>\n<h1 id=\"Function-Usage\"><a href=\"#Function-Usage\" class=\"headerlink\" title=\"Function Usage\"></a>Function Usage</h1><h2 id=\"Assert-on-a-function-after-invoke\"><a href=\"#Assert-on-a-function-after-invoke\" class=\"headerlink\" title=\"Assert on a function after invoke\"></a>Assert on a function after invoke</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">cy.wrap(&#123;<span class=\"attr\">foo</span>: fn&#125;).invoke(<span class=\"string\">\"foo\"</span>).should(<span class=\"string\">\"eq\"</span>, <span class=\"string\">\"bar\"</span>) <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/bootstrapping_app_test_data_spec.js\">Check out our example recipe where we use cy.invoke(‘text’) to test against HTML content</a>“,<br>  “title”: “Using cy.invoke(‘text’)”<br>}<br>[/block]</p>\n<h2 id=\"Properties-that-are-functions-are-invoked\"><a href=\"#Properties-that-are-functions-are-invoked\" class=\"headerlink\" title=\"Properties that are functions are invoked\"></a>Properties that are functions are invoked</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// force a hidden div to be 'display: block'</span></div><div class=\"line\"><span class=\"comment\">// so we can interact with its children elements</span></div><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"div.container\"</span>).should(<span class=\"string\">\"be.hidden\"</span>) <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\">  .invoke(<span class=\"string\">\"show\"</span>) <span class=\"comment\">// call the jquery method 'show' on the 'div.container'</span></div><div class=\"line\">    .should(<span class=\"string\">\"be.visible\"</span>) <span class=\"comment\">// true</span></div><div class=\"line\">    .find(<span class=\"string\">\"input\"</span>).type(<span class=\"string\">\"Cypress is great\"</span>)</div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/hover_hidden_elements.js\">Check out our example recipe where we use cy.invoke(‘show’) and cy.invoke(‘trigger’) to click an element that is only visible on hover</a>“,<br>  “title”: “Using cy.invoke(‘show’) and cy.invoke(‘trigger’)”<br>}<br>[/block]</p>\n<hr>\n<h2 id=\"Useful-for-3rd-party-plugins\"><a href=\"#Useful-for-3rd-party-plugins\" class=\"headerlink\" title=\"Useful for 3rd party plugins\"></a>Useful for 3rd party plugins</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// as a slightly verbose approach</span></div><div class=\"line\">cy.get(<span class=\"string\">\"input\"</span>).invoke(<span class=\"string\">\"getKendoDropDownList\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dropDownList</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// the return of $input.getKendoDropDownList() has now become the new subject</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// whatever the select method returns becomes the next subject after this</span></div><div class=\"line\">  <span class=\"keyword\">return</span> dropDownList.select(<span class=\"string\">\"apples\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"We-can-rewrite-the-previous-example-in-a-more-terse-way-and-add-an-assertion\"><a href=\"#We-can-rewrite-the-previous-example-in-a-more-terse-way-and-add-an-assertion\" class=\"headerlink\" title=\"We can rewrite the previous example in a more terse way and add an assertion.\"></a>We can rewrite the previous example in a more terse way and add an assertion.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"input\"</span>)</div><div class=\"line\">    .invoke(<span class=\"string\">\"getKendoDropDownList\"</span>)</div><div class=\"line\">    .invoke(<span class=\"string\">\"select\"</span>, <span class=\"string\">\"apples\"</span>)</div><div class=\"line\">  .its(<span class=\"string\">\"val\"</span>).should(<span class=\"string\">\"match\"</span>, /apples/)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Function-with-Arguments-Usage\"><a href=\"#Function-with-Arguments-Usage\" class=\"headerlink\" title=\"Function with Arguments Usage\"></a>Function with Arguments Usage</h1><h2 id=\"Send-specific-arguments-to-the-function\"><a href=\"#Send-specific-arguments-to-the-function\" class=\"headerlink\" title=\"Send specific arguments to the function\"></a>Send specific arguments to the function</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b, c</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> a + b + c</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">cy</div><div class=\"line\">  .wrap(&#123;<span class=\"attr\">sum</span>: fn&#125;)</div><div class=\"line\">  .invoke(<span class=\"string\">\"sum\"</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>)</div><div class=\"line\">    .should(<span class=\"string\">\"be.gt\"</span>, <span class=\"number\">10</span>) <span class=\"comment\">// true</span></div><div class=\"line\">    .and(<span class=\"string\">\"be.lt\"</span>, <span class=\"number\">20</span>) <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/tab_handling_anchor_links_spec.js\">Check out our example recipe where we use cy.invoke(‘removeAttr’, ‘target’) to test clicking on a link without opening in a new tab</a>“,<br>  “title”: “Using cy.invoke(‘removeAttr’, ‘target’)”<br>}<br>[/block]</p>\n<h2 id=\"Arguments-are-automatically-forwarded-to-the-function\"><a href=\"#Arguments-are-automatically-forwarded-to-the-function\" class=\"headerlink\" title=\"Arguments are automatically forwarded to the function\"></a>Arguments are automatically forwarded to the function</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"img\"</span>).invoke(<span class=\"string\">\"attr\"</span>, <span class=\"string\">\"src\"</span>)</div><div class=\"line\">    .should(<span class=\"string\">\"include\"</span>, <span class=\"string\">\"myLogo\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/its\">its</a></li>\n<li><a href=\"https://on.cypress.io/api/wrap\">wrap</a></li>\n<li><a href=\"https://on.cypress.io/api/then\">then</a></li>\n<li><a href=\"https://on.cypress.io/api/stub\">stub</a></li>\n<li><a href=\"https://on.cypress.io/api/spy\">spy</a></li>\n</ul>\n"},{"title":"its","_content":"\n`cy.its` gets regular properties on the current subject.\n\nIf you want to call a function on the current subject, use [`cy.invoke`](https://on.cypress.io/api/invoke).\n\n| | |\n|--- | --- |\n| **Returns** | the value of the property |\n| **Timeout** | `cy.its` cannot timeout unless you've added assertions. The assertions will retry for the duration of [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.its( *propertyName* )](#section-usage)\n\nGets the property with the specified name.\n\nYou can also access multiple nested properties with **dot notation**.\n\n***\n\n# Usage\n\n## Access properties\n\n```javascript\ncy.wrap({foo: \"bar\"}).its(\"foo\").should(\"eq\", \"bar\") // true\n```\n\nCall the `length` property on the current subject\n\n```javascript\ncy\n  .get(\"ul li\") // this returns us the jquery object\n  .its(\"length\") // calls the 'length' property returning that value\n  .should(\"be.gt\", 2) // ensure this length is greater than 2\n})\n```\n\n***\n\n## Access functions\n\nYou can access functions to then drill into their own properties instead of invoking them.\n\n```javascript\n// Your app code\n\n// a basic Factory constructor\nvar Factory = function(arg){\n  ...\n}\n\nFactory.create = function(arg){\n  return new Factory(arg)\n}\n\n// assign it to the window\nwindow.Factory = Factory\n```\n\n```javascript\ncy\n  .window() // get the window object\n  .its(\"Factory\") // now we are on the Factory function\n  .invoke(\"create\", \"arg\") // and now we can invoke properties on it\n\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe on testing window.fetch using cy.its()](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/spy_stub_clock_spec.js)\",\n  \"title\": \"Testing cy.window().its('fetch')\"\n}\n[/block]\n\n***\n\n## Drill into nested properties\n\nYou can additionally automatically drill into nested properties by using **dot notation**.\n\n```javascript\nvar obj = {\n  foo: {\n    bar: {\n      baz: \"quux\"\n    }\n  }\n}\n\ncy.wrap(obj).its(\"foo.bar.baz\").should(\"eq\", \"quux\") // true\n```\n\n***\n\n# Command Log\n\n## Fetch 'comments' fixture\n\n```javascript\ncy\n  .server()\n  .route(/comments/, 'fixture:comments.json').as('getComments')\n  .get('#fetch-comments').click()\n  .wait('@getComments')\n    .its('responseBody')\n    .should('deep.eq', [\n      {id: 1, comment: 'hi'},\n      {id: 2, comment: 'there'}\n    ])\n```\n\nThe commands above will display in the command log as:\n\n![screen shot 2016-05-24 at 12 39 40 pm](https://cloud.githubusercontent.com/assets/1268976/15512229/d512cbb4-21ac-11e6-9a9a-5d358ae4fe4b.png)\n\nWhen clicking on `its` within the command log, the console outputs the following:\n\n![screen shot 2016-05-24 at 12 40 17 pm](https://cloud.githubusercontent.com/assets/1268976/15512225/d14723cc-21ac-11e6-88d5-39ffe6c0a195.png)\n\n***\n\n# Related\n\n- [invoke](https://on.cypress.io/api/invoke)\n- [wrap](https://on.cypress.io/api/wrap)\n- [then](https://on.cypress.io/api/then)\n","source":"api/commands/its.md","raw":"title: its\n---\n\n`cy.its` gets regular properties on the current subject.\n\nIf you want to call a function on the current subject, use [`cy.invoke`](https://on.cypress.io/api/invoke).\n\n| | |\n|--- | --- |\n| **Returns** | the value of the property |\n| **Timeout** | `cy.its` cannot timeout unless you've added assertions. The assertions will retry for the duration of [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.its( *propertyName* )](#section-usage)\n\nGets the property with the specified name.\n\nYou can also access multiple nested properties with **dot notation**.\n\n***\n\n# Usage\n\n## Access properties\n\n```javascript\ncy.wrap({foo: \"bar\"}).its(\"foo\").should(\"eq\", \"bar\") // true\n```\n\nCall the `length` property on the current subject\n\n```javascript\ncy\n  .get(\"ul li\") // this returns us the jquery object\n  .its(\"length\") // calls the 'length' property returning that value\n  .should(\"be.gt\", 2) // ensure this length is greater than 2\n})\n```\n\n***\n\n## Access functions\n\nYou can access functions to then drill into their own properties instead of invoking them.\n\n```javascript\n// Your app code\n\n// a basic Factory constructor\nvar Factory = function(arg){\n  ...\n}\n\nFactory.create = function(arg){\n  return new Factory(arg)\n}\n\n// assign it to the window\nwindow.Factory = Factory\n```\n\n```javascript\ncy\n  .window() // get the window object\n  .its(\"Factory\") // now we are on the Factory function\n  .invoke(\"create\", \"arg\") // and now we can invoke properties on it\n\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe on testing window.fetch using cy.its()](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/spy_stub_clock_spec.js)\",\n  \"title\": \"Testing cy.window().its('fetch')\"\n}\n[/block]\n\n***\n\n## Drill into nested properties\n\nYou can additionally automatically drill into nested properties by using **dot notation**.\n\n```javascript\nvar obj = {\n  foo: {\n    bar: {\n      baz: \"quux\"\n    }\n  }\n}\n\ncy.wrap(obj).its(\"foo.bar.baz\").should(\"eq\", \"quux\") // true\n```\n\n***\n\n# Command Log\n\n## Fetch 'comments' fixture\n\n```javascript\ncy\n  .server()\n  .route(/comments/, 'fixture:comments.json').as('getComments')\n  .get('#fetch-comments').click()\n  .wait('@getComments')\n    .its('responseBody')\n    .should('deep.eq', [\n      {id: 1, comment: 'hi'},\n      {id: 2, comment: 'there'}\n    ])\n```\n\nThe commands above will display in the command log as:\n\n![screen shot 2016-05-24 at 12 39 40 pm](https://cloud.githubusercontent.com/assets/1268976/15512229/d512cbb4-21ac-11e6-9a9a-5d358ae4fe4b.png)\n\nWhen clicking on `its` within the command log, the console outputs the following:\n\n![screen shot 2016-05-24 at 12 40 17 pm](https://cloud.githubusercontent.com/assets/1268976/15512225/d14723cc-21ac-11e6-88d5-39ffe6c0a195.png)\n\n***\n\n# Related\n\n- [invoke](https://on.cypress.io/api/invoke)\n- [wrap](https://on.cypress.io/api/wrap)\n- [then](https://on.cypress.io/api/then)\n","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/its.html","comments":1,"layout":"page","_id":"cj1pc2g8e000yk1g8znnyq50a","content":"<p><code>cy.its</code> gets regular properties on the current subject.</p>\n<p>If you want to call a function on the current subject, use <a href=\"https://on.cypress.io/api/invoke\" target=\"_blank\" rel=\"external\"><code>cy.invoke</code></a>.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the value of the property</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.its</code> cannot timeout unless you’ve added assertions. The assertions will retry for the duration of <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-its-propertyName\"><a href=\"#cy-its-propertyName\" class=\"headerlink\" title=\"cy.its( propertyName )\"></a><a href=\"#section-usage\">cy.its( <em>propertyName</em> )</a></h1><p>Gets the property with the specified name.</p>\n<p>You can also access multiple nested properties with <strong>dot notation</strong>.</p>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Access-properties\"><a href=\"#Access-properties\" class=\"headerlink\" title=\"Access properties\"></a>Access properties</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.wrap(&#123;<span class=\"attr\">foo</span>: <span class=\"string\">\"bar\"</span>&#125;).its(<span class=\"string\">\"foo\"</span>).should(<span class=\"string\">\"eq\"</span>, <span class=\"string\">\"bar\"</span>) <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>Call the <code>length</code> property on the current subject</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"ul li\"</span>) <span class=\"comment\">// this returns us the jquery object</span></div><div class=\"line\">  .its(<span class=\"string\">\"length\"</span>) <span class=\"comment\">// calls the 'length' property returning that value</span></div><div class=\"line\">  .should(<span class=\"string\">\"be.gt\"</span>, <span class=\"number\">2</span>) <span class=\"comment\">// ensure this length is greater than 2</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Access-functions\"><a href=\"#Access-functions\" class=\"headerlink\" title=\"Access functions\"></a>Access functions</h2><p>You can access functions to then drill into their own properties instead of invoking them.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Your app code</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// a basic Factory constructor</span></div><div class=\"line\"><span class=\"keyword\">var</span> Factory = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg</span>)</span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Factory.create = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Factory(arg)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// assign it to the window</span></div><div class=\"line\"><span class=\"built_in\">window</span>.Factory = Factory</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .window() <span class=\"comment\">// get the window object</span></div><div class=\"line\">  .its(<span class=\"string\">\"Factory\"</span>) <span class=\"comment\">// now we are on the Factory function</span></div><div class=\"line\">  .invoke(<span class=\"string\">\"create\"</span>, <span class=\"string\">\"arg\"</span>) <span class=\"comment\">// and now we can invoke properties on it</span></div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/spy_stub_clock_spec.js\" target=\"_blank\" rel=\"external\">Check out our example recipe on testing window.fetch using cy.its()</a>“,<br>  “title”: “Testing cy.window().its(‘fetch’)”<br>}<br>[/block]</p>\n<hr>\n<h2 id=\"Drill-into-nested-properties\"><a href=\"#Drill-into-nested-properties\" class=\"headerlink\" title=\"Drill into nested properties\"></a>Drill into nested properties</h2><p>You can additionally automatically drill into nested properties by using <strong>dot notation</strong>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">  <span class=\"attr\">foo</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">bar</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">baz</span>: <span class=\"string\">\"quux\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">cy.wrap(obj).its(<span class=\"string\">\"foo.bar.baz\"</span>).should(<span class=\"string\">\"eq\"</span>, <span class=\"string\">\"quux\"</span>) <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Fetch-‘comments’-fixture\"><a href=\"#Fetch-‘comments’-fixture\" class=\"headerlink\" title=\"Fetch ‘comments’ fixture\"></a>Fetch ‘comments’ fixture</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"regexp\">/comments/</span>, <span class=\"string\">'fixture:comments.json'</span>).as(<span class=\"string\">'getComments'</span>)</div><div class=\"line\">  .get(<span class=\"string\">'#fetch-comments'</span>).click()</div><div class=\"line\">  .wait(<span class=\"string\">'@getComments'</span>)</div><div class=\"line\">    .its(<span class=\"string\">'responseBody'</span>)</div><div class=\"line\">    .should(<span class=\"string\">'deep.eq'</span>, [</div><div class=\"line\">      &#123;<span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">comment</span>: <span class=\"string\">'hi'</span>&#125;,</div><div class=\"line\">      &#123;<span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">comment</span>: <span class=\"string\">'there'</span>&#125;</div><div class=\"line\">    ])</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/15512229/d512cbb4-21ac-11e6-9a9a-5d358ae4fe4b.png\" alt=\"screen shot 2016-05-24 at 12 39 40 pm\"></p>\n<p>When clicking on <code>its</code> within the command log, the console outputs the following:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/15512225/d14723cc-21ac-11e6-88d5-39ffe6c0a195.png\" alt=\"screen shot 2016-05-24 at 12 40 17 pm\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/invoke\" target=\"_blank\" rel=\"external\">invoke</a></li>\n<li><a href=\"https://on.cypress.io/api/wrap\" target=\"_blank\" rel=\"external\">wrap</a></li>\n<li><a href=\"https://on.cypress.io/api/then\" target=\"_blank\" rel=\"external\">then</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p><code>cy.its</code> gets regular properties on the current subject.</p>\n<p>If you want to call a function on the current subject, use <a href=\"https://on.cypress.io/api/invoke\"><code>cy.invoke</code></a>.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the value of the property</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.its</code> cannot timeout unless you’ve added assertions. The assertions will retry for the duration of <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-its-propertyName\"><a href=\"#cy-its-propertyName\" class=\"headerlink\" title=\"cy.its( propertyName )\"></a><a href=\"#section-usage\">cy.its( <em>propertyName</em> )</a></h1><p>Gets the property with the specified name.</p>\n<p>You can also access multiple nested properties with <strong>dot notation</strong>.</p>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Access-properties\"><a href=\"#Access-properties\" class=\"headerlink\" title=\"Access properties\"></a>Access properties</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.wrap(&#123;<span class=\"attr\">foo</span>: <span class=\"string\">\"bar\"</span>&#125;).its(<span class=\"string\">\"foo\"</span>).should(<span class=\"string\">\"eq\"</span>, <span class=\"string\">\"bar\"</span>) <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>Call the <code>length</code> property on the current subject</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"ul li\"</span>) <span class=\"comment\">// this returns us the jquery object</span></div><div class=\"line\">  .its(<span class=\"string\">\"length\"</span>) <span class=\"comment\">// calls the 'length' property returning that value</span></div><div class=\"line\">  .should(<span class=\"string\">\"be.gt\"</span>, <span class=\"number\">2</span>) <span class=\"comment\">// ensure this length is greater than 2</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Access-functions\"><a href=\"#Access-functions\" class=\"headerlink\" title=\"Access functions\"></a>Access functions</h2><p>You can access functions to then drill into their own properties instead of invoking them.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Your app code</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// a basic Factory constructor</span></div><div class=\"line\"><span class=\"keyword\">var</span> Factory = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg</span>)</span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Factory.create = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Factory(arg)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// assign it to the window</span></div><div class=\"line\"><span class=\"built_in\">window</span>.Factory = Factory</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .window() <span class=\"comment\">// get the window object</span></div><div class=\"line\">  .its(<span class=\"string\">\"Factory\"</span>) <span class=\"comment\">// now we are on the Factory function</span></div><div class=\"line\">  .invoke(<span class=\"string\">\"create\"</span>, <span class=\"string\">\"arg\"</span>) <span class=\"comment\">// and now we can invoke properties on it</span></div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/spy_stub_clock_spec.js\">Check out our example recipe on testing window.fetch using cy.its()</a>“,<br>  “title”: “Testing cy.window().its(‘fetch’)”<br>}<br>[/block]</p>\n<hr>\n<h2 id=\"Drill-into-nested-properties\"><a href=\"#Drill-into-nested-properties\" class=\"headerlink\" title=\"Drill into nested properties\"></a>Drill into nested properties</h2><p>You can additionally automatically drill into nested properties by using <strong>dot notation</strong>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">  <span class=\"attr\">foo</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">bar</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">baz</span>: <span class=\"string\">\"quux\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">cy.wrap(obj).its(<span class=\"string\">\"foo.bar.baz\"</span>).should(<span class=\"string\">\"eq\"</span>, <span class=\"string\">\"quux\"</span>) <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Fetch-‘comments’-fixture\"><a href=\"#Fetch-‘comments’-fixture\" class=\"headerlink\" title=\"Fetch ‘comments’ fixture\"></a>Fetch ‘comments’ fixture</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"regexp\">/comments/</span>, <span class=\"string\">'fixture:comments.json'</span>).as(<span class=\"string\">'getComments'</span>)</div><div class=\"line\">  .get(<span class=\"string\">'#fetch-comments'</span>).click()</div><div class=\"line\">  .wait(<span class=\"string\">'@getComments'</span>)</div><div class=\"line\">    .its(<span class=\"string\">'responseBody'</span>)</div><div class=\"line\">    .should(<span class=\"string\">'deep.eq'</span>, [</div><div class=\"line\">      &#123;<span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">comment</span>: <span class=\"string\">'hi'</span>&#125;,</div><div class=\"line\">      &#123;<span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">comment</span>: <span class=\"string\">'there'</span>&#125;</div><div class=\"line\">    ])</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/15512229/d512cbb4-21ac-11e6-9a9a-5d358ae4fe4b.png\" alt=\"screen shot 2016-05-24 at 12 39 40 pm\"></p>\n<p>When clicking on <code>its</code> within the command log, the console outputs the following:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/15512225/d14723cc-21ac-11e6-88d5-39ffe6c0a195.png\" alt=\"screen shot 2016-05-24 at 12 40 17 pm\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/invoke\">invoke</a></li>\n<li><a href=\"https://on.cypress.io/api/wrap\">wrap</a></li>\n<li><a href=\"https://on.cypress.io/api/then\">then</a></li>\n</ul>\n"},{"title":"last","_content":"\nGet the last DOM element within a set of DOM elements.\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.last` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.last()](#section-usage)\n\nReduce the set of matched DOM elements to the final one in the set.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.last`.\n\n**cy.last( *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry getting the element\n\n***\n\n# Usage\n\n## Get the last list item in a list.\n\n```html\n<ul>\n  <li class=\"one\">Knick knack on my thumb</li>\n  <li class=\"two\">Knick knack on my shoe</li>\n  <li class=\"three\">Knick knack on my knee</li>\n  <li class=\"four\">Knick knack on my door</li>\n</ul>\n```\n\n```javascript\n// returns <li class=\"four\">Knick knack on my door</li>\ncy.get(\"ul\").last()\n```\n\n***\n\n# Command Log\n\n## Find the last button in the form\n\n```javascript\ncy.get(\"form\").find(\"button\").last()\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"560\" alt=\"screen shot 2015-11-29 at 12 33 52 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458797/8e9abdf6-9695-11e5-8594-7044751d5199.png\">\n\nWhen clicking on `last` within the command log, the console outputs the following:\n\n<img width=\"746\" alt=\"screen shot 2015-11-29 at 12 34 07 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458799/91a115cc-9695-11e5-8569-93fbaa2704d4.png\">\n\n***\n\n# Related\n\n- [first](https://on.cypress.io/api/first)","source":"api/commands/last.md","raw":"title: last\n---\n\nGet the last DOM element within a set of DOM elements.\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.last` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.last()](#section-usage)\n\nReduce the set of matched DOM elements to the final one in the set.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.last`.\n\n**cy.last( *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry getting the element\n\n***\n\n# Usage\n\n## Get the last list item in a list.\n\n```html\n<ul>\n  <li class=\"one\">Knick knack on my thumb</li>\n  <li class=\"two\">Knick knack on my shoe</li>\n  <li class=\"three\">Knick knack on my knee</li>\n  <li class=\"four\">Knick knack on my door</li>\n</ul>\n```\n\n```javascript\n// returns <li class=\"four\">Knick knack on my door</li>\ncy.get(\"ul\").last()\n```\n\n***\n\n# Command Log\n\n## Find the last button in the form\n\n```javascript\ncy.get(\"form\").find(\"button\").last()\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"560\" alt=\"screen shot 2015-11-29 at 12 33 52 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458797/8e9abdf6-9695-11e5-8594-7044751d5199.png\">\n\nWhen clicking on `last` within the command log, the console outputs the following:\n\n<img width=\"746\" alt=\"screen shot 2015-11-29 at 12 34 07 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458799/91a115cc-9695-11e5-8569-93fbaa2704d4.png\">\n\n***\n\n# Related\n\n- [first](https://on.cypress.io/api/first)","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/last.html","comments":1,"layout":"page","_id":"cj1pc2g8f000zk1g8yk4kms4t","content":"<p>Get the last DOM element within a set of DOM elements.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.last</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-last\"><a href=\"#cy-last\" class=\"headerlink\" title=\"cy.last()\"></a><a href=\"#section-usage\">cy.last()</a></h1><p>Reduce the set of matched DOM elements to the final one in the set.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.last</code>.</p>\n<p><strong>cy.last( <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry getting the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Get-the-last-list-item-in-a-list\"><a href=\"#Get-the-last-list-item-in-a-list\" class=\"headerlink\" title=\"Get the last list item in a list.\"></a>Get the last list item in a list.</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"one\"</span>&gt;</span>Knick knack on my thumb<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"two\"</span>&gt;</span>Knick knack on my shoe<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"three\"</span>&gt;</span>Knick knack on my knee<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"four\"</span>&gt;</span>Knick knack on my door<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns &lt;li class=\"four\"&gt;Knick knack on my door&lt;/li&gt;</span></div><div class=\"line\">cy.get(<span class=\"string\">\"ul\"</span>).last()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Find-the-last-button-in-the-form\"><a href=\"#Find-the-last-button-in-the-form\" class=\"headerlink\" title=\"Find the last button in the form\"></a>Find the last button in the form</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"form\"</span>).find(<span class=\"string\">\"button\"</span>).last()</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"560\" alt=\"screen shot 2015-11-29 at 12 33 52 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458797/8e9abdf6-9695-11e5-8594-7044751d5199.png\"></p>\n<p>When clicking on <code>last</code> within the command log, the console outputs the following:</p>\n<p><img width=\"746\" alt=\"screen shot 2015-11-29 at 12 34 07 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458799/91a115cc-9695-11e5-8569-93fbaa2704d4.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/first\" target=\"_blank\" rel=\"external\">first</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Get the last DOM element within a set of DOM elements.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.last</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-last\"><a href=\"#cy-last\" class=\"headerlink\" title=\"cy.last()\"></a><a href=\"#section-usage\">cy.last()</a></h1><p>Reduce the set of matched DOM elements to the final one in the set.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.last</code>.</p>\n<p><strong>cy.last( <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry getting the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Get-the-last-list-item-in-a-list\"><a href=\"#Get-the-last-list-item-in-a-list\" class=\"headerlink\" title=\"Get the last list item in a list.\"></a>Get the last list item in a list.</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"one\"</span>&gt;</span>Knick knack on my thumb<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"two\"</span>&gt;</span>Knick knack on my shoe<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"three\"</span>&gt;</span>Knick knack on my knee<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"four\"</span>&gt;</span>Knick knack on my door<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns &lt;li class=\"four\"&gt;Knick knack on my door&lt;/li&gt;</span></div><div class=\"line\">cy.get(<span class=\"string\">\"ul\"</span>).last()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Find-the-last-button-in-the-form\"><a href=\"#Find-the-last-button-in-the-form\" class=\"headerlink\" title=\"Find the last button in the form\"></a>Find the last button in the form</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"form\"</span>).find(<span class=\"string\">\"button\"</span>).last()</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"560\" alt=\"screen shot 2015-11-29 at 12 33 52 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458797/8e9abdf6-9695-11e5-8594-7044751d5199.png\"></p>\n<p>When clicking on <code>last</code> within the command log, the console outputs the following:</p>\n<p><img width=\"746\" alt=\"screen shot 2015-11-29 at 12 34 07 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458799/91a115cc-9695-11e5-8569-93fbaa2704d4.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/first\">first</a></li>\n</ul>\n"},{"title":"location","_content":"\nGet the remote `window.location` as a normalized object.\n\n| | |\n|--- | --- |\n| **Returns** | location object detailed below |\n| **Timeout** | *cannot timeout* |\n\n# [cy.location()](#section-usage)\n\nGiven a remote URL of `http://localhost:8000/app/index.html?q=dan#/users/123/edit`, an object would be returned with the following properties:\n\nKey | Type | Returns\n--- | --- | ----\n`hash` | string | #/users/123/edit\n`host` | string | localhost:8000\n`hostname` | string | localhost\n`href` | string | http://localhost:8000/app/index.html?q=brian#/users/123/edit\n`origin` | string | http://localhost:8000\n`pathname` | string | /app.index.html\n`port` | string | 8000\n`protocol` | string | http:\n`search` | string | ?q=brian\n`toString` | function | http://localhost:8000/app/index.html?q=brian#/users/123/edit\n\n***\n\n# [cy.location( *key* )](#section-key-usage)\n\nGet the specific value by key of the location object above.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.location`.\n\n**cy.location( *options* )**\n**cy.location( *key*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Check location for query params and pathname\n\n```javascript\n// we can yield the location subject and work with\n// it directly as an object\ncy\n  .get(\"#search\").type(\"brian{enter}\")\n  .location().should(function(location){\n    expect(location.search).to.eq(\"?search=brian\")\n    expect(location.pathname).to.eq(\"/users\")\n    expect(location.toString()).to.eq(\"http://localhost:8000/users?search=brian\")\n  })\n```\n\n***\n\n# Key Usage\n\n## Assert that a redirect works\n\n```javascript\n// we should be redirected to the login page\ncy\n  .visit(\"http://localhost:3000/admin\")\n  .location(\"pathname\").should(\"eq\", \"/login\")\n```\n\n***\n\n# Notes\n\n## Do not use `window.location`\n\nLet's examine the following scenario:\n\n```javascript\n// get our remote window and log out\n// the window.location object\ncy.window().then(function(window){\n  console.log(window.location)\n})\n```\n\n```javascript\n// go through the location command\n// and log out this object\ncy.location().then(function(location){\n  console.log(location)\n})\n```\n\nCypress automatically normalizes the `cy.location()` command and strips out extrenuous values and properties found in `window.location`. Also the object literal returned by `cy.location()` is just a basic object literal, not the special `window.location` object.\n\nWhen changing properties on the real `window.location` object, it will force the browser to navigate away. In Cypress, the object we returned is a plain object, and changing or affecting its properties will have no effect on navigation.\n\n***\n\n# Command Log\n\n## Assert on the location's href\n\n```javascript\ncy.location().should(function(location){\n  expect(location.href).to.include(\"commands/querying\")\n})\n```\n\nThe commands above will display in the command log as:\n\n![screen shot 2017-03-09 at 1 54 22 pm](https://cloud.githubusercontent.com/assets/1268976/23765705/0768366a-04d0-11e7-8936-beb7d546cbc7.png)\n\nWhen clicking on `location` within the command log, the console outputs the following:\n\n![screen shot 2017-03-09 at 1 54 58 pm](https://cloud.githubusercontent.com/assets/1268976/23765706/089375e0-04d0-11e7-8344-5872c6f270b2.png)\n\n***\n\n# Related\n\n- [hash](https://on.cypress.io/api/hash)\n- [url](https://on.cypress.io/api/url)\n","source":"api/commands/location.md","raw":"title: location\n---\n\nGet the remote `window.location` as a normalized object.\n\n| | |\n|--- | --- |\n| **Returns** | location object detailed below |\n| **Timeout** | *cannot timeout* |\n\n# [cy.location()](#section-usage)\n\nGiven a remote URL of `http://localhost:8000/app/index.html?q=dan#/users/123/edit`, an object would be returned with the following properties:\n\nKey | Type | Returns\n--- | --- | ----\n`hash` | string | #/users/123/edit\n`host` | string | localhost:8000\n`hostname` | string | localhost\n`href` | string | http://localhost:8000/app/index.html?q=brian#/users/123/edit\n`origin` | string | http://localhost:8000\n`pathname` | string | /app.index.html\n`port` | string | 8000\n`protocol` | string | http:\n`search` | string | ?q=brian\n`toString` | function | http://localhost:8000/app/index.html?q=brian#/users/123/edit\n\n***\n\n# [cy.location( *key* )](#section-key-usage)\n\nGet the specific value by key of the location object above.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.location`.\n\n**cy.location( *options* )**\n**cy.location( *key*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Check location for query params and pathname\n\n```javascript\n// we can yield the location subject and work with\n// it directly as an object\ncy\n  .get(\"#search\").type(\"brian{enter}\")\n  .location().should(function(location){\n    expect(location.search).to.eq(\"?search=brian\")\n    expect(location.pathname).to.eq(\"/users\")\n    expect(location.toString()).to.eq(\"http://localhost:8000/users?search=brian\")\n  })\n```\n\n***\n\n# Key Usage\n\n## Assert that a redirect works\n\n```javascript\n// we should be redirected to the login page\ncy\n  .visit(\"http://localhost:3000/admin\")\n  .location(\"pathname\").should(\"eq\", \"/login\")\n```\n\n***\n\n# Notes\n\n## Do not use `window.location`\n\nLet's examine the following scenario:\n\n```javascript\n// get our remote window and log out\n// the window.location object\ncy.window().then(function(window){\n  console.log(window.location)\n})\n```\n\n```javascript\n// go through the location command\n// and log out this object\ncy.location().then(function(location){\n  console.log(location)\n})\n```\n\nCypress automatically normalizes the `cy.location()` command and strips out extrenuous values and properties found in `window.location`. Also the object literal returned by `cy.location()` is just a basic object literal, not the special `window.location` object.\n\nWhen changing properties on the real `window.location` object, it will force the browser to navigate away. In Cypress, the object we returned is a plain object, and changing or affecting its properties will have no effect on navigation.\n\n***\n\n# Command Log\n\n## Assert on the location's href\n\n```javascript\ncy.location().should(function(location){\n  expect(location.href).to.include(\"commands/querying\")\n})\n```\n\nThe commands above will display in the command log as:\n\n![screen shot 2017-03-09 at 1 54 22 pm](https://cloud.githubusercontent.com/assets/1268976/23765705/0768366a-04d0-11e7-8936-beb7d546cbc7.png)\n\nWhen clicking on `location` within the command log, the console outputs the following:\n\n![screen shot 2017-03-09 at 1 54 58 pm](https://cloud.githubusercontent.com/assets/1268976/23765706/089375e0-04d0-11e7-8344-5872c6f270b2.png)\n\n***\n\n# Related\n\n- [hash](https://on.cypress.io/api/hash)\n- [url](https://on.cypress.io/api/url)\n","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/location.html","comments":1,"layout":"page","_id":"cj1pc2g8f0010k1g8nc9j0p18","content":"<p>Get the remote <code>window.location</code> as a normalized object.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>location object detailed below</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><em>cannot timeout</em></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"cy-location\"><a href=\"#cy-location\" class=\"headerlink\" title=\"cy.location()\"></a><a href=\"#section-usage\">cy.location()</a></h1><p>Given a remote URL of <code>http://localhost:8000/app/index.html?q=dan#/users/123/edit</code>, an object would be returned with the following properties:</p>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Type</th>\n<th>Returns</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>hash</code></td>\n<td>string</td>\n<td>#/users/123/edit</td>\n</tr>\n<tr>\n<td><code>host</code></td>\n<td>string</td>\n<td>localhost:8000</td>\n</tr>\n<tr>\n<td><code>hostname</code></td>\n<td>string</td>\n<td>localhost</td>\n</tr>\n<tr>\n<td><code>href</code></td>\n<td>string</td>\n<td><a href=\"http://localhost:8000/app/index.html?q=brian#/users/123/edit\" target=\"_blank\" rel=\"external\">http://localhost:8000/app/index.html?q=brian#/users/123/edit</a></td>\n</tr>\n<tr>\n<td><code>origin</code></td>\n<td>string</td>\n<td><a href=\"http://localhost:8000\" target=\"_blank\" rel=\"external\">http://localhost:8000</a></td>\n</tr>\n<tr>\n<td><code>pathname</code></td>\n<td>string</td>\n<td>/app.index.html</td>\n</tr>\n<tr>\n<td><code>port</code></td>\n<td>string</td>\n<td>8000</td>\n</tr>\n<tr>\n<td><code>protocol</code></td>\n<td>string</td>\n<td>http:</td>\n</tr>\n<tr>\n<td><code>search</code></td>\n<td>string</td>\n<td>?q=brian</td>\n</tr>\n<tr>\n<td><code>toString</code></td>\n<td>function</td>\n<td><a href=\"http://localhost:8000/app/index.html?q=brian#/users/123/edit\" target=\"_blank\" rel=\"external\">http://localhost:8000/app/index.html?q=brian#/users/123/edit</a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-location-key\"><a href=\"#cy-location-key\" class=\"headerlink\" title=\"cy.location( key )\"></a><a href=\"#section-key-usage\">cy.location( <em>key</em> )</a></h1><p>Get the specific value by key of the location object above.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.location</code>.</p>\n<p><strong>cy.location( <em>options</em> )</strong><br><strong>cy.location( <em>key</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Check-location-for-query-params-and-pathname\"><a href=\"#Check-location-for-query-params-and-pathname\" class=\"headerlink\" title=\"Check location for query params and pathname\"></a>Check location for query params and pathname</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// we can yield the location subject and work with</span></div><div class=\"line\"><span class=\"comment\">// it directly as an object</span></div><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"#search\"</span>).type(<span class=\"string\">\"brian&#123;enter&#125;\"</span>)</div><div class=\"line\">  .location().should(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">location</span>)</span>&#123;</div><div class=\"line\">    expect(location.search).to.eq(<span class=\"string\">\"?search=brian\"</span>)</div><div class=\"line\">    expect(location.pathname).to.eq(<span class=\"string\">\"/users\"</span>)</div><div class=\"line\">    expect(location.toString()).to.eq(<span class=\"string\">\"http://localhost:8000/users?search=brian\"</span>)</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Key-Usage\"><a href=\"#Key-Usage\" class=\"headerlink\" title=\"Key Usage\"></a>Key Usage</h1><h2 id=\"Assert-that-a-redirect-works\"><a href=\"#Assert-that-a-redirect-works\" class=\"headerlink\" title=\"Assert that a redirect works\"></a>Assert that a redirect works</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// we should be redirected to the login page</span></div><div class=\"line\">cy</div><div class=\"line\">  .visit(<span class=\"string\">\"http://localhost:3000/admin\"</span>)</div><div class=\"line\">  .location(<span class=\"string\">\"pathname\"</span>).should(<span class=\"string\">\"eq\"</span>, <span class=\"string\">\"/login\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h1><h2 id=\"Do-not-use-window-location\"><a href=\"#Do-not-use-window-location\" class=\"headerlink\" title=\"Do not use window.location\"></a>Do not use <code>window.location</code></h2><p>Let’s examine the following scenario:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// get our remote window and log out</span></div><div class=\"line\"><span class=\"comment\">// the window.location object</span></div><div class=\"line\">cy.window().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">window</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.location)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// go through the location command</span></div><div class=\"line\"><span class=\"comment\">// and log out this object</span></div><div class=\"line\">cy.location().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">location</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(location)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Cypress automatically normalizes the <code>cy.location()</code> command and strips out extrenuous values and properties found in <code>window.location</code>. Also the object literal returned by <code>cy.location()</code> is just a basic object literal, not the special <code>window.location</code> object.</p>\n<p>When changing properties on the real <code>window.location</code> object, it will force the browser to navigate away. In Cypress, the object we returned is a plain object, and changing or affecting its properties will have no effect on navigation.</p>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Assert-on-the-location’s-href\"><a href=\"#Assert-on-the-location’s-href\" class=\"headerlink\" title=\"Assert on the location’s href\"></a>Assert on the location’s href</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.location().should(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">location</span>)</span>&#123;</div><div class=\"line\">  expect(location.href).to.include(<span class=\"string\">\"commands/querying\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/23765705/0768366a-04d0-11e7-8936-beb7d546cbc7.png\" alt=\"screen shot 2017-03-09 at 1 54 22 pm\"></p>\n<p>When clicking on <code>location</code> within the command log, the console outputs the following:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/23765706/089375e0-04d0-11e7-8344-5872c6f270b2.png\" alt=\"screen shot 2017-03-09 at 1 54 58 pm\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/hash\" target=\"_blank\" rel=\"external\">hash</a></li>\n<li><a href=\"https://on.cypress.io/api/url\" target=\"_blank\" rel=\"external\">url</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Get the remote <code>window.location</code> as a normalized object.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>location object detailed below</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><em>cannot timeout</em></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"cy-location\"><a href=\"#cy-location\" class=\"headerlink\" title=\"cy.location()\"></a><a href=\"#section-usage\">cy.location()</a></h1><p>Given a remote URL of <code>http://localhost:8000/app/index.html?q=dan#/users/123/edit</code>, an object would be returned with the following properties:</p>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Type</th>\n<th>Returns</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>hash</code></td>\n<td>string</td>\n<td>#/users/123/edit</td>\n</tr>\n<tr>\n<td><code>host</code></td>\n<td>string</td>\n<td>localhost:8000</td>\n</tr>\n<tr>\n<td><code>hostname</code></td>\n<td>string</td>\n<td>localhost</td>\n</tr>\n<tr>\n<td><code>href</code></td>\n<td>string</td>\n<td><a href=\"http://localhost:8000/app/index.html?q=brian#/users/123/edit\">http://localhost:8000/app/index.html?q=brian#/users/123/edit</a></td>\n</tr>\n<tr>\n<td><code>origin</code></td>\n<td>string</td>\n<td><a href=\"http://localhost:8000\">http://localhost:8000</a></td>\n</tr>\n<tr>\n<td><code>pathname</code></td>\n<td>string</td>\n<td>/app.index.html</td>\n</tr>\n<tr>\n<td><code>port</code></td>\n<td>string</td>\n<td>8000</td>\n</tr>\n<tr>\n<td><code>protocol</code></td>\n<td>string</td>\n<td>http:</td>\n</tr>\n<tr>\n<td><code>search</code></td>\n<td>string</td>\n<td>?q=brian</td>\n</tr>\n<tr>\n<td><code>toString</code></td>\n<td>function</td>\n<td><a href=\"http://localhost:8000/app/index.html?q=brian#/users/123/edit\">http://localhost:8000/app/index.html?q=brian#/users/123/edit</a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-location-key\"><a href=\"#cy-location-key\" class=\"headerlink\" title=\"cy.location( key )\"></a><a href=\"#section-key-usage\">cy.location( <em>key</em> )</a></h1><p>Get the specific value by key of the location object above.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.location</code>.</p>\n<p><strong>cy.location( <em>options</em> )</strong><br><strong>cy.location( <em>key</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Check-location-for-query-params-and-pathname\"><a href=\"#Check-location-for-query-params-and-pathname\" class=\"headerlink\" title=\"Check location for query params and pathname\"></a>Check location for query params and pathname</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// we can yield the location subject and work with</span></div><div class=\"line\"><span class=\"comment\">// it directly as an object</span></div><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"#search\"</span>).type(<span class=\"string\">\"brian&#123;enter&#125;\"</span>)</div><div class=\"line\">  .location().should(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">location</span>)</span>&#123;</div><div class=\"line\">    expect(location.search).to.eq(<span class=\"string\">\"?search=brian\"</span>)</div><div class=\"line\">    expect(location.pathname).to.eq(<span class=\"string\">\"/users\"</span>)</div><div class=\"line\">    expect(location.toString()).to.eq(<span class=\"string\">\"http://localhost:8000/users?search=brian\"</span>)</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Key-Usage\"><a href=\"#Key-Usage\" class=\"headerlink\" title=\"Key Usage\"></a>Key Usage</h1><h2 id=\"Assert-that-a-redirect-works\"><a href=\"#Assert-that-a-redirect-works\" class=\"headerlink\" title=\"Assert that a redirect works\"></a>Assert that a redirect works</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// we should be redirected to the login page</span></div><div class=\"line\">cy</div><div class=\"line\">  .visit(<span class=\"string\">\"http://localhost:3000/admin\"</span>)</div><div class=\"line\">  .location(<span class=\"string\">\"pathname\"</span>).should(<span class=\"string\">\"eq\"</span>, <span class=\"string\">\"/login\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h1><h2 id=\"Do-not-use-window-location\"><a href=\"#Do-not-use-window-location\" class=\"headerlink\" title=\"Do not use window.location\"></a>Do not use <code>window.location</code></h2><p>Let’s examine the following scenario:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// get our remote window and log out</span></div><div class=\"line\"><span class=\"comment\">// the window.location object</span></div><div class=\"line\">cy.window().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">window</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.location)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// go through the location command</span></div><div class=\"line\"><span class=\"comment\">// and log out this object</span></div><div class=\"line\">cy.location().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">location</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(location)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Cypress automatically normalizes the <code>cy.location()</code> command and strips out extrenuous values and properties found in <code>window.location</code>. Also the object literal returned by <code>cy.location()</code> is just a basic object literal, not the special <code>window.location</code> object.</p>\n<p>When changing properties on the real <code>window.location</code> object, it will force the browser to navigate away. In Cypress, the object we returned is a plain object, and changing or affecting its properties will have no effect on navigation.</p>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Assert-on-the-location’s-href\"><a href=\"#Assert-on-the-location’s-href\" class=\"headerlink\" title=\"Assert on the location’s href\"></a>Assert on the location’s href</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.location().should(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">location</span>)</span>&#123;</div><div class=\"line\">  expect(location.href).to.include(<span class=\"string\">\"commands/querying\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/23765705/0768366a-04d0-11e7-8936-beb7d546cbc7.png\" alt=\"screen shot 2017-03-09 at 1 54 22 pm\"></p>\n<p>When clicking on <code>location</code> within the command log, the console outputs the following:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/23765706/089375e0-04d0-11e7-8344-5872c6f270b2.png\" alt=\"screen shot 2017-03-09 at 1 54 58 pm\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/hash\">hash</a></li>\n<li><a href=\"https://on.cypress.io/api/url\">url</a></li>\n</ul>\n"},{"title":"log","_content":"\nPrint a message to the Command Log within Cypress.\n\n| | |\n|--- | --- |\n| **Returns** | null |\n| **Timeout** | *cannot timeout* |\n\n***\n\n# [cy.log( *message* )](#section-usage)\n\nPrint the message to the Command Log.\n\n***\n\n# [cy.log( *message*, *arguments* )](#section-arguments-usage)\n\nPrint the message to the Command Log, along with any arguments.\n\n***\n\n# Usage\n\n## Log a message to the Command Log.\n\n```javascript\ncy.log(\"Login successful\")\n```\n\n***\n\n# Arguments Usage\n\n## Log a message with arguments to the Command Log.\n\n```javascript\n// print previously saved variable 'events' to the Command Log.\ncy.log(\"events triggered\", events)\n```\n\n***\n\n# Command Log\n\n## Print messages with arguments to the Command Log.\n\n```javascript\ncy\n  .log(\"log out any message we want here\")\n  .log(\"another message\", [\"one\", \"two\", \"three\"])\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"560\" alt=\"command log with cy.log\" src=\"https://cloud.githubusercontent.com/assets/1271364/21321329/55389b3c-c5e2-11e6-8607-592683d520da.png\">\n\nWhen clicking on `log` within the command log, the console outputs the following:\n\n<img width=\"746\" alt=\"console display of cy.log\" src=\"https://cloud.githubusercontent.com/assets/1271364/21321324/4f616dec-c5e2-11e6-8c2f-924e7bfd6f87.png\">\n","source":"api/commands/log.md","raw":"title: log\n---\n\nPrint a message to the Command Log within Cypress.\n\n| | |\n|--- | --- |\n| **Returns** | null |\n| **Timeout** | *cannot timeout* |\n\n***\n\n# [cy.log( *message* )](#section-usage)\n\nPrint the message to the Command Log.\n\n***\n\n# [cy.log( *message*, *arguments* )](#section-arguments-usage)\n\nPrint the message to the Command Log, along with any arguments.\n\n***\n\n# Usage\n\n## Log a message to the Command Log.\n\n```javascript\ncy.log(\"Login successful\")\n```\n\n***\n\n# Arguments Usage\n\n## Log a message with arguments to the Command Log.\n\n```javascript\n// print previously saved variable 'events' to the Command Log.\ncy.log(\"events triggered\", events)\n```\n\n***\n\n# Command Log\n\n## Print messages with arguments to the Command Log.\n\n```javascript\ncy\n  .log(\"log out any message we want here\")\n  .log(\"another message\", [\"one\", \"two\", \"three\"])\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"560\" alt=\"command log with cy.log\" src=\"https://cloud.githubusercontent.com/assets/1271364/21321329/55389b3c-c5e2-11e6-8607-592683d520da.png\">\n\nWhen clicking on `log` within the command log, the console outputs the following:\n\n<img width=\"746\" alt=\"console display of cy.log\" src=\"https://cloud.githubusercontent.com/assets/1271364/21321324/4f616dec-c5e2-11e6-8c2f-924e7bfd6f87.png\">\n","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/log.html","comments":1,"layout":"page","_id":"cj1pc2g8f0011k1g8y1ekn6yt","content":"<p>Print a message to the Command Log within Cypress.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>null</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><em>cannot timeout</em></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-log-message\"><a href=\"#cy-log-message\" class=\"headerlink\" title=\"cy.log( message )\"></a><a href=\"#section-usage\">cy.log( <em>message</em> )</a></h1><p>Print the message to the Command Log.</p>\n<hr>\n<h1 id=\"cy-log-message-arguments\"><a href=\"#cy-log-message-arguments\" class=\"headerlink\" title=\"cy.log( message, arguments )\"></a><a href=\"#section-arguments-usage\">cy.log( <em>message</em>, <em>arguments</em> )</a></h1><p>Print the message to the Command Log, along with any arguments.</p>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Log-a-message-to-the-Command-Log\"><a href=\"#Log-a-message-to-the-Command-Log\" class=\"headerlink\" title=\"Log a message to the Command Log.\"></a>Log a message to the Command Log.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.log(<span class=\"string\">\"Login successful\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Arguments-Usage\"><a href=\"#Arguments-Usage\" class=\"headerlink\" title=\"Arguments Usage\"></a>Arguments Usage</h1><h2 id=\"Log-a-message-with-arguments-to-the-Command-Log\"><a href=\"#Log-a-message-with-arguments-to-the-Command-Log\" class=\"headerlink\" title=\"Log a message with arguments to the Command Log.\"></a>Log a message with arguments to the Command Log.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// print previously saved variable 'events' to the Command Log.</span></div><div class=\"line\">cy.log(<span class=\"string\">\"events triggered\"</span>, events)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Print-messages-with-arguments-to-the-Command-Log\"><a href=\"#Print-messages-with-arguments-to-the-Command-Log\" class=\"headerlink\" title=\"Print messages with arguments to the Command Log.\"></a>Print messages with arguments to the Command Log.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .log(<span class=\"string\">\"log out any message we want here\"</span>)</div><div class=\"line\">  .log(<span class=\"string\">\"another message\"</span>, [<span class=\"string\">\"one\"</span>, <span class=\"string\">\"two\"</span>, <span class=\"string\">\"three\"</span>])</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"560\" alt=\"command log with cy.log\" src=\"https://cloud.githubusercontent.com/assets/1271364/21321329/55389b3c-c5e2-11e6-8607-592683d520da.png\"></p>\n<p>When clicking on <code>log</code> within the command log, the console outputs the following:</p>\n<p><img width=\"746\" alt=\"console display of cy.log\" src=\"https://cloud.githubusercontent.com/assets/1271364/21321324/4f616dec-c5e2-11e6-8c2f-924e7bfd6f87.png\"></p>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Print a message to the Command Log within Cypress.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>null</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><em>cannot timeout</em></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-log-message\"><a href=\"#cy-log-message\" class=\"headerlink\" title=\"cy.log( message )\"></a><a href=\"#section-usage\">cy.log( <em>message</em> )</a></h1><p>Print the message to the Command Log.</p>\n<hr>\n<h1 id=\"cy-log-message-arguments\"><a href=\"#cy-log-message-arguments\" class=\"headerlink\" title=\"cy.log( message, arguments )\"></a><a href=\"#section-arguments-usage\">cy.log( <em>message</em>, <em>arguments</em> )</a></h1><p>Print the message to the Command Log, along with any arguments.</p>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Log-a-message-to-the-Command-Log\"><a href=\"#Log-a-message-to-the-Command-Log\" class=\"headerlink\" title=\"Log a message to the Command Log.\"></a>Log a message to the Command Log.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.log(<span class=\"string\">\"Login successful\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Arguments-Usage\"><a href=\"#Arguments-Usage\" class=\"headerlink\" title=\"Arguments Usage\"></a>Arguments Usage</h1><h2 id=\"Log-a-message-with-arguments-to-the-Command-Log\"><a href=\"#Log-a-message-with-arguments-to-the-Command-Log\" class=\"headerlink\" title=\"Log a message with arguments to the Command Log.\"></a>Log a message with arguments to the Command Log.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// print previously saved variable 'events' to the Command Log.</span></div><div class=\"line\">cy.log(<span class=\"string\">\"events triggered\"</span>, events)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Print-messages-with-arguments-to-the-Command-Log\"><a href=\"#Print-messages-with-arguments-to-the-Command-Log\" class=\"headerlink\" title=\"Print messages with arguments to the Command Log.\"></a>Print messages with arguments to the Command Log.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .log(<span class=\"string\">\"log out any message we want here\"</span>)</div><div class=\"line\">  .log(<span class=\"string\">\"another message\"</span>, [<span class=\"string\">\"one\"</span>, <span class=\"string\">\"two\"</span>, <span class=\"string\">\"three\"</span>])</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"560\" alt=\"command log with cy.log\" src=\"https://cloud.githubusercontent.com/assets/1271364/21321329/55389b3c-c5e2-11e6-8607-592683d520da.png\"></p>\n<p>When clicking on <code>log</code> within the command log, the console outputs the following:</p>\n<p><img width=\"746\" alt=\"console display of cy.log\" src=\"https://cloud.githubusercontent.com/assets/1271364/21321324/4f616dec-c5e2-11e6-8c2f-924e7bfd6f87.png\"></p>\n"},{"title":"nextall","_content":"\nGet all following siblings of each DOM element in the set of matched DOM elements.\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.nextAll` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#timeouts) |\n\n***\n\n# [cy.nextAll()](#usage)\n\nGet all of the next siblings of the elements.\n\n***\n\n# [cy.nextAll( *selector* )](#selector-usage)\n\nWhen a selector is provided, it retrieves all of the following siblings only if it matches that selector.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.nextAll`.\n\n**cy.nextAll( *options* )**\n**cy.nextAll( *selector*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#timeouts) | Total time to retry getting the element\n\n***\n\n# Usage\n\n## Find all of the element's siblings following `.second`\n\n```html\n<ul>\n  <li>apples</li>\n  <li class=\"second\">oranges</li>\n  <li>bananas</li>\n  <li>pineapples</li>\n  <li>grapes</li>\n</ul>\n```\n\n```javascript\n//returns [<li>bananas</li>, <li>pineapples</li>, <li>grapes</li>]\ncy.get(\".second\").nextAll()\n```\n\n***\n\n# Selector Usage\n\n## Find all of the following siblings of each li. Keep only the ones with a class `selected`.\n\n```html\n<ul>\n  <li>apples</li>\n  <li>oranges</li>\n  <li>bananas</li>\n  <li class=\"selected\">pineapples</li>\n  <li>grapes</li>\n</ul>\n```\n\n```javascript\n//returns <li>pineapples</li>\ncy.get(\"li\").nextAll(\".selected\")\n```\n\n***\n\n# Command Log\n\n## Find all elements following the active li\n\n```javascript\ncy.get(\".left-nav\").find(\"li.active\").nextAll()\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"560\" alt=\"screen shot 2017-03-23 at 2 05 32 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24262886/e1513334-0fd1-11e7-93b1-b413a9390828.png\">\n\nWhen clicking on `nextAll` within the command log, the console outputs the following:\n\n<img width=\"567\" alt=\"screen shot 2017-03-23 at 2 05 52 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24262907/f2b7fe78-0fd1-11e7-921c-6eabf6e32abb.png\">\n\n***\n\n# Related\n\n- [next](https://on.cypress.io/api/next)\n- [nextUntil](https://on.cypress.io/api/nextuntil)\n- [prevAll](https://on.cypress.io/api/prevall)\n","source":"api/commands/nextall.md","raw":"title: nextall\n---\n\nGet all following siblings of each DOM element in the set of matched DOM elements.\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.nextAll` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#timeouts) |\n\n***\n\n# [cy.nextAll()](#usage)\n\nGet all of the next siblings of the elements.\n\n***\n\n# [cy.nextAll( *selector* )](#selector-usage)\n\nWhen a selector is provided, it retrieves all of the following siblings only if it matches that selector.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.nextAll`.\n\n**cy.nextAll( *options* )**\n**cy.nextAll( *selector*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#timeouts) | Total time to retry getting the element\n\n***\n\n# Usage\n\n## Find all of the element's siblings following `.second`\n\n```html\n<ul>\n  <li>apples</li>\n  <li class=\"second\">oranges</li>\n  <li>bananas</li>\n  <li>pineapples</li>\n  <li>grapes</li>\n</ul>\n```\n\n```javascript\n//returns [<li>bananas</li>, <li>pineapples</li>, <li>grapes</li>]\ncy.get(\".second\").nextAll()\n```\n\n***\n\n# Selector Usage\n\n## Find all of the following siblings of each li. Keep only the ones with a class `selected`.\n\n```html\n<ul>\n  <li>apples</li>\n  <li>oranges</li>\n  <li>bananas</li>\n  <li class=\"selected\">pineapples</li>\n  <li>grapes</li>\n</ul>\n```\n\n```javascript\n//returns <li>pineapples</li>\ncy.get(\"li\").nextAll(\".selected\")\n```\n\n***\n\n# Command Log\n\n## Find all elements following the active li\n\n```javascript\ncy.get(\".left-nav\").find(\"li.active\").nextAll()\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"560\" alt=\"screen shot 2017-03-23 at 2 05 32 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24262886/e1513334-0fd1-11e7-93b1-b413a9390828.png\">\n\nWhen clicking on `nextAll` within the command log, the console outputs the following:\n\n<img width=\"567\" alt=\"screen shot 2017-03-23 at 2 05 52 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24262907/f2b7fe78-0fd1-11e7-921c-6eabf6e32abb.png\">\n\n***\n\n# Related\n\n- [next](https://on.cypress.io/api/next)\n- [nextUntil](https://on.cypress.io/api/nextuntil)\n- [prevAll](https://on.cypress.io/api/prevall)\n","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/nextall.html","comments":1,"layout":"page","_id":"cj1pc2g8g0012k1g8a8nacwmc","content":"<p>Get all following siblings of each DOM element in the set of matched DOM elements.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.nextAll</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-nextAll\"><a href=\"#cy-nextAll\" class=\"headerlink\" title=\"cy.nextAll()\"></a><a href=\"#usage\">cy.nextAll()</a></h1><p>Get all of the next siblings of the elements.</p>\n<hr>\n<h1 id=\"cy-nextAll-selector\"><a href=\"#cy-nextAll-selector\" class=\"headerlink\" title=\"cy.nextAll( selector )\"></a><a href=\"#selector-usage\">cy.nextAll( <em>selector</em> )</a></h1><p>When a selector is provided, it retrieves all of the following siblings only if it matches that selector.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.nextAll</code>.</p>\n<p><strong>cy.nextAll( <em>options</em> )</strong><br><strong>cy.nextAll( <em>selector</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry getting the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Find-all-of-the-element’s-siblings-following-second\"><a href=\"#Find-all-of-the-element’s-siblings-following-second\" class=\"headerlink\" title=\"Find all of the element’s siblings following .second\"></a>Find all of the element’s siblings following <code>.second</code></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>apples<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"second\"</span>&gt;</span>oranges<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>bananas<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>pineapples<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>grapes<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//returns [&lt;li&gt;bananas&lt;/li&gt;, &lt;li&gt;pineapples&lt;/li&gt;, &lt;li&gt;grapes&lt;/li&gt;]</span></div><div class=\"line\">cy.get(<span class=\"string\">\".second\"</span>).nextAll()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Selector-Usage\"><a href=\"#Selector-Usage\" class=\"headerlink\" title=\"Selector Usage\"></a>Selector Usage</h1><h2 id=\"Find-all-of-the-following-siblings-of-each-li-Keep-only-the-ones-with-a-class-selected\"><a href=\"#Find-all-of-the-following-siblings-of-each-li-Keep-only-the-ones-with-a-class-selected\" class=\"headerlink\" title=\"Find all of the following siblings of each li. Keep only the ones with a class selected.\"></a>Find all of the following siblings of each li. Keep only the ones with a class <code>selected</code>.</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>apples<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>oranges<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>bananas<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"selected\"</span>&gt;</span>pineapples<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>grapes<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//returns &lt;li&gt;pineapples&lt;/li&gt;</span></div><div class=\"line\">cy.get(<span class=\"string\">\"li\"</span>).nextAll(<span class=\"string\">\".selected\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Find-all-elements-following-the-active-li\"><a href=\"#Find-all-elements-following-the-active-li\" class=\"headerlink\" title=\"Find all elements following the active li\"></a>Find all elements following the active li</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\".left-nav\"</span>).find(<span class=\"string\">\"li.active\"</span>).nextAll()</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"560\" alt=\"screen shot 2017-03-23 at 2 05 32 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24262886/e1513334-0fd1-11e7-93b1-b413a9390828.png\"></p>\n<p>When clicking on <code>nextAll</code> within the command log, the console outputs the following:</p>\n<p><img width=\"567\" alt=\"screen shot 2017-03-23 at 2 05 52 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24262907/f2b7fe78-0fd1-11e7-921c-6eabf6e32abb.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/next\" target=\"_blank\" rel=\"external\">next</a></li>\n<li><a href=\"https://on.cypress.io/api/nextuntil\" target=\"_blank\" rel=\"external\">nextUntil</a></li>\n<li><a href=\"https://on.cypress.io/api/prevall\" target=\"_blank\" rel=\"external\">prevAll</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Get all following siblings of each DOM element in the set of matched DOM elements.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.nextAll</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#timeouts\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-nextAll\"><a href=\"#cy-nextAll\" class=\"headerlink\" title=\"cy.nextAll()\"></a><a href=\"#usage\">cy.nextAll()</a></h1><p>Get all of the next siblings of the elements.</p>\n<hr>\n<h1 id=\"cy-nextAll-selector\"><a href=\"#cy-nextAll-selector\" class=\"headerlink\" title=\"cy.nextAll( selector )\"></a><a href=\"#selector-usage\">cy.nextAll( <em>selector</em> )</a></h1><p>When a selector is provided, it retrieves all of the following siblings only if it matches that selector.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.nextAll</code>.</p>\n<p><strong>cy.nextAll( <em>options</em> )</strong><br><strong>cy.nextAll( <em>selector</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#timeouts\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry getting the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Find-all-of-the-element’s-siblings-following-second\"><a href=\"#Find-all-of-the-element’s-siblings-following-second\" class=\"headerlink\" title=\"Find all of the element’s siblings following .second\"></a>Find all of the element’s siblings following <code>.second</code></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>apples<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"second\"</span>&gt;</span>oranges<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>bananas<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>pineapples<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>grapes<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//returns [&lt;li&gt;bananas&lt;/li&gt;, &lt;li&gt;pineapples&lt;/li&gt;, &lt;li&gt;grapes&lt;/li&gt;]</span></div><div class=\"line\">cy.get(<span class=\"string\">\".second\"</span>).nextAll()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Selector-Usage\"><a href=\"#Selector-Usage\" class=\"headerlink\" title=\"Selector Usage\"></a>Selector Usage</h1><h2 id=\"Find-all-of-the-following-siblings-of-each-li-Keep-only-the-ones-with-a-class-selected\"><a href=\"#Find-all-of-the-following-siblings-of-each-li-Keep-only-the-ones-with-a-class-selected\" class=\"headerlink\" title=\"Find all of the following siblings of each li. Keep only the ones with a class selected.\"></a>Find all of the following siblings of each li. Keep only the ones with a class <code>selected</code>.</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>apples<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>oranges<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>bananas<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"selected\"</span>&gt;</span>pineapples<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>grapes<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//returns &lt;li&gt;pineapples&lt;/li&gt;</span></div><div class=\"line\">cy.get(<span class=\"string\">\"li\"</span>).nextAll(<span class=\"string\">\".selected\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Find-all-elements-following-the-active-li\"><a href=\"#Find-all-elements-following-the-active-li\" class=\"headerlink\" title=\"Find all elements following the active li\"></a>Find all elements following the active li</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\".left-nav\"</span>).find(<span class=\"string\">\"li.active\"</span>).nextAll()</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"560\" alt=\"screen shot 2017-03-23 at 2 05 32 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24262886/e1513334-0fd1-11e7-93b1-b413a9390828.png\"></p>\n<p>When clicking on <code>nextAll</code> within the command log, the console outputs the following:</p>\n<p><img width=\"567\" alt=\"screen shot 2017-03-23 at 2 05 52 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24262907/f2b7fe78-0fd1-11e7-921c-6eabf6e32abb.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/next\">next</a></li>\n<li><a href=\"https://on.cypress.io/api/nextuntil\">nextUntil</a></li>\n<li><a href=\"https://on.cypress.io/api/prevall\">prevAll</a></li>\n</ul>\n"},{"title":"next","_content":"\nGet the immediately following sibling of each DOM element in the set of matched DOM elements.\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.next` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.next()](#section-usage)\n\nGet the next sibling of the elements.\n\n***\n\n# [cy.next( *selector* )](#section-selector-usage)\n\nWhen a selector is provided, it retrieves the next sibling only if it matches that selector.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.next`.\n\n**cy.next( *options* )**\n**cy.next( *selector*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry getting the element\n\n***\n\n# Usage\n\n## Find the element next to `.second`\n\n```html\n<ul>\n  <li>apples</li>\n  <li class=\"second\">oranges</li>\n  <li>bananas</li>\n</ul>\n```\n\n```javascript\n//returns <li>bananas</li>\ncy.get(\".second\").next()\n```\n\n***\n\n# Selector Usage\n\n## Find the very next sibling of each li. Keep only the ones with a class `selected`.\n\n```html\n<ul>\n  <li>apples</li>\n  <li>oranges</li>\n  <li>bananas</li>\n  <li class=\"selected\">pineapples</li>\n</ul>\n```\n\n```javascript\n//returns <li>pineapples</li>\ncy.get(\"li\").next(\".selected\")\n```\n\n***\n\n# Command Log\n\n## Find the element next to the active li\n\n```javascript\ncy.get(\".left-nav\").find(\"li.active\").next()\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"563\" alt=\"screen shot 2015-11-29 at 12 42 07 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458857/afcfddf2-9696-11e5-9405-0cd994f70d45.png\">\n\nWhen clicking on `next` within the command log, the console outputs the following:\n\n<img width=\"547\" alt=\"screen shot 2015-11-29 at 12 42 22 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458858/b30b0a0a-9696-11e5-99b9-d785b597287c.png\">\n\n***\n\n# Related\n\n- [prev](https://on.cypress.io/api/prev)","source":"api/commands/next.md","raw":"title: next\n---\n\nGet the immediately following sibling of each DOM element in the set of matched DOM elements.\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.next` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.next()](#section-usage)\n\nGet the next sibling of the elements.\n\n***\n\n# [cy.next( *selector* )](#section-selector-usage)\n\nWhen a selector is provided, it retrieves the next sibling only if it matches that selector.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.next`.\n\n**cy.next( *options* )**\n**cy.next( *selector*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry getting the element\n\n***\n\n# Usage\n\n## Find the element next to `.second`\n\n```html\n<ul>\n  <li>apples</li>\n  <li class=\"second\">oranges</li>\n  <li>bananas</li>\n</ul>\n```\n\n```javascript\n//returns <li>bananas</li>\ncy.get(\".second\").next()\n```\n\n***\n\n# Selector Usage\n\n## Find the very next sibling of each li. Keep only the ones with a class `selected`.\n\n```html\n<ul>\n  <li>apples</li>\n  <li>oranges</li>\n  <li>bananas</li>\n  <li class=\"selected\">pineapples</li>\n</ul>\n```\n\n```javascript\n//returns <li>pineapples</li>\ncy.get(\"li\").next(\".selected\")\n```\n\n***\n\n# Command Log\n\n## Find the element next to the active li\n\n```javascript\ncy.get(\".left-nav\").find(\"li.active\").next()\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"563\" alt=\"screen shot 2015-11-29 at 12 42 07 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458857/afcfddf2-9696-11e5-9405-0cd994f70d45.png\">\n\nWhen clicking on `next` within the command log, the console outputs the following:\n\n<img width=\"547\" alt=\"screen shot 2015-11-29 at 12 42 22 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458858/b30b0a0a-9696-11e5-99b9-d785b597287c.png\">\n\n***\n\n# Related\n\n- [prev](https://on.cypress.io/api/prev)","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/next.html","comments":1,"layout":"page","_id":"cj1pc2g8g0013k1g8sbnxzkf3","content":"<p>Get the immediately following sibling of each DOM element in the set of matched DOM elements.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.next</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-next\"><a href=\"#cy-next\" class=\"headerlink\" title=\"cy.next()\"></a><a href=\"#section-usage\">cy.next()</a></h1><p>Get the next sibling of the elements.</p>\n<hr>\n<h1 id=\"cy-next-selector\"><a href=\"#cy-next-selector\" class=\"headerlink\" title=\"cy.next( selector )\"></a><a href=\"#section-selector-usage\">cy.next( <em>selector</em> )</a></h1><p>When a selector is provided, it retrieves the next sibling only if it matches that selector.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.next</code>.</p>\n<p><strong>cy.next( <em>options</em> )</strong><br><strong>cy.next( <em>selector</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry getting the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Find-the-element-next-to-second\"><a href=\"#Find-the-element-next-to-second\" class=\"headerlink\" title=\"Find the element next to .second\"></a>Find the element next to <code>.second</code></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>apples<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"second\"</span>&gt;</span>oranges<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>bananas<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//returns &lt;li&gt;bananas&lt;/li&gt;</span></div><div class=\"line\">cy.get(<span class=\"string\">\".second\"</span>).next()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Selector-Usage\"><a href=\"#Selector-Usage\" class=\"headerlink\" title=\"Selector Usage\"></a>Selector Usage</h1><h2 id=\"Find-the-very-next-sibling-of-each-li-Keep-only-the-ones-with-a-class-selected\"><a href=\"#Find-the-very-next-sibling-of-each-li-Keep-only-the-ones-with-a-class-selected\" class=\"headerlink\" title=\"Find the very next sibling of each li. Keep only the ones with a class selected.\"></a>Find the very next sibling of each li. Keep only the ones with a class <code>selected</code>.</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>apples<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>oranges<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>bananas<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"selected\"</span>&gt;</span>pineapples<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//returns &lt;li&gt;pineapples&lt;/li&gt;</span></div><div class=\"line\">cy.get(<span class=\"string\">\"li\"</span>).next(<span class=\"string\">\".selected\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Find-the-element-next-to-the-active-li\"><a href=\"#Find-the-element-next-to-the-active-li\" class=\"headerlink\" title=\"Find the element next to the active li\"></a>Find the element next to the active li</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\".left-nav\"</span>).find(<span class=\"string\">\"li.active\"</span>).next()</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"563\" alt=\"screen shot 2015-11-29 at 12 42 07 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458857/afcfddf2-9696-11e5-9405-0cd994f70d45.png\"></p>\n<p>When clicking on <code>next</code> within the command log, the console outputs the following:</p>\n<p><img width=\"547\" alt=\"screen shot 2015-11-29 at 12 42 22 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458858/b30b0a0a-9696-11e5-99b9-d785b597287c.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/prev\" target=\"_blank\" rel=\"external\">prev</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Get the immediately following sibling of each DOM element in the set of matched DOM elements.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.next</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-next\"><a href=\"#cy-next\" class=\"headerlink\" title=\"cy.next()\"></a><a href=\"#section-usage\">cy.next()</a></h1><p>Get the next sibling of the elements.</p>\n<hr>\n<h1 id=\"cy-next-selector\"><a href=\"#cy-next-selector\" class=\"headerlink\" title=\"cy.next( selector )\"></a><a href=\"#section-selector-usage\">cy.next( <em>selector</em> )</a></h1><p>When a selector is provided, it retrieves the next sibling only if it matches that selector.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.next</code>.</p>\n<p><strong>cy.next( <em>options</em> )</strong><br><strong>cy.next( <em>selector</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry getting the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Find-the-element-next-to-second\"><a href=\"#Find-the-element-next-to-second\" class=\"headerlink\" title=\"Find the element next to .second\"></a>Find the element next to <code>.second</code></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>apples<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"second\"</span>&gt;</span>oranges<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>bananas<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//returns &lt;li&gt;bananas&lt;/li&gt;</span></div><div class=\"line\">cy.get(<span class=\"string\">\".second\"</span>).next()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Selector-Usage\"><a href=\"#Selector-Usage\" class=\"headerlink\" title=\"Selector Usage\"></a>Selector Usage</h1><h2 id=\"Find-the-very-next-sibling-of-each-li-Keep-only-the-ones-with-a-class-selected\"><a href=\"#Find-the-very-next-sibling-of-each-li-Keep-only-the-ones-with-a-class-selected\" class=\"headerlink\" title=\"Find the very next sibling of each li. Keep only the ones with a class selected.\"></a>Find the very next sibling of each li. Keep only the ones with a class <code>selected</code>.</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>apples<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>oranges<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>bananas<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"selected\"</span>&gt;</span>pineapples<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//returns &lt;li&gt;pineapples&lt;/li&gt;</span></div><div class=\"line\">cy.get(<span class=\"string\">\"li\"</span>).next(<span class=\"string\">\".selected\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Find-the-element-next-to-the-active-li\"><a href=\"#Find-the-element-next-to-the-active-li\" class=\"headerlink\" title=\"Find the element next to the active li\"></a>Find the element next to the active li</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\".left-nav\"</span>).find(<span class=\"string\">\"li.active\"</span>).next()</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"563\" alt=\"screen shot 2015-11-29 at 12 42 07 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458857/afcfddf2-9696-11e5-9405-0cd994f70d45.png\"></p>\n<p>When clicking on <code>next</code> within the command log, the console outputs the following:</p>\n<p><img width=\"547\" alt=\"screen shot 2015-11-29 at 12 42 22 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458858/b30b0a0a-9696-11e5-99b9-d785b597287c.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/prev\">prev</a></li>\n</ul>\n"},{"title":"nextuntil","_content":"\nGet all following siblings of each DOM element in the set of matched DOM elements up to, but not including, the element matched by the selector\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.nextUntil` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#timeouts) |\n\n***\n\n# [cy.nextUntil( *selector* )](#usage)\n\nGet all of the next siblings of the elements until the selector.\n\n***\n\n# [cy.nextUntil( *selector*, *filter )](#filter-usage)\n\nWhen a filter is provided, it retrieves all of the following siblings up until the selector only if it matches that filter.\n\n***\n\n# [cy.nextUntil( *element* )](#element-usage)\n\nGet all of the next siblings of the elements until the DOM node or jQuery object.\n\n***\n\n# [cy.nextUntil( *element*, *filter )](#element-filter-usage)\n\nWhen a filter is provided, it retrieves all of the following siblings up until the DOM node or jQuery object only if it matches that filter.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.nextUntil`.\n\n**cy.nextUntil( *selector*, *options* )**\n**cy.nextUntil( *selector*, *filter*, *options* )**\n**cy.nextUntil( *element*, *options* )**\n**cy.nextUntil( *element*, *filter*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#timeouts) | Total time to retry getting the element\n\n***\n\n# Usage\n\n## Find all of the element's siblings following `#veggies` until `#nuts`\n\n```html\n<ul>\n  <li id=\"fruits\" class=\"header\">Fruits</li>\n  <li>apples</li>\n  <li>oranges</li>\n  <li>bananas</li>\n  <li id=\"veggies\" class=\"header\">Vegetables</li>\n  <li>cucumbers</li>\n  <li>carrots</li>\n  <li>corn</li>\n  <li id=\"nuts\" class=\"header\">Nuts</li>\n  <li>walnuts</li>\n  <li>cashews</li>\n  <li>almonds</li>\n</ul>\n```\n\n```javascript\n//returns [<li>cucumbers</li>, <li>carrots</li>, <li>corn</li>]\ncy.get(\"#veggies\").nextUntil(\"#nuts\")\n```\n\n***\n\n# Command Log\n\n## Find all of the element's siblings following `#veggies` until `#nuts`\n\n```javascript\ncy.get(\"#veggies\").nextUntil(\"#nuts\")\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"563\" alt=\"screen shot 2017-03-23 at 2 17 52 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24263453/96a8c0b6-0fd3-11e7-8a66-da9177ca94a7.png\">\n\nWhen clicking on `nextUntil` within the command log, the console outputs the following:\n\n<img width=\"514\" alt=\"screen shot 2017-03-23 at 2 18 01 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24263481/a20ce2f2-0fd3-11e7-881c-f6bf8d652263.png\">\n\n***\n\n# Related\n\n- [next](https://on.cypress.io/api/next)\n- [nextAll](https://on.cypress.io/api/nextall)\n- [prevUntil](https://on.cypress.io/api/prevuntil)\n","source":"api/commands/nextuntil.md","raw":"title: nextuntil\n---\n\nGet all following siblings of each DOM element in the set of matched DOM elements up to, but not including, the element matched by the selector\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.nextUntil` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#timeouts) |\n\n***\n\n# [cy.nextUntil( *selector* )](#usage)\n\nGet all of the next siblings of the elements until the selector.\n\n***\n\n# [cy.nextUntil( *selector*, *filter )](#filter-usage)\n\nWhen a filter is provided, it retrieves all of the following siblings up until the selector only if it matches that filter.\n\n***\n\n# [cy.nextUntil( *element* )](#element-usage)\n\nGet all of the next siblings of the elements until the DOM node or jQuery object.\n\n***\n\n# [cy.nextUntil( *element*, *filter )](#element-filter-usage)\n\nWhen a filter is provided, it retrieves all of the following siblings up until the DOM node or jQuery object only if it matches that filter.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.nextUntil`.\n\n**cy.nextUntil( *selector*, *options* )**\n**cy.nextUntil( *selector*, *filter*, *options* )**\n**cy.nextUntil( *element*, *options* )**\n**cy.nextUntil( *element*, *filter*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#timeouts) | Total time to retry getting the element\n\n***\n\n# Usage\n\n## Find all of the element's siblings following `#veggies` until `#nuts`\n\n```html\n<ul>\n  <li id=\"fruits\" class=\"header\">Fruits</li>\n  <li>apples</li>\n  <li>oranges</li>\n  <li>bananas</li>\n  <li id=\"veggies\" class=\"header\">Vegetables</li>\n  <li>cucumbers</li>\n  <li>carrots</li>\n  <li>corn</li>\n  <li id=\"nuts\" class=\"header\">Nuts</li>\n  <li>walnuts</li>\n  <li>cashews</li>\n  <li>almonds</li>\n</ul>\n```\n\n```javascript\n//returns [<li>cucumbers</li>, <li>carrots</li>, <li>corn</li>]\ncy.get(\"#veggies\").nextUntil(\"#nuts\")\n```\n\n***\n\n# Command Log\n\n## Find all of the element's siblings following `#veggies` until `#nuts`\n\n```javascript\ncy.get(\"#veggies\").nextUntil(\"#nuts\")\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"563\" alt=\"screen shot 2017-03-23 at 2 17 52 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24263453/96a8c0b6-0fd3-11e7-8a66-da9177ca94a7.png\">\n\nWhen clicking on `nextUntil` within the command log, the console outputs the following:\n\n<img width=\"514\" alt=\"screen shot 2017-03-23 at 2 18 01 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24263481/a20ce2f2-0fd3-11e7-881c-f6bf8d652263.png\">\n\n***\n\n# Related\n\n- [next](https://on.cypress.io/api/next)\n- [nextAll](https://on.cypress.io/api/nextall)\n- [prevUntil](https://on.cypress.io/api/prevuntil)\n","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/nextuntil.html","comments":1,"layout":"page","_id":"cj1pc2g8g0014k1g8jqxcy19i","content":"<p>Get all following siblings of each DOM element in the set of matched DOM elements up to, but not including, the element matched by the selector</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.nextUntil</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-nextUntil-selector\"><a href=\"#cy-nextUntil-selector\" class=\"headerlink\" title=\"cy.nextUntil( selector )\"></a><a href=\"#usage\">cy.nextUntil( <em>selector</em> )</a></h1><p>Get all of the next siblings of the elements until the selector.</p>\n<hr>\n<h1 id=\"cy-nextUntil-selector-filter\"><a href=\"#cy-nextUntil-selector-filter\" class=\"headerlink\" title=\"cy.nextUntil( selector, *filter )\"></a><a href=\"#filter-usage\">cy.nextUntil( <em>selector</em>, *filter )</a></h1><p>When a filter is provided, it retrieves all of the following siblings up until the selector only if it matches that filter.</p>\n<hr>\n<h1 id=\"cy-nextUntil-element\"><a href=\"#cy-nextUntil-element\" class=\"headerlink\" title=\"cy.nextUntil( element )\"></a><a href=\"#element-usage\">cy.nextUntil( <em>element</em> )</a></h1><p>Get all of the next siblings of the elements until the DOM node or jQuery object.</p>\n<hr>\n<h1 id=\"cy-nextUntil-element-filter\"><a href=\"#cy-nextUntil-element-filter\" class=\"headerlink\" title=\"cy.nextUntil( element, *filter )\"></a><a href=\"#element-filter-usage\">cy.nextUntil( <em>element</em>, *filter )</a></h1><p>When a filter is provided, it retrieves all of the following siblings up until the DOM node or jQuery object only if it matches that filter.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.nextUntil</code>.</p>\n<p><strong>cy.nextUntil( <em>selector</em>, <em>options</em> )</strong><br><strong>cy.nextUntil( <em>selector</em>, <em>filter</em>, <em>options</em> )</strong><br><strong>cy.nextUntil( <em>element</em>, <em>options</em> )</strong><br><strong>cy.nextUntil( <em>element</em>, <em>filter</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry getting the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Find-all-of-the-element’s-siblings-following-veggies-until-nuts\"><a href=\"#Find-all-of-the-element’s-siblings-following-veggies-until-nuts\" class=\"headerlink\" title=\"Find all of the element’s siblings following #veggies until #nuts\"></a>Find all of the element’s siblings following <code>#veggies</code> until <code>#nuts</code></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fruits\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span>Fruits<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>apples<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>oranges<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>bananas<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"veggies\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span>Vegetables<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>cucumbers<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>carrots<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>corn<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"nuts\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span>Nuts<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>walnuts<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>cashews<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>almonds<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//returns [&lt;li&gt;cucumbers&lt;/li&gt;, &lt;li&gt;carrots&lt;/li&gt;, &lt;li&gt;corn&lt;/li&gt;]</span></div><div class=\"line\">cy.get(<span class=\"string\">\"#veggies\"</span>).nextUntil(<span class=\"string\">\"#nuts\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Find-all-of-the-element’s-siblings-following-veggies-until-nuts-1\"><a href=\"#Find-all-of-the-element’s-siblings-following-veggies-until-nuts-1\" class=\"headerlink\" title=\"Find all of the element’s siblings following #veggies until #nuts\"></a>Find all of the element’s siblings following <code>#veggies</code> until <code>#nuts</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"#veggies\"</span>).nextUntil(<span class=\"string\">\"#nuts\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"563\" alt=\"screen shot 2017-03-23 at 2 17 52 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24263453/96a8c0b6-0fd3-11e7-8a66-da9177ca94a7.png\"></p>\n<p>When clicking on <code>nextUntil</code> within the command log, the console outputs the following:</p>\n<p><img width=\"514\" alt=\"screen shot 2017-03-23 at 2 18 01 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24263481/a20ce2f2-0fd3-11e7-881c-f6bf8d652263.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/next\" target=\"_blank\" rel=\"external\">next</a></li>\n<li><a href=\"https://on.cypress.io/api/nextall\" target=\"_blank\" rel=\"external\">nextAll</a></li>\n<li><a href=\"https://on.cypress.io/api/prevuntil\" target=\"_blank\" rel=\"external\">prevUntil</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Get all following siblings of each DOM element in the set of matched DOM elements up to, but not including, the element matched by the selector</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.nextUntil</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#timeouts\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-nextUntil-selector\"><a href=\"#cy-nextUntil-selector\" class=\"headerlink\" title=\"cy.nextUntil( selector )\"></a><a href=\"#usage\">cy.nextUntil( <em>selector</em> )</a></h1><p>Get all of the next siblings of the elements until the selector.</p>\n<hr>\n<h1 id=\"cy-nextUntil-selector-filter\"><a href=\"#cy-nextUntil-selector-filter\" class=\"headerlink\" title=\"cy.nextUntil( selector, *filter )\"></a><a href=\"#filter-usage\">cy.nextUntil( <em>selector</em>, *filter )</a></h1><p>When a filter is provided, it retrieves all of the following siblings up until the selector only if it matches that filter.</p>\n<hr>\n<h1 id=\"cy-nextUntil-element\"><a href=\"#cy-nextUntil-element\" class=\"headerlink\" title=\"cy.nextUntil( element )\"></a><a href=\"#element-usage\">cy.nextUntil( <em>element</em> )</a></h1><p>Get all of the next siblings of the elements until the DOM node or jQuery object.</p>\n<hr>\n<h1 id=\"cy-nextUntil-element-filter\"><a href=\"#cy-nextUntil-element-filter\" class=\"headerlink\" title=\"cy.nextUntil( element, *filter )\"></a><a href=\"#element-filter-usage\">cy.nextUntil( <em>element</em>, *filter )</a></h1><p>When a filter is provided, it retrieves all of the following siblings up until the DOM node or jQuery object only if it matches that filter.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.nextUntil</code>.</p>\n<p><strong>cy.nextUntil( <em>selector</em>, <em>options</em> )</strong><br><strong>cy.nextUntil( <em>selector</em>, <em>filter</em>, <em>options</em> )</strong><br><strong>cy.nextUntil( <em>element</em>, <em>options</em> )</strong><br><strong>cy.nextUntil( <em>element</em>, <em>filter</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#timeouts\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry getting the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Find-all-of-the-element’s-siblings-following-veggies-until-nuts\"><a href=\"#Find-all-of-the-element’s-siblings-following-veggies-until-nuts\" class=\"headerlink\" title=\"Find all of the element’s siblings following #veggies until #nuts\"></a>Find all of the element’s siblings following <code>#veggies</code> until <code>#nuts</code></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fruits\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span>Fruits<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>apples<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>oranges<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>bananas<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"veggies\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span>Vegetables<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>cucumbers<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>carrots<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>corn<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"nuts\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span>Nuts<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>walnuts<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>cashews<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>almonds<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//returns [&lt;li&gt;cucumbers&lt;/li&gt;, &lt;li&gt;carrots&lt;/li&gt;, &lt;li&gt;corn&lt;/li&gt;]</span></div><div class=\"line\">cy.get(<span class=\"string\">\"#veggies\"</span>).nextUntil(<span class=\"string\">\"#nuts\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Find-all-of-the-element’s-siblings-following-veggies-until-nuts-1\"><a href=\"#Find-all-of-the-element’s-siblings-following-veggies-until-nuts-1\" class=\"headerlink\" title=\"Find all of the element’s siblings following #veggies until #nuts\"></a>Find all of the element’s siblings following <code>#veggies</code> until <code>#nuts</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"#veggies\"</span>).nextUntil(<span class=\"string\">\"#nuts\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"563\" alt=\"screen shot 2017-03-23 at 2 17 52 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24263453/96a8c0b6-0fd3-11e7-8a66-da9177ca94a7.png\"></p>\n<p>When clicking on <code>nextUntil</code> within the command log, the console outputs the following:</p>\n<p><img width=\"514\" alt=\"screen shot 2017-03-23 at 2 18 01 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24263481/a20ce2f2-0fd3-11e7-881c-f6bf8d652263.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/next\">next</a></li>\n<li><a href=\"https://on.cypress.io/api/nextall\">nextAll</a></li>\n<li><a href=\"https://on.cypress.io/api/prevuntil\">prevUntil</a></li>\n</ul>\n"},{"title":"not","_content":"\nRemove DOM elements from the set of DOM elements. Opposite of [`cy.filter()`](https://on.cypress.io/api/filter)\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.not` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.not( *selector* )](#section-selector-usage)\n\nRemove the element(s) by it's selector from the elements\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.not`.\n\n**cy.not( *selector*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry getting the element\n\n***\n\n# Selector Usage\n\n## Filter the current subject to the elements that do not have class `active`.\n\n```javascript\ncy.get(\".left-nav>.nav\").find(\">li\").not(\".active\")\n```\n\n***\n\n# Command Log\n\n## Find all buttons that are not of type submit\n\n```javascript\ncy.get(\"form\").find(\"button\").not(\"[type='submit']\")\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"572\" alt=\"screen shot 2015-11-29 at 12 36 49 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458817/0a846c3c-9696-11e5-9901-5f4376629e75.png\">\n\nWhen clicking on `not` within the command log, the console outputs the following:\n\n<img width=\"689\" alt=\"screen shot 2015-11-29 at 12 37 39 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458819/0d6870f6-9696-11e5-9364-2685b8ffc71b.png\">\n\n***\n# Related\n\n- [filter](https://on.cypress.io/api/filter)","source":"api/commands/not.md","raw":"title: not\n---\n\nRemove DOM elements from the set of DOM elements. Opposite of [`cy.filter()`](https://on.cypress.io/api/filter)\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.not` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.not( *selector* )](#section-selector-usage)\n\nRemove the element(s) by it's selector from the elements\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.not`.\n\n**cy.not( *selector*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry getting the element\n\n***\n\n# Selector Usage\n\n## Filter the current subject to the elements that do not have class `active`.\n\n```javascript\ncy.get(\".left-nav>.nav\").find(\">li\").not(\".active\")\n```\n\n***\n\n# Command Log\n\n## Find all buttons that are not of type submit\n\n```javascript\ncy.get(\"form\").find(\"button\").not(\"[type='submit']\")\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"572\" alt=\"screen shot 2015-11-29 at 12 36 49 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458817/0a846c3c-9696-11e5-9901-5f4376629e75.png\">\n\nWhen clicking on `not` within the command log, the console outputs the following:\n\n<img width=\"689\" alt=\"screen shot 2015-11-29 at 12 37 39 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458819/0d6870f6-9696-11e5-9364-2685b8ffc71b.png\">\n\n***\n# Related\n\n- [filter](https://on.cypress.io/api/filter)","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/not.html","comments":1,"layout":"page","_id":"cj1pc2g8g0015k1g8n0aoyiak","content":"<p>Remove DOM elements from the set of DOM elements. Opposite of <a href=\"https://on.cypress.io/api/filter\" target=\"_blank\" rel=\"external\"><code>cy.filter()</code></a></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.not</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-not-selector\"><a href=\"#cy-not-selector\" class=\"headerlink\" title=\"cy.not( selector )\"></a><a href=\"#section-selector-usage\">cy.not( <em>selector</em> )</a></h1><p>Remove the element(s) by it’s selector from the elements</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.not</code>.</p>\n<p><strong>cy.not( <em>selector</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry getting the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Selector-Usage\"><a href=\"#Selector-Usage\" class=\"headerlink\" title=\"Selector Usage\"></a>Selector Usage</h1><h2 id=\"Filter-the-current-subject-to-the-elements-that-do-not-have-class-active\"><a href=\"#Filter-the-current-subject-to-the-elements-that-do-not-have-class-active\" class=\"headerlink\" title=\"Filter the current subject to the elements that do not have class active.\"></a>Filter the current subject to the elements that do not have class <code>active</code>.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\".left-nav&gt;.nav\"</span>).find(<span class=\"string\">\"&gt;li\"</span>).not(<span class=\"string\">\".active\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Find-all-buttons-that-are-not-of-type-submit\"><a href=\"#Find-all-buttons-that-are-not-of-type-submit\" class=\"headerlink\" title=\"Find all buttons that are not of type submit\"></a>Find all buttons that are not of type submit</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"form\"</span>).find(<span class=\"string\">\"button\"</span>).not(<span class=\"string\">\"[type='submit']\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"572\" alt=\"screen shot 2015-11-29 at 12 36 49 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458817/0a846c3c-9696-11e5-9901-5f4376629e75.png\"></p>\n<p>When clicking on <code>not</code> within the command log, the console outputs the following:</p>\n<p><img width=\"689\" alt=\"screen shot 2015-11-29 at 12 37 39 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458819/0d6870f6-9696-11e5-9364-2685b8ffc71b.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/filter\" target=\"_blank\" rel=\"external\">filter</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Remove DOM elements from the set of DOM elements. Opposite of <a href=\"https://on.cypress.io/api/filter\"><code>cy.filter()</code></a></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.not</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-not-selector\"><a href=\"#cy-not-selector\" class=\"headerlink\" title=\"cy.not( selector )\"></a><a href=\"#section-selector-usage\">cy.not( <em>selector</em> )</a></h1><p>Remove the element(s) by it’s selector from the elements</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.not</code>.</p>\n<p><strong>cy.not( <em>selector</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry getting the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Selector-Usage\"><a href=\"#Selector-Usage\" class=\"headerlink\" title=\"Selector Usage\"></a>Selector Usage</h1><h2 id=\"Filter-the-current-subject-to-the-elements-that-do-not-have-class-active\"><a href=\"#Filter-the-current-subject-to-the-elements-that-do-not-have-class-active\" class=\"headerlink\" title=\"Filter the current subject to the elements that do not have class active.\"></a>Filter the current subject to the elements that do not have class <code>active</code>.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\".left-nav&gt;.nav\"</span>).find(<span class=\"string\">\"&gt;li\"</span>).not(<span class=\"string\">\".active\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Find-all-buttons-that-are-not-of-type-submit\"><a href=\"#Find-all-buttons-that-are-not-of-type-submit\" class=\"headerlink\" title=\"Find all buttons that are not of type submit\"></a>Find all buttons that are not of type submit</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"form\"</span>).find(<span class=\"string\">\"button\"</span>).not(<span class=\"string\">\"[type='submit']\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"572\" alt=\"screen shot 2015-11-29 at 12 36 49 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458817/0a846c3c-9696-11e5-9901-5f4376629e75.png\"></p>\n<p>When clicking on <code>not</code> within the command log, the console outputs the following:</p>\n<p><img width=\"689\" alt=\"screen shot 2015-11-29 at 12 37 39 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458819/0d6870f6-9696-11e5-9364-2685b8ffc71b.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/filter\">filter</a></li>\n</ul>\n"},{"title":"parent","_content":"\nGet the parent DOM element of the DOM elements.\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.parent` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.parent()](#section-usage)\n\nGet the parent of each element in the current set of matched elements.\n\n***\n\n# [cy.parent( *selector* )](#section-selector-usage)\n\nGet the parent of each element in the current set of matched elements filtered by selector.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.parent`.\n\n**cy.parent( *options* )**\n**cy.parent( *selector*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry getting the element\n\n***\n\n# Usage\n\n## Get the parent of the active `li`\n\n```javascript\ncy.get(\"li.active\").parent()\n```\n\n***\n\n# Selector Usage\n\n## Get the parent with class `nav` of the active `li`\n\n```javascript\ncy.get(\"li.active\").parent(\".nav\")\n```\n\n***\n\n# Command Log\n\n## Assert on the parent of the active li\n\n```javascript\ncy.get(\"li.active\").parent().should(\"have.class\", \"nav\")\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"531\" alt=\"screen shot 2015-11-27 at 1 58 32 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447127/0d9ab5a8-950f-11e5-90ae-c317dd83aa65.png\">\n\nWhen clicking on the `parent` command within the command log, the console outputs the following:\n\n<img width=\"440\" alt=\"screen shot 2015-11-27 at 1 58 44 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447130/11b22c02-950f-11e5-9b82-cc3b2ff8548e.png\">\n\n***\n\n# Related\n\n- [parents](https://on.cypress.io/api/parents)\n- [children](https://on.cypress.io/api/children)","source":"api/commands/parent.md","raw":"title: parent\n---\n\nGet the parent DOM element of the DOM elements.\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.parent` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.parent()](#section-usage)\n\nGet the parent of each element in the current set of matched elements.\n\n***\n\n# [cy.parent( *selector* )](#section-selector-usage)\n\nGet the parent of each element in the current set of matched elements filtered by selector.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.parent`.\n\n**cy.parent( *options* )**\n**cy.parent( *selector*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry getting the element\n\n***\n\n# Usage\n\n## Get the parent of the active `li`\n\n```javascript\ncy.get(\"li.active\").parent()\n```\n\n***\n\n# Selector Usage\n\n## Get the parent with class `nav` of the active `li`\n\n```javascript\ncy.get(\"li.active\").parent(\".nav\")\n```\n\n***\n\n# Command Log\n\n## Assert on the parent of the active li\n\n```javascript\ncy.get(\"li.active\").parent().should(\"have.class\", \"nav\")\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"531\" alt=\"screen shot 2015-11-27 at 1 58 32 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447127/0d9ab5a8-950f-11e5-90ae-c317dd83aa65.png\">\n\nWhen clicking on the `parent` command within the command log, the console outputs the following:\n\n<img width=\"440\" alt=\"screen shot 2015-11-27 at 1 58 44 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447130/11b22c02-950f-11e5-9b82-cc3b2ff8548e.png\">\n\n***\n\n# Related\n\n- [parents](https://on.cypress.io/api/parents)\n- [children](https://on.cypress.io/api/children)","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/parent.html","comments":1,"layout":"page","_id":"cj1pc2g8h0016k1g8ap50owzm","content":"<p>Get the parent DOM element of the DOM elements.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.parent</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-parent\"><a href=\"#cy-parent\" class=\"headerlink\" title=\"cy.parent()\"></a><a href=\"#section-usage\">cy.parent()</a></h1><p>Get the parent of each element in the current set of matched elements.</p>\n<hr>\n<h1 id=\"cy-parent-selector\"><a href=\"#cy-parent-selector\" class=\"headerlink\" title=\"cy.parent( selector )\"></a><a href=\"#section-selector-usage\">cy.parent( <em>selector</em> )</a></h1><p>Get the parent of each element in the current set of matched elements filtered by selector.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.parent</code>.</p>\n<p><strong>cy.parent( <em>options</em> )</strong><br><strong>cy.parent( <em>selector</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry getting the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Get-the-parent-of-the-active-li\"><a href=\"#Get-the-parent-of-the-active-li\" class=\"headerlink\" title=\"Get the parent of the active li\"></a>Get the parent of the active <code>li</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"li.active\"</span>).parent()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Selector-Usage\"><a href=\"#Selector-Usage\" class=\"headerlink\" title=\"Selector Usage\"></a>Selector Usage</h1><h2 id=\"Get-the-parent-with-class-nav-of-the-active-li\"><a href=\"#Get-the-parent-with-class-nav-of-the-active-li\" class=\"headerlink\" title=\"Get the parent with class nav of the active li\"></a>Get the parent with class <code>nav</code> of the active <code>li</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"li.active\"</span>).parent(<span class=\"string\">\".nav\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Assert-on-the-parent-of-the-active-li\"><a href=\"#Assert-on-the-parent-of-the-active-li\" class=\"headerlink\" title=\"Assert on the parent of the active li\"></a>Assert on the parent of the active li</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"li.active\"</span>).parent().should(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"nav\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"531\" alt=\"screen shot 2015-11-27 at 1 58 32 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447127/0d9ab5a8-950f-11e5-90ae-c317dd83aa65.png\"></p>\n<p>When clicking on the <code>parent</code> command within the command log, the console outputs the following:</p>\n<p><img width=\"440\" alt=\"screen shot 2015-11-27 at 1 58 44 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447130/11b22c02-950f-11e5-9b82-cc3b2ff8548e.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/parents\" target=\"_blank\" rel=\"external\">parents</a></li>\n<li><a href=\"https://on.cypress.io/api/children\" target=\"_blank\" rel=\"external\">children</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Get the parent DOM element of the DOM elements.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.parent</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-parent\"><a href=\"#cy-parent\" class=\"headerlink\" title=\"cy.parent()\"></a><a href=\"#section-usage\">cy.parent()</a></h1><p>Get the parent of each element in the current set of matched elements.</p>\n<hr>\n<h1 id=\"cy-parent-selector\"><a href=\"#cy-parent-selector\" class=\"headerlink\" title=\"cy.parent( selector )\"></a><a href=\"#section-selector-usage\">cy.parent( <em>selector</em> )</a></h1><p>Get the parent of each element in the current set of matched elements filtered by selector.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.parent</code>.</p>\n<p><strong>cy.parent( <em>options</em> )</strong><br><strong>cy.parent( <em>selector</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry getting the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Get-the-parent-of-the-active-li\"><a href=\"#Get-the-parent-of-the-active-li\" class=\"headerlink\" title=\"Get the parent of the active li\"></a>Get the parent of the active <code>li</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"li.active\"</span>).parent()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Selector-Usage\"><a href=\"#Selector-Usage\" class=\"headerlink\" title=\"Selector Usage\"></a>Selector Usage</h1><h2 id=\"Get-the-parent-with-class-nav-of-the-active-li\"><a href=\"#Get-the-parent-with-class-nav-of-the-active-li\" class=\"headerlink\" title=\"Get the parent with class nav of the active li\"></a>Get the parent with class <code>nav</code> of the active <code>li</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"li.active\"</span>).parent(<span class=\"string\">\".nav\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Assert-on-the-parent-of-the-active-li\"><a href=\"#Assert-on-the-parent-of-the-active-li\" class=\"headerlink\" title=\"Assert on the parent of the active li\"></a>Assert on the parent of the active li</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"li.active\"</span>).parent().should(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"nav\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"531\" alt=\"screen shot 2015-11-27 at 1 58 32 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447127/0d9ab5a8-950f-11e5-90ae-c317dd83aa65.png\"></p>\n<p>When clicking on the <code>parent</code> command within the command log, the console outputs the following:</p>\n<p><img width=\"440\" alt=\"screen shot 2015-11-27 at 1 58 44 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447130/11b22c02-950f-11e5-9b82-cc3b2ff8548e.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/parents\">parents</a></li>\n<li><a href=\"https://on.cypress.io/api/children\">children</a></li>\n</ul>\n"},{"title":"parents","_content":"\nGet the parents DOM elements of the DOM elements.\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.parents` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.parents()](#section-usage)\n\nGet the ancestors of each element in the current set of matched elements.\n\n***\n\n# [cy.parents( *selector* )](#section-selector-usage)\n\nGet the ancestors of each element in the current set of matched elements filtered by selector\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.parents`.\n\n**cy.parents( *options* )**\n**cy.parents( *selector*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry getting the element\n\n***\n\n# Usage\n\n## Get the parents of the active `li`\n\n```javascript\ncy.get(\"li.active\").parents()\n```\n\n***\n\n# Selector Usage\n\n## Get the parents with class `nav` of the active `li`\n\n```javascript\ncy.get(\"li.active\").parents(\".nav\")\n```\n\n***\n\n# Command Log\n\n## Get the parents of the active `li`\n\n```javascript\ncy.get(\"li.active\").parents()\n```\n\n<img width=\"531\" alt=\"screen shot 2015-11-27 at 2 02 59 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447168/be286244-950f-11e5-82e8-9a2a6d1d08e8.png\">\n\nWhen clicking on the `parents` command within the command log, the console outputs the following:\n\n<img width=\"537\" alt=\"screen shot 2015-11-27 at 2 03 32 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447171/c1ba5ef8-950f-11e5-9f2d-7fbd0b142649.png\">\n\n***\n\n# Related\n\n- [parent](https://on.cypress.io/api/parent)\n- [children](https://on.cypress.io/api/children)","source":"api/commands/parents.md","raw":"title: parents\n---\n\nGet the parents DOM elements of the DOM elements.\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.parents` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.parents()](#section-usage)\n\nGet the ancestors of each element in the current set of matched elements.\n\n***\n\n# [cy.parents( *selector* )](#section-selector-usage)\n\nGet the ancestors of each element in the current set of matched elements filtered by selector\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.parents`.\n\n**cy.parents( *options* )**\n**cy.parents( *selector*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry getting the element\n\n***\n\n# Usage\n\n## Get the parents of the active `li`\n\n```javascript\ncy.get(\"li.active\").parents()\n```\n\n***\n\n# Selector Usage\n\n## Get the parents with class `nav` of the active `li`\n\n```javascript\ncy.get(\"li.active\").parents(\".nav\")\n```\n\n***\n\n# Command Log\n\n## Get the parents of the active `li`\n\n```javascript\ncy.get(\"li.active\").parents()\n```\n\n<img width=\"531\" alt=\"screen shot 2015-11-27 at 2 02 59 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447168/be286244-950f-11e5-82e8-9a2a6d1d08e8.png\">\n\nWhen clicking on the `parents` command within the command log, the console outputs the following:\n\n<img width=\"537\" alt=\"screen shot 2015-11-27 at 2 03 32 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447171/c1ba5ef8-950f-11e5-9f2d-7fbd0b142649.png\">\n\n***\n\n# Related\n\n- [parent](https://on.cypress.io/api/parent)\n- [children](https://on.cypress.io/api/children)","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/parents.html","comments":1,"layout":"page","_id":"cj1pc2g8h0017k1g8dvqda8wm","content":"<p>Get the parents DOM elements of the DOM elements.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.parents</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-parents\"><a href=\"#cy-parents\" class=\"headerlink\" title=\"cy.parents()\"></a><a href=\"#section-usage\">cy.parents()</a></h1><p>Get the ancestors of each element in the current set of matched elements.</p>\n<hr>\n<h1 id=\"cy-parents-selector\"><a href=\"#cy-parents-selector\" class=\"headerlink\" title=\"cy.parents( selector )\"></a><a href=\"#section-selector-usage\">cy.parents( <em>selector</em> )</a></h1><p>Get the ancestors of each element in the current set of matched elements filtered by selector</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.parents</code>.</p>\n<p><strong>cy.parents( <em>options</em> )</strong><br><strong>cy.parents( <em>selector</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry getting the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Get-the-parents-of-the-active-li\"><a href=\"#Get-the-parents-of-the-active-li\" class=\"headerlink\" title=\"Get the parents of the active li\"></a>Get the parents of the active <code>li</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"li.active\"</span>).parents()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Selector-Usage\"><a href=\"#Selector-Usage\" class=\"headerlink\" title=\"Selector Usage\"></a>Selector Usage</h1><h2 id=\"Get-the-parents-with-class-nav-of-the-active-li\"><a href=\"#Get-the-parents-with-class-nav-of-the-active-li\" class=\"headerlink\" title=\"Get the parents with class nav of the active li\"></a>Get the parents with class <code>nav</code> of the active <code>li</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"li.active\"</span>).parents(<span class=\"string\">\".nav\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Get-the-parents-of-the-active-li-1\"><a href=\"#Get-the-parents-of-the-active-li-1\" class=\"headerlink\" title=\"Get the parents of the active li\"></a>Get the parents of the active <code>li</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"li.active\"</span>).parents()</div></pre></td></tr></table></figure>\n<p><img width=\"531\" alt=\"screen shot 2015-11-27 at 2 02 59 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447168/be286244-950f-11e5-82e8-9a2a6d1d08e8.png\"></p>\n<p>When clicking on the <code>parents</code> command within the command log, the console outputs the following:</p>\n<p><img width=\"537\" alt=\"screen shot 2015-11-27 at 2 03 32 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447171/c1ba5ef8-950f-11e5-9f2d-7fbd0b142649.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/parent\" target=\"_blank\" rel=\"external\">parent</a></li>\n<li><a href=\"https://on.cypress.io/api/children\" target=\"_blank\" rel=\"external\">children</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Get the parents DOM elements of the DOM elements.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.parents</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-parents\"><a href=\"#cy-parents\" class=\"headerlink\" title=\"cy.parents()\"></a><a href=\"#section-usage\">cy.parents()</a></h1><p>Get the ancestors of each element in the current set of matched elements.</p>\n<hr>\n<h1 id=\"cy-parents-selector\"><a href=\"#cy-parents-selector\" class=\"headerlink\" title=\"cy.parents( selector )\"></a><a href=\"#section-selector-usage\">cy.parents( <em>selector</em> )</a></h1><p>Get the ancestors of each element in the current set of matched elements filtered by selector</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.parents</code>.</p>\n<p><strong>cy.parents( <em>options</em> )</strong><br><strong>cy.parents( <em>selector</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry getting the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Get-the-parents-of-the-active-li\"><a href=\"#Get-the-parents-of-the-active-li\" class=\"headerlink\" title=\"Get the parents of the active li\"></a>Get the parents of the active <code>li</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"li.active\"</span>).parents()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Selector-Usage\"><a href=\"#Selector-Usage\" class=\"headerlink\" title=\"Selector Usage\"></a>Selector Usage</h1><h2 id=\"Get-the-parents-with-class-nav-of-the-active-li\"><a href=\"#Get-the-parents-with-class-nav-of-the-active-li\" class=\"headerlink\" title=\"Get the parents with class nav of the active li\"></a>Get the parents with class <code>nav</code> of the active <code>li</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"li.active\"</span>).parents(<span class=\"string\">\".nav\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Get-the-parents-of-the-active-li-1\"><a href=\"#Get-the-parents-of-the-active-li-1\" class=\"headerlink\" title=\"Get the parents of the active li\"></a>Get the parents of the active <code>li</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"li.active\"</span>).parents()</div></pre></td></tr></table></figure>\n<p><img width=\"531\" alt=\"screen shot 2015-11-27 at 2 02 59 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447168/be286244-950f-11e5-82e8-9a2a6d1d08e8.png\"></p>\n<p>When clicking on the <code>parents</code> command within the command log, the console outputs the following:</p>\n<p><img width=\"537\" alt=\"screen shot 2015-11-27 at 2 03 32 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11447171/c1ba5ef8-950f-11e5-9f2d-7fbd0b142649.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/parent\">parent</a></li>\n<li><a href=\"https://on.cypress.io/api/children\">children</a></li>\n</ul>\n"},{"title":"parentsuntil","_content":"\nGet all ancestors of each DOM element in the set of matched DOM elements up to, but not including, the element matched by the selector\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.parentsUntil` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#timeouts) |\n\n***\n\n# [cy.parentsUntil( *selector* )](#usage)\n\nGet all of the ancestors of the elements until the selector.\n\n***\n\n# [cy.parentsUntil( *selector*, *filter )](#filter-usage)\n\nWhen a filter is provided, it retrieves all of the ancestors up until the selector only if it matches that filter.\n\n***\n\n# [cy.parentsUntil( *element* )](#element-usage)\n\nGet all of the ancestors of the elements until the DOM node or jQuery object.\n\n***\n\n# [cy.parentsUntil( *element*, *filter )](#element-filter-usage)\n\nWhen a filter is provided, it retrieves all of the ancestors up until the DOM node or jQuery object only if it matches that filter.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.parentsUntil`.\n\n**cy.parentsUntil( *selector*, *options* )**\n**cy.parentsUntil( *selector*, *filter*, *options* )**\n**cy.parentsUntil( *element*, *options* )**\n**cy.parentsUntil( *element*, *filter*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#timeouts) | Total time to retry getting the element\n\n***\n\n# Usage\n\n## Find all of the `.active` element's ancestors until `.nav`\n\n```html\n<ul class=\"nav\">\n  <li>\n    <a href=\"#\">Clothes</a>\n    <ul class=\"menu\">\n      <li>\n        <a href=\"/shirts\">Shirts</a>\n      </li>\n      <li class=\"active\">\n        <a href=\"/pants\">Pants</a>\n      </li>\n    </ul>\n  </li>\n</ul>\n```\n\n```javascript\n//returns [ul.menu, li]\ncy.get(\".active\").parentsUntil(\".nav\")\n```\n\n***\n\n# Command Log\n\n## Find all of the `.active` element's ancestors until `.nav`\n\n```javascript\ncy.get(\".active\").parentsUntil(\".nav\")\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"561\" alt=\"screen shot 2017-03-23 at 2 37 31 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24264301/516d5fd6-0fd6-11e7-9ab7-b55b211acde3.png\">\n\nWhen clicking on `parentsUntil` within the command log, the console outputs the following:\n\n<img width=\"523\" alt=\"screen shot 2017-03-23 at 2 37 39 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24264309/60cc75de-0fd6-11e7-97b4-d0aa184b0ba6.png\">\n\n***\n\n# Related\n\n- [parent](https://on.cypress.io/api/parent)\n- [parents](https://on.cypress.io/api/parents)\n- [prevUntil](https://on.cypress.io/api/prevuntil)\n- [nextUntil](https://on.cypress.io/api/nextuntil)\n","source":"api/commands/parentsuntil.md","raw":"title: parentsuntil\n---\n\nGet all ancestors of each DOM element in the set of matched DOM elements up to, but not including, the element matched by the selector\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.parentsUntil` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#timeouts) |\n\n***\n\n# [cy.parentsUntil( *selector* )](#usage)\n\nGet all of the ancestors of the elements until the selector.\n\n***\n\n# [cy.parentsUntil( *selector*, *filter )](#filter-usage)\n\nWhen a filter is provided, it retrieves all of the ancestors up until the selector only if it matches that filter.\n\n***\n\n# [cy.parentsUntil( *element* )](#element-usage)\n\nGet all of the ancestors of the elements until the DOM node or jQuery object.\n\n***\n\n# [cy.parentsUntil( *element*, *filter )](#element-filter-usage)\n\nWhen a filter is provided, it retrieves all of the ancestors up until the DOM node or jQuery object only if it matches that filter.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.parentsUntil`.\n\n**cy.parentsUntil( *selector*, *options* )**\n**cy.parentsUntil( *selector*, *filter*, *options* )**\n**cy.parentsUntil( *element*, *options* )**\n**cy.parentsUntil( *element*, *filter*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#timeouts) | Total time to retry getting the element\n\n***\n\n# Usage\n\n## Find all of the `.active` element's ancestors until `.nav`\n\n```html\n<ul class=\"nav\">\n  <li>\n    <a href=\"#\">Clothes</a>\n    <ul class=\"menu\">\n      <li>\n        <a href=\"/shirts\">Shirts</a>\n      </li>\n      <li class=\"active\">\n        <a href=\"/pants\">Pants</a>\n      </li>\n    </ul>\n  </li>\n</ul>\n```\n\n```javascript\n//returns [ul.menu, li]\ncy.get(\".active\").parentsUntil(\".nav\")\n```\n\n***\n\n# Command Log\n\n## Find all of the `.active` element's ancestors until `.nav`\n\n```javascript\ncy.get(\".active\").parentsUntil(\".nav\")\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"561\" alt=\"screen shot 2017-03-23 at 2 37 31 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24264301/516d5fd6-0fd6-11e7-9ab7-b55b211acde3.png\">\n\nWhen clicking on `parentsUntil` within the command log, the console outputs the following:\n\n<img width=\"523\" alt=\"screen shot 2017-03-23 at 2 37 39 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24264309/60cc75de-0fd6-11e7-97b4-d0aa184b0ba6.png\">\n\n***\n\n# Related\n\n- [parent](https://on.cypress.io/api/parent)\n- [parents](https://on.cypress.io/api/parents)\n- [prevUntil](https://on.cypress.io/api/prevuntil)\n- [nextUntil](https://on.cypress.io/api/nextuntil)\n","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/parentsuntil.html","comments":1,"layout":"page","_id":"cj1pc2g8h0018k1g83bmy9m9z","content":"<p>Get all ancestors of each DOM element in the set of matched DOM elements up to, but not including, the element matched by the selector</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.parentsUntil</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-parentsUntil-selector\"><a href=\"#cy-parentsUntil-selector\" class=\"headerlink\" title=\"cy.parentsUntil( selector )\"></a><a href=\"#usage\">cy.parentsUntil( <em>selector</em> )</a></h1><p>Get all of the ancestors of the elements until the selector.</p>\n<hr>\n<h1 id=\"cy-parentsUntil-selector-filter\"><a href=\"#cy-parentsUntil-selector-filter\" class=\"headerlink\" title=\"cy.parentsUntil( selector, *filter )\"></a><a href=\"#filter-usage\">cy.parentsUntil( <em>selector</em>, *filter )</a></h1><p>When a filter is provided, it retrieves all of the ancestors up until the selector only if it matches that filter.</p>\n<hr>\n<h1 id=\"cy-parentsUntil-element\"><a href=\"#cy-parentsUntil-element\" class=\"headerlink\" title=\"cy.parentsUntil( element )\"></a><a href=\"#element-usage\">cy.parentsUntil( <em>element</em> )</a></h1><p>Get all of the ancestors of the elements until the DOM node or jQuery object.</p>\n<hr>\n<h1 id=\"cy-parentsUntil-element-filter\"><a href=\"#cy-parentsUntil-element-filter\" class=\"headerlink\" title=\"cy.parentsUntil( element, *filter )\"></a><a href=\"#element-filter-usage\">cy.parentsUntil( <em>element</em>, *filter )</a></h1><p>When a filter is provided, it retrieves all of the ancestors up until the DOM node or jQuery object only if it matches that filter.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.parentsUntil</code>.</p>\n<p><strong>cy.parentsUntil( <em>selector</em>, <em>options</em> )</strong><br><strong>cy.parentsUntil( <em>selector</em>, <em>filter</em>, <em>options</em> )</strong><br><strong>cy.parentsUntil( <em>element</em>, <em>options</em> )</strong><br><strong>cy.parentsUntil( <em>element</em>, <em>filter</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry getting the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Find-all-of-the-active-element’s-ancestors-until-nav\"><a href=\"#Find-all-of-the-active-element’s-ancestors-until-nav\" class=\"headerlink\" title=\"Find all of the .active element’s ancestors until .nav\"></a>Find all of the <code>.active</code> element’s ancestors until <code>.nav</code></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>Clothes<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menu\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/shirts\"</span>&gt;</span>Shirts<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/pants\"</span>&gt;</span>Pants<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//returns [ul.menu, li]</span></div><div class=\"line\">cy.get(<span class=\"string\">\".active\"</span>).parentsUntil(<span class=\"string\">\".nav\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Find-all-of-the-active-element’s-ancestors-until-nav-1\"><a href=\"#Find-all-of-the-active-element’s-ancestors-until-nav-1\" class=\"headerlink\" title=\"Find all of the .active element’s ancestors until .nav\"></a>Find all of the <code>.active</code> element’s ancestors until <code>.nav</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\".active\"</span>).parentsUntil(<span class=\"string\">\".nav\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"561\" alt=\"screen shot 2017-03-23 at 2 37 31 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24264301/516d5fd6-0fd6-11e7-9ab7-b55b211acde3.png\"></p>\n<p>When clicking on <code>parentsUntil</code> within the command log, the console outputs the following:</p>\n<p><img width=\"523\" alt=\"screen shot 2017-03-23 at 2 37 39 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24264309/60cc75de-0fd6-11e7-97b4-d0aa184b0ba6.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/parent\" target=\"_blank\" rel=\"external\">parent</a></li>\n<li><a href=\"https://on.cypress.io/api/parents\" target=\"_blank\" rel=\"external\">parents</a></li>\n<li><a href=\"https://on.cypress.io/api/prevuntil\" target=\"_blank\" rel=\"external\">prevUntil</a></li>\n<li><a href=\"https://on.cypress.io/api/nextuntil\" target=\"_blank\" rel=\"external\">nextUntil</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Get all ancestors of each DOM element in the set of matched DOM elements up to, but not including, the element matched by the selector</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.parentsUntil</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#timeouts\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-parentsUntil-selector\"><a href=\"#cy-parentsUntil-selector\" class=\"headerlink\" title=\"cy.parentsUntil( selector )\"></a><a href=\"#usage\">cy.parentsUntil( <em>selector</em> )</a></h1><p>Get all of the ancestors of the elements until the selector.</p>\n<hr>\n<h1 id=\"cy-parentsUntil-selector-filter\"><a href=\"#cy-parentsUntil-selector-filter\" class=\"headerlink\" title=\"cy.parentsUntil( selector, *filter )\"></a><a href=\"#filter-usage\">cy.parentsUntil( <em>selector</em>, *filter )</a></h1><p>When a filter is provided, it retrieves all of the ancestors up until the selector only if it matches that filter.</p>\n<hr>\n<h1 id=\"cy-parentsUntil-element\"><a href=\"#cy-parentsUntil-element\" class=\"headerlink\" title=\"cy.parentsUntil( element )\"></a><a href=\"#element-usage\">cy.parentsUntil( <em>element</em> )</a></h1><p>Get all of the ancestors of the elements until the DOM node or jQuery object.</p>\n<hr>\n<h1 id=\"cy-parentsUntil-element-filter\"><a href=\"#cy-parentsUntil-element-filter\" class=\"headerlink\" title=\"cy.parentsUntil( element, *filter )\"></a><a href=\"#element-filter-usage\">cy.parentsUntil( <em>element</em>, *filter )</a></h1><p>When a filter is provided, it retrieves all of the ancestors up until the DOM node or jQuery object only if it matches that filter.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.parentsUntil</code>.</p>\n<p><strong>cy.parentsUntil( <em>selector</em>, <em>options</em> )</strong><br><strong>cy.parentsUntil( <em>selector</em>, <em>filter</em>, <em>options</em> )</strong><br><strong>cy.parentsUntil( <em>element</em>, <em>options</em> )</strong><br><strong>cy.parentsUntil( <em>element</em>, <em>filter</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#timeouts\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry getting the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Find-all-of-the-active-element’s-ancestors-until-nav\"><a href=\"#Find-all-of-the-active-element’s-ancestors-until-nav\" class=\"headerlink\" title=\"Find all of the .active element’s ancestors until .nav\"></a>Find all of the <code>.active</code> element’s ancestors until <code>.nav</code></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>Clothes<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menu\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/shirts\"</span>&gt;</span>Shirts<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/pants\"</span>&gt;</span>Pants<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//returns [ul.menu, li]</span></div><div class=\"line\">cy.get(<span class=\"string\">\".active\"</span>).parentsUntil(<span class=\"string\">\".nav\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Find-all-of-the-active-element’s-ancestors-until-nav-1\"><a href=\"#Find-all-of-the-active-element’s-ancestors-until-nav-1\" class=\"headerlink\" title=\"Find all of the .active element’s ancestors until .nav\"></a>Find all of the <code>.active</code> element’s ancestors until <code>.nav</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\".active\"</span>).parentsUntil(<span class=\"string\">\".nav\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"561\" alt=\"screen shot 2017-03-23 at 2 37 31 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24264301/516d5fd6-0fd6-11e7-9ab7-b55b211acde3.png\"></p>\n<p>When clicking on <code>parentsUntil</code> within the command log, the console outputs the following:</p>\n<p><img width=\"523\" alt=\"screen shot 2017-03-23 at 2 37 39 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24264309/60cc75de-0fd6-11e7-97b4-d0aa184b0ba6.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/parent\">parent</a></li>\n<li><a href=\"https://on.cypress.io/api/parents\">parents</a></li>\n<li><a href=\"https://on.cypress.io/api/prevuntil\">prevUntil</a></li>\n<li><a href=\"https://on.cypress.io/api/nextuntil\">nextUntil</a></li>\n</ul>\n"},{"title":"pause","_content":"\n`cy.pause` will stop command execution and allow you to interact with your app, resume commands when you're ready, or choose when to run the next command.\n\nThis does not set a `debugger` in your code, unlike [`cy.debug`](https://on.cypress.io/api/debug)\n\n| | |\n|--- | --- |\n| **Returns** | the subject from the previous command for further chaining |\n| **Timeout** | *cannot timeout* |\n\n***\n\n# [cy.pause()](#section-usage)\n\nStop command execution at the current command.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.pause`.\n\n**cy.pause(*options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n```javascript\ncy\n  .get(\"a\").should(\"have.attr\", \"href\").and(\"match\", /dashboard/)\n  .pause()\n  .get(\"button\").should(\"not.be.disabled\")\n```\n\n***\n\n# Related\n\n- [debug](https://on.cypress.io/api/debug)","source":"api/commands/pause.md","raw":"title: pause\n---\n\n`cy.pause` will stop command execution and allow you to interact with your app, resume commands when you're ready, or choose when to run the next command.\n\nThis does not set a `debugger` in your code, unlike [`cy.debug`](https://on.cypress.io/api/debug)\n\n| | |\n|--- | --- |\n| **Returns** | the subject from the previous command for further chaining |\n| **Timeout** | *cannot timeout* |\n\n***\n\n# [cy.pause()](#section-usage)\n\nStop command execution at the current command.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.pause`.\n\n**cy.pause(*options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n```javascript\ncy\n  .get(\"a\").should(\"have.attr\", \"href\").and(\"match\", /dashboard/)\n  .pause()\n  .get(\"button\").should(\"not.be.disabled\")\n```\n\n***\n\n# Related\n\n- [debug](https://on.cypress.io/api/debug)","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/pause.html","comments":1,"layout":"page","_id":"cj1pc2g8i0019k1g8ditjn87f","content":"<p><code>cy.pause</code> will stop command execution and allow you to interact with your app, resume commands when you’re ready, or choose when to run the next command.</p>\n<p>This does not set a <code>debugger</code> in your code, unlike <a href=\"https://on.cypress.io/api/debug\" target=\"_blank\" rel=\"external\"><code>cy.debug</code></a></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the subject from the previous command for further chaining</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><em>cannot timeout</em></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-pause\"><a href=\"#cy-pause\" class=\"headerlink\" title=\"cy.pause()\"></a><a href=\"#section-usage\">cy.pause()</a></h1><p>Stop command execution at the current command.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.pause</code>.</p>\n<p><strong>cy.pause(<em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"a\"</span>).should(<span class=\"string\">\"have.attr\"</span>, <span class=\"string\">\"href\"</span>).and(<span class=\"string\">\"match\"</span>, /dashboard/)</div><div class=\"line\">  .pause()</div><div class=\"line\">  .get(<span class=\"string\">\"button\"</span>).should(<span class=\"string\">\"not.be.disabled\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/debug\" target=\"_blank\" rel=\"external\">debug</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p><code>cy.pause</code> will stop command execution and allow you to interact with your app, resume commands when you’re ready, or choose when to run the next command.</p>\n<p>This does not set a <code>debugger</code> in your code, unlike <a href=\"https://on.cypress.io/api/debug\"><code>cy.debug</code></a></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the subject from the previous command for further chaining</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><em>cannot timeout</em></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-pause\"><a href=\"#cy-pause\" class=\"headerlink\" title=\"cy.pause()\"></a><a href=\"#section-usage\">cy.pause()</a></h1><p>Stop command execution at the current command.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.pause</code>.</p>\n<p><strong>cy.pause(<em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"a\"</span>).should(<span class=\"string\">\"have.attr\"</span>, <span class=\"string\">\"href\"</span>).and(<span class=\"string\">\"match\"</span>, /dashboard/)</div><div class=\"line\">  .pause()</div><div class=\"line\">  .get(<span class=\"string\">\"button\"</span>).should(<span class=\"string\">\"not.be.disabled\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/debug\">debug</a></li>\n</ul>\n"},{"title":"prev","_content":"\nGet the immediately preceding sibling of each element in the set of the elements.\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.prev` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.prev()](#section-usage)\n\nGet the immediately preceding sibling of each element in the set of matched elements.\n\n***\n\n# [cy.prev( *selector* )](#section-selector-usage)\n\nGet the immediately preceding sibling of each element in the set of matched elements filtered by selector.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.prev`.\n\n**cy.prev( *options* )**\n**cy.prev( *selector*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry getting the element\n\n***\n\n# Usage\n\n## Find the previous element of the element with class of `active`\n\n```html\n<ul>\n  <li>Cockatiels</li>\n  <li>Lorikeets</li>\n  <li class=\"active\">Cockatoos</li>\n  <li>Conures</li>\n  <li>Eclectus</li>\n</ul>\n```\n\n```javascript\n// returns <li>Lorikeets</li>\ncy.get(\".active\").prev()\n```\n\n***\n\n# Selector Usage\n\n## Find the previous element with a class of `active`\n\n```html\n<ul>\n  <li>Cockatiels</li>\n  <li>Lorikeets</li>\n  <li class=\"active\">Cockatoos</li>\n  <li>Conures</li>\n  <li>Eclectus</li>\n</ul>\n```\n\n```javascript\n// returns <li>Cockatoos</li>\ncy.get(\"li\").prev(\".active\")\n```\n\n***\n\n# Command Log\n\n## Find the previous element of the active `li`\n\n```javascript\ncy.get(\".left-nav\").find(\"li.active\").prev()\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"564\" alt=\"screen shot 2015-11-29 at 12 46 57 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458884/5bb4da1e-9697-11e5-9172-762df10c9a6e.png\">\n\nWhen clicking on `prev` within the command log, the console outputs the following:\n\n<img width=\"446\" alt=\"screen shot 2015-11-29 at 12 47 09 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458886/5e20c63c-9697-11e5-9167-1b81f96e1906.png\">\n\n***\n\n# Related\n\n1. [next](https://on.cypress.io/api/next)","source":"api/commands/prev.md","raw":"title: prev\n---\n\nGet the immediately preceding sibling of each element in the set of the elements.\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.prev` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.prev()](#section-usage)\n\nGet the immediately preceding sibling of each element in the set of matched elements.\n\n***\n\n# [cy.prev( *selector* )](#section-selector-usage)\n\nGet the immediately preceding sibling of each element in the set of matched elements filtered by selector.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.prev`.\n\n**cy.prev( *options* )**\n**cy.prev( *selector*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry getting the element\n\n***\n\n# Usage\n\n## Find the previous element of the element with class of `active`\n\n```html\n<ul>\n  <li>Cockatiels</li>\n  <li>Lorikeets</li>\n  <li class=\"active\">Cockatoos</li>\n  <li>Conures</li>\n  <li>Eclectus</li>\n</ul>\n```\n\n```javascript\n// returns <li>Lorikeets</li>\ncy.get(\".active\").prev()\n```\n\n***\n\n# Selector Usage\n\n## Find the previous element with a class of `active`\n\n```html\n<ul>\n  <li>Cockatiels</li>\n  <li>Lorikeets</li>\n  <li class=\"active\">Cockatoos</li>\n  <li>Conures</li>\n  <li>Eclectus</li>\n</ul>\n```\n\n```javascript\n// returns <li>Cockatoos</li>\ncy.get(\"li\").prev(\".active\")\n```\n\n***\n\n# Command Log\n\n## Find the previous element of the active `li`\n\n```javascript\ncy.get(\".left-nav\").find(\"li.active\").prev()\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"564\" alt=\"screen shot 2015-11-29 at 12 46 57 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458884/5bb4da1e-9697-11e5-9172-762df10c9a6e.png\">\n\nWhen clicking on `prev` within the command log, the console outputs the following:\n\n<img width=\"446\" alt=\"screen shot 2015-11-29 at 12 47 09 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458886/5e20c63c-9697-11e5-9167-1b81f96e1906.png\">\n\n***\n\n# Related\n\n1. [next](https://on.cypress.io/api/next)","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/prev.html","comments":1,"layout":"page","_id":"cj1pc2g8i001ak1g8gbacwstr","content":"<p>Get the immediately preceding sibling of each element in the set of the elements.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.prev</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-prev\"><a href=\"#cy-prev\" class=\"headerlink\" title=\"cy.prev()\"></a><a href=\"#section-usage\">cy.prev()</a></h1><p>Get the immediately preceding sibling of each element in the set of matched elements.</p>\n<hr>\n<h1 id=\"cy-prev-selector\"><a href=\"#cy-prev-selector\" class=\"headerlink\" title=\"cy.prev( selector )\"></a><a href=\"#section-selector-usage\">cy.prev( <em>selector</em> )</a></h1><p>Get the immediately preceding sibling of each element in the set of matched elements filtered by selector.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.prev</code>.</p>\n<p><strong>cy.prev( <em>options</em> )</strong><br><strong>cy.prev( <em>selector</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry getting the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Find-the-previous-element-of-the-element-with-class-of-active\"><a href=\"#Find-the-previous-element-of-the-element-with-class-of-active\" class=\"headerlink\" title=\"Find the previous element of the element with class of active\"></a>Find the previous element of the element with class of <code>active</code></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Cockatiels<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Lorikeets<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active\"</span>&gt;</span>Cockatoos<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Conures<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Eclectus<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns &lt;li&gt;Lorikeets&lt;/li&gt;</span></div><div class=\"line\">cy.get(<span class=\"string\">\".active\"</span>).prev()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Selector-Usage\"><a href=\"#Selector-Usage\" class=\"headerlink\" title=\"Selector Usage\"></a>Selector Usage</h1><h2 id=\"Find-the-previous-element-with-a-class-of-active\"><a href=\"#Find-the-previous-element-with-a-class-of-active\" class=\"headerlink\" title=\"Find the previous element with a class of active\"></a>Find the previous element with a class of <code>active</code></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Cockatiels<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Lorikeets<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active\"</span>&gt;</span>Cockatoos<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Conures<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Eclectus<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns &lt;li&gt;Cockatoos&lt;/li&gt;</span></div><div class=\"line\">cy.get(<span class=\"string\">\"li\"</span>).prev(<span class=\"string\">\".active\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Find-the-previous-element-of-the-active-li\"><a href=\"#Find-the-previous-element-of-the-active-li\" class=\"headerlink\" title=\"Find the previous element of the active li\"></a>Find the previous element of the active <code>li</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\".left-nav\"</span>).find(<span class=\"string\">\"li.active\"</span>).prev()</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"564\" alt=\"screen shot 2015-11-29 at 12 46 57 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458884/5bb4da1e-9697-11e5-9172-762df10c9a6e.png\"></p>\n<p>When clicking on <code>prev</code> within the command log, the console outputs the following:</p>\n<p><img width=\"446\" alt=\"screen shot 2015-11-29 at 12 47 09 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458886/5e20c63c-9697-11e5-9167-1b81f96e1906.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ol>\n<li><a href=\"https://on.cypress.io/api/next\" target=\"_blank\" rel=\"external\">next</a></li>\n</ol>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Get the immediately preceding sibling of each element in the set of the elements.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.prev</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-prev\"><a href=\"#cy-prev\" class=\"headerlink\" title=\"cy.prev()\"></a><a href=\"#section-usage\">cy.prev()</a></h1><p>Get the immediately preceding sibling of each element in the set of matched elements.</p>\n<hr>\n<h1 id=\"cy-prev-selector\"><a href=\"#cy-prev-selector\" class=\"headerlink\" title=\"cy.prev( selector )\"></a><a href=\"#section-selector-usage\">cy.prev( <em>selector</em> )</a></h1><p>Get the immediately preceding sibling of each element in the set of matched elements filtered by selector.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.prev</code>.</p>\n<p><strong>cy.prev( <em>options</em> )</strong><br><strong>cy.prev( <em>selector</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry getting the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Find-the-previous-element-of-the-element-with-class-of-active\"><a href=\"#Find-the-previous-element-of-the-element-with-class-of-active\" class=\"headerlink\" title=\"Find the previous element of the element with class of active\"></a>Find the previous element of the element with class of <code>active</code></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Cockatiels<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Lorikeets<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active\"</span>&gt;</span>Cockatoos<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Conures<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Eclectus<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns &lt;li&gt;Lorikeets&lt;/li&gt;</span></div><div class=\"line\">cy.get(<span class=\"string\">\".active\"</span>).prev()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Selector-Usage\"><a href=\"#Selector-Usage\" class=\"headerlink\" title=\"Selector Usage\"></a>Selector Usage</h1><h2 id=\"Find-the-previous-element-with-a-class-of-active\"><a href=\"#Find-the-previous-element-with-a-class-of-active\" class=\"headerlink\" title=\"Find the previous element with a class of active\"></a>Find the previous element with a class of <code>active</code></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Cockatiels<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Lorikeets<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active\"</span>&gt;</span>Cockatoos<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Conures<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Eclectus<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns &lt;li&gt;Cockatoos&lt;/li&gt;</span></div><div class=\"line\">cy.get(<span class=\"string\">\"li\"</span>).prev(<span class=\"string\">\".active\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Find-the-previous-element-of-the-active-li\"><a href=\"#Find-the-previous-element-of-the-active-li\" class=\"headerlink\" title=\"Find the previous element of the active li\"></a>Find the previous element of the active <code>li</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\".left-nav\"</span>).find(<span class=\"string\">\"li.active\"</span>).prev()</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"564\" alt=\"screen shot 2015-11-29 at 12 46 57 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458884/5bb4da1e-9697-11e5-9172-762df10c9a6e.png\"></p>\n<p>When clicking on <code>prev</code> within the command log, the console outputs the following:</p>\n<p><img width=\"446\" alt=\"screen shot 2015-11-29 at 12 47 09 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458886/5e20c63c-9697-11e5-9167-1b81f96e1906.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ol>\n<li><a href=\"https://on.cypress.io/api/next\">next</a></li>\n</ol>\n"},{"title":"prevall","_content":"\nGet all previous siblings of each DOM element in the set of matched DOM elements.\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.prevAll` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#timeouts) |\n\n***\n\n# [cy.prevAll()](#usage)\n\nGet all of the next siblings of the elements.\n\n***\n\n# [cy.prevAll( *selector* )](#selector-usage)\n\nWhen a selector is provided, it retrieves all of the previous siblings only if it matches that selector.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.prevAll`.\n\n**cy.prevAll( *options* )**\n**cy.prevAll( *selector*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#timeouts) | Total time to retry getting the element\n\n***\n\n# Usage\n\n## Find all of the element's siblings before `.third`\n\n```html\n<ul>\n  <li>apples</li>\n  <li>oranges</li>\n  <li class=\"third\">bananas</li>\n  <li>pineapples</li>\n  <li>grapes</li>\n</ul>\n```\n\n```javascript\n//returns [<li>apples</li>, <li>oranges</li>]\ncy.get(\".third\").prevAll()\n```\n\n***\n\n# Selector Usage\n\n## Find all of the previous siblings of each li. Keep only the ones with a class `selected`.\n\n```html\n<ul>\n  <li>apples</li>\n  <li>oranges</li>\n  <li>bananas</li>\n  <li class=\"selected\">pineapples</li>\n  <li>grapes</li>\n</ul>\n```\n\n```javascript\n//returns <li>pineapples</li>\ncy.get(\"li\").prevAll(\".selected\")\n```\n\n***\n\n# Command Log\n\n## Find all elements before the active li\n\n```javascript\ncy.get(\".left-nav\").find(\"li.active\").prevAll()\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"562\" alt=\"screen shot 2017-03-23 at 2 50 20 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24264885/1a1d87ac-0fd8-11e7-97cb-1d0d2110de81.png\">\n\nWhen clicking on `prevAll` within the command log, the console outputs the following:\n\n<img width=\"539\" alt=\"screen shot 2017-03-23 at 2 50 26 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24264898/2219d1a4-0fd8-11e7-9e8b-6b2d97166d6a.png\">\n\n***\n\n# Related\n\n- [prev](https://on.cypress.io/api/prev)\n- [prevUntil](https://on.cypress.io/api/prevuntil)\n- [nextAll](https://on.cypress.io/api/nextall)\n","source":"api/commands/prevall.md","raw":"title: prevall\n---\n\nGet all previous siblings of each DOM element in the set of matched DOM elements.\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.prevAll` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#timeouts) |\n\n***\n\n# [cy.prevAll()](#usage)\n\nGet all of the next siblings of the elements.\n\n***\n\n# [cy.prevAll( *selector* )](#selector-usage)\n\nWhen a selector is provided, it retrieves all of the previous siblings only if it matches that selector.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.prevAll`.\n\n**cy.prevAll( *options* )**\n**cy.prevAll( *selector*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#timeouts) | Total time to retry getting the element\n\n***\n\n# Usage\n\n## Find all of the element's siblings before `.third`\n\n```html\n<ul>\n  <li>apples</li>\n  <li>oranges</li>\n  <li class=\"third\">bananas</li>\n  <li>pineapples</li>\n  <li>grapes</li>\n</ul>\n```\n\n```javascript\n//returns [<li>apples</li>, <li>oranges</li>]\ncy.get(\".third\").prevAll()\n```\n\n***\n\n# Selector Usage\n\n## Find all of the previous siblings of each li. Keep only the ones with a class `selected`.\n\n```html\n<ul>\n  <li>apples</li>\n  <li>oranges</li>\n  <li>bananas</li>\n  <li class=\"selected\">pineapples</li>\n  <li>grapes</li>\n</ul>\n```\n\n```javascript\n//returns <li>pineapples</li>\ncy.get(\"li\").prevAll(\".selected\")\n```\n\n***\n\n# Command Log\n\n## Find all elements before the active li\n\n```javascript\ncy.get(\".left-nav\").find(\"li.active\").prevAll()\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"562\" alt=\"screen shot 2017-03-23 at 2 50 20 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24264885/1a1d87ac-0fd8-11e7-97cb-1d0d2110de81.png\">\n\nWhen clicking on `prevAll` within the command log, the console outputs the following:\n\n<img width=\"539\" alt=\"screen shot 2017-03-23 at 2 50 26 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24264898/2219d1a4-0fd8-11e7-9e8b-6b2d97166d6a.png\">\n\n***\n\n# Related\n\n- [prev](https://on.cypress.io/api/prev)\n- [prevUntil](https://on.cypress.io/api/prevuntil)\n- [nextAll](https://on.cypress.io/api/nextall)\n","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/commands/prevall.html","comments":1,"layout":"page","_id":"cj1pc2g8i001bk1g87jy7c8oa","content":"<p>Get all previous siblings of each DOM element in the set of matched DOM elements.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.prevAll</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-prevAll\"><a href=\"#cy-prevAll\" class=\"headerlink\" title=\"cy.prevAll()\"></a><a href=\"#usage\">cy.prevAll()</a></h1><p>Get all of the next siblings of the elements.</p>\n<hr>\n<h1 id=\"cy-prevAll-selector\"><a href=\"#cy-prevAll-selector\" class=\"headerlink\" title=\"cy.prevAll( selector )\"></a><a href=\"#selector-usage\">cy.prevAll( <em>selector</em> )</a></h1><p>When a selector is provided, it retrieves all of the previous siblings only if it matches that selector.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.prevAll</code>.</p>\n<p><strong>cy.prevAll( <em>options</em> )</strong><br><strong>cy.prevAll( <em>selector</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry getting the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Find-all-of-the-element’s-siblings-before-third\"><a href=\"#Find-all-of-the-element’s-siblings-before-third\" class=\"headerlink\" title=\"Find all of the element’s siblings before .third\"></a>Find all of the element’s siblings before <code>.third</code></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>apples<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>oranges<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"third\"</span>&gt;</span>bananas<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>pineapples<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>grapes<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//returns [&lt;li&gt;apples&lt;/li&gt;, &lt;li&gt;oranges&lt;/li&gt;]</span></div><div class=\"line\">cy.get(<span class=\"string\">\".third\"</span>).prevAll()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Selector-Usage\"><a href=\"#Selector-Usage\" class=\"headerlink\" title=\"Selector Usage\"></a>Selector Usage</h1><h2 id=\"Find-all-of-the-previous-siblings-of-each-li-Keep-only-the-ones-with-a-class-selected\"><a href=\"#Find-all-of-the-previous-siblings-of-each-li-Keep-only-the-ones-with-a-class-selected\" class=\"headerlink\" title=\"Find all of the previous siblings of each li. Keep only the ones with a class selected.\"></a>Find all of the previous siblings of each li. Keep only the ones with a class <code>selected</code>.</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>apples<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>oranges<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>bananas<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"selected\"</span>&gt;</span>pineapples<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>grapes<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//returns &lt;li&gt;pineapples&lt;/li&gt;</span></div><div class=\"line\">cy.get(<span class=\"string\">\"li\"</span>).prevAll(<span class=\"string\">\".selected\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Find-all-elements-before-the-active-li\"><a href=\"#Find-all-elements-before-the-active-li\" class=\"headerlink\" title=\"Find all elements before the active li\"></a>Find all elements before the active li</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\".left-nav\"</span>).find(<span class=\"string\">\"li.active\"</span>).prevAll()</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"562\" alt=\"screen shot 2017-03-23 at 2 50 20 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24264885/1a1d87ac-0fd8-11e7-97cb-1d0d2110de81.png\"></p>\n<p>When clicking on <code>prevAll</code> within the command log, the console outputs the following:</p>\n<p><img width=\"539\" alt=\"screen shot 2017-03-23 at 2 50 26 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24264898/2219d1a4-0fd8-11e7-9e8b-6b2d97166d6a.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/prev\" target=\"_blank\" rel=\"external\">prev</a></li>\n<li><a href=\"https://on.cypress.io/api/prevuntil\" target=\"_blank\" rel=\"external\">prevUntil</a></li>\n<li><a href=\"https://on.cypress.io/api/nextall\" target=\"_blank\" rel=\"external\">nextAll</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Get all previous siblings of each DOM element in the set of matched DOM elements.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.prevAll</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#timeouts\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-prevAll\"><a href=\"#cy-prevAll\" class=\"headerlink\" title=\"cy.prevAll()\"></a><a href=\"#usage\">cy.prevAll()</a></h1><p>Get all of the next siblings of the elements.</p>\n<hr>\n<h1 id=\"cy-prevAll-selector\"><a href=\"#cy-prevAll-selector\" class=\"headerlink\" title=\"cy.prevAll( selector )\"></a><a href=\"#selector-usage\">cy.prevAll( <em>selector</em> )</a></h1><p>When a selector is provided, it retrieves all of the previous siblings only if it matches that selector.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.prevAll</code>.</p>\n<p><strong>cy.prevAll( <em>options</em> )</strong><br><strong>cy.prevAll( <em>selector</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#timeouts\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry getting the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Find-all-of-the-element’s-siblings-before-third\"><a href=\"#Find-all-of-the-element’s-siblings-before-third\" class=\"headerlink\" title=\"Find all of the element’s siblings before .third\"></a>Find all of the element’s siblings before <code>.third</code></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>apples<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>oranges<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"third\"</span>&gt;</span>bananas<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>pineapples<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>grapes<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//returns [&lt;li&gt;apples&lt;/li&gt;, &lt;li&gt;oranges&lt;/li&gt;]</span></div><div class=\"line\">cy.get(<span class=\"string\">\".third\"</span>).prevAll()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Selector-Usage\"><a href=\"#Selector-Usage\" class=\"headerlink\" title=\"Selector Usage\"></a>Selector Usage</h1><h2 id=\"Find-all-of-the-previous-siblings-of-each-li-Keep-only-the-ones-with-a-class-selected\"><a href=\"#Find-all-of-the-previous-siblings-of-each-li-Keep-only-the-ones-with-a-class-selected\" class=\"headerlink\" title=\"Find all of the previous siblings of each li. Keep only the ones with a class selected.\"></a>Find all of the previous siblings of each li. Keep only the ones with a class <code>selected</code>.</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>apples<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>oranges<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>bananas<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"selected\"</span>&gt;</span>pineapples<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>grapes<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//returns &lt;li&gt;pineapples&lt;/li&gt;</span></div><div class=\"line\">cy.get(<span class=\"string\">\"li\"</span>).prevAll(<span class=\"string\">\".selected\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Find-all-elements-before-the-active-li\"><a href=\"#Find-all-elements-before-the-active-li\" class=\"headerlink\" title=\"Find all elements before the active li\"></a>Find all elements before the active li</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\".left-nav\"</span>).find(<span class=\"string\">\"li.active\"</span>).prevAll()</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"562\" alt=\"screen shot 2017-03-23 at 2 50 20 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24264885/1a1d87ac-0fd8-11e7-97cb-1d0d2110de81.png\"></p>\n<p>When clicking on <code>prevAll</code> within the command log, the console outputs the following:</p>\n<p><img width=\"539\" alt=\"screen shot 2017-03-23 at 2 50 26 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24264898/2219d1a4-0fd8-11e7-9e8b-6b2d97166d6a.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/prev\">prev</a></li>\n<li><a href=\"https://on.cypress.io/api/prevuntil\">prevUntil</a></li>\n<li><a href=\"https://on.cypress.io/api/nextall\">nextAll</a></li>\n</ul>\n"},{"title":"commands","_content":"\nCypress comes with its own API for creating custom commands. In fact, the same public methods *you* have access to are the same ones we use to create all of the built in commands. In other words, there's nothing special or different about ours versus yours. You can customize every aspect of commands, not only their behavior, but also their display in the Command Log.\n\nThis allows you to build up specific commands for your application which take their own custom arguments, and perform their own custom behavior.\n\nFor example, the first custom command you'll probably create is the canonical `login` command. This typically would navigate the user to your `/login` url, fill out a username / password combination, submit the form, and then assert that the dashboard page comes up (or whatever happens upon successful login).\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"A great place to define these commands is in your `cypress/support/commands.js` file, since it is loaded before any test files are evaluated.\"\n}\n[/block]\n\n# [Cypress.addChildCommand()]()\n\nChild commands are always chained off of a **parent** command, or another **child** command.\n\n***\n\n# [Cypress.addDualCommand]()\n\nWhile parent commands always start a new chain of commands and child commands require being chained off a parent command, dual commands can behave as parent or child command. That is, they can **start** a new chain, or be chained off of an **existing** chain.\n\n***\n\n# [Cypress.addParentCommand](#add-parent-command-usage)\n\nParent commands always **begin** a new chain of commands. Even if you've written a previous chain, parent commands will always start a new chain, and ignore previous chains.\n\n***\n\n# Add Parent Command Usage\n\n## Custom command for 'login'\n```javascript\nCypress.addParentCommand(\"login\", function(email, password){\n  var email    = email || \"joe@example.com\"\n  var password = password || \"foobar\"\n\n  var log = Cypress.Log.command({\n    name: \"login\",\n    message: [email, password],\n    onConsole: function(){\n      return {\n        email: email,\n        password: password\n      }\n    }\n  })\n\n  cy\n    .visit(\"/login\", {log: false})\n    .contains(\"Log In\", {log: false})\n    .get(\"#email\", {log: false}).type(email, {log: false})\n    .get(\"#password\", {log: false}).type(password, {log: false})\n    .get(\"button\", {log: false}).click({log: false}) //this should submit the form\n    .get(\"h1\", {log: false}).contains(\"Dashboard\", {log: false}) //we should be on the dashboard now\n    .url({log: false}).should(\"match\", /dashboard/, {log: false})\n    .then(function(){\n      log.snapshot().end()\n    })\n})\n```\n\n## Another custom command for sign in\n\n```javascript\nCypress.addParentCommand(\"signIn\", function(email, password) {\n  return cy.chain()\n  .request({\n    method: \"POST\",\n    url: \"/auth\",\n    body: {email, password}\n  }).its(\"body\");\n});\n\ndescribe(\"custom command\", function() {\n  it(\"resolves with the body\", function() {\n    // the subject (body) is carried on and\n    // we can then add assertions about it\n    cy.signIn({\"jane.lane\", \"password123\"}).should(\"deep.eq\", {\n      email: \"jane.lane\",\n      password: \"password123\"\n    });\n  });\n});\n```\n\n## Using cy.chain to manage a command's subject\n\n```javascript\nCypress.addParentCommand(\"a\", function(){\n  cy\n    .chain()\n    .wrap({foo: \"bar\"})\n    .its(\"foo\")\n})\n\nCypress.addChildCommand(\"b\", function(subj){\n  cy\n    .chain()\n    .wrap(subj)\n    .should(\"eq\", \"bar\")\n})\n\nit(\"can chain subjects\", function(){\n  cy\n    .a()\n    .b()\n    .should(\"eq\", \"bar\")\n})\n```\n","source":"api/cypress-api/commands.md","raw":"title: commands\n---\n\nCypress comes with its own API for creating custom commands. In fact, the same public methods *you* have access to are the same ones we use to create all of the built in commands. In other words, there's nothing special or different about ours versus yours. You can customize every aspect of commands, not only their behavior, but also their display in the Command Log.\n\nThis allows you to build up specific commands for your application which take their own custom arguments, and perform their own custom behavior.\n\nFor example, the first custom command you'll probably create is the canonical `login` command. This typically would navigate the user to your `/login` url, fill out a username / password combination, submit the form, and then assert that the dashboard page comes up (or whatever happens upon successful login).\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"A great place to define these commands is in your `cypress/support/commands.js` file, since it is loaded before any test files are evaluated.\"\n}\n[/block]\n\n# [Cypress.addChildCommand()]()\n\nChild commands are always chained off of a **parent** command, or another **child** command.\n\n***\n\n# [Cypress.addDualCommand]()\n\nWhile parent commands always start a new chain of commands and child commands require being chained off a parent command, dual commands can behave as parent or child command. That is, they can **start** a new chain, or be chained off of an **existing** chain.\n\n***\n\n# [Cypress.addParentCommand](#add-parent-command-usage)\n\nParent commands always **begin** a new chain of commands. Even if you've written a previous chain, parent commands will always start a new chain, and ignore previous chains.\n\n***\n\n# Add Parent Command Usage\n\n## Custom command for 'login'\n```javascript\nCypress.addParentCommand(\"login\", function(email, password){\n  var email    = email || \"joe@example.com\"\n  var password = password || \"foobar\"\n\n  var log = Cypress.Log.command({\n    name: \"login\",\n    message: [email, password],\n    onConsole: function(){\n      return {\n        email: email,\n        password: password\n      }\n    }\n  })\n\n  cy\n    .visit(\"/login\", {log: false})\n    .contains(\"Log In\", {log: false})\n    .get(\"#email\", {log: false}).type(email, {log: false})\n    .get(\"#password\", {log: false}).type(password, {log: false})\n    .get(\"button\", {log: false}).click({log: false}) //this should submit the form\n    .get(\"h1\", {log: false}).contains(\"Dashboard\", {log: false}) //we should be on the dashboard now\n    .url({log: false}).should(\"match\", /dashboard/, {log: false})\n    .then(function(){\n      log.snapshot().end()\n    })\n})\n```\n\n## Another custom command for sign in\n\n```javascript\nCypress.addParentCommand(\"signIn\", function(email, password) {\n  return cy.chain()\n  .request({\n    method: \"POST\",\n    url: \"/auth\",\n    body: {email, password}\n  }).its(\"body\");\n});\n\ndescribe(\"custom command\", function() {\n  it(\"resolves with the body\", function() {\n    // the subject (body) is carried on and\n    // we can then add assertions about it\n    cy.signIn({\"jane.lane\", \"password123\"}).should(\"deep.eq\", {\n      email: \"jane.lane\",\n      password: \"password123\"\n    });\n  });\n});\n```\n\n## Using cy.chain to manage a command's subject\n\n```javascript\nCypress.addParentCommand(\"a\", function(){\n  cy\n    .chain()\n    .wrap({foo: \"bar\"})\n    .its(\"foo\")\n})\n\nCypress.addChildCommand(\"b\", function(subj){\n  cy\n    .chain()\n    .wrap(subj)\n    .should(\"eq\", \"bar\")\n})\n\nit(\"can chain subjects\", function(){\n  cy\n    .a()\n    .b()\n    .should(\"eq\", \"bar\")\n})\n```\n","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/cypress-api/commands.html","comments":1,"layout":"page","_id":"cj1pc2g930023k1g8lc8jsgcl","content":"<p>Cypress comes with its own API for creating custom commands. In fact, the same public methods <em>you</em> have access to are the same ones we use to create all of the built in commands. In other words, there’s nothing special or different about ours versus yours. You can customize every aspect of commands, not only their behavior, but also their display in the Command Log.</p>\n<p>This allows you to build up specific commands for your application which take their own custom arguments, and perform their own custom behavior.</p>\n<p>For example, the first custom command you’ll probably create is the canonical <code>login</code> command. This typically would navigate the user to your <code>/login</code> url, fill out a username / password combination, submit the form, and then assert that the dashboard page comes up (or whatever happens upon successful login).</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “A great place to define these commands is in your <code>cypress/support/commands.js</code> file, since it is loaded before any test files are evaluated.”<br>}<br>[/block]</p>\n<h1 id=\"Cypress-addChildCommand\"><a href=\"#Cypress-addChildCommand\" class=\"headerlink\" title=\"Cypress.addChildCommand()\"></a><a href=\"\">Cypress.addChildCommand()</a></h1><p>Child commands are always chained off of a <strong>parent</strong> command, or another <strong>child</strong> command.</p>\n<hr>\n<h1 id=\"Cypress-addDualCommand\"><a href=\"#Cypress-addDualCommand\" class=\"headerlink\" title=\"Cypress.addDualCommand\"></a><a href=\"\">Cypress.addDualCommand</a></h1><p>While parent commands always start a new chain of commands and child commands require being chained off a parent command, dual commands can behave as parent or child command. That is, they can <strong>start</strong> a new chain, or be chained off of an <strong>existing</strong> chain.</p>\n<hr>\n<h1 id=\"Cypress-addParentCommand\"><a href=\"#Cypress-addParentCommand\" class=\"headerlink\" title=\"Cypress.addParentCommand\"></a><a href=\"#add-parent-command-usage\">Cypress.addParentCommand</a></h1><p>Parent commands always <strong>begin</strong> a new chain of commands. Even if you’ve written a previous chain, parent commands will always start a new chain, and ignore previous chains.</p>\n<hr>\n<h1 id=\"Add-Parent-Command-Usage\"><a href=\"#Add-Parent-Command-Usage\" class=\"headerlink\" title=\"Add Parent Command Usage\"></a>Add Parent Command Usage</h1><h2 id=\"Custom-command-for-‘login’\"><a href=\"#Custom-command-for-‘login’\" class=\"headerlink\" title=\"Custom command for ‘login’\"></a>Custom command for ‘login’</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">Cypress.addParentCommand(<span class=\"string\">\"login\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">email, password</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> email    = email || <span class=\"string\">\"joe@example.com\"</span></div><div class=\"line\">  <span class=\"keyword\">var</span> password = password || <span class=\"string\">\"foobar\"</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> log = Cypress.Log.command(&#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">\"login\"</span>,</div><div class=\"line\">    <span class=\"attr\">message</span>: [email, password],</div><div class=\"line\">    <span class=\"attr\">onConsole</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">email</span>: email,</div><div class=\"line\">        <span class=\"attr\">password</span>: password</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  cy</div><div class=\"line\">    .visit(<span class=\"string\">\"/login\"</span>, &#123;<span class=\"attr\">log</span>: <span class=\"literal\">false</span>&#125;)</div><div class=\"line\">    .contains(<span class=\"string\">\"Log In\"</span>, &#123;<span class=\"attr\">log</span>: <span class=\"literal\">false</span>&#125;)</div><div class=\"line\">    .get(<span class=\"string\">\"#email\"</span>, &#123;<span class=\"attr\">log</span>: <span class=\"literal\">false</span>&#125;).type(email, &#123;<span class=\"attr\">log</span>: <span class=\"literal\">false</span>&#125;)</div><div class=\"line\">    .get(<span class=\"string\">\"#password\"</span>, &#123;<span class=\"attr\">log</span>: <span class=\"literal\">false</span>&#125;).type(password, &#123;<span class=\"attr\">log</span>: <span class=\"literal\">false</span>&#125;)</div><div class=\"line\">    .get(<span class=\"string\">\"button\"</span>, &#123;<span class=\"attr\">log</span>: <span class=\"literal\">false</span>&#125;).click(&#123;<span class=\"attr\">log</span>: <span class=\"literal\">false</span>&#125;) <span class=\"comment\">//this should submit the form</span></div><div class=\"line\">    .get(<span class=\"string\">\"h1\"</span>, &#123;<span class=\"attr\">log</span>: <span class=\"literal\">false</span>&#125;).contains(<span class=\"string\">\"Dashboard\"</span>, &#123;<span class=\"attr\">log</span>: <span class=\"literal\">false</span>&#125;) <span class=\"comment\">//we should be on the dashboard now</span></div><div class=\"line\">    .url(&#123;<span class=\"attr\">log</span>: <span class=\"literal\">false</span>&#125;).should(<span class=\"string\">\"match\"</span>, /dashboard/, &#123;<span class=\"attr\">log</span>: <span class=\"literal\">false</span>&#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      log.snapshot().end()</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Another-custom-command-for-sign-in\"><a href=\"#Another-custom-command-for-sign-in\" class=\"headerlink\" title=\"Another custom command for sign in\"></a>Another custom command for sign in</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">Cypress.addParentCommand(<span class=\"string\">\"signIn\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">email, password</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> cy.chain()</div><div class=\"line\">  .request(&#123;</div><div class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">\"POST\"</span>,</div><div class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">\"/auth\"</span>,</div><div class=\"line\">    <span class=\"attr\">body</span>: &#123;email, password&#125;</div><div class=\"line\">  &#125;).its(<span class=\"string\">\"body\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">describe(<span class=\"string\">\"custom command\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  it(<span class=\"string\">\"resolves with the body\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// the subject (body) is carried on and</span></div><div class=\"line\">    <span class=\"comment\">// we can then add assertions about it</span></div><div class=\"line\">    cy.signIn(&#123;<span class=\"string\">\"jane.lane\"</span>, <span class=\"string\">\"password123\"</span>&#125;).should(<span class=\"string\">\"deep.eq\"</span>, &#123;</div><div class=\"line\">      <span class=\"attr\">email</span>: <span class=\"string\">\"jane.lane\"</span>,</div><div class=\"line\">      <span class=\"attr\">password</span>: <span class=\"string\">\"password123\"</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"Using-cy-chain-to-manage-a-command’s-subject\"><a href=\"#Using-cy-chain-to-manage-a-command’s-subject\" class=\"headerlink\" title=\"Using cy.chain to manage a command’s subject\"></a>Using cy.chain to manage a command’s subject</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">Cypress.addParentCommand(<span class=\"string\">\"a\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  cy</div><div class=\"line\">    .chain()</div><div class=\"line\">    .wrap(&#123;<span class=\"attr\">foo</span>: <span class=\"string\">\"bar\"</span>&#125;)</div><div class=\"line\">    .its(<span class=\"string\">\"foo\"</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">Cypress.addChildCommand(<span class=\"string\">\"b\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">subj</span>)</span>&#123;</div><div class=\"line\">  cy</div><div class=\"line\">    .chain()</div><div class=\"line\">    .wrap(subj)</div><div class=\"line\">    .should(<span class=\"string\">\"eq\"</span>, <span class=\"string\">\"bar\"</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">it(<span class=\"string\">\"can chain subjects\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  cy</div><div class=\"line\">    .a()</div><div class=\"line\">    .b()</div><div class=\"line\">    .should(<span class=\"string\">\"eq\"</span>, <span class=\"string\">\"bar\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Cypress comes with its own API for creating custom commands. In fact, the same public methods <em>you</em> have access to are the same ones we use to create all of the built in commands. In other words, there’s nothing special or different about ours versus yours. You can customize every aspect of commands, not only their behavior, but also their display in the Command Log.</p>\n<p>This allows you to build up specific commands for your application which take their own custom arguments, and perform their own custom behavior.</p>\n<p>For example, the first custom command you’ll probably create is the canonical <code>login</code> command. This typically would navigate the user to your <code>/login</code> url, fill out a username / password combination, submit the form, and then assert that the dashboard page comes up (or whatever happens upon successful login).</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “A great place to define these commands is in your <code>cypress/support/commands.js</code> file, since it is loaded before any test files are evaluated.”<br>}<br>[/block]</p>\n<h1 id=\"Cypress-addChildCommand\"><a href=\"#Cypress-addChildCommand\" class=\"headerlink\" title=\"Cypress.addChildCommand()\"></a><a href=\"\">Cypress.addChildCommand()</a></h1><p>Child commands are always chained off of a <strong>parent</strong> command, or another <strong>child</strong> command.</p>\n<hr>\n<h1 id=\"Cypress-addDualCommand\"><a href=\"#Cypress-addDualCommand\" class=\"headerlink\" title=\"Cypress.addDualCommand\"></a><a href=\"\">Cypress.addDualCommand</a></h1><p>While parent commands always start a new chain of commands and child commands require being chained off a parent command, dual commands can behave as parent or child command. That is, they can <strong>start</strong> a new chain, or be chained off of an <strong>existing</strong> chain.</p>\n<hr>\n<h1 id=\"Cypress-addParentCommand\"><a href=\"#Cypress-addParentCommand\" class=\"headerlink\" title=\"Cypress.addParentCommand\"></a><a href=\"#add-parent-command-usage\">Cypress.addParentCommand</a></h1><p>Parent commands always <strong>begin</strong> a new chain of commands. Even if you’ve written a previous chain, parent commands will always start a new chain, and ignore previous chains.</p>\n<hr>\n<h1 id=\"Add-Parent-Command-Usage\"><a href=\"#Add-Parent-Command-Usage\" class=\"headerlink\" title=\"Add Parent Command Usage\"></a>Add Parent Command Usage</h1><h2 id=\"Custom-command-for-‘login’\"><a href=\"#Custom-command-for-‘login’\" class=\"headerlink\" title=\"Custom command for ‘login’\"></a>Custom command for ‘login’</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">Cypress.addParentCommand(<span class=\"string\">\"login\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">email, password</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> email    = email || <span class=\"string\">\"joe@example.com\"</span></div><div class=\"line\">  <span class=\"keyword\">var</span> password = password || <span class=\"string\">\"foobar\"</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> log = Cypress.Log.command(&#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">\"login\"</span>,</div><div class=\"line\">    <span class=\"attr\">message</span>: [email, password],</div><div class=\"line\">    <span class=\"attr\">onConsole</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">email</span>: email,</div><div class=\"line\">        <span class=\"attr\">password</span>: password</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  cy</div><div class=\"line\">    .visit(<span class=\"string\">\"/login\"</span>, &#123;<span class=\"attr\">log</span>: <span class=\"literal\">false</span>&#125;)</div><div class=\"line\">    .contains(<span class=\"string\">\"Log In\"</span>, &#123;<span class=\"attr\">log</span>: <span class=\"literal\">false</span>&#125;)</div><div class=\"line\">    .get(<span class=\"string\">\"#email\"</span>, &#123;<span class=\"attr\">log</span>: <span class=\"literal\">false</span>&#125;).type(email, &#123;<span class=\"attr\">log</span>: <span class=\"literal\">false</span>&#125;)</div><div class=\"line\">    .get(<span class=\"string\">\"#password\"</span>, &#123;<span class=\"attr\">log</span>: <span class=\"literal\">false</span>&#125;).type(password, &#123;<span class=\"attr\">log</span>: <span class=\"literal\">false</span>&#125;)</div><div class=\"line\">    .get(<span class=\"string\">\"button\"</span>, &#123;<span class=\"attr\">log</span>: <span class=\"literal\">false</span>&#125;).click(&#123;<span class=\"attr\">log</span>: <span class=\"literal\">false</span>&#125;) <span class=\"comment\">//this should submit the form</span></div><div class=\"line\">    .get(<span class=\"string\">\"h1\"</span>, &#123;<span class=\"attr\">log</span>: <span class=\"literal\">false</span>&#125;).contains(<span class=\"string\">\"Dashboard\"</span>, &#123;<span class=\"attr\">log</span>: <span class=\"literal\">false</span>&#125;) <span class=\"comment\">//we should be on the dashboard now</span></div><div class=\"line\">    .url(&#123;<span class=\"attr\">log</span>: <span class=\"literal\">false</span>&#125;).should(<span class=\"string\">\"match\"</span>, /dashboard/, &#123;<span class=\"attr\">log</span>: <span class=\"literal\">false</span>&#125;)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      log.snapshot().end()</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Another-custom-command-for-sign-in\"><a href=\"#Another-custom-command-for-sign-in\" class=\"headerlink\" title=\"Another custom command for sign in\"></a>Another custom command for sign in</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">Cypress.addParentCommand(<span class=\"string\">\"signIn\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">email, password</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> cy.chain()</div><div class=\"line\">  .request(&#123;</div><div class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">\"POST\"</span>,</div><div class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">\"/auth\"</span>,</div><div class=\"line\">    <span class=\"attr\">body</span>: &#123;email, password&#125;</div><div class=\"line\">  &#125;).its(<span class=\"string\">\"body\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">describe(<span class=\"string\">\"custom command\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  it(<span class=\"string\">\"resolves with the body\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// the subject (body) is carried on and</span></div><div class=\"line\">    <span class=\"comment\">// we can then add assertions about it</span></div><div class=\"line\">    cy.signIn(&#123;<span class=\"string\">\"jane.lane\"</span>, <span class=\"string\">\"password123\"</span>&#125;).should(<span class=\"string\">\"deep.eq\"</span>, &#123;</div><div class=\"line\">      <span class=\"attr\">email</span>: <span class=\"string\">\"jane.lane\"</span>,</div><div class=\"line\">      <span class=\"attr\">password</span>: <span class=\"string\">\"password123\"</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"Using-cy-chain-to-manage-a-command’s-subject\"><a href=\"#Using-cy-chain-to-manage-a-command’s-subject\" class=\"headerlink\" title=\"Using cy.chain to manage a command’s subject\"></a>Using cy.chain to manage a command’s subject</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">Cypress.addParentCommand(<span class=\"string\">\"a\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  cy</div><div class=\"line\">    .chain()</div><div class=\"line\">    .wrap(&#123;<span class=\"attr\">foo</span>: <span class=\"string\">\"bar\"</span>&#125;)</div><div class=\"line\">    .its(<span class=\"string\">\"foo\"</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">Cypress.addChildCommand(<span class=\"string\">\"b\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">subj</span>)</span>&#123;</div><div class=\"line\">  cy</div><div class=\"line\">    .chain()</div><div class=\"line\">    .wrap(subj)</div><div class=\"line\">    .should(<span class=\"string\">\"eq\"</span>, <span class=\"string\">\"bar\"</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">it(<span class=\"string\">\"can chain subjects\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  cy</div><div class=\"line\">    .a()</div><div class=\"line\">    .b()</div><div class=\"line\">    .should(<span class=\"string\">\"eq\"</span>, <span class=\"string\">\"bar\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n"},{"title":"cookies","_content":"\n`Cypress.Cookies` is a synchronous interface that allows you to do more than just get, set, or clear cookies.\n\nTypically you'd use `Cypress.Cookies` in hooks like `before`, `beforeEach`, `after`, and `afterEach`.\n\nCypress automatically clears all cookies **before** each test to prevent state from building up. You can take advantage of `Cypress.Cookies.preserveOnce` or even **whitelist** cookies by their name to preserve values across multiple tests. This enables you to preserve sessions through several tests.\n\n# [Cypress.Cookies.debug( *boolean*, *options* )](#section-debug-usage)\n\nEnable or disable cookie debugging. When enabled, Cypress will log out when cookies are set or cleared.\n\n***\n\n# [Cypress.Cookies.preserveOnce( *name1*, *name2*, *name3*, ... )](#section-preserve-usage)\n\nWill preserve cookies by name. Pass an unlimited number of arguments. These preserved cookies will not be cleared before the next test starts.\n\n***\n\n# [Cypress.Cookies.defaults( *options* )](#section-defaults-usage)\n\nSet defaults for all cookies, such as whitelisting a set of cookies to bypass being cleared before each test.\n\n***\n\n# Debug Usage\n\n## Log out when cookie values set or clear\n\nBy turning on debugging, Cypress will automatically log out to the console when it **sets** or **clears** cookie values. This is useful to help you understand how Cypress clears cookies before each test, and is useful to visualize how to handle preserving cookies in between tests.\n\n```javascript\nCypress.Cookies.debug(true) // now Cypress will log out when it alters cookies\n\ncy.clearCookie('foo')\ncy.setCookie('foo', 'bar')\n```\n\n![screen shot 2016-05-22 at 8 54 00 pm](https://cloud.githubusercontent.com/assets/1268976/15457855/e2b6e99c-205f-11e6-8b25-ac6e0dcae9ce.png)\n\n## Turn off verbose debugging output\n\nBy default Cypress will log out the cookie object which allows you to inspect all of its properties. However you may not need that level of detail and you can turn this off.\n\n```javascript\nCypress.Cookies.debug(true, {verbose: false})\n```\n\nNow when Cypress logs cookies they will only include the `name` and `value`.\n\n![screen shot 2016-05-22 at 8 54 13 pm](https://cloud.githubusercontent.com/assets/1268976/15457832/680bc71c-205f-11e6-9b8b-1c84380790e0.png)\n\nDebugging will be turned on until you explictly turn it back off.\n\n```javascript\nCypress.Cookies.debug(false) // now debugging is turned off\n```\n\n***\n\n# Preserve Usage\n\n## Preserve cookies through multiple tests\n\nCypress gives you a simple interface to automatically preserve cookies for multiple tests. Cypress automatically clears all cookies before each new test starts by default.\n\nBy clearing cookies before each test you are gauranteed to always start from a clean slate. Starting from a clean state prevents coupling your tests to one another and prevents situations where mutating something in your application in one test affects another one downstream.\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"The most common use case for preserving cookies is to prevent having to log in to your application before each individual test. This is a problem if the majority of each test is spent logging in a user.\"\n}\n[/block]\n\nYou can use `Cypress.Cookies.preserveOnce` to preserve cookies through multiple tests.\n\nThere are *likely* better ways to do this, but this isn't well documented at the moment. Every application is different and there is no one-size-fits-all solution. For the moment, if you're using session-based cookies, this method will work.\n\n```javascript\ndescribe(\"Dashboard\", function(){\n  before(function(){\n    // log in only once before any of the tests run.\n    // your app will likely set some sort of session cookie.\n    // you'll need to know the name of the cookie(s), which you can find\n    // in your Resources -> Cookies panel in the Chrome Dev Tools.\n    cy.login()\n  })\n\n  beforeEach(function(){\n    // before each test, we can automatically preserve the\n    // 'session_id' and 'remember_token' cookies. this means they\n    // will not be cleared before the NEXT test starts.\n    //\n    // the name of your cookies will likely be different\n    // this is just a simple example\n    Cypress.Cookies.preserveOnce(\"session_id\", \"remember_token\")\n  })\n\n  it(\"displays stats\", function(){\n    // ...\n  })\n\n  it(\"can do something\", function(){\n    // ...\n  })\n\n  it(\"opens a modal\", function(){\n    // ...\n  })\n})\n```\n\n***\n\n# Defaults Usage\n\n## Set global default cookies\n\nYou can modify the global defaults and whitelist a set of Cookies which will always be preserved across tests.\n\nAny change you make here will take effect immediately for the remainder of every single test.\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"A great place to put this configuration is in your `cypress/support/defaults.js` file, since it is loaded before any test files are evaluated.\"\n}\n[/block]\n\n**Whitelist accepts:**\n\n- string\n- array\n- regexp\n- function\n\n```javascript\n// string usage\n\n// now any cookie with the name 'session_id' will\n// not be cleared before each test runs\nCypress.Cookies.defaults({\n  whitelist: \"session_id\"\n})\n```\n\n```javascript\n// array usage\n\n// now any cookie with the name 'session_id' or 'remember_token'\n// will not be cleared before each test runs\nCypress.Cookies.defaults({\n  whitelist: [\"session_id\", \"remember_token\"]\n})\n```\n\n```javascript\n// RegExp usage\n\n// now any cookie that matches this RegExp\n// will not be cleared before each test runs\nCypress.Cookies.defaults({\n  whitelist: /session|remember/\n})\n```\n\n```javascript\n// function usage\n\nCypress.Cookies.defaults({\n  whitelist: function(cookie){\n    // implement your own logic here\n    // if the function returns truthy\n    // then the cookie will not be cleared\n    // before each test runs\n  }\n})\n```\n\n***\n\n# Related\n\n- [clearCookie](https://on.cypress.io/api/clearcookie)\n- [clearCookies](https://on.cypress.io/api/clearcookies)\n- [getCookie](https://on.cypress.io/api/getcookie)\n- [getCookies](https://on.cypress.io/api/getcookies)\n- [setCookie](https://on.cypress.io/api/setcookie)\n","source":"api/cypress-api/cookies.md","raw":"title: cookies\n---\n\n`Cypress.Cookies` is a synchronous interface that allows you to do more than just get, set, or clear cookies.\n\nTypically you'd use `Cypress.Cookies` in hooks like `before`, `beforeEach`, `after`, and `afterEach`.\n\nCypress automatically clears all cookies **before** each test to prevent state from building up. You can take advantage of `Cypress.Cookies.preserveOnce` or even **whitelist** cookies by their name to preserve values across multiple tests. This enables you to preserve sessions through several tests.\n\n# [Cypress.Cookies.debug( *boolean*, *options* )](#section-debug-usage)\n\nEnable or disable cookie debugging. When enabled, Cypress will log out when cookies are set or cleared.\n\n***\n\n# [Cypress.Cookies.preserveOnce( *name1*, *name2*, *name3*, ... )](#section-preserve-usage)\n\nWill preserve cookies by name. Pass an unlimited number of arguments. These preserved cookies will not be cleared before the next test starts.\n\n***\n\n# [Cypress.Cookies.defaults( *options* )](#section-defaults-usage)\n\nSet defaults for all cookies, such as whitelisting a set of cookies to bypass being cleared before each test.\n\n***\n\n# Debug Usage\n\n## Log out when cookie values set or clear\n\nBy turning on debugging, Cypress will automatically log out to the console when it **sets** or **clears** cookie values. This is useful to help you understand how Cypress clears cookies before each test, and is useful to visualize how to handle preserving cookies in between tests.\n\n```javascript\nCypress.Cookies.debug(true) // now Cypress will log out when it alters cookies\n\ncy.clearCookie('foo')\ncy.setCookie('foo', 'bar')\n```\n\n![screen shot 2016-05-22 at 8 54 00 pm](https://cloud.githubusercontent.com/assets/1268976/15457855/e2b6e99c-205f-11e6-8b25-ac6e0dcae9ce.png)\n\n## Turn off verbose debugging output\n\nBy default Cypress will log out the cookie object which allows you to inspect all of its properties. However you may not need that level of detail and you can turn this off.\n\n```javascript\nCypress.Cookies.debug(true, {verbose: false})\n```\n\nNow when Cypress logs cookies they will only include the `name` and `value`.\n\n![screen shot 2016-05-22 at 8 54 13 pm](https://cloud.githubusercontent.com/assets/1268976/15457832/680bc71c-205f-11e6-9b8b-1c84380790e0.png)\n\nDebugging will be turned on until you explictly turn it back off.\n\n```javascript\nCypress.Cookies.debug(false) // now debugging is turned off\n```\n\n***\n\n# Preserve Usage\n\n## Preserve cookies through multiple tests\n\nCypress gives you a simple interface to automatically preserve cookies for multiple tests. Cypress automatically clears all cookies before each new test starts by default.\n\nBy clearing cookies before each test you are gauranteed to always start from a clean slate. Starting from a clean state prevents coupling your tests to one another and prevents situations where mutating something in your application in one test affects another one downstream.\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"The most common use case for preserving cookies is to prevent having to log in to your application before each individual test. This is a problem if the majority of each test is spent logging in a user.\"\n}\n[/block]\n\nYou can use `Cypress.Cookies.preserveOnce` to preserve cookies through multiple tests.\n\nThere are *likely* better ways to do this, but this isn't well documented at the moment. Every application is different and there is no one-size-fits-all solution. For the moment, if you're using session-based cookies, this method will work.\n\n```javascript\ndescribe(\"Dashboard\", function(){\n  before(function(){\n    // log in only once before any of the tests run.\n    // your app will likely set some sort of session cookie.\n    // you'll need to know the name of the cookie(s), which you can find\n    // in your Resources -> Cookies panel in the Chrome Dev Tools.\n    cy.login()\n  })\n\n  beforeEach(function(){\n    // before each test, we can automatically preserve the\n    // 'session_id' and 'remember_token' cookies. this means they\n    // will not be cleared before the NEXT test starts.\n    //\n    // the name of your cookies will likely be different\n    // this is just a simple example\n    Cypress.Cookies.preserveOnce(\"session_id\", \"remember_token\")\n  })\n\n  it(\"displays stats\", function(){\n    // ...\n  })\n\n  it(\"can do something\", function(){\n    // ...\n  })\n\n  it(\"opens a modal\", function(){\n    // ...\n  })\n})\n```\n\n***\n\n# Defaults Usage\n\n## Set global default cookies\n\nYou can modify the global defaults and whitelist a set of Cookies which will always be preserved across tests.\n\nAny change you make here will take effect immediately for the remainder of every single test.\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"A great place to put this configuration is in your `cypress/support/defaults.js` file, since it is loaded before any test files are evaluated.\"\n}\n[/block]\n\n**Whitelist accepts:**\n\n- string\n- array\n- regexp\n- function\n\n```javascript\n// string usage\n\n// now any cookie with the name 'session_id' will\n// not be cleared before each test runs\nCypress.Cookies.defaults({\n  whitelist: \"session_id\"\n})\n```\n\n```javascript\n// array usage\n\n// now any cookie with the name 'session_id' or 'remember_token'\n// will not be cleared before each test runs\nCypress.Cookies.defaults({\n  whitelist: [\"session_id\", \"remember_token\"]\n})\n```\n\n```javascript\n// RegExp usage\n\n// now any cookie that matches this RegExp\n// will not be cleared before each test runs\nCypress.Cookies.defaults({\n  whitelist: /session|remember/\n})\n```\n\n```javascript\n// function usage\n\nCypress.Cookies.defaults({\n  whitelist: function(cookie){\n    // implement your own logic here\n    // if the function returns truthy\n    // then the cookie will not be cleared\n    // before each test runs\n  }\n})\n```\n\n***\n\n# Related\n\n- [clearCookie](https://on.cypress.io/api/clearcookie)\n- [clearCookies](https://on.cypress.io/api/clearcookies)\n- [getCookie](https://on.cypress.io/api/getcookie)\n- [getCookies](https://on.cypress.io/api/getcookies)\n- [setCookie](https://on.cypress.io/api/setcookie)\n","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/cypress-api/cookies.html","comments":1,"layout":"page","_id":"cj1pc2g930024k1g8nksb5hxd","content":"<p><code>Cypress.Cookies</code> is a synchronous interface that allows you to do more than just get, set, or clear cookies.</p>\n<p>Typically you’d use <code>Cypress.Cookies</code> in hooks like <code>before</code>, <code>beforeEach</code>, <code>after</code>, and <code>afterEach</code>.</p>\n<p>Cypress automatically clears all cookies <strong>before</strong> each test to prevent state from building up. You can take advantage of <code>Cypress.Cookies.preserveOnce</code> or even <strong>whitelist</strong> cookies by their name to preserve values across multiple tests. This enables you to preserve sessions through several tests.</p>\n<h1 id=\"Cypress-Cookies-debug-boolean-options\"><a href=\"#Cypress-Cookies-debug-boolean-options\" class=\"headerlink\" title=\"Cypress.Cookies.debug( boolean, options )\"></a><a href=\"#section-debug-usage\">Cypress.Cookies.debug( <em>boolean</em>, <em>options</em> )</a></h1><p>Enable or disable cookie debugging. When enabled, Cypress will log out when cookies are set or cleared.</p>\n<hr>\n<h1 id=\"Cypress-Cookies-preserveOnce-name1-name2-name3-…\"><a href=\"#Cypress-Cookies-preserveOnce-name1-name2-name3-…\" class=\"headerlink\" title=\"Cypress.Cookies.preserveOnce( name1, name2, name3, … )\"></a><a href=\"#section-preserve-usage\">Cypress.Cookies.preserveOnce( <em>name1</em>, <em>name2</em>, <em>name3</em>, … )</a></h1><p>Will preserve cookies by name. Pass an unlimited number of arguments. These preserved cookies will not be cleared before the next test starts.</p>\n<hr>\n<h1 id=\"Cypress-Cookies-defaults-options\"><a href=\"#Cypress-Cookies-defaults-options\" class=\"headerlink\" title=\"Cypress.Cookies.defaults( options )\"></a><a href=\"#section-defaults-usage\">Cypress.Cookies.defaults( <em>options</em> )</a></h1><p>Set defaults for all cookies, such as whitelisting a set of cookies to bypass being cleared before each test.</p>\n<hr>\n<h1 id=\"Debug-Usage\"><a href=\"#Debug-Usage\" class=\"headerlink\" title=\"Debug Usage\"></a>Debug Usage</h1><h2 id=\"Log-out-when-cookie-values-set-or-clear\"><a href=\"#Log-out-when-cookie-values-set-or-clear\" class=\"headerlink\" title=\"Log out when cookie values set or clear\"></a>Log out when cookie values set or clear</h2><p>By turning on debugging, Cypress will automatically log out to the console when it <strong>sets</strong> or <strong>clears</strong> cookie values. This is useful to help you understand how Cypress clears cookies before each test, and is useful to visualize how to handle preserving cookies in between tests.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Cypress.Cookies.debug(<span class=\"literal\">true</span>) <span class=\"comment\">// now Cypress will log out when it alters cookies</span></div><div class=\"line\"></div><div class=\"line\">cy.clearCookie(<span class=\"string\">'foo'</span>)</div><div class=\"line\">cy.setCookie(<span class=\"string\">'foo'</span>, <span class=\"string\">'bar'</span>)</div></pre></td></tr></table></figure>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/15457855/e2b6e99c-205f-11e6-8b25-ac6e0dcae9ce.png\" alt=\"screen shot 2016-05-22 at 8 54 00 pm\"></p>\n<h2 id=\"Turn-off-verbose-debugging-output\"><a href=\"#Turn-off-verbose-debugging-output\" class=\"headerlink\" title=\"Turn off verbose debugging output\"></a>Turn off verbose debugging output</h2><p>By default Cypress will log out the cookie object which allows you to inspect all of its properties. However you may not need that level of detail and you can turn this off.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Cypress.Cookies.debug(<span class=\"literal\">true</span>, &#123;<span class=\"attr\">verbose</span>: <span class=\"literal\">false</span>&#125;)</div></pre></td></tr></table></figure>\n<p>Now when Cypress logs cookies they will only include the <code>name</code> and <code>value</code>.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/15457832/680bc71c-205f-11e6-9b8b-1c84380790e0.png\" alt=\"screen shot 2016-05-22 at 8 54 13 pm\"></p>\n<p>Debugging will be turned on until you explictly turn it back off.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Cypress.Cookies.debug(<span class=\"literal\">false</span>) <span class=\"comment\">// now debugging is turned off</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Preserve-Usage\"><a href=\"#Preserve-Usage\" class=\"headerlink\" title=\"Preserve Usage\"></a>Preserve Usage</h1><h2 id=\"Preserve-cookies-through-multiple-tests\"><a href=\"#Preserve-cookies-through-multiple-tests\" class=\"headerlink\" title=\"Preserve cookies through multiple tests\"></a>Preserve cookies through multiple tests</h2><p>Cypress gives you a simple interface to automatically preserve cookies for multiple tests. Cypress automatically clears all cookies before each new test starts by default.</p>\n<p>By clearing cookies before each test you are gauranteed to always start from a clean slate. Starting from a clean state prevents coupling your tests to one another and prevents situations where mutating something in your application in one test affects another one downstream.</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “The most common use case for preserving cookies is to prevent having to log in to your application before each individual test. This is a problem if the majority of each test is spent logging in a user.”<br>}<br>[/block]</p>\n<p>You can use <code>Cypress.Cookies.preserveOnce</code> to preserve cookies through multiple tests.</p>\n<p>There are <em>likely</em> better ways to do this, but this isn’t well documented at the moment. Every application is different and there is no one-size-fits-all solution. For the moment, if you’re using session-based cookies, this method will work.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(<span class=\"string\">\"Dashboard\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  before(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// log in only once before any of the tests run.</span></div><div class=\"line\">    <span class=\"comment\">// your app will likely set some sort of session cookie.</span></div><div class=\"line\">    <span class=\"comment\">// you'll need to know the name of the cookie(s), which you can find</span></div><div class=\"line\">    <span class=\"comment\">// in your Resources -&gt; Cookies panel in the Chrome Dev Tools.</span></div><div class=\"line\">    cy.login()</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  beforeEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// before each test, we can automatically preserve the</span></div><div class=\"line\">    <span class=\"comment\">// 'session_id' and 'remember_token' cookies. this means they</span></div><div class=\"line\">    <span class=\"comment\">// will not be cleared before the NEXT test starts.</span></div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"comment\">// the name of your cookies will likely be different</span></div><div class=\"line\">    <span class=\"comment\">// this is just a simple example</span></div><div class=\"line\">    Cypress.Cookies.preserveOnce(<span class=\"string\">\"session_id\"</span>, <span class=\"string\">\"remember_token\"</span>)</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  it(<span class=\"string\">\"displays stats\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  it(<span class=\"string\">\"can do something\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  it(<span class=\"string\">\"opens a modal\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Defaults-Usage\"><a href=\"#Defaults-Usage\" class=\"headerlink\" title=\"Defaults Usage\"></a>Defaults Usage</h1><h2 id=\"Set-global-default-cookies\"><a href=\"#Set-global-default-cookies\" class=\"headerlink\" title=\"Set global default cookies\"></a>Set global default cookies</h2><p>You can modify the global defaults and whitelist a set of Cookies which will always be preserved across tests.</p>\n<p>Any change you make here will take effect immediately for the remainder of every single test.</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “A great place to put this configuration is in your <code>cypress/support/defaults.js</code> file, since it is loaded before any test files are evaluated.”<br>}<br>[/block]</p>\n<p><strong>Whitelist accepts:</strong></p>\n<ul>\n<li>string</li>\n<li>array</li>\n<li>regexp</li>\n<li>function</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// string usage</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// now any cookie with the name 'session_id' will</span></div><div class=\"line\"><span class=\"comment\">// not be cleared before each test runs</span></div><div class=\"line\">Cypress.Cookies.defaults(&#123;</div><div class=\"line\">  <span class=\"attr\">whitelist</span>: <span class=\"string\">\"session_id\"</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// array usage</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// now any cookie with the name 'session_id' or 'remember_token'</span></div><div class=\"line\"><span class=\"comment\">// will not be cleared before each test runs</span></div><div class=\"line\">Cypress.Cookies.defaults(&#123;</div><div class=\"line\">  <span class=\"attr\">whitelist</span>: [<span class=\"string\">\"session_id\"</span>, <span class=\"string\">\"remember_token\"</span>]</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// RegExp usage</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// now any cookie that matches this RegExp</span></div><div class=\"line\"><span class=\"comment\">// will not be cleared before each test runs</span></div><div class=\"line\">Cypress.Cookies.defaults(&#123;</div><div class=\"line\">  <span class=\"attr\">whitelist</span>: <span class=\"regexp\">/session|remember/</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// function usage</span></div><div class=\"line\"></div><div class=\"line\">Cypress.Cookies.defaults(&#123;</div><div class=\"line\">  <span class=\"attr\">whitelist</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cookie</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// implement your own logic here</span></div><div class=\"line\">    <span class=\"comment\">// if the function returns truthy</span></div><div class=\"line\">    <span class=\"comment\">// then the cookie will not be cleared</span></div><div class=\"line\">    <span class=\"comment\">// before each test runs</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/clearcookie\" target=\"_blank\" rel=\"external\">clearCookie</a></li>\n<li><a href=\"https://on.cypress.io/api/clearcookies\" target=\"_blank\" rel=\"external\">clearCookies</a></li>\n<li><a href=\"https://on.cypress.io/api/getcookie\" target=\"_blank\" rel=\"external\">getCookie</a></li>\n<li><a href=\"https://on.cypress.io/api/getcookies\" target=\"_blank\" rel=\"external\">getCookies</a></li>\n<li><a href=\"https://on.cypress.io/api/setcookie\" target=\"_blank\" rel=\"external\">setCookie</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p><code>Cypress.Cookies</code> is a synchronous interface that allows you to do more than just get, set, or clear cookies.</p>\n<p>Typically you’d use <code>Cypress.Cookies</code> in hooks like <code>before</code>, <code>beforeEach</code>, <code>after</code>, and <code>afterEach</code>.</p>\n<p>Cypress automatically clears all cookies <strong>before</strong> each test to prevent state from building up. You can take advantage of <code>Cypress.Cookies.preserveOnce</code> or even <strong>whitelist</strong> cookies by their name to preserve values across multiple tests. This enables you to preserve sessions through several tests.</p>\n<h1 id=\"Cypress-Cookies-debug-boolean-options\"><a href=\"#Cypress-Cookies-debug-boolean-options\" class=\"headerlink\" title=\"Cypress.Cookies.debug( boolean, options )\"></a><a href=\"#section-debug-usage\">Cypress.Cookies.debug( <em>boolean</em>, <em>options</em> )</a></h1><p>Enable or disable cookie debugging. When enabled, Cypress will log out when cookies are set or cleared.</p>\n<hr>\n<h1 id=\"Cypress-Cookies-preserveOnce-name1-name2-name3-…\"><a href=\"#Cypress-Cookies-preserveOnce-name1-name2-name3-…\" class=\"headerlink\" title=\"Cypress.Cookies.preserveOnce( name1, name2, name3, … )\"></a><a href=\"#section-preserve-usage\">Cypress.Cookies.preserveOnce( <em>name1</em>, <em>name2</em>, <em>name3</em>, … )</a></h1><p>Will preserve cookies by name. Pass an unlimited number of arguments. These preserved cookies will not be cleared before the next test starts.</p>\n<hr>\n<h1 id=\"Cypress-Cookies-defaults-options\"><a href=\"#Cypress-Cookies-defaults-options\" class=\"headerlink\" title=\"Cypress.Cookies.defaults( options )\"></a><a href=\"#section-defaults-usage\">Cypress.Cookies.defaults( <em>options</em> )</a></h1><p>Set defaults for all cookies, such as whitelisting a set of cookies to bypass being cleared before each test.</p>\n<hr>\n<h1 id=\"Debug-Usage\"><a href=\"#Debug-Usage\" class=\"headerlink\" title=\"Debug Usage\"></a>Debug Usage</h1><h2 id=\"Log-out-when-cookie-values-set-or-clear\"><a href=\"#Log-out-when-cookie-values-set-or-clear\" class=\"headerlink\" title=\"Log out when cookie values set or clear\"></a>Log out when cookie values set or clear</h2><p>By turning on debugging, Cypress will automatically log out to the console when it <strong>sets</strong> or <strong>clears</strong> cookie values. This is useful to help you understand how Cypress clears cookies before each test, and is useful to visualize how to handle preserving cookies in between tests.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Cypress.Cookies.debug(<span class=\"literal\">true</span>) <span class=\"comment\">// now Cypress will log out when it alters cookies</span></div><div class=\"line\"></div><div class=\"line\">cy.clearCookie(<span class=\"string\">'foo'</span>)</div><div class=\"line\">cy.setCookie(<span class=\"string\">'foo'</span>, <span class=\"string\">'bar'</span>)</div></pre></td></tr></table></figure>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/15457855/e2b6e99c-205f-11e6-8b25-ac6e0dcae9ce.png\" alt=\"screen shot 2016-05-22 at 8 54 00 pm\"></p>\n<h2 id=\"Turn-off-verbose-debugging-output\"><a href=\"#Turn-off-verbose-debugging-output\" class=\"headerlink\" title=\"Turn off verbose debugging output\"></a>Turn off verbose debugging output</h2><p>By default Cypress will log out the cookie object which allows you to inspect all of its properties. However you may not need that level of detail and you can turn this off.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Cypress.Cookies.debug(<span class=\"literal\">true</span>, &#123;<span class=\"attr\">verbose</span>: <span class=\"literal\">false</span>&#125;)</div></pre></td></tr></table></figure>\n<p>Now when Cypress logs cookies they will only include the <code>name</code> and <code>value</code>.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/15457832/680bc71c-205f-11e6-9b8b-1c84380790e0.png\" alt=\"screen shot 2016-05-22 at 8 54 13 pm\"></p>\n<p>Debugging will be turned on until you explictly turn it back off.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Cypress.Cookies.debug(<span class=\"literal\">false</span>) <span class=\"comment\">// now debugging is turned off</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Preserve-Usage\"><a href=\"#Preserve-Usage\" class=\"headerlink\" title=\"Preserve Usage\"></a>Preserve Usage</h1><h2 id=\"Preserve-cookies-through-multiple-tests\"><a href=\"#Preserve-cookies-through-multiple-tests\" class=\"headerlink\" title=\"Preserve cookies through multiple tests\"></a>Preserve cookies through multiple tests</h2><p>Cypress gives you a simple interface to automatically preserve cookies for multiple tests. Cypress automatically clears all cookies before each new test starts by default.</p>\n<p>By clearing cookies before each test you are gauranteed to always start from a clean slate. Starting from a clean state prevents coupling your tests to one another and prevents situations where mutating something in your application in one test affects another one downstream.</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “The most common use case for preserving cookies is to prevent having to log in to your application before each individual test. This is a problem if the majority of each test is spent logging in a user.”<br>}<br>[/block]</p>\n<p>You can use <code>Cypress.Cookies.preserveOnce</code> to preserve cookies through multiple tests.</p>\n<p>There are <em>likely</em> better ways to do this, but this isn’t well documented at the moment. Every application is different and there is no one-size-fits-all solution. For the moment, if you’re using session-based cookies, this method will work.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(<span class=\"string\">\"Dashboard\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  before(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// log in only once before any of the tests run.</span></div><div class=\"line\">    <span class=\"comment\">// your app will likely set some sort of session cookie.</span></div><div class=\"line\">    <span class=\"comment\">// you'll need to know the name of the cookie(s), which you can find</span></div><div class=\"line\">    <span class=\"comment\">// in your Resources -&gt; Cookies panel in the Chrome Dev Tools.</span></div><div class=\"line\">    cy.login()</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  beforeEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// before each test, we can automatically preserve the</span></div><div class=\"line\">    <span class=\"comment\">// 'session_id' and 'remember_token' cookies. this means they</span></div><div class=\"line\">    <span class=\"comment\">// will not be cleared before the NEXT test starts.</span></div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"comment\">// the name of your cookies will likely be different</span></div><div class=\"line\">    <span class=\"comment\">// this is just a simple example</span></div><div class=\"line\">    Cypress.Cookies.preserveOnce(<span class=\"string\">\"session_id\"</span>, <span class=\"string\">\"remember_token\"</span>)</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  it(<span class=\"string\">\"displays stats\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  it(<span class=\"string\">\"can do something\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  it(<span class=\"string\">\"opens a modal\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Defaults-Usage\"><a href=\"#Defaults-Usage\" class=\"headerlink\" title=\"Defaults Usage\"></a>Defaults Usage</h1><h2 id=\"Set-global-default-cookies\"><a href=\"#Set-global-default-cookies\" class=\"headerlink\" title=\"Set global default cookies\"></a>Set global default cookies</h2><p>You can modify the global defaults and whitelist a set of Cookies which will always be preserved across tests.</p>\n<p>Any change you make here will take effect immediately for the remainder of every single test.</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “A great place to put this configuration is in your <code>cypress/support/defaults.js</code> file, since it is loaded before any test files are evaluated.”<br>}<br>[/block]</p>\n<p><strong>Whitelist accepts:</strong></p>\n<ul>\n<li>string</li>\n<li>array</li>\n<li>regexp</li>\n<li>function</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// string usage</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// now any cookie with the name 'session_id' will</span></div><div class=\"line\"><span class=\"comment\">// not be cleared before each test runs</span></div><div class=\"line\">Cypress.Cookies.defaults(&#123;</div><div class=\"line\">  <span class=\"attr\">whitelist</span>: <span class=\"string\">\"session_id\"</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// array usage</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// now any cookie with the name 'session_id' or 'remember_token'</span></div><div class=\"line\"><span class=\"comment\">// will not be cleared before each test runs</span></div><div class=\"line\">Cypress.Cookies.defaults(&#123;</div><div class=\"line\">  <span class=\"attr\">whitelist</span>: [<span class=\"string\">\"session_id\"</span>, <span class=\"string\">\"remember_token\"</span>]</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// RegExp usage</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// now any cookie that matches this RegExp</span></div><div class=\"line\"><span class=\"comment\">// will not be cleared before each test runs</span></div><div class=\"line\">Cypress.Cookies.defaults(&#123;</div><div class=\"line\">  <span class=\"attr\">whitelist</span>: <span class=\"regexp\">/session|remember/</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// function usage</span></div><div class=\"line\"></div><div class=\"line\">Cypress.Cookies.defaults(&#123;</div><div class=\"line\">  <span class=\"attr\">whitelist</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cookie</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// implement your own logic here</span></div><div class=\"line\">    <span class=\"comment\">// if the function returns truthy</span></div><div class=\"line\">    <span class=\"comment\">// then the cookie will not be cleared</span></div><div class=\"line\">    <span class=\"comment\">// before each test runs</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/clearcookie\">clearCookie</a></li>\n<li><a href=\"https://on.cypress.io/api/clearcookies\">clearCookies</a></li>\n<li><a href=\"https://on.cypress.io/api/getcookie\">getCookie</a></li>\n<li><a href=\"https://on.cypress.io/api/getcookies\">getCookies</a></li>\n<li><a href=\"https://on.cypress.io/api/setcookie\">setCookie</a></li>\n</ul>\n"},{"title":"config","_content":"\n`Cypress.config` allows you to `get` and `set` your configuration options.\n\nThis document covers the API for consuming your configuration options *in your tests*.\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Read about configuration first.](https://on.cypress.io/guides/configuration)\",\n  \"title\": \"New to Cypress?\"\n}\n[/block]\n\n# [Cypress.config()](#section-no-arguments-usage)\n\nReturns all of your configuration options as an object literal.\n\n***\n\n# [Cypress.config( *key* )](#section-key-usage)\n\nReturns the value of a single configuration option by its key.\n\n***\n\n# [Cypress.config( *key*, *value* )](#section-key-value-usage)\n\nSets a configuration option for a specific key.\n\n***\n\n# [Cypress.config( *object* )](#section-object-usage)\n\nSets multiple configuration options.\n\n***\n\n# No Arguments Usage\n\n## Get all configuration options.\n\n```javascript\n// cypress.json\n{\n  \"defaultCommandTimeout\": 10000\n}\n```\n\n```javascript\nCypress.config() // => {defaultCommandTimeout: 10000, pageLoadTimeout: 30000, ...}\n```\n\n***\n\n# Key Usage\n\n## Return just a single configuration option value.\n\n```javascript\n// cypress.json\n{\n  \"pageLoadTimeout\": 60000\n}\n```\n\n```javascript\nCypress.config(\"pageLoadTimeout\") // => 60000\n```\n\n***\n\n# Key Value Usage\n\n## Cypress allows you to change the values of your configuration options from within your tests.\n\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"Any value you change will be permanently changed for the remainder of your tests.\"\n}\n[/block]\n\n```javascript\n// cypress.json\n{\n  \"viewportWidth\": 1280,\n  \"viewportHeight\": 720\n}\n```\n\n```javascript\nCypress.config(\"viewportWidth\", 800)\n\nCypress.config(\"viewportWidth\") // => 800\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe where we reset our baseUrl using Cypress.config](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_single_sign_on_spec.js)\",\n  \"title\": \"Using config to set baseUrl\"\n}\n[/block]\n\n***\n\n# Object Usage\n\n## You can set multiple values by passing an object literal.\n\n```javascript\n// cypress.json\n{\n  \"defaultCommandTimeout\": 4000,\n  \"pageLoadTimeout\": 30000,\n}\n```\n\n```javascript\nCypress.config({\n  defaultCommandTimeout: 10000,\n  viewportHeight: 900\n})\n\nCypress.config() // => {defaultCommandTimeout: 10000, viewportHeight: 900, ...}\n```\n\n***\n\n# Notes\n\n## Why use `Cypress.config` instead of `cy.config`?\n\nAs a rule of thumb anything you call from `Cypress` affects global state. Anything you call from `cy` affects local state.\n\nMethods on `cy` are local and specific to a single test. Side effects from `cy` methods are restored between each test. We chose to use `Cypress` because changes to your configuration options take effect for the remainder of **ALL** tests.\n\n***\n\n# Related\n\n- [Configuration](https://on.cypress.io/guides/configuration)\n","source":"api/cypress-api/config.md","raw":"title: config\n---\n\n`Cypress.config` allows you to `get` and `set` your configuration options.\n\nThis document covers the API for consuming your configuration options *in your tests*.\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Read about configuration first.](https://on.cypress.io/guides/configuration)\",\n  \"title\": \"New to Cypress?\"\n}\n[/block]\n\n# [Cypress.config()](#section-no-arguments-usage)\n\nReturns all of your configuration options as an object literal.\n\n***\n\n# [Cypress.config( *key* )](#section-key-usage)\n\nReturns the value of a single configuration option by its key.\n\n***\n\n# [Cypress.config( *key*, *value* )](#section-key-value-usage)\n\nSets a configuration option for a specific key.\n\n***\n\n# [Cypress.config( *object* )](#section-object-usage)\n\nSets multiple configuration options.\n\n***\n\n# No Arguments Usage\n\n## Get all configuration options.\n\n```javascript\n// cypress.json\n{\n  \"defaultCommandTimeout\": 10000\n}\n```\n\n```javascript\nCypress.config() // => {defaultCommandTimeout: 10000, pageLoadTimeout: 30000, ...}\n```\n\n***\n\n# Key Usage\n\n## Return just a single configuration option value.\n\n```javascript\n// cypress.json\n{\n  \"pageLoadTimeout\": 60000\n}\n```\n\n```javascript\nCypress.config(\"pageLoadTimeout\") // => 60000\n```\n\n***\n\n# Key Value Usage\n\n## Cypress allows you to change the values of your configuration options from within your tests.\n\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"Any value you change will be permanently changed for the remainder of your tests.\"\n}\n[/block]\n\n```javascript\n// cypress.json\n{\n  \"viewportWidth\": 1280,\n  \"viewportHeight\": 720\n}\n```\n\n```javascript\nCypress.config(\"viewportWidth\", 800)\n\nCypress.config(\"viewportWidth\") // => 800\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe where we reset our baseUrl using Cypress.config](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_single_sign_on_spec.js)\",\n  \"title\": \"Using config to set baseUrl\"\n}\n[/block]\n\n***\n\n# Object Usage\n\n## You can set multiple values by passing an object literal.\n\n```javascript\n// cypress.json\n{\n  \"defaultCommandTimeout\": 4000,\n  \"pageLoadTimeout\": 30000,\n}\n```\n\n```javascript\nCypress.config({\n  defaultCommandTimeout: 10000,\n  viewportHeight: 900\n})\n\nCypress.config() // => {defaultCommandTimeout: 10000, viewportHeight: 900, ...}\n```\n\n***\n\n# Notes\n\n## Why use `Cypress.config` instead of `cy.config`?\n\nAs a rule of thumb anything you call from `Cypress` affects global state. Anything you call from `cy` affects local state.\n\nMethods on `cy` are local and specific to a single test. Side effects from `cy` methods are restored between each test. We chose to use `Cypress` because changes to your configuration options take effect for the remainder of **ALL** tests.\n\n***\n\n# Related\n\n- [Configuration](https://on.cypress.io/guides/configuration)\n","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/cypress-api/config.html","comments":1,"layout":"page","_id":"cj1pc2g940025k1g83ca8d2kx","content":"<p><code>Cypress.config</code> allows you to <code>get</code> and <code>set</code> your configuration options.</p>\n<p>This document covers the API for consuming your configuration options <em>in your tests</em>.</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://on.cypress.io/guides/configuration\" target=\"_blank\" rel=\"external\">Read about configuration first.</a>“,<br>  “title”: “New to Cypress?”<br>}<br>[/block]</p>\n<h1 id=\"Cypress-config\"><a href=\"#Cypress-config\" class=\"headerlink\" title=\"Cypress.config()\"></a><a href=\"#section-no-arguments-usage\">Cypress.config()</a></h1><p>Returns all of your configuration options as an object literal.</p>\n<hr>\n<h1 id=\"Cypress-config-key\"><a href=\"#Cypress-config-key\" class=\"headerlink\" title=\"Cypress.config( key )\"></a><a href=\"#section-key-usage\">Cypress.config( <em>key</em> )</a></h1><p>Returns the value of a single configuration option by its key.</p>\n<hr>\n<h1 id=\"Cypress-config-key-value\"><a href=\"#Cypress-config-key-value\" class=\"headerlink\" title=\"Cypress.config( key, value )\"></a><a href=\"#section-key-value-usage\">Cypress.config( <em>key</em>, <em>value</em> )</a></h1><p>Sets a configuration option for a specific key.</p>\n<hr>\n<h1 id=\"Cypress-config-object\"><a href=\"#Cypress-config-object\" class=\"headerlink\" title=\"Cypress.config( object )\"></a><a href=\"#section-object-usage\">Cypress.config( <em>object</em> )</a></h1><p>Sets multiple configuration options.</p>\n<hr>\n<h1 id=\"No-Arguments-Usage\"><a href=\"#No-Arguments-Usage\" class=\"headerlink\" title=\"No Arguments Usage\"></a>No Arguments Usage</h1><h2 id=\"Get-all-configuration-options\"><a href=\"#Get-all-configuration-options\" class=\"headerlink\" title=\"Get all configuration options.\"></a>Get all configuration options.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// cypress.json</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"defaultCommandTimeout\"</span>: <span class=\"number\">10000</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Cypress.config() <span class=\"comment\">// =&gt; &#123;defaultCommandTimeout: 10000, pageLoadTimeout: 30000, ...&#125;</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Key-Usage\"><a href=\"#Key-Usage\" class=\"headerlink\" title=\"Key Usage\"></a>Key Usage</h1><h2 id=\"Return-just-a-single-configuration-option-value\"><a href=\"#Return-just-a-single-configuration-option-value\" class=\"headerlink\" title=\"Return just a single configuration option value.\"></a>Return just a single configuration option value.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// cypress.json</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"pageLoadTimeout\"</span>: <span class=\"number\">60000</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Cypress.config(<span class=\"string\">\"pageLoadTimeout\"</span>) <span class=\"comment\">// =&gt; 60000</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Key-Value-Usage\"><a href=\"#Key-Value-Usage\" class=\"headerlink\" title=\"Key Value Usage\"></a>Key Value Usage</h1><h2 id=\"Cypress-allows-you-to-change-the-values-of-your-configuration-options-from-within-your-tests\"><a href=\"#Cypress-allows-you-to-change-the-values-of-your-configuration-options-from-within-your-tests\" class=\"headerlink\" title=\"Cypress allows you to change the values of your configuration options from within your tests.\"></a>Cypress allows you to change the values of your configuration options from within your tests.</h2><p>[block:callout]<br>{<br>  “type”: “warning”,<br>  “body”: “Any value you change will be permanently changed for the remainder of your tests.”<br>}<br>[/block]</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// cypress.json</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"viewportWidth\"</span>: <span class=\"number\">1280</span>,</div><div class=\"line\">  <span class=\"string\">\"viewportHeight\"</span>: <span class=\"number\">720</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Cypress.config(<span class=\"string\">\"viewportWidth\"</span>, <span class=\"number\">800</span>)</div><div class=\"line\"></div><div class=\"line\">Cypress.config(<span class=\"string\">\"viewportWidth\"</span>) <span class=\"comment\">// =&gt; 800</span></div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_single_sign_on_spec.js\" target=\"_blank\" rel=\"external\">Check out our example recipe where we reset our baseUrl using Cypress.config</a>“,<br>  “title”: “Using config to set baseUrl”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Object-Usage\"><a href=\"#Object-Usage\" class=\"headerlink\" title=\"Object Usage\"></a>Object Usage</h1><h2 id=\"You-can-set-multiple-values-by-passing-an-object-literal\"><a href=\"#You-can-set-multiple-values-by-passing-an-object-literal\" class=\"headerlink\" title=\"You can set multiple values by passing an object literal.\"></a>You can set multiple values by passing an object literal.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// cypress.json</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"defaultCommandTimeout\"</span>: <span class=\"number\">4000</span>,</div><div class=\"line\">  <span class=\"string\">\"pageLoadTimeout\"</span>: <span class=\"number\">30000</span>,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Cypress.config(&#123;</div><div class=\"line\">  <span class=\"attr\">defaultCommandTimeout</span>: <span class=\"number\">10000</span>,</div><div class=\"line\">  <span class=\"attr\">viewportHeight</span>: <span class=\"number\">900</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">Cypress.config() <span class=\"comment\">// =&gt; &#123;defaultCommandTimeout: 10000, viewportHeight: 900, ...&#125;</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h1><h2 id=\"Why-use-Cypress-config-instead-of-cy-config\"><a href=\"#Why-use-Cypress-config-instead-of-cy-config\" class=\"headerlink\" title=\"Why use Cypress.config instead of cy.config?\"></a>Why use <code>Cypress.config</code> instead of <code>cy.config</code>?</h2><p>As a rule of thumb anything you call from <code>Cypress</code> affects global state. Anything you call from <code>cy</code> affects local state.</p>\n<p>Methods on <code>cy</code> are local and specific to a single test. Side effects from <code>cy</code> methods are restored between each test. We chose to use <code>Cypress</code> because changes to your configuration options take effect for the remainder of <strong>ALL</strong> tests.</p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/guides/configuration\" target=\"_blank\" rel=\"external\">Configuration</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p><code>Cypress.config</code> allows you to <code>get</code> and <code>set</code> your configuration options.</p>\n<p>This document covers the API for consuming your configuration options <em>in your tests</em>.</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://on.cypress.io/guides/configuration\">Read about configuration first.</a>“,<br>  “title”: “New to Cypress?”<br>}<br>[/block]</p>\n<h1 id=\"Cypress-config\"><a href=\"#Cypress-config\" class=\"headerlink\" title=\"Cypress.config()\"></a><a href=\"#section-no-arguments-usage\">Cypress.config()</a></h1><p>Returns all of your configuration options as an object literal.</p>\n<hr>\n<h1 id=\"Cypress-config-key\"><a href=\"#Cypress-config-key\" class=\"headerlink\" title=\"Cypress.config( key )\"></a><a href=\"#section-key-usage\">Cypress.config( <em>key</em> )</a></h1><p>Returns the value of a single configuration option by its key.</p>\n<hr>\n<h1 id=\"Cypress-config-key-value\"><a href=\"#Cypress-config-key-value\" class=\"headerlink\" title=\"Cypress.config( key, value )\"></a><a href=\"#section-key-value-usage\">Cypress.config( <em>key</em>, <em>value</em> )</a></h1><p>Sets a configuration option for a specific key.</p>\n<hr>\n<h1 id=\"Cypress-config-object\"><a href=\"#Cypress-config-object\" class=\"headerlink\" title=\"Cypress.config( object )\"></a><a href=\"#section-object-usage\">Cypress.config( <em>object</em> )</a></h1><p>Sets multiple configuration options.</p>\n<hr>\n<h1 id=\"No-Arguments-Usage\"><a href=\"#No-Arguments-Usage\" class=\"headerlink\" title=\"No Arguments Usage\"></a>No Arguments Usage</h1><h2 id=\"Get-all-configuration-options\"><a href=\"#Get-all-configuration-options\" class=\"headerlink\" title=\"Get all configuration options.\"></a>Get all configuration options.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// cypress.json</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"defaultCommandTimeout\"</span>: <span class=\"number\">10000</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Cypress.config() <span class=\"comment\">// =&gt; &#123;defaultCommandTimeout: 10000, pageLoadTimeout: 30000, ...&#125;</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Key-Usage\"><a href=\"#Key-Usage\" class=\"headerlink\" title=\"Key Usage\"></a>Key Usage</h1><h2 id=\"Return-just-a-single-configuration-option-value\"><a href=\"#Return-just-a-single-configuration-option-value\" class=\"headerlink\" title=\"Return just a single configuration option value.\"></a>Return just a single configuration option value.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// cypress.json</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"pageLoadTimeout\"</span>: <span class=\"number\">60000</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Cypress.config(<span class=\"string\">\"pageLoadTimeout\"</span>) <span class=\"comment\">// =&gt; 60000</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Key-Value-Usage\"><a href=\"#Key-Value-Usage\" class=\"headerlink\" title=\"Key Value Usage\"></a>Key Value Usage</h1><h2 id=\"Cypress-allows-you-to-change-the-values-of-your-configuration-options-from-within-your-tests\"><a href=\"#Cypress-allows-you-to-change-the-values-of-your-configuration-options-from-within-your-tests\" class=\"headerlink\" title=\"Cypress allows you to change the values of your configuration options from within your tests.\"></a>Cypress allows you to change the values of your configuration options from within your tests.</h2><p>[block:callout]<br>{<br>  “type”: “warning”,<br>  “body”: “Any value you change will be permanently changed for the remainder of your tests.”<br>}<br>[/block]</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// cypress.json</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"viewportWidth\"</span>: <span class=\"number\">1280</span>,</div><div class=\"line\">  <span class=\"string\">\"viewportHeight\"</span>: <span class=\"number\">720</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Cypress.config(<span class=\"string\">\"viewportWidth\"</span>, <span class=\"number\">800</span>)</div><div class=\"line\"></div><div class=\"line\">Cypress.config(<span class=\"string\">\"viewportWidth\"</span>) <span class=\"comment\">// =&gt; 800</span></div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_single_sign_on_spec.js\">Check out our example recipe where we reset our baseUrl using Cypress.config</a>“,<br>  “title”: “Using config to set baseUrl”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Object-Usage\"><a href=\"#Object-Usage\" class=\"headerlink\" title=\"Object Usage\"></a>Object Usage</h1><h2 id=\"You-can-set-multiple-values-by-passing-an-object-literal\"><a href=\"#You-can-set-multiple-values-by-passing-an-object-literal\" class=\"headerlink\" title=\"You can set multiple values by passing an object literal.\"></a>You can set multiple values by passing an object literal.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// cypress.json</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"defaultCommandTimeout\"</span>: <span class=\"number\">4000</span>,</div><div class=\"line\">  <span class=\"string\">\"pageLoadTimeout\"</span>: <span class=\"number\">30000</span>,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Cypress.config(&#123;</div><div class=\"line\">  <span class=\"attr\">defaultCommandTimeout</span>: <span class=\"number\">10000</span>,</div><div class=\"line\">  <span class=\"attr\">viewportHeight</span>: <span class=\"number\">900</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">Cypress.config() <span class=\"comment\">// =&gt; &#123;defaultCommandTimeout: 10000, viewportHeight: 900, ...&#125;</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h1><h2 id=\"Why-use-Cypress-config-instead-of-cy-config\"><a href=\"#Why-use-Cypress-config-instead-of-cy-config\" class=\"headerlink\" title=\"Why use Cypress.config instead of cy.config?\"></a>Why use <code>Cypress.config</code> instead of <code>cy.config</code>?</h2><p>As a rule of thumb anything you call from <code>Cypress</code> affects global state. Anything you call from <code>cy</code> affects local state.</p>\n<p>Methods on <code>cy</code> are local and specific to a single test. Side effects from <code>cy</code> methods are restored between each test. We chose to use <code>Cypress</code> because changes to your configuration options take effect for the remainder of <strong>ALL</strong> tests.</p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/guides/configuration\">Configuration</a></li>\n</ul>\n"},{"title":"dom","_content":"\n`Cypress.Dom` holds methods and logic related to DOM.\n\n# [Cypress.Dom.isHidden( *element* )](#section-is-hidden-usage)\n\nReturns a boolean indicating whether an element is hidden.\n\nCypress internally uses this method *everywhere* to figure out whether an element is hidden.\n\n***\n\n# Is Hidden Usage\n\n```javascript\nvar $el = $(\"#modal\")\n\nCypress.Dom.isHidden($el) // => false\n\n```\n\n","source":"api/cypress-api/dom.md","raw":"title: dom\n---\n\n`Cypress.Dom` holds methods and logic related to DOM.\n\n# [Cypress.Dom.isHidden( *element* )](#section-is-hidden-usage)\n\nReturns a boolean indicating whether an element is hidden.\n\nCypress internally uses this method *everywhere* to figure out whether an element is hidden.\n\n***\n\n# Is Hidden Usage\n\n```javascript\nvar $el = $(\"#modal\")\n\nCypress.Dom.isHidden($el) // => false\n\n```\n\n","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/cypress-api/dom.html","comments":1,"layout":"page","_id":"cj1pc2g940026k1g85mnxudah","content":"<p><code>Cypress.Dom</code> holds methods and logic related to DOM.</p>\n<h1 id=\"Cypress-Dom-isHidden-element\"><a href=\"#Cypress-Dom-isHidden-element\" class=\"headerlink\" title=\"Cypress.Dom.isHidden( element )\"></a><a href=\"#section-is-hidden-usage\">Cypress.Dom.isHidden( <em>element</em> )</a></h1><p>Returns a boolean indicating whether an element is hidden.</p>\n<p>Cypress internally uses this method <em>everywhere</em> to figure out whether an element is hidden.</p>\n<hr>\n<h1 id=\"Is-Hidden-Usage\"><a href=\"#Is-Hidden-Usage\" class=\"headerlink\" title=\"Is Hidden Usage\"></a>Is Hidden Usage</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $el = $(<span class=\"string\">\"#modal\"</span>)</div><div class=\"line\"></div><div class=\"line\">Cypress.Dom.isHidden($el) <span class=\"comment\">// =&gt; false</span></div></pre></td></tr></table></figure>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p><code>Cypress.Dom</code> holds methods and logic related to DOM.</p>\n<h1 id=\"Cypress-Dom-isHidden-element\"><a href=\"#Cypress-Dom-isHidden-element\" class=\"headerlink\" title=\"Cypress.Dom.isHidden( element )\"></a><a href=\"#section-is-hidden-usage\">Cypress.Dom.isHidden( <em>element</em> )</a></h1><p>Returns a boolean indicating whether an element is hidden.</p>\n<p>Cypress internally uses this method <em>everywhere</em> to figure out whether an element is hidden.</p>\n<hr>\n<h1 id=\"Is-Hidden-Usage\"><a href=\"#Is-Hidden-Usage\" class=\"headerlink\" title=\"Is Hidden Usage\"></a>Is Hidden Usage</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $el = $(<span class=\"string\">\"#modal\"</span>)</div><div class=\"line\"></div><div class=\"line\">Cypress.Dom.isHidden($el) <span class=\"comment\">// =&gt; false</span></div></pre></td></tr></table></figure>\n"},{"title":"env","_content":"\n`Cypress.env` allows you to `get` and `set` your environment variables.\n\nThis document covers the API for consuming your environment variables *in your tests*. The [Environment Variable](https://on.cypress.io/guides/environment-variables) guide explains the 4 ways you can set them *outside of your tests*.\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Read about environment variables first.](https://on.cypress.io/guides/environment-variables)\",\n  \"title\": \"New to Cypress?\"\n}\n[/block]\n\n# [Cypress.env()](#section-no-arguments-usage)\n\nReturns all of your environment variables as an object literal.\n\n***\n\n# [Cypress.env( *key* )](#section-key-usage)\n\nReturns the value of a single environment variable by its key.\n\n***\n\n# [Cypress.env( *key*, *value* )](#section-key-value-usage)\n\nSets an environment variable for a specific key.\n\n***\n\n# [Cypress.env( *object* )](#section-object-usage)\n\nSets multiple environment variables.\n\n***\n\n# No Arguments Usage\n\n## Get all environment variables.\n\n```javascript\n// cypress.json\n{\n  \"env\": {\n    \"foo\": \"bar\",\n    \"baz\": \"quux\"\n  }\n}\n```\n\n```javascript\nCypress.env() // => {foo: \"bar\", baz: \"quux\"}\n```\n\n***\n\n# Key Usage\n\n## Return just a single environment variable value.\n\n```javascript\n// cypress.json\n{\n  \"env\": {\n    \"foo\": \"bar\",\n    \"baz\": \"quux\"\n  }\n}\n```\n\n```javascript\nCypress.env(\"foo\") // => bar\nCypress.env(\"baz\") // => quux\n```\n\n***\n\n# Key Value Usage\n\n## Cypress allows you to change the values of your environment variables from within your tests.\n\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"Any value you change will be permanently changed for the remainder of your tests.\"\n}\n[/block]\n\n```javascript\n// cypress.json\n{\n  \"env\": {\n    \"foo\": \"bar\",\n    \"baz\": \"quux\"\n  }\n}\n```\n\n```javascript\nCypress.env(\"host\", \"http://server.dev.local\")\n\nCypress.env(\"host\") // => http://server.dev.local\n```\n\n***\n\n# Object Usage\n\n## You can set multiple values by passing an object literal.\n\n```javascript\n// cypress.json\n{\n  \"env\": {\n    \"foo\": \"bar\",\n    \"baz\": \"quux\"\n  }\n}\n```\n\n```javascript\nCypress.env({\n  host: \"http://server.dev.local\",\n  foo: \"foo\"\n})\n\nCypress.env() // => {foo: \"foo\", baz: \"quux\", host: \"http://server.dev.local\"}\n```\n\n***\n\n# Notes\n\n## Why use `Cypress.env` instead of `cy.env`?\n\nAs a rule of thumb anything you call from `Cypress` affects global state. Anything you call from `cy` affects local state.\n\nMethods on `cy` are local and specific to a single test. Side effects from `cy` methods are restored between each test. We chose to use `Cypress` because changes to your environment variables take effect for the remainder of **ALL** tests.\n\n***\n\n## Why would I ever need to use environment variables?\n\nThe [Environment Variables](https://on.cypress.io/guides/environment-variables) guide explains common use cases.\n\n***\n\n## Can I pass in environment variables from the command line?\n\nYes. You can do that and much more.\n\nThe [Environment Variables](https://on.cypress.io/guides/environment-variables) guide explains the 4 ways you can set environment variables for your tests.\n","source":"api/cypress-api/env.md","raw":"title: env\n---\n\n`Cypress.env` allows you to `get` and `set` your environment variables.\n\nThis document covers the API for consuming your environment variables *in your tests*. The [Environment Variable](https://on.cypress.io/guides/environment-variables) guide explains the 4 ways you can set them *outside of your tests*.\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Read about environment variables first.](https://on.cypress.io/guides/environment-variables)\",\n  \"title\": \"New to Cypress?\"\n}\n[/block]\n\n# [Cypress.env()](#section-no-arguments-usage)\n\nReturns all of your environment variables as an object literal.\n\n***\n\n# [Cypress.env( *key* )](#section-key-usage)\n\nReturns the value of a single environment variable by its key.\n\n***\n\n# [Cypress.env( *key*, *value* )](#section-key-value-usage)\n\nSets an environment variable for a specific key.\n\n***\n\n# [Cypress.env( *object* )](#section-object-usage)\n\nSets multiple environment variables.\n\n***\n\n# No Arguments Usage\n\n## Get all environment variables.\n\n```javascript\n// cypress.json\n{\n  \"env\": {\n    \"foo\": \"bar\",\n    \"baz\": \"quux\"\n  }\n}\n```\n\n```javascript\nCypress.env() // => {foo: \"bar\", baz: \"quux\"}\n```\n\n***\n\n# Key Usage\n\n## Return just a single environment variable value.\n\n```javascript\n// cypress.json\n{\n  \"env\": {\n    \"foo\": \"bar\",\n    \"baz\": \"quux\"\n  }\n}\n```\n\n```javascript\nCypress.env(\"foo\") // => bar\nCypress.env(\"baz\") // => quux\n```\n\n***\n\n# Key Value Usage\n\n## Cypress allows you to change the values of your environment variables from within your tests.\n\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"Any value you change will be permanently changed for the remainder of your tests.\"\n}\n[/block]\n\n```javascript\n// cypress.json\n{\n  \"env\": {\n    \"foo\": \"bar\",\n    \"baz\": \"quux\"\n  }\n}\n```\n\n```javascript\nCypress.env(\"host\", \"http://server.dev.local\")\n\nCypress.env(\"host\") // => http://server.dev.local\n```\n\n***\n\n# Object Usage\n\n## You can set multiple values by passing an object literal.\n\n```javascript\n// cypress.json\n{\n  \"env\": {\n    \"foo\": \"bar\",\n    \"baz\": \"quux\"\n  }\n}\n```\n\n```javascript\nCypress.env({\n  host: \"http://server.dev.local\",\n  foo: \"foo\"\n})\n\nCypress.env() // => {foo: \"foo\", baz: \"quux\", host: \"http://server.dev.local\"}\n```\n\n***\n\n# Notes\n\n## Why use `Cypress.env` instead of `cy.env`?\n\nAs a rule of thumb anything you call from `Cypress` affects global state. Anything you call from `cy` affects local state.\n\nMethods on `cy` are local and specific to a single test. Side effects from `cy` methods are restored between each test. We chose to use `Cypress` because changes to your environment variables take effect for the remainder of **ALL** tests.\n\n***\n\n## Why would I ever need to use environment variables?\n\nThe [Environment Variables](https://on.cypress.io/guides/environment-variables) guide explains common use cases.\n\n***\n\n## Can I pass in environment variables from the command line?\n\nYes. You can do that and much more.\n\nThe [Environment Variables](https://on.cypress.io/guides/environment-variables) guide explains the 4 ways you can set environment variables for your tests.\n","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/cypress-api/env.html","comments":1,"layout":"page","_id":"cj1pc2g950027k1g8c3y6bpsc","content":"<p><code>Cypress.env</code> allows you to <code>get</code> and <code>set</code> your environment variables.</p>\n<p>This document covers the API for consuming your environment variables <em>in your tests</em>. The <a href=\"https://on.cypress.io/guides/environment-variables\" target=\"_blank\" rel=\"external\">Environment Variable</a> guide explains the 4 ways you can set them <em>outside of your tests</em>.</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://on.cypress.io/guides/environment-variables\" target=\"_blank\" rel=\"external\">Read about environment variables first.</a>“,<br>  “title”: “New to Cypress?”<br>}<br>[/block]</p>\n<h1 id=\"Cypress-env\"><a href=\"#Cypress-env\" class=\"headerlink\" title=\"Cypress.env()\"></a><a href=\"#section-no-arguments-usage\">Cypress.env()</a></h1><p>Returns all of your environment variables as an object literal.</p>\n<hr>\n<h1 id=\"Cypress-env-key\"><a href=\"#Cypress-env-key\" class=\"headerlink\" title=\"Cypress.env( key )\"></a><a href=\"#section-key-usage\">Cypress.env( <em>key</em> )</a></h1><p>Returns the value of a single environment variable by its key.</p>\n<hr>\n<h1 id=\"Cypress-env-key-value\"><a href=\"#Cypress-env-key-value\" class=\"headerlink\" title=\"Cypress.env( key, value )\"></a><a href=\"#section-key-value-usage\">Cypress.env( <em>key</em>, <em>value</em> )</a></h1><p>Sets an environment variable for a specific key.</p>\n<hr>\n<h1 id=\"Cypress-env-object\"><a href=\"#Cypress-env-object\" class=\"headerlink\" title=\"Cypress.env( object )\"></a><a href=\"#section-object-usage\">Cypress.env( <em>object</em> )</a></h1><p>Sets multiple environment variables.</p>\n<hr>\n<h1 id=\"No-Arguments-Usage\"><a href=\"#No-Arguments-Usage\" class=\"headerlink\" title=\"No Arguments Usage\"></a>No Arguments Usage</h1><h2 id=\"Get-all-environment-variables\"><a href=\"#Get-all-environment-variables\" class=\"headerlink\" title=\"Get all environment variables.\"></a>Get all environment variables.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// cypress.json</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"env\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>,</div><div class=\"line\">    <span class=\"string\">\"baz\"</span>: <span class=\"string\">\"quux\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Cypress.env() <span class=\"comment\">// =&gt; &#123;foo: \"bar\", baz: \"quux\"&#125;</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Key-Usage\"><a href=\"#Key-Usage\" class=\"headerlink\" title=\"Key Usage\"></a>Key Usage</h1><h2 id=\"Return-just-a-single-environment-variable-value\"><a href=\"#Return-just-a-single-environment-variable-value\" class=\"headerlink\" title=\"Return just a single environment variable value.\"></a>Return just a single environment variable value.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// cypress.json</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"env\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>,</div><div class=\"line\">    <span class=\"string\">\"baz\"</span>: <span class=\"string\">\"quux\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Cypress.env(<span class=\"string\">\"foo\"</span>) <span class=\"comment\">// =&gt; bar</span></div><div class=\"line\">Cypress.env(<span class=\"string\">\"baz\"</span>) <span class=\"comment\">// =&gt; quux</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Key-Value-Usage\"><a href=\"#Key-Value-Usage\" class=\"headerlink\" title=\"Key Value Usage\"></a>Key Value Usage</h1><h2 id=\"Cypress-allows-you-to-change-the-values-of-your-environment-variables-from-within-your-tests\"><a href=\"#Cypress-allows-you-to-change-the-values-of-your-environment-variables-from-within-your-tests\" class=\"headerlink\" title=\"Cypress allows you to change the values of your environment variables from within your tests.\"></a>Cypress allows you to change the values of your environment variables from within your tests.</h2><p>[block:callout]<br>{<br>  “type”: “warning”,<br>  “body”: “Any value you change will be permanently changed for the remainder of your tests.”<br>}<br>[/block]</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// cypress.json</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"env\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>,</div><div class=\"line\">    <span class=\"string\">\"baz\"</span>: <span class=\"string\">\"quux\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Cypress.env(<span class=\"string\">\"host\"</span>, <span class=\"string\">\"http://server.dev.local\"</span>)</div><div class=\"line\"></div><div class=\"line\">Cypress.env(<span class=\"string\">\"host\"</span>) <span class=\"comment\">// =&gt; http://server.dev.local</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Object-Usage\"><a href=\"#Object-Usage\" class=\"headerlink\" title=\"Object Usage\"></a>Object Usage</h1><h2 id=\"You-can-set-multiple-values-by-passing-an-object-literal\"><a href=\"#You-can-set-multiple-values-by-passing-an-object-literal\" class=\"headerlink\" title=\"You can set multiple values by passing an object literal.\"></a>You can set multiple values by passing an object literal.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// cypress.json</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"env\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>,</div><div class=\"line\">    <span class=\"string\">\"baz\"</span>: <span class=\"string\">\"quux\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Cypress.env(&#123;</div><div class=\"line\">  <span class=\"attr\">host</span>: <span class=\"string\">\"http://server.dev.local\"</span>,</div><div class=\"line\">  <span class=\"attr\">foo</span>: <span class=\"string\">\"foo\"</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">Cypress.env() <span class=\"comment\">// =&gt; &#123;foo: \"foo\", baz: \"quux\", host: \"http://server.dev.local\"&#125;</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h1><h2 id=\"Why-use-Cypress-env-instead-of-cy-env\"><a href=\"#Why-use-Cypress-env-instead-of-cy-env\" class=\"headerlink\" title=\"Why use Cypress.env instead of cy.env?\"></a>Why use <code>Cypress.env</code> instead of <code>cy.env</code>?</h2><p>As a rule of thumb anything you call from <code>Cypress</code> affects global state. Anything you call from <code>cy</code> affects local state.</p>\n<p>Methods on <code>cy</code> are local and specific to a single test. Side effects from <code>cy</code> methods are restored between each test. We chose to use <code>Cypress</code> because changes to your environment variables take effect for the remainder of <strong>ALL</strong> tests.</p>\n<hr>\n<h2 id=\"Why-would-I-ever-need-to-use-environment-variables\"><a href=\"#Why-would-I-ever-need-to-use-environment-variables\" class=\"headerlink\" title=\"Why would I ever need to use environment variables?\"></a>Why would I ever need to use environment variables?</h2><p>The <a href=\"https://on.cypress.io/guides/environment-variables\" target=\"_blank\" rel=\"external\">Environment Variables</a> guide explains common use cases.</p>\n<hr>\n<h2 id=\"Can-I-pass-in-environment-variables-from-the-command-line\"><a href=\"#Can-I-pass-in-environment-variables-from-the-command-line\" class=\"headerlink\" title=\"Can I pass in environment variables from the command line?\"></a>Can I pass in environment variables from the command line?</h2><p>Yes. You can do that and much more.</p>\n<p>The <a href=\"https://on.cypress.io/guides/environment-variables\" target=\"_blank\" rel=\"external\">Environment Variables</a> guide explains the 4 ways you can set environment variables for your tests.</p>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p><code>Cypress.env</code> allows you to <code>get</code> and <code>set</code> your environment variables.</p>\n<p>This document covers the API for consuming your environment variables <em>in your tests</em>. The <a href=\"https://on.cypress.io/guides/environment-variables\">Environment Variable</a> guide explains the 4 ways you can set them <em>outside of your tests</em>.</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://on.cypress.io/guides/environment-variables\">Read about environment variables first.</a>“,<br>  “title”: “New to Cypress?”<br>}<br>[/block]</p>\n<h1 id=\"Cypress-env\"><a href=\"#Cypress-env\" class=\"headerlink\" title=\"Cypress.env()\"></a><a href=\"#section-no-arguments-usage\">Cypress.env()</a></h1><p>Returns all of your environment variables as an object literal.</p>\n<hr>\n<h1 id=\"Cypress-env-key\"><a href=\"#Cypress-env-key\" class=\"headerlink\" title=\"Cypress.env( key )\"></a><a href=\"#section-key-usage\">Cypress.env( <em>key</em> )</a></h1><p>Returns the value of a single environment variable by its key.</p>\n<hr>\n<h1 id=\"Cypress-env-key-value\"><a href=\"#Cypress-env-key-value\" class=\"headerlink\" title=\"Cypress.env( key, value )\"></a><a href=\"#section-key-value-usage\">Cypress.env( <em>key</em>, <em>value</em> )</a></h1><p>Sets an environment variable for a specific key.</p>\n<hr>\n<h1 id=\"Cypress-env-object\"><a href=\"#Cypress-env-object\" class=\"headerlink\" title=\"Cypress.env( object )\"></a><a href=\"#section-object-usage\">Cypress.env( <em>object</em> )</a></h1><p>Sets multiple environment variables.</p>\n<hr>\n<h1 id=\"No-Arguments-Usage\"><a href=\"#No-Arguments-Usage\" class=\"headerlink\" title=\"No Arguments Usage\"></a>No Arguments Usage</h1><h2 id=\"Get-all-environment-variables\"><a href=\"#Get-all-environment-variables\" class=\"headerlink\" title=\"Get all environment variables.\"></a>Get all environment variables.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// cypress.json</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"env\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>,</div><div class=\"line\">    <span class=\"string\">\"baz\"</span>: <span class=\"string\">\"quux\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Cypress.env() <span class=\"comment\">// =&gt; &#123;foo: \"bar\", baz: \"quux\"&#125;</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Key-Usage\"><a href=\"#Key-Usage\" class=\"headerlink\" title=\"Key Usage\"></a>Key Usage</h1><h2 id=\"Return-just-a-single-environment-variable-value\"><a href=\"#Return-just-a-single-environment-variable-value\" class=\"headerlink\" title=\"Return just a single environment variable value.\"></a>Return just a single environment variable value.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// cypress.json</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"env\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>,</div><div class=\"line\">    <span class=\"string\">\"baz\"</span>: <span class=\"string\">\"quux\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Cypress.env(<span class=\"string\">\"foo\"</span>) <span class=\"comment\">// =&gt; bar</span></div><div class=\"line\">Cypress.env(<span class=\"string\">\"baz\"</span>) <span class=\"comment\">// =&gt; quux</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Key-Value-Usage\"><a href=\"#Key-Value-Usage\" class=\"headerlink\" title=\"Key Value Usage\"></a>Key Value Usage</h1><h2 id=\"Cypress-allows-you-to-change-the-values-of-your-environment-variables-from-within-your-tests\"><a href=\"#Cypress-allows-you-to-change-the-values-of-your-environment-variables-from-within-your-tests\" class=\"headerlink\" title=\"Cypress allows you to change the values of your environment variables from within your tests.\"></a>Cypress allows you to change the values of your environment variables from within your tests.</h2><p>[block:callout]<br>{<br>  “type”: “warning”,<br>  “body”: “Any value you change will be permanently changed for the remainder of your tests.”<br>}<br>[/block]</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// cypress.json</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"env\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>,</div><div class=\"line\">    <span class=\"string\">\"baz\"</span>: <span class=\"string\">\"quux\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Cypress.env(<span class=\"string\">\"host\"</span>, <span class=\"string\">\"http://server.dev.local\"</span>)</div><div class=\"line\"></div><div class=\"line\">Cypress.env(<span class=\"string\">\"host\"</span>) <span class=\"comment\">// =&gt; http://server.dev.local</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Object-Usage\"><a href=\"#Object-Usage\" class=\"headerlink\" title=\"Object Usage\"></a>Object Usage</h1><h2 id=\"You-can-set-multiple-values-by-passing-an-object-literal\"><a href=\"#You-can-set-multiple-values-by-passing-an-object-literal\" class=\"headerlink\" title=\"You can set multiple values by passing an object literal.\"></a>You can set multiple values by passing an object literal.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// cypress.json</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"env\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"bar\"</span>,</div><div class=\"line\">    <span class=\"string\">\"baz\"</span>: <span class=\"string\">\"quux\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Cypress.env(&#123;</div><div class=\"line\">  <span class=\"attr\">host</span>: <span class=\"string\">\"http://server.dev.local\"</span>,</div><div class=\"line\">  <span class=\"attr\">foo</span>: <span class=\"string\">\"foo\"</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">Cypress.env() <span class=\"comment\">// =&gt; &#123;foo: \"foo\", baz: \"quux\", host: \"http://server.dev.local\"&#125;</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h1><h2 id=\"Why-use-Cypress-env-instead-of-cy-env\"><a href=\"#Why-use-Cypress-env-instead-of-cy-env\" class=\"headerlink\" title=\"Why use Cypress.env instead of cy.env?\"></a>Why use <code>Cypress.env</code> instead of <code>cy.env</code>?</h2><p>As a rule of thumb anything you call from <code>Cypress</code> affects global state. Anything you call from <code>cy</code> affects local state.</p>\n<p>Methods on <code>cy</code> are local and specific to a single test. Side effects from <code>cy</code> methods are restored between each test. We chose to use <code>Cypress</code> because changes to your environment variables take effect for the remainder of <strong>ALL</strong> tests.</p>\n<hr>\n<h2 id=\"Why-would-I-ever-need-to-use-environment-variables\"><a href=\"#Why-would-I-ever-need-to-use-environment-variables\" class=\"headerlink\" title=\"Why would I ever need to use environment variables?\"></a>Why would I ever need to use environment variables?</h2><p>The <a href=\"https://on.cypress.io/guides/environment-variables\">Environment Variables</a> guide explains common use cases.</p>\n<hr>\n<h2 id=\"Can-I-pass-in-environment-variables-from-the-command-line\"><a href=\"#Can-I-pass-in-environment-variables-from-the-command-line\" class=\"headerlink\" title=\"Can I pass in environment variables from the command line?\"></a>Can I pass in environment variables from the command line?</h2><p>Yes. You can do that and much more.</p>\n<p>The <a href=\"https://on.cypress.io/guides/environment-variables\">Environment Variables</a> guide explains the 4 ways you can set environment variables for your tests.</p>\n"},{"title":"api-server","_content":"\nAny configuration you pass to [`cy.server`](https://on.cypress.io/api/server) will only persist until the end of the test. If you find yourself passing the same configuration to each [`cy.server`](https://on.cypress.io/api/server), then you might want to permanently change the default options for all [`cy.server`](https://on.cypress.io/api/server) instances.\n\n***\n\n# [Cypress.Server.defaults( *object* )](#section-usage)\n\nChange default configuration for [`cy.server`](https://on.cypress.io/api/server)\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"A great place to put this configuration is in your `cypress/support/defaults.js` file, since it is loaded before any test files are evaluated.\"\n}\n[/block]\n\n***\n\n# Usage\n\n```javascript\n// pass anything here you'd normally pass\n// to cy.server(). These options will be the new defaults.\nCypress.Server.defaults({\n  delay: 500,\n  force404: false,\n  whitelist: function(xhr){\n    // handle custom logic for whitelisting\n  }\n})\n```","source":"api/cypress-api/server.md","raw":"title: api-server\n---\n\nAny configuration you pass to [`cy.server`](https://on.cypress.io/api/server) will only persist until the end of the test. If you find yourself passing the same configuration to each [`cy.server`](https://on.cypress.io/api/server), then you might want to permanently change the default options for all [`cy.server`](https://on.cypress.io/api/server) instances.\n\n***\n\n# [Cypress.Server.defaults( *object* )](#section-usage)\n\nChange default configuration for [`cy.server`](https://on.cypress.io/api/server)\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"A great place to put this configuration is in your `cypress/support/defaults.js` file, since it is loaded before any test files are evaluated.\"\n}\n[/block]\n\n***\n\n# Usage\n\n```javascript\n// pass anything here you'd normally pass\n// to cy.server(). These options will be the new defaults.\nCypress.Server.defaults({\n  delay: 500,\n  force404: false,\n  whitelist: function(xhr){\n    // handle custom logic for whitelisting\n  }\n})\n```","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/cypress-api/server.html","comments":1,"layout":"page","_id":"cj1pc2g950028k1g8n2dk1jf1","content":"<p>Any configuration you pass to <a href=\"https://on.cypress.io/api/server\" target=\"_blank\" rel=\"external\"><code>cy.server</code></a> will only persist until the end of the test. If you find yourself passing the same configuration to each <a href=\"https://on.cypress.io/api/server\" target=\"_blank\" rel=\"external\"><code>cy.server</code></a>, then you might want to permanently change the default options for all <a href=\"https://on.cypress.io/api/server\" target=\"_blank\" rel=\"external\"><code>cy.server</code></a> instances.</p>\n<hr>\n<h1 id=\"Cypress-Server-defaults-object\"><a href=\"#Cypress-Server-defaults-object\" class=\"headerlink\" title=\"Cypress.Server.defaults( object )\"></a><a href=\"#section-usage\">Cypress.Server.defaults( <em>object</em> )</a></h1><p>Change default configuration for <a href=\"https://on.cypress.io/api/server\" target=\"_blank\" rel=\"external\"><code>cy.server</code></a></p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “A great place to put this configuration is in your <code>cypress/support/defaults.js</code> file, since it is loaded before any test files are evaluated.”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// pass anything here you'd normally pass</span></div><div class=\"line\"><span class=\"comment\">// to cy.server(). These options will be the new defaults.</span></div><div class=\"line\">Cypress.Server.defaults(&#123;</div><div class=\"line\">  <span class=\"attr\">delay</span>: <span class=\"number\">500</span>,</div><div class=\"line\">  <span class=\"attr\">force404</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">  <span class=\"attr\">whitelist</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">xhr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// handle custom logic for whitelisting</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Any configuration you pass to <a href=\"https://on.cypress.io/api/server\"><code>cy.server</code></a> will only persist until the end of the test. If you find yourself passing the same configuration to each <a href=\"https://on.cypress.io/api/server\"><code>cy.server</code></a>, then you might want to permanently change the default options for all <a href=\"https://on.cypress.io/api/server\"><code>cy.server</code></a> instances.</p>\n<hr>\n<h1 id=\"Cypress-Server-defaults-object\"><a href=\"#Cypress-Server-defaults-object\" class=\"headerlink\" title=\"Cypress.Server.defaults( object )\"></a><a href=\"#section-usage\">Cypress.Server.defaults( <em>object</em> )</a></h1><p>Change default configuration for <a href=\"https://on.cypress.io/api/server\"><code>cy.server</code></a></p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “A great place to put this configuration is in your <code>cypress/support/defaults.js</code> file, since it is loaded before any test files are evaluated.”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// pass anything here you'd normally pass</span></div><div class=\"line\"><span class=\"comment\">// to cy.server(). These options will be the new defaults.</span></div><div class=\"line\">Cypress.Server.defaults(&#123;</div><div class=\"line\">  <span class=\"attr\">delay</span>: <span class=\"number\">500</span>,</div><div class=\"line\">  <span class=\"attr\">force404</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">  <span class=\"attr\">whitelist</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">xhr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// handle custom logic for whitelisting</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>"},{"title":"cypress-jquery","_content":"\n# [Cypress.$( **selector** )](#section-selector-usage)\n\nCypress automatically proxies [jQuery](https://jquery.com/) and exposes it as `Cypress.$`\n\nCalling `Cypress.$(\"button\")` will automatically query for elements in your `remote window`. In other words, Cypress automatically sets the `document` to be whatever you've currently navigated to via [`cy.visit`](https://on.cypress.io/api/visit).\n\nThis is a great way to *synchronously* query for elements when debugging from Chrome Dev Tools.\n\n***\n\n# Other proxied jQuery methods\n\n* `Cypress.$.Event`\n* `Cypress.$.Deferred`\n* `Cypress.$.ajax`\n* `Cypress.$.get`\n* `Cypress.$.getJSON`\n* `Cypress.$.getScript`\n* `Cypress.$.post`\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"If you're looking to make an XHR request in your test scripts, use [`cy.request`](https://on.cypress.io/api/request)\"\n}\n[/block]\n\n***\n\n# Selector Usage\n\n```javascript\nvar $li = Cypress.$(\"ul li:first\")\n\ncy\n  .wrap($li)\n    .should(\"not.have.class\", \"active\")\n  .click()\n    .should(\"have.class\", \"active\")\n```","source":"api/utilities/$.md","raw":"title: cypress-jquery\n---\n\n# [Cypress.$( **selector** )](#section-selector-usage)\n\nCypress automatically proxies [jQuery](https://jquery.com/) and exposes it as `Cypress.$`\n\nCalling `Cypress.$(\"button\")` will automatically query for elements in your `remote window`. In other words, Cypress automatically sets the `document` to be whatever you've currently navigated to via [`cy.visit`](https://on.cypress.io/api/visit).\n\nThis is a great way to *synchronously* query for elements when debugging from Chrome Dev Tools.\n\n***\n\n# Other proxied jQuery methods\n\n* `Cypress.$.Event`\n* `Cypress.$.Deferred`\n* `Cypress.$.ajax`\n* `Cypress.$.get`\n* `Cypress.$.getJSON`\n* `Cypress.$.getScript`\n* `Cypress.$.post`\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"If you're looking to make an XHR request in your test scripts, use [`cy.request`](https://on.cypress.io/api/request)\"\n}\n[/block]\n\n***\n\n# Selector Usage\n\n```javascript\nvar $li = Cypress.$(\"ul li:first\")\n\ncy\n  .wrap($li)\n    .should(\"not.have.class\", \"active\")\n  .click()\n    .should(\"have.class\", \"active\")\n```","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/utilities/$.html","comments":1,"layout":"page","_id":"cj1pc2g950029k1g8218se72h","content":"<h1 id=\"Cypress-selector\"><a href=\"#Cypress-selector\" class=\"headerlink\" title=\"Cypress.$( selector )\"></a><a href=\"#section-selector-usage\">Cypress.$( <strong>selector</strong> )</a></h1><p>Cypress automatically proxies <a href=\"https://jquery.com/\" target=\"_blank\" rel=\"external\">jQuery</a> and exposes it as <code>Cypress.$</code></p>\n<p>Calling <code>Cypress.$(&quot;button&quot;)</code> will automatically query for elements in your <code>remote window</code>. In other words, Cypress automatically sets the <code>document</code> to be whatever you’ve currently navigated to via <a href=\"https://on.cypress.io/api/visit\" target=\"_blank\" rel=\"external\"><code>cy.visit</code></a>.</p>\n<p>This is a great way to <em>synchronously</em> query for elements when debugging from Chrome Dev Tools.</p>\n<hr>\n<h1 id=\"Other-proxied-jQuery-methods\"><a href=\"#Other-proxied-jQuery-methods\" class=\"headerlink\" title=\"Other proxied jQuery methods\"></a>Other proxied jQuery methods</h1><ul>\n<li><code>Cypress.$.Event</code></li>\n<li><code>Cypress.$.Deferred</code></li>\n<li><code>Cypress.$.ajax</code></li>\n<li><code>Cypress.$.get</code></li>\n<li><code>Cypress.$.getJSON</code></li>\n<li><code>Cypress.$.getScript</code></li>\n<li><code>Cypress.$.post</code></li>\n</ul>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “If you’re looking to make an XHR request in your test scripts, use <a href=\"https://on.cypress.io/api/request\" target=\"_blank\" rel=\"external\"><code>cy.request</code></a>“<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Selector-Usage\"><a href=\"#Selector-Usage\" class=\"headerlink\" title=\"Selector Usage\"></a>Selector Usage</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $li = Cypress.$(<span class=\"string\">\"ul li:first\"</span>)</div><div class=\"line\"></div><div class=\"line\">cy</div><div class=\"line\">  .wrap($li)</div><div class=\"line\">    .should(<span class=\"string\">\"not.have.class\"</span>, <span class=\"string\">\"active\"</span>)</div><div class=\"line\">  .click()</div><div class=\"line\">    .should(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"active\"</span>)</div></pre></td></tr></table></figure>","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<h1 id=\"Cypress-selector\"><a href=\"#Cypress-selector\" class=\"headerlink\" title=\"Cypress.$( selector )\"></a><a href=\"#section-selector-usage\">Cypress.$( <strong>selector</strong> )</a></h1><p>Cypress automatically proxies <a href=\"https://jquery.com/\">jQuery</a> and exposes it as <code>Cypress.$</code></p>\n<p>Calling <code>Cypress.$(&quot;button&quot;)</code> will automatically query for elements in your <code>remote window</code>. In other words, Cypress automatically sets the <code>document</code> to be whatever you’ve currently navigated to via <a href=\"https://on.cypress.io/api/visit\"><code>cy.visit</code></a>.</p>\n<p>This is a great way to <em>synchronously</em> query for elements when debugging from Chrome Dev Tools.</p>\n<hr>\n<h1 id=\"Other-proxied-jQuery-methods\"><a href=\"#Other-proxied-jQuery-methods\" class=\"headerlink\" title=\"Other proxied jQuery methods\"></a>Other proxied jQuery methods</h1><ul>\n<li><code>Cypress.$.Event</code></li>\n<li><code>Cypress.$.Deferred</code></li>\n<li><code>Cypress.$.ajax</code></li>\n<li><code>Cypress.$.get</code></li>\n<li><code>Cypress.$.getJSON</code></li>\n<li><code>Cypress.$.getScript</code></li>\n<li><code>Cypress.$.post</code></li>\n</ul>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “If you’re looking to make an XHR request in your test scripts, use <a href=\"https://on.cypress.io/api/request\"><code>cy.request</code></a>“<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Selector-Usage\"><a href=\"#Selector-Usage\" class=\"headerlink\" title=\"Selector Usage\"></a>Selector Usage</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $li = Cypress.$(<span class=\"string\">\"ul li:first\"</span>)</div><div class=\"line\"></div><div class=\"line\">cy</div><div class=\"line\">  .wrap($li)</div><div class=\"line\">    .should(<span class=\"string\">\"not.have.class\"</span>, <span class=\"string\">\"active\"</span>)</div><div class=\"line\">  .click()</div><div class=\"line\">    .should(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"active\"</span>)</div></pre></td></tr></table></figure>"},{"title":"cypress-underscore","_content":"\n# [Cypress._.method()](#section-usage)\n\nCypress automatically proxies [Underscore](http://underscorejs.org/) and exposes it as `Cypress._`\n\nCall any valid Underscore method with `Cypress._`\n\n***\n\n# Usage\n\n## Use _.each\n\n```javascript\n// set local reference to underscore\nvar _ = Cypress._\n\ncy.get(\"li\").then(function($li){\n  // use the _.each function\n  _.each($li.get(), function(el, i){\n\n    // use Cypress.$(...) to wrap the DOM element\n    // into a jQuery object\n    expect(Cypress.$(el).parent()).to.match(\"ul\")\n  })\n})\n```\n\n## Chain underscore methods\n\n```javascript\ncy\n  // use the _.chain, _.pluck, _.first, and _.value functions\n  .request('http://jsonplaceholder.typicode.com/users').then(function(response){\n    var _ = Cypress._\n    var ids = _.chain(response.body).pluck('id').first(3).value()\n\n    expect(ids).to.deep.eq([1, 2, 3])\n  })\n```","source":"api/utilities/-.md","raw":"title: cypress-underscore\n---\n\n# [Cypress._.method()](#section-usage)\n\nCypress automatically proxies [Underscore](http://underscorejs.org/) and exposes it as `Cypress._`\n\nCall any valid Underscore method with `Cypress._`\n\n***\n\n# Usage\n\n## Use _.each\n\n```javascript\n// set local reference to underscore\nvar _ = Cypress._\n\ncy.get(\"li\").then(function($li){\n  // use the _.each function\n  _.each($li.get(), function(el, i){\n\n    // use Cypress.$(...) to wrap the DOM element\n    // into a jQuery object\n    expect(Cypress.$(el).parent()).to.match(\"ul\")\n  })\n})\n```\n\n## Chain underscore methods\n\n```javascript\ncy\n  // use the _.chain, _.pluck, _.first, and _.value functions\n  .request('http://jsonplaceholder.typicode.com/users').then(function(response){\n    var _ = Cypress._\n    var ids = _.chain(response.body).pluck('id').first(3).value()\n\n    expect(ids).to.deep.eq([1, 2, 3])\n  })\n```","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/utilities/-.html","comments":1,"layout":"page","_id":"cj1pc2g95002ak1g8dzpa6ty8","content":"<h1 id=\"Cypress-method\"><a href=\"#Cypress-method\" class=\"headerlink\" title=\"Cypress._.method()\"></a><a href=\"#section-usage\">Cypress._.method()</a></h1><p>Cypress automatically proxies <a href=\"http://underscorejs.org/\" target=\"_blank\" rel=\"external\">Underscore</a> and exposes it as <code>Cypress._</code></p>\n<p>Call any valid Underscore method with <code>Cypress._</code></p>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Use-each\"><a href=\"#Use-each\" class=\"headerlink\" title=\"Use _.each\"></a>Use _.each</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// set local reference to underscore</span></div><div class=\"line\"><span class=\"keyword\">var</span> _ = Cypress._</div><div class=\"line\"></div><div class=\"line\">cy.get(<span class=\"string\">\"li\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$li</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// use the _.each function</span></div><div class=\"line\">  _.each($li.get(), <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, i</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// use Cypress.$(...) to wrap the DOM element</span></div><div class=\"line\">    <span class=\"comment\">// into a jQuery object</span></div><div class=\"line\">    expect(Cypress.$(el).parent()).to.match(<span class=\"string\">\"ul\"</span>)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Chain-underscore-methods\"><a href=\"#Chain-underscore-methods\" class=\"headerlink\" title=\"Chain underscore methods\"></a>Chain underscore methods</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  <span class=\"comment\">// use the _.chain, _.pluck, _.first, and _.value functions</span></div><div class=\"line\">  .request(<span class=\"string\">'http://jsonplaceholder.typicode.com/users'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> _ = Cypress._</div><div class=\"line\">    <span class=\"keyword\">var</span> ids = _.chain(response.body).pluck(<span class=\"string\">'id'</span>).first(<span class=\"number\">3</span>).value()</div><div class=\"line\"></div><div class=\"line\">    expect(ids).to.deep.eq([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<h1 id=\"Cypress-method\"><a href=\"#Cypress-method\" class=\"headerlink\" title=\"Cypress._.method()\"></a><a href=\"#section-usage\">Cypress._.method()</a></h1><p>Cypress automatically proxies <a href=\"http://underscorejs.org/\">Underscore</a> and exposes it as <code>Cypress._</code></p>\n<p>Call any valid Underscore method with <code>Cypress._</code></p>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Use-each\"><a href=\"#Use-each\" class=\"headerlink\" title=\"Use _.each\"></a>Use _.each</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// set local reference to underscore</span></div><div class=\"line\"><span class=\"keyword\">var</span> _ = Cypress._</div><div class=\"line\"></div><div class=\"line\">cy.get(<span class=\"string\">\"li\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$li</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// use the _.each function</span></div><div class=\"line\">  _.each($li.get(), <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, i</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// use Cypress.$(...) to wrap the DOM element</span></div><div class=\"line\">    <span class=\"comment\">// into a jQuery object</span></div><div class=\"line\">    expect(Cypress.$(el).parent()).to.match(<span class=\"string\">\"ul\"</span>)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Chain-underscore-methods\"><a href=\"#Chain-underscore-methods\" class=\"headerlink\" title=\"Chain underscore methods\"></a>Chain underscore methods</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  <span class=\"comment\">// use the _.chain, _.pluck, _.first, and _.value functions</span></div><div class=\"line\">  .request(<span class=\"string\">'http://jsonplaceholder.typicode.com/users'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> _ = Cypress._</div><div class=\"line\">    <span class=\"keyword\">var</span> ids = _.chain(response.body).pluck(<span class=\"string\">'id'</span>).first(<span class=\"number\">3</span>).value()</div><div class=\"line\"></div><div class=\"line\">    expect(ids).to.deep.eq([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>"},{"title":"cypress-blob","_content":"\n# [Cypress.Blob.method()](#setion-usage)\n\nCypress proxies a [`Blob Utilities`](https://github.com/nolanlawson/blob-util) library and exposes it as `Cypress.Blob`.\n\nUse `Cypress.Blob` to convert `base64` strings to `blob` objects. Useful for testing uploads.\n\n***\n\n# Usage\n\n## Using an image fixture\n\n```javascript\n// programmatically upload the logo\ncy\n  .fixture(\"images/logo.png\").as(\"logo\")\n  .get(\"input[type=file]\").then(function($input){\n\n    // convert the logo base64 string to a blob\n    return Cypress.Blob.base64StringToBlob(this.logo, \"image/png\").then(function(blob){\n\n      // pass the blob to the fileupload jQuery plugin\n      // which initiates a programmatic upload\n      $input.fileupload(\"add\", {files: blob})\n    })\n  })\n```\n\n## Getting dataUrl string\n\n```javascript\nreturn Cypress.Blob.imgSrcToDataURL(\"/assets/img/logo.png\").then(function(dataUrl){\n\n  // create an <img> element and set its src to the dataUrl\n  var img = Cypress.$(\"<img />\", {src: dataUrl})\n\n  cy\n    .get(\".utility-blob\").then(function($div){\n      // append the image\n      $div.append(img)\n    })\n    .get(\".utility-blob img\").click().should(\"have.attr\", \"src\", dataUrl)\n})\n```\n","source":"api/utilities/blob.md","raw":"title: cypress-blob\n---\n\n# [Cypress.Blob.method()](#setion-usage)\n\nCypress proxies a [`Blob Utilities`](https://github.com/nolanlawson/blob-util) library and exposes it as `Cypress.Blob`.\n\nUse `Cypress.Blob` to convert `base64` strings to `blob` objects. Useful for testing uploads.\n\n***\n\n# Usage\n\n## Using an image fixture\n\n```javascript\n// programmatically upload the logo\ncy\n  .fixture(\"images/logo.png\").as(\"logo\")\n  .get(\"input[type=file]\").then(function($input){\n\n    // convert the logo base64 string to a blob\n    return Cypress.Blob.base64StringToBlob(this.logo, \"image/png\").then(function(blob){\n\n      // pass the blob to the fileupload jQuery plugin\n      // which initiates a programmatic upload\n      $input.fileupload(\"add\", {files: blob})\n    })\n  })\n```\n\n## Getting dataUrl string\n\n```javascript\nreturn Cypress.Blob.imgSrcToDataURL(\"/assets/img/logo.png\").then(function(dataUrl){\n\n  // create an <img> element and set its src to the dataUrl\n  var img = Cypress.$(\"<img />\", {src: dataUrl})\n\n  cy\n    .get(\".utility-blob\").then(function($div){\n      // append the image\n      $div.append(img)\n    })\n    .get(\".utility-blob img\").click().should(\"have.attr\", \"src\", dataUrl)\n})\n```\n","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/utilities/blob.html","comments":1,"layout":"page","_id":"cj1pc2g96002bk1g878whfcpl","content":"<h1 id=\"Cypress-Blob-method\"><a href=\"#Cypress-Blob-method\" class=\"headerlink\" title=\"Cypress.Blob.method()\"></a><a href=\"#setion-usage\">Cypress.Blob.method()</a></h1><p>Cypress proxies a <a href=\"https://github.com/nolanlawson/blob-util\" target=\"_blank\" rel=\"external\"><code>Blob Utilities</code></a> library and exposes it as <code>Cypress.Blob</code>.</p>\n<p>Use <code>Cypress.Blob</code> to convert <code>base64</code> strings to <code>blob</code> objects. Useful for testing uploads.</p>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Using-an-image-fixture\"><a href=\"#Using-an-image-fixture\" class=\"headerlink\" title=\"Using an image fixture\"></a>Using an image fixture</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// programmatically upload the logo</span></div><div class=\"line\">cy</div><div class=\"line\">  .fixture(<span class=\"string\">\"images/logo.png\"</span>).as(<span class=\"string\">\"logo\"</span>)</div><div class=\"line\">  .get(<span class=\"string\">\"input[type=file]\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$input</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// convert the logo base64 string to a blob</span></div><div class=\"line\">    <span class=\"keyword\">return</span> Cypress.Blob.base64StringToBlob(<span class=\"keyword\">this</span>.logo, <span class=\"string\">\"image/png\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">blob</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// pass the blob to the fileupload jQuery plugin</span></div><div class=\"line\">      <span class=\"comment\">// which initiates a programmatic upload</span></div><div class=\"line\">      $input.fileupload(<span class=\"string\">\"add\"</span>, &#123;<span class=\"attr\">files</span>: blob&#125;)</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Getting-dataUrl-string\"><a href=\"#Getting-dataUrl-string\" class=\"headerlink\" title=\"Getting dataUrl string\"></a>Getting dataUrl string</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">return</span> Cypress.Blob.imgSrcToDataURL(<span class=\"string\">\"/assets/img/logo.png\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dataUrl</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// create an &lt;img&gt; element and set its src to the dataUrl</span></div><div class=\"line\">  <span class=\"keyword\">var</span> img = Cypress.$(<span class=\"string\">\"&lt;img /&gt;\"</span>, &#123;<span class=\"attr\">src</span>: dataUrl&#125;)</div><div class=\"line\"></div><div class=\"line\">  cy</div><div class=\"line\">    .get(<span class=\"string\">\".utility-blob\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$div</span>)</span>&#123;</div><div class=\"line\">      <span class=\"comment\">// append the image</span></div><div class=\"line\">      $div.append(img)</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .get(<span class=\"string\">\".utility-blob img\"</span>).click().should(<span class=\"string\">\"have.attr\"</span>, <span class=\"string\">\"src\"</span>, dataUrl)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<h1 id=\"Cypress-Blob-method\"><a href=\"#Cypress-Blob-method\" class=\"headerlink\" title=\"Cypress.Blob.method()\"></a><a href=\"#setion-usage\">Cypress.Blob.method()</a></h1><p>Cypress proxies a <a href=\"https://github.com/nolanlawson/blob-util\"><code>Blob Utilities</code></a> library and exposes it as <code>Cypress.Blob</code>.</p>\n<p>Use <code>Cypress.Blob</code> to convert <code>base64</code> strings to <code>blob</code> objects. Useful for testing uploads.</p>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Using-an-image-fixture\"><a href=\"#Using-an-image-fixture\" class=\"headerlink\" title=\"Using an image fixture\"></a>Using an image fixture</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// programmatically upload the logo</span></div><div class=\"line\">cy</div><div class=\"line\">  .fixture(<span class=\"string\">\"images/logo.png\"</span>).as(<span class=\"string\">\"logo\"</span>)</div><div class=\"line\">  .get(<span class=\"string\">\"input[type=file]\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$input</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// convert the logo base64 string to a blob</span></div><div class=\"line\">    <span class=\"keyword\">return</span> Cypress.Blob.base64StringToBlob(<span class=\"keyword\">this</span>.logo, <span class=\"string\">\"image/png\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">blob</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// pass the blob to the fileupload jQuery plugin</span></div><div class=\"line\">      <span class=\"comment\">// which initiates a programmatic upload</span></div><div class=\"line\">      $input.fileupload(<span class=\"string\">\"add\"</span>, &#123;<span class=\"attr\">files</span>: blob&#125;)</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Getting-dataUrl-string\"><a href=\"#Getting-dataUrl-string\" class=\"headerlink\" title=\"Getting dataUrl string\"></a>Getting dataUrl string</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">return</span> Cypress.Blob.imgSrcToDataURL(<span class=\"string\">\"/assets/img/logo.png\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dataUrl</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// create an &lt;img&gt; element and set its src to the dataUrl</span></div><div class=\"line\">  <span class=\"keyword\">var</span> img = Cypress.$(<span class=\"string\">\"&lt;img /&gt;\"</span>, &#123;<span class=\"attr\">src</span>: dataUrl&#125;)</div><div class=\"line\"></div><div class=\"line\">  cy</div><div class=\"line\">    .get(<span class=\"string\">\".utility-blob\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$div</span>)</span>&#123;</div><div class=\"line\">      <span class=\"comment\">// append the image</span></div><div class=\"line\">      $div.append(img)</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .get(<span class=\"string\">\".utility-blob img\"</span>).click().should(<span class=\"string\">\"have.attr\"</span>, <span class=\"string\">\"src\"</span>, dataUrl)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n"},{"title":"cypress-minimatch","_content":"\n# [Cypress.minimatch()](#section-usage)\n\nCypress automatically proxies [`minimatch`](https://github.com/isaacs/minimatch) and exposes it as `Cypress.minimatch`.\n\nUse `Cypress.minimatch` to test out glob patterns against strings.\n\n***\n\n# Usage\n\nBy default Cypress uses `minimatch` to test glob patterns against XHR URLs.\n\nIf you're struggling with writing the correct pattern you can iterate much faster by testing directly in your Chrome Dev Tools console.\n\nPop open that baby and write the following:\n\n```javascript\n// test that the glob you're writing matches the XHR's url\n\n// returns true\nCypress.minimatch(\"/users/1/comments\", \"/users/*/comments\", {\n  matchBase: true\n})\n\n// returns false\nCypress.minimatch(\"/users/1/comments/2\", \"/users/*/comments\", {\n  matchBase: true\n})\n```\n\nWe're adding the `{matchBase: true}` option because under the hood Cypress actually uses that option by default.\n\nNow let's test out `**` support.\n\n```javascript\n// ** matches against all downstream path segments\n\n// returns true\nCypress.minimatch(\"/foo/bar/baz/123/quux?a=b&c=2\", \"/foo/**\", {\n  matchBase: true\n})\n\n// whereas * matches only the next path segment\n\n// returns false\nCypress.minimatch(\"/foo/bar/baz/123/quux?a=b&c=2\", \"/foo/*\", {\n  matchBase: false\n})\n```","source":"api/utilities/minimatch.md","raw":"title: cypress-minimatch\n---\n\n# [Cypress.minimatch()](#section-usage)\n\nCypress automatically proxies [`minimatch`](https://github.com/isaacs/minimatch) and exposes it as `Cypress.minimatch`.\n\nUse `Cypress.minimatch` to test out glob patterns against strings.\n\n***\n\n# Usage\n\nBy default Cypress uses `minimatch` to test glob patterns against XHR URLs.\n\nIf you're struggling with writing the correct pattern you can iterate much faster by testing directly in your Chrome Dev Tools console.\n\nPop open that baby and write the following:\n\n```javascript\n// test that the glob you're writing matches the XHR's url\n\n// returns true\nCypress.minimatch(\"/users/1/comments\", \"/users/*/comments\", {\n  matchBase: true\n})\n\n// returns false\nCypress.minimatch(\"/users/1/comments/2\", \"/users/*/comments\", {\n  matchBase: true\n})\n```\n\nWe're adding the `{matchBase: true}` option because under the hood Cypress actually uses that option by default.\n\nNow let's test out `**` support.\n\n```javascript\n// ** matches against all downstream path segments\n\n// returns true\nCypress.minimatch(\"/foo/bar/baz/123/quux?a=b&c=2\", \"/foo/**\", {\n  matchBase: true\n})\n\n// whereas * matches only the next path segment\n\n// returns false\nCypress.minimatch(\"/foo/bar/baz/123/quux?a=b&c=2\", \"/foo/*\", {\n  matchBase: false\n})\n```","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/utilities/minimatch.html","comments":1,"layout":"page","_id":"cj1pc2g96002ck1g8iod2v5sv","content":"<h1 id=\"Cypress-minimatch\"><a href=\"#Cypress-minimatch\" class=\"headerlink\" title=\"Cypress.minimatch()\"></a><a href=\"#section-usage\">Cypress.minimatch()</a></h1><p>Cypress automatically proxies <a href=\"https://github.com/isaacs/minimatch\" target=\"_blank\" rel=\"external\"><code>minimatch</code></a> and exposes it as <code>Cypress.minimatch</code>.</p>\n<p>Use <code>Cypress.minimatch</code> to test out glob patterns against strings.</p>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><p>By default Cypress uses <code>minimatch</code> to test glob patterns against XHR URLs.</p>\n<p>If you’re struggling with writing the correct pattern you can iterate much faster by testing directly in your Chrome Dev Tools console.</p>\n<p>Pop open that baby and write the following:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// test that the glob you're writing matches the XHR's url</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// returns true</span></div><div class=\"line\">Cypress.minimatch(<span class=\"string\">\"/users/1/comments\"</span>, <span class=\"string\">\"/users/*/comments\"</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">matchBase</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// returns false</span></div><div class=\"line\">Cypress.minimatch(<span class=\"string\">\"/users/1/comments/2\"</span>, <span class=\"string\">\"/users/*/comments\"</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">matchBase</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>We’re adding the <code>{matchBase: true}</code> option because under the hood Cypress actually uses that option by default.</p>\n<p>Now let’s test out <code>**</code> support.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ** matches against all downstream path segments</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// returns true</span></div><div class=\"line\">Cypress.minimatch(<span class=\"string\">\"/foo/bar/baz/123/quux?a=b&amp;c=2\"</span>, <span class=\"string\">\"/foo/**\"</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">matchBase</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// whereas * matches only the next path segment</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// returns false</span></div><div class=\"line\">Cypress.minimatch(<span class=\"string\">\"/foo/bar/baz/123/quux?a=b&amp;c=2\"</span>, <span class=\"string\">\"/foo/*\"</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">matchBase</span>: <span class=\"literal\">false</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<h1 id=\"Cypress-minimatch\"><a href=\"#Cypress-minimatch\" class=\"headerlink\" title=\"Cypress.minimatch()\"></a><a href=\"#section-usage\">Cypress.minimatch()</a></h1><p>Cypress automatically proxies <a href=\"https://github.com/isaacs/minimatch\"><code>minimatch</code></a> and exposes it as <code>Cypress.minimatch</code>.</p>\n<p>Use <code>Cypress.minimatch</code> to test out glob patterns against strings.</p>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><p>By default Cypress uses <code>minimatch</code> to test glob patterns against XHR URLs.</p>\n<p>If you’re struggling with writing the correct pattern you can iterate much faster by testing directly in your Chrome Dev Tools console.</p>\n<p>Pop open that baby and write the following:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// test that the glob you're writing matches the XHR's url</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// returns true</span></div><div class=\"line\">Cypress.minimatch(<span class=\"string\">\"/users/1/comments\"</span>, <span class=\"string\">\"/users/*/comments\"</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">matchBase</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// returns false</span></div><div class=\"line\">Cypress.minimatch(<span class=\"string\">\"/users/1/comments/2\"</span>, <span class=\"string\">\"/users/*/comments\"</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">matchBase</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>We’re adding the <code>{matchBase: true}</code> option because under the hood Cypress actually uses that option by default.</p>\n<p>Now let’s test out <code>**</code> support.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ** matches against all downstream path segments</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// returns true</span></div><div class=\"line\">Cypress.minimatch(<span class=\"string\">\"/foo/bar/baz/123/quux?a=b&amp;c=2\"</span>, <span class=\"string\">\"/foo/**\"</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">matchBase</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// whereas * matches only the next path segment</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// returns false</span></div><div class=\"line\">Cypress.minimatch(<span class=\"string\">\"/foo/bar/baz/123/quux?a=b&amp;c=2\"</span>, <span class=\"string\">\"/foo/*\"</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">matchBase</span>: <span class=\"literal\">false</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>"},{"title":"cypress-moment","_content":"\n# [Cypress.moment()](#section-usage)\n\nCypress automatically proxies [`moment.js`](http://momentjs.com/) and exposes it as `Cypress.moment`.\n\nUse `Cypress.moment` to help format or parse dates.\n\n***\n\n# Usage\n\n```javascript\nvar todaysDate = Cypress.moment().format(\"MMM DD, YYYY\")\n\n// test that the span contains formatted text for today\ncy.get(\"span\").should(\"contain\", \"Order shipped on: \" + todaysDate)\n```","source":"api/utilities/moment.md","raw":"title: cypress-moment\n---\n\n# [Cypress.moment()](#section-usage)\n\nCypress automatically proxies [`moment.js`](http://momentjs.com/) and exposes it as `Cypress.moment`.\n\nUse `Cypress.moment` to help format or parse dates.\n\n***\n\n# Usage\n\n```javascript\nvar todaysDate = Cypress.moment().format(\"MMM DD, YYYY\")\n\n// test that the span contains formatted text for today\ncy.get(\"span\").should(\"contain\", \"Order shipped on: \" + todaysDate)\n```","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/utilities/moment.html","comments":1,"layout":"page","_id":"cj1pc2g97002dk1g8khyqxtbf","content":"<h1 id=\"Cypress-moment\"><a href=\"#Cypress-moment\" class=\"headerlink\" title=\"Cypress.moment()\"></a><a href=\"#section-usage\">Cypress.moment()</a></h1><p>Cypress automatically proxies <a href=\"http://momentjs.com/\" target=\"_blank\" rel=\"external\"><code>moment.js</code></a> and exposes it as <code>Cypress.moment</code>.</p>\n<p>Use <code>Cypress.moment</code> to help format or parse dates.</p>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> todaysDate = Cypress.moment().format(<span class=\"string\">\"MMM DD, YYYY\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// test that the span contains formatted text for today</span></div><div class=\"line\">cy.get(<span class=\"string\">\"span\"</span>).should(<span class=\"string\">\"contain\"</span>, <span class=\"string\">\"Order shipped on: \"</span> + todaysDate)</div></pre></td></tr></table></figure>","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<h1 id=\"Cypress-moment\"><a href=\"#Cypress-moment\" class=\"headerlink\" title=\"Cypress.moment()\"></a><a href=\"#section-usage\">Cypress.moment()</a></h1><p>Cypress automatically proxies <a href=\"http://momentjs.com/\"><code>moment.js</code></a> and exposes it as <code>Cypress.moment</code>.</p>\n<p>Use <code>Cypress.moment</code> to help format or parse dates.</p>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> todaysDate = Cypress.moment().format(<span class=\"string\">\"MMM DD, YYYY\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// test that the span contains formatted text for today</span></div><div class=\"line\">cy.get(<span class=\"string\">\"span\"</span>).should(<span class=\"string\">\"contain\"</span>, <span class=\"string\">\"Order shipped on: \"</span> + todaysDate)</div></pre></td></tr></table></figure>"},{"title":"cypress-promise","_content":"\n# [new Cypress.Promise( *function* )](#section-usage)\n\nCypress automatically proxies [`Bluebird`](https://github.com/petkaantonov/bluebird) and exposes it as `Cypress.Promise`.\n\nInstantiate a new bluebird promise.\n\n***\n\n# Usage\n\nUse `Cypress.Promise` to create promises. Cypress is promise aware so if you return a promise from inside of commands like [`cy.then`](https://on.cypress.io/api/then), Cypress will not continue until those promises resolve.\n\n## Basic Promise\n\n```javascript\ncy.get(\"button\").then(function($button){\n  return new Cypress.Promise(function(resolve, reject){\n    // do something custom here\n  })\n})\n```\n\n***\n\n## Waiting for Promises\n\n```javascript\nit(\"waits for promises to resolve\", function(){\n  var waited = false\n\n  function waitOneSecond(){\n    // return a promise that resolves after 1 second\n    return new Cypress.Promise(function(resolve, reject){\n      setTimeout(function(){\n        // set waited to true\n        waited = true\n\n        // resolve with 'foo' string\n        resolve('foo')\n      }, 1000)\n    })\n  }\n\n  cy\n    .then(function(){\n      // return a promise to cy.then() that\n      // is awaited until it resolves\n      return waitOneSecond().then(function(str){\n        expect(str).to.eq('foo')\n        expect(waited).to.be.true\n      })\n    })\n})\n```","source":"api/utilities/promise.md","raw":"title: cypress-promise\n---\n\n# [new Cypress.Promise( *function* )](#section-usage)\n\nCypress automatically proxies [`Bluebird`](https://github.com/petkaantonov/bluebird) and exposes it as `Cypress.Promise`.\n\nInstantiate a new bluebird promise.\n\n***\n\n# Usage\n\nUse `Cypress.Promise` to create promises. Cypress is promise aware so if you return a promise from inside of commands like [`cy.then`](https://on.cypress.io/api/then), Cypress will not continue until those promises resolve.\n\n## Basic Promise\n\n```javascript\ncy.get(\"button\").then(function($button){\n  return new Cypress.Promise(function(resolve, reject){\n    // do something custom here\n  })\n})\n```\n\n***\n\n## Waiting for Promises\n\n```javascript\nit(\"waits for promises to resolve\", function(){\n  var waited = false\n\n  function waitOneSecond(){\n    // return a promise that resolves after 1 second\n    return new Cypress.Promise(function(resolve, reject){\n      setTimeout(function(){\n        // set waited to true\n        waited = true\n\n        // resolve with 'foo' string\n        resolve('foo')\n      }, 1000)\n    })\n  }\n\n  cy\n    .then(function(){\n      // return a promise to cy.then() that\n      // is awaited until it resolves\n      return waitOneSecond().then(function(str){\n        expect(str).to.eq('foo')\n        expect(waited).to.be.true\n      })\n    })\n})\n```","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/utilities/promise.html","comments":1,"layout":"page","_id":"cj1pc2g97002ek1g8lhkjouot","content":"<h1 id=\"new-Cypress-Promise-function\"><a href=\"#new-Cypress-Promise-function\" class=\"headerlink\" title=\"new Cypress.Promise( function )\"></a><a href=\"#section-usage\">new Cypress.Promise( <em>function</em> )</a></h1><p>Cypress automatically proxies <a href=\"https://github.com/petkaantonov/bluebird\" target=\"_blank\" rel=\"external\"><code>Bluebird</code></a> and exposes it as <code>Cypress.Promise</code>.</p>\n<p>Instantiate a new bluebird promise.</p>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><p>Use <code>Cypress.Promise</code> to create promises. Cypress is promise aware so if you return a promise from inside of commands like <a href=\"https://on.cypress.io/api/then\" target=\"_blank\" rel=\"external\"><code>cy.then</code></a>, Cypress will not continue until those promises resolve.</p>\n<h2 id=\"Basic-Promise\"><a href=\"#Basic-Promise\" class=\"headerlink\" title=\"Basic Promise\"></a>Basic Promise</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$button</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Cypress.Promise(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// do something custom here</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Waiting-for-Promises\"><a href=\"#Waiting-for-Promises\" class=\"headerlink\" title=\"Waiting for Promises\"></a>Waiting for Promises</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(<span class=\"string\">\"waits for promises to resolve\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> waited = <span class=\"literal\">false</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">waitOneSecond</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// return a promise that resolves after 1 second</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Cypress.Promise(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</div><div class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">// set waited to true</span></div><div class=\"line\">        waited = <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// resolve with 'foo' string</span></div><div class=\"line\">        resolve(<span class=\"string\">'foo'</span>)</div><div class=\"line\">      &#125;, <span class=\"number\">1000</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  cy</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"comment\">// return a promise to cy.then() that</span></div><div class=\"line\">      <span class=\"comment\">// is awaited until it resolves</span></div><div class=\"line\">      <span class=\"keyword\">return</span> waitOneSecond().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>)</span>&#123;</div><div class=\"line\">        expect(str).to.eq(<span class=\"string\">'foo'</span>)</div><div class=\"line\">        expect(waited).to.be.true</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<h1 id=\"new-Cypress-Promise-function\"><a href=\"#new-Cypress-Promise-function\" class=\"headerlink\" title=\"new Cypress.Promise( function )\"></a><a href=\"#section-usage\">new Cypress.Promise( <em>function</em> )</a></h1><p>Cypress automatically proxies <a href=\"https://github.com/petkaantonov/bluebird\"><code>Bluebird</code></a> and exposes it as <code>Cypress.Promise</code>.</p>\n<p>Instantiate a new bluebird promise.</p>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><p>Use <code>Cypress.Promise</code> to create promises. Cypress is promise aware so if you return a promise from inside of commands like <a href=\"https://on.cypress.io/api/then\"><code>cy.then</code></a>, Cypress will not continue until those promises resolve.</p>\n<h2 id=\"Basic-Promise\"><a href=\"#Basic-Promise\" class=\"headerlink\" title=\"Basic Promise\"></a>Basic Promise</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$button</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Cypress.Promise(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// do something custom here</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Waiting-for-Promises\"><a href=\"#Waiting-for-Promises\" class=\"headerlink\" title=\"Waiting for Promises\"></a>Waiting for Promises</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(<span class=\"string\">\"waits for promises to resolve\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> waited = <span class=\"literal\">false</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">waitOneSecond</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// return a promise that resolves after 1 second</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Cypress.Promise(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</div><div class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">// set waited to true</span></div><div class=\"line\">        waited = <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// resolve with 'foo' string</span></div><div class=\"line\">        resolve(<span class=\"string\">'foo'</span>)</div><div class=\"line\">      &#125;, <span class=\"number\">1000</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  cy</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"comment\">// return a promise to cy.then() that</span></div><div class=\"line\">      <span class=\"comment\">// is awaited until it resolves</span></div><div class=\"line\">      <span class=\"keyword\">return</span> waitOneSecond().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>)</span>&#123;</div><div class=\"line\">        expect(str).to.eq(<span class=\"string\">'foo'</span>)</div><div class=\"line\">        expect(waited).to.be.true</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>"},{"title":"api","_content":"\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Read through our [Guides](https://on.cypress.io/guides/guides) first.\",\n  \"title\": \"New to Cypress?\"\n}\n[/block]\n\n# Commands\n\nCommands drive your tests in the browser like a real user would. They let you perform actions like typing, clicking, xhr requests, and can also assert things like \"my button should be disabled\".\n\n| Navigation | |\n| -------------------- | -- |\n| [go](https://on.cypress.io/api/go) | Navigate back or forward to previous or next URL in the browser's history |\n| [reload](https://on.cypress.io/api/reload) | Reload the page |\n| [visit](https://on.cypress.io/api/visit) | Visit a remote url |\n\n| Querying | |\n| -------------------- | -- |\n| [contains](https://on.cypress.io/api/contains) | Get a DOM element that contains specific text |\n| [get](https://on.cypress.io/api/get) | Get DOM element(s) by selector or alias |\n| [root](https://on.cypress.io/api/root) | Set the root scope to the current subject |\n| [within](https://on.cypress.io/api/within) | Set the root scope to the current subject |\n\n| Assertions | |\n| -------------------- | -- |\n| [and](https://on.cypress.io/api/and) | Chain multiple assertions together |\n| [should](https://on.cypress.io/api/should) | Make an assertion about the current subject |\n\n| DOM Traversal | |\n| -------------------- | -- |\n| [children](https://on.cypress.io/api/children) | Get the children DOM elements of the DOM elements |\n| [closest](https://on.cypress.io/api/closest) | Get the closest ancestor DOM element |\n| [eq](https://on.cypress.io/api/eq) | Get a DOM element at a specific index |\n| [filter](https://on.cypress.io/api/filter) | Filter DOM elements by a selector |\n| [find](https://on.cypress.io/api/find) | Get descendants of DOM elements |\n| [first](https://on.cypress.io/api/first) | Get the first DOM element within a set of DOM elements |\n| [last](https://on.cypress.io/api/last) | Get the last DOM element |\n| [next](https://on.cypress.io/api/next) | Get the next sibling of the DOM elements |\n| [nextAll](https://on.cypress.io/api/nextall) | Get all following siblings of the DOM elements |\n| [nextUntil](https://on.cypress.io/api/nextuntil) | Get all following siblings of the DOM elements until another element |\n| [not](https://on.cypress.io/api/not) | Remove DOM elements from the set of DOM elements |\n| [parent](https://on.cypress.io/api/parent) | Get the parent DOM element of the DOM elements |\n| [parents](https://on.cypress.io/api/parents) | Get the parents DOM elements of the DOM elements |\n| [parentsUntil](https://on.cypress.io/api/parentsuntil) | Get all ancestors of the DOM elements until another element |\n| [prev](https://on.cypress.io/api/prev) | Get the previous sibling of elements |\n| [prevAll](https://on.cypress.io/api/prevall) | Get all previous siblings of the DOM elements |\n| [prevUntil](https://on.cypress.io/api/prev) | Get all previous siblings of the DOM elements until another element |\n| [siblings](https://on.cypress.io/api/siblings) | Get all siblings DOM elements of the DOM elements |\n\n| Actions | |\n| -------------------- | -- |\n| [blur](https://on.cypress.io/api/blur) | Blur a DOM element |\n| [check](https://on.cypress.io/api/check) | Select a checkbox or radio |\n| [clear](https://on.cypress.io/api/clear) | Clear a value of an input or textarea |\n| [click](https://on.cypress.io/api/click) | Click a DOM element |\n| [dblclick](https://on.cypress.io/api/dblclick) | Double-click on a DOM element |\n| [focus](https://on.cypress.io/api/focus) | Focus on a DOM element |\n| [select](https://on.cypress.io/api/select) | Select an option in a select |\n| [submit](https://on.cypress.io/api/submit) | Submit a form |\n| [type](https://on.cypress.io/api/type) | Type into a DOM element |\n| [uncheck](https://on.cypress.io/api/uncheck) | Uncheck a checkbox or radio |\n\n| Network Requests | |\n| -------------------- | -- |\n| [request](https://on.cypress.io/api/request) | Make HTTP request |\n| [route](https://on.cypress.io/api/route) | Route responses to matching requests |\n| [server](https://on.cypress.io/api/server) | Control the behavior of network requests and responses |\n\n| Connectors | |\n| -------------------- | -- |\n| [each](https://on.cypress.io/api/each) | Iterate through each item in the current subject |\n| [its](https://on.cypress.io/api/its) | Get properties on the current subject |\n| [invoke](https://on.cypress.io/api/invoke) | Invoke the function on the current subject |\n| [spread](https://on.cypress.io/api/spread) | Spread an array as individual arguments to a callback function |\n| [then](https://on.cypress.io/api/then) | Invokes a callback function with the current subject |\n\n| Location (URL) | |\n| -------------------- | -- |\n| [hash](https://on.cypress.io/api/hash) | Get the current URL hash |\n| [location](https://on.cypress.io/api/location) | Get the `window.location` |\n| [url](https://on.cypress.io/api/url) | Get the current URL |\n\n| Window | |\n| -------------------- | -- |\n| [document](https://on.cypress.io/api/document) | Get the document |\n| [title](https://on.cypress.io/api/title) | Get the title of the document |\n| [window](https://on.cypress.io/api/window) | Get global window object |\n\n| Waiting | |\n| -------------------- | -- |\n| [wait](https://on.cypress.io/api/wait) | Wait for a specific amount of time or resource to resolve |\n\n| Aliasing | |\n| -------------------- | -- |\n| [as](https://on.cypress.io/api/as) | Alias a route or DOM element for use later. |\n\n| Spies, Stubs & Clocks | |\n| -------------------- | -- |\n| [spy](https://on.cypress.io/api/spy) | Wrap a method in a spy |\n| [stub](https://on.cypress.io/api/stub) | Create a stub and/or replace a function with a stub |\n| [clock](https://on.cypress.io/api/clock) | Control time in the browser |\n| [tick](https://on.cypress.io/api/tick) | Move time in the browser |\n\n| Files | |\n| -------------------- | -- |\n| [fixture](https://on.cypress.io/api/fixture) | Load a fixture file to represent data |\n| [readFile](https://on.cypress.io/api/readfile) | Read a file's contents |\n| [writeFile](https://on.cypress.io/api/writefile) | Write to a file with the specified contents |\n\n| Viewport | |\n| -------------------- | -- |\n| [viewport](https://on.cypress.io/api/viewport) | Change the screen size of your application |\n\n| Local Storage | |\n| -------------------- | -- |\n| [clearLocalStorage](https://on.cypress.io/api/clearlocalstorage) | Clear all data in local storage |\n\n| Cookies | |\n| -------------------- | -- |\n| [clearCookie](https://on.cypress.io/api/clearcookie) | Clear a browser cookie |\n| [clearCookies](https://on.cypress.io/api/clearcookies) | Clear all browser cookies |\n| [getCookie](https://on.cypress.io/api/getcookie) | Get a browser cookie |\n| [getCookies](https://on.cypress.io/api/getcookies) | Get all browser cookies |\n| [setCookie](https://on.cypress.io/api/setcookie) | Set a browser cookie |\n\n| Debugging | |\n| -------------------- | -- |\n| [debug](https://on.cypress.io/api/debug) | Set a `debugger` |\n| [pause](https://on.cypress.io/api/pause) | Pause a command |\n\n| Misc | |\n| -------------------- | -- |\n| [end](https://on.cypress.io/api/end) | End the command chain |\n| [exec](https://on.cypress.io/api/exec) | Execute a system command |\n| [focused](https://on.cypress.io/api/focused) | Get the DOM element that is focused |\n| [log](https://on.cypress.io/api/log) | Print a message to the Command Log |\n| [screenshot](https://on.cypress.io/api/screenshot) | Take a screenshot |\n| [wrap](https://on.cypress.io/api/wrap) | Wrap an object |\n\n# Utilities\n\nUtilities give you access to methods from other commonly used libraries.\n\n| Commands | |\n| -------------------- | -- |\n| [_](https://on.cypress.io/api/cypress-underscore) | Call any Underscore method |\n| [$](https://on.cypress.io/api/cypress-jquery) | Call any jQuery method |\n| [moment](https://on.cypress.io/api/cypress-moment) | Format or parse dates using moment methods |\n| [Blob](https://on.cypress.io/api/cypress-blob) | Convert base64 strings to blob objects |\n| [Promise](https://on.cypress.io/api/cypress-promise) | Instantiate a bluebird promise |\n\n# Cypress API\n\nThe Cypress API enables you to configure the behavior of how Cypress works internally. You can do things like access Environment Variables, change configuration, create custom commands, and more.\n\n| Commands | |\n| -------------------- | -- |\n| [config](https://on.cypress.io/api/config) | get and set configuration options |\n| [env](https://on.cypress.io/api/env) | get and set environment variables |\n| [Commands](https://on.cypress.io/api/commands) | Commands API |\n| [Cookies](https://on.cypress.io/api/cookies) | Manage your application's cookies |\n| [Dom](https://on.cypress.io/api/dom) | Find out whether an element is hidden |\n| [Server](https://on.cypress.io/api/api-server) | Permanently override default server options |\n","source":"api/welcome/api.md","raw":"title: api\n---\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Read through our [Guides](https://on.cypress.io/guides/guides) first.\",\n  \"title\": \"New to Cypress?\"\n}\n[/block]\n\n# Commands\n\nCommands drive your tests in the browser like a real user would. They let you perform actions like typing, clicking, xhr requests, and can also assert things like \"my button should be disabled\".\n\n| Navigation | |\n| -------------------- | -- |\n| [go](https://on.cypress.io/api/go) | Navigate back or forward to previous or next URL in the browser's history |\n| [reload](https://on.cypress.io/api/reload) | Reload the page |\n| [visit](https://on.cypress.io/api/visit) | Visit a remote url |\n\n| Querying | |\n| -------------------- | -- |\n| [contains](https://on.cypress.io/api/contains) | Get a DOM element that contains specific text |\n| [get](https://on.cypress.io/api/get) | Get DOM element(s) by selector or alias |\n| [root](https://on.cypress.io/api/root) | Set the root scope to the current subject |\n| [within](https://on.cypress.io/api/within) | Set the root scope to the current subject |\n\n| Assertions | |\n| -------------------- | -- |\n| [and](https://on.cypress.io/api/and) | Chain multiple assertions together |\n| [should](https://on.cypress.io/api/should) | Make an assertion about the current subject |\n\n| DOM Traversal | |\n| -------------------- | -- |\n| [children](https://on.cypress.io/api/children) | Get the children DOM elements of the DOM elements |\n| [closest](https://on.cypress.io/api/closest) | Get the closest ancestor DOM element |\n| [eq](https://on.cypress.io/api/eq) | Get a DOM element at a specific index |\n| [filter](https://on.cypress.io/api/filter) | Filter DOM elements by a selector |\n| [find](https://on.cypress.io/api/find) | Get descendants of DOM elements |\n| [first](https://on.cypress.io/api/first) | Get the first DOM element within a set of DOM elements |\n| [last](https://on.cypress.io/api/last) | Get the last DOM element |\n| [next](https://on.cypress.io/api/next) | Get the next sibling of the DOM elements |\n| [nextAll](https://on.cypress.io/api/nextall) | Get all following siblings of the DOM elements |\n| [nextUntil](https://on.cypress.io/api/nextuntil) | Get all following siblings of the DOM elements until another element |\n| [not](https://on.cypress.io/api/not) | Remove DOM elements from the set of DOM elements |\n| [parent](https://on.cypress.io/api/parent) | Get the parent DOM element of the DOM elements |\n| [parents](https://on.cypress.io/api/parents) | Get the parents DOM elements of the DOM elements |\n| [parentsUntil](https://on.cypress.io/api/parentsuntil) | Get all ancestors of the DOM elements until another element |\n| [prev](https://on.cypress.io/api/prev) | Get the previous sibling of elements |\n| [prevAll](https://on.cypress.io/api/prevall) | Get all previous siblings of the DOM elements |\n| [prevUntil](https://on.cypress.io/api/prev) | Get all previous siblings of the DOM elements until another element |\n| [siblings](https://on.cypress.io/api/siblings) | Get all siblings DOM elements of the DOM elements |\n\n| Actions | |\n| -------------------- | -- |\n| [blur](https://on.cypress.io/api/blur) | Blur a DOM element |\n| [check](https://on.cypress.io/api/check) | Select a checkbox or radio |\n| [clear](https://on.cypress.io/api/clear) | Clear a value of an input or textarea |\n| [click](https://on.cypress.io/api/click) | Click a DOM element |\n| [dblclick](https://on.cypress.io/api/dblclick) | Double-click on a DOM element |\n| [focus](https://on.cypress.io/api/focus) | Focus on a DOM element |\n| [select](https://on.cypress.io/api/select) | Select an option in a select |\n| [submit](https://on.cypress.io/api/submit) | Submit a form |\n| [type](https://on.cypress.io/api/type) | Type into a DOM element |\n| [uncheck](https://on.cypress.io/api/uncheck) | Uncheck a checkbox or radio |\n\n| Network Requests | |\n| -------------------- | -- |\n| [request](https://on.cypress.io/api/request) | Make HTTP request |\n| [route](https://on.cypress.io/api/route) | Route responses to matching requests |\n| [server](https://on.cypress.io/api/server) | Control the behavior of network requests and responses |\n\n| Connectors | |\n| -------------------- | -- |\n| [each](https://on.cypress.io/api/each) | Iterate through each item in the current subject |\n| [its](https://on.cypress.io/api/its) | Get properties on the current subject |\n| [invoke](https://on.cypress.io/api/invoke) | Invoke the function on the current subject |\n| [spread](https://on.cypress.io/api/spread) | Spread an array as individual arguments to a callback function |\n| [then](https://on.cypress.io/api/then) | Invokes a callback function with the current subject |\n\n| Location (URL) | |\n| -------------------- | -- |\n| [hash](https://on.cypress.io/api/hash) | Get the current URL hash |\n| [location](https://on.cypress.io/api/location) | Get the `window.location` |\n| [url](https://on.cypress.io/api/url) | Get the current URL |\n\n| Window | |\n| -------------------- | -- |\n| [document](https://on.cypress.io/api/document) | Get the document |\n| [title](https://on.cypress.io/api/title) | Get the title of the document |\n| [window](https://on.cypress.io/api/window) | Get global window object |\n\n| Waiting | |\n| -------------------- | -- |\n| [wait](https://on.cypress.io/api/wait) | Wait for a specific amount of time or resource to resolve |\n\n| Aliasing | |\n| -------------------- | -- |\n| [as](https://on.cypress.io/api/as) | Alias a route or DOM element for use later. |\n\n| Spies, Stubs & Clocks | |\n| -------------------- | -- |\n| [spy](https://on.cypress.io/api/spy) | Wrap a method in a spy |\n| [stub](https://on.cypress.io/api/stub) | Create a stub and/or replace a function with a stub |\n| [clock](https://on.cypress.io/api/clock) | Control time in the browser |\n| [tick](https://on.cypress.io/api/tick) | Move time in the browser |\n\n| Files | |\n| -------------------- | -- |\n| [fixture](https://on.cypress.io/api/fixture) | Load a fixture file to represent data |\n| [readFile](https://on.cypress.io/api/readfile) | Read a file's contents |\n| [writeFile](https://on.cypress.io/api/writefile) | Write to a file with the specified contents |\n\n| Viewport | |\n| -------------------- | -- |\n| [viewport](https://on.cypress.io/api/viewport) | Change the screen size of your application |\n\n| Local Storage | |\n| -------------------- | -- |\n| [clearLocalStorage](https://on.cypress.io/api/clearlocalstorage) | Clear all data in local storage |\n\n| Cookies | |\n| -------------------- | -- |\n| [clearCookie](https://on.cypress.io/api/clearcookie) | Clear a browser cookie |\n| [clearCookies](https://on.cypress.io/api/clearcookies) | Clear all browser cookies |\n| [getCookie](https://on.cypress.io/api/getcookie) | Get a browser cookie |\n| [getCookies](https://on.cypress.io/api/getcookies) | Get all browser cookies |\n| [setCookie](https://on.cypress.io/api/setcookie) | Set a browser cookie |\n\n| Debugging | |\n| -------------------- | -- |\n| [debug](https://on.cypress.io/api/debug) | Set a `debugger` |\n| [pause](https://on.cypress.io/api/pause) | Pause a command |\n\n| Misc | |\n| -------------------- | -- |\n| [end](https://on.cypress.io/api/end) | End the command chain |\n| [exec](https://on.cypress.io/api/exec) | Execute a system command |\n| [focused](https://on.cypress.io/api/focused) | Get the DOM element that is focused |\n| [log](https://on.cypress.io/api/log) | Print a message to the Command Log |\n| [screenshot](https://on.cypress.io/api/screenshot) | Take a screenshot |\n| [wrap](https://on.cypress.io/api/wrap) | Wrap an object |\n\n# Utilities\n\nUtilities give you access to methods from other commonly used libraries.\n\n| Commands | |\n| -------------------- | -- |\n| [_](https://on.cypress.io/api/cypress-underscore) | Call any Underscore method |\n| [$](https://on.cypress.io/api/cypress-jquery) | Call any jQuery method |\n| [moment](https://on.cypress.io/api/cypress-moment) | Format or parse dates using moment methods |\n| [Blob](https://on.cypress.io/api/cypress-blob) | Convert base64 strings to blob objects |\n| [Promise](https://on.cypress.io/api/cypress-promise) | Instantiate a bluebird promise |\n\n# Cypress API\n\nThe Cypress API enables you to configure the behavior of how Cypress works internally. You can do things like access Environment Variables, change configuration, create custom commands, and more.\n\n| Commands | |\n| -------------------- | -- |\n| [config](https://on.cypress.io/api/config) | get and set configuration options |\n| [env](https://on.cypress.io/api/env) | get and set environment variables |\n| [Commands](https://on.cypress.io/api/commands) | Commands API |\n| [Cookies](https://on.cypress.io/api/cookies) | Manage your application's cookies |\n| [Dom](https://on.cypress.io/api/dom) | Find out whether an element is hidden |\n| [Server](https://on.cypress.io/api/api-server) | Permanently override default server options |\n","date":"2017-04-19T18:50:10.000Z","updated":"2017-04-19T18:50:10.000Z","path":"api/welcome/api.html","comments":1,"layout":"page","_id":"cj1pc2g97002fk1g8zcyseuwo","content":"<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “Read through our <a href=\"https://on.cypress.io/guides/guides\" target=\"_blank\" rel=\"external\">Guides</a> first.”,<br>  “title”: “New to Cypress?”<br>}<br>[/block]</p>\n<h1 id=\"Commands\"><a href=\"#Commands\" class=\"headerlink\" title=\"Commands\"></a>Commands</h1><p>Commands drive your tests in the browser like a real user would. They let you perform actions like typing, clicking, xhr requests, and can also assert things like “my button should be disabled”.</p>\n<table>\n<thead>\n<tr>\n<th>Navigation</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/go\" target=\"_blank\" rel=\"external\">go</a></td>\n<td>Navigate back or forward to previous or next URL in the browser’s history</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/reload\" target=\"_blank\" rel=\"external\">reload</a></td>\n<td>Reload the page</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/visit\" target=\"_blank\" rel=\"external\">visit</a></td>\n<td>Visit a remote url</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Querying</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/contains\" target=\"_blank\" rel=\"external\">contains</a></td>\n<td>Get a DOM element that contains specific text</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/get\" target=\"_blank\" rel=\"external\">get</a></td>\n<td>Get DOM element(s) by selector or alias</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/root\" target=\"_blank\" rel=\"external\">root</a></td>\n<td>Set the root scope to the current subject</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/within\" target=\"_blank\" rel=\"external\">within</a></td>\n<td>Set the root scope to the current subject</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Assertions</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/and\" target=\"_blank\" rel=\"external\">and</a></td>\n<td>Chain multiple assertions together</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/should\" target=\"_blank\" rel=\"external\">should</a></td>\n<td>Make an assertion about the current subject</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>DOM Traversal</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/children\" target=\"_blank\" rel=\"external\">children</a></td>\n<td>Get the children DOM elements of the DOM elements</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/closest\" target=\"_blank\" rel=\"external\">closest</a></td>\n<td>Get the closest ancestor DOM element</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/eq\" target=\"_blank\" rel=\"external\">eq</a></td>\n<td>Get a DOM element at a specific index</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/filter\" target=\"_blank\" rel=\"external\">filter</a></td>\n<td>Filter DOM elements by a selector</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/find\" target=\"_blank\" rel=\"external\">find</a></td>\n<td>Get descendants of DOM elements</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/first\" target=\"_blank\" rel=\"external\">first</a></td>\n<td>Get the first DOM element within a set of DOM elements</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/last\" target=\"_blank\" rel=\"external\">last</a></td>\n<td>Get the last DOM element</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/next\" target=\"_blank\" rel=\"external\">next</a></td>\n<td>Get the next sibling of the DOM elements</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/nextall\" target=\"_blank\" rel=\"external\">nextAll</a></td>\n<td>Get all following siblings of the DOM elements</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/nextuntil\" target=\"_blank\" rel=\"external\">nextUntil</a></td>\n<td>Get all following siblings of the DOM elements until another element</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/not\" target=\"_blank\" rel=\"external\">not</a></td>\n<td>Remove DOM elements from the set of DOM elements</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/parent\" target=\"_blank\" rel=\"external\">parent</a></td>\n<td>Get the parent DOM element of the DOM elements</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/parents\" target=\"_blank\" rel=\"external\">parents</a></td>\n<td>Get the parents DOM elements of the DOM elements</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/parentsuntil\" target=\"_blank\" rel=\"external\">parentsUntil</a></td>\n<td>Get all ancestors of the DOM elements until another element</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/prev\" target=\"_blank\" rel=\"external\">prev</a></td>\n<td>Get the previous sibling of elements</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/prevall\" target=\"_blank\" rel=\"external\">prevAll</a></td>\n<td>Get all previous siblings of the DOM elements</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/prev\" target=\"_blank\" rel=\"external\">prevUntil</a></td>\n<td>Get all previous siblings of the DOM elements until another element</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/siblings\" target=\"_blank\" rel=\"external\">siblings</a></td>\n<td>Get all siblings DOM elements of the DOM elements</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Actions</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/blur\" target=\"_blank\" rel=\"external\">blur</a></td>\n<td>Blur a DOM element</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/check\" target=\"_blank\" rel=\"external\">check</a></td>\n<td>Select a checkbox or radio</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/clear\" target=\"_blank\" rel=\"external\">clear</a></td>\n<td>Clear a value of an input or textarea</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/click\" target=\"_blank\" rel=\"external\">click</a></td>\n<td>Click a DOM element</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/dblclick\" target=\"_blank\" rel=\"external\">dblclick</a></td>\n<td>Double-click on a DOM element</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/focus\" target=\"_blank\" rel=\"external\">focus</a></td>\n<td>Focus on a DOM element</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/select\" target=\"_blank\" rel=\"external\">select</a></td>\n<td>Select an option in a select</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/submit\" target=\"_blank\" rel=\"external\">submit</a></td>\n<td>Submit a form</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/type\" target=\"_blank\" rel=\"external\">type</a></td>\n<td>Type into a DOM element</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/uncheck\" target=\"_blank\" rel=\"external\">uncheck</a></td>\n<td>Uncheck a checkbox or radio</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Network Requests</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/request\" target=\"_blank\" rel=\"external\">request</a></td>\n<td>Make HTTP request</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/route\" target=\"_blank\" rel=\"external\">route</a></td>\n<td>Route responses to matching requests</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/server\" target=\"_blank\" rel=\"external\">server</a></td>\n<td>Control the behavior of network requests and responses</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Connectors</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/each\" target=\"_blank\" rel=\"external\">each</a></td>\n<td>Iterate through each item in the current subject</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/its\" target=\"_blank\" rel=\"external\">its</a></td>\n<td>Get properties on the current subject</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/invoke\" target=\"_blank\" rel=\"external\">invoke</a></td>\n<td>Invoke the function on the current subject</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/spread\" target=\"_blank\" rel=\"external\">spread</a></td>\n<td>Spread an array as individual arguments to a callback function</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/then\" target=\"_blank\" rel=\"external\">then</a></td>\n<td>Invokes a callback function with the current subject</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Location (URL)</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/hash\" target=\"_blank\" rel=\"external\">hash</a></td>\n<td>Get the current URL hash</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/location\" target=\"_blank\" rel=\"external\">location</a></td>\n<td>Get the <code>window.location</code></td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/url\" target=\"_blank\" rel=\"external\">url</a></td>\n<td>Get the current URL</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Window</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/document\" target=\"_blank\" rel=\"external\">document</a></td>\n<td>Get the document</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/title\" target=\"_blank\" rel=\"external\">title</a></td>\n<td>Get the title of the document</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/window\" target=\"_blank\" rel=\"external\">window</a></td>\n<td>Get global window object</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Waiting</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/wait\" target=\"_blank\" rel=\"external\">wait</a></td>\n<td>Wait for a specific amount of time or resource to resolve</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Aliasing</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/as\" target=\"_blank\" rel=\"external\">as</a></td>\n<td>Alias a route or DOM element for use later.</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Spies, Stubs &amp; Clocks</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/spy\" target=\"_blank\" rel=\"external\">spy</a></td>\n<td>Wrap a method in a spy</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/stub\" target=\"_blank\" rel=\"external\">stub</a></td>\n<td>Create a stub and/or replace a function with a stub</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/clock\" target=\"_blank\" rel=\"external\">clock</a></td>\n<td>Control time in the browser</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/tick\" target=\"_blank\" rel=\"external\">tick</a></td>\n<td>Move time in the browser</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Files</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/fixture\" target=\"_blank\" rel=\"external\">fixture</a></td>\n<td>Load a fixture file to represent data</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/readfile\" target=\"_blank\" rel=\"external\">readFile</a></td>\n<td>Read a file’s contents</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/writefile\" target=\"_blank\" rel=\"external\">writeFile</a></td>\n<td>Write to a file with the specified contents</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Viewport</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/viewport\" target=\"_blank\" rel=\"external\">viewport</a></td>\n<td>Change the screen size of your application</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Local Storage</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/clearlocalstorage\" target=\"_blank\" rel=\"external\">clearLocalStorage</a></td>\n<td>Clear all data in local storage</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Cookies</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/clearcookie\" target=\"_blank\" rel=\"external\">clearCookie</a></td>\n<td>Clear a browser cookie</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/clearcookies\" target=\"_blank\" rel=\"external\">clearCookies</a></td>\n<td>Clear all browser cookies</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/getcookie\" target=\"_blank\" rel=\"external\">getCookie</a></td>\n<td>Get a browser cookie</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/getcookies\" target=\"_blank\" rel=\"external\">getCookies</a></td>\n<td>Get all browser cookies</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/setcookie\" target=\"_blank\" rel=\"external\">setCookie</a></td>\n<td>Set a browser cookie</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Debugging</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/debug\" target=\"_blank\" rel=\"external\">debug</a></td>\n<td>Set a <code>debugger</code></td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/pause\" target=\"_blank\" rel=\"external\">pause</a></td>\n<td>Pause a command</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Misc</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/end\" target=\"_blank\" rel=\"external\">end</a></td>\n<td>End the command chain</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/exec\" target=\"_blank\" rel=\"external\">exec</a></td>\n<td>Execute a system command</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/focused\" target=\"_blank\" rel=\"external\">focused</a></td>\n<td>Get the DOM element that is focused</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/log\" target=\"_blank\" rel=\"external\">log</a></td>\n<td>Print a message to the Command Log</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/screenshot\" target=\"_blank\" rel=\"external\">screenshot</a></td>\n<td>Take a screenshot</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/wrap\" target=\"_blank\" rel=\"external\">wrap</a></td>\n<td>Wrap an object</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"Utilities\"><a href=\"#Utilities\" class=\"headerlink\" title=\"Utilities\"></a>Utilities</h1><p>Utilities give you access to methods from other commonly used libraries.</p>\n<table>\n<thead>\n<tr>\n<th>Commands</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/cypress-underscore\" target=\"_blank\" rel=\"external\">_</a></td>\n<td>Call any Underscore method</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/cypress-jquery\" target=\"_blank\" rel=\"external\">$</a></td>\n<td>Call any jQuery method</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/cypress-moment\" target=\"_blank\" rel=\"external\">moment</a></td>\n<td>Format or parse dates using moment methods</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/cypress-blob\" target=\"_blank\" rel=\"external\">Blob</a></td>\n<td>Convert base64 strings to blob objects</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/cypress-promise\" target=\"_blank\" rel=\"external\">Promise</a></td>\n<td>Instantiate a bluebird promise</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"Cypress-API\"><a href=\"#Cypress-API\" class=\"headerlink\" title=\"Cypress API\"></a>Cypress API</h1><p>The Cypress API enables you to configure the behavior of how Cypress works internally. You can do things like access Environment Variables, change configuration, create custom commands, and more.</p>\n<table>\n<thead>\n<tr>\n<th>Commands</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/config\" target=\"_blank\" rel=\"external\">config</a></td>\n<td>get and set configuration options</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/env\" target=\"_blank\" rel=\"external\">env</a></td>\n<td>get and set environment variables</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/commands\" target=\"_blank\" rel=\"external\">Commands</a></td>\n<td>Commands API</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/cookies\" target=\"_blank\" rel=\"external\">Cookies</a></td>\n<td>Manage your application’s cookies</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/dom\" target=\"_blank\" rel=\"external\">Dom</a></td>\n<td>Find out whether an element is hidden</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/api-server\" target=\"_blank\" rel=\"external\">Server</a></td>\n<td>Permanently override default server options</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “Read through our <a href=\"https://on.cypress.io/guides/guides\">Guides</a> first.”,<br>  “title”: “New to Cypress?”<br>}<br>[/block]</p>\n<h1 id=\"Commands\"><a href=\"#Commands\" class=\"headerlink\" title=\"Commands\"></a>Commands</h1><p>Commands drive your tests in the browser like a real user would. They let you perform actions like typing, clicking, xhr requests, and can also assert things like “my button should be disabled”.</p>\n<table>\n<thead>\n<tr>\n<th>Navigation</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/go\">go</a></td>\n<td>Navigate back or forward to previous or next URL in the browser’s history</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/reload\">reload</a></td>\n<td>Reload the page</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/visit\">visit</a></td>\n<td>Visit a remote url</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Querying</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/contains\">contains</a></td>\n<td>Get a DOM element that contains specific text</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/get\">get</a></td>\n<td>Get DOM element(s) by selector or alias</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/root\">root</a></td>\n<td>Set the root scope to the current subject</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/within\">within</a></td>\n<td>Set the root scope to the current subject</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Assertions</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/and\">and</a></td>\n<td>Chain multiple assertions together</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/should\">should</a></td>\n<td>Make an assertion about the current subject</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>DOM Traversal</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/children\">children</a></td>\n<td>Get the children DOM elements of the DOM elements</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/closest\">closest</a></td>\n<td>Get the closest ancestor DOM element</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/eq\">eq</a></td>\n<td>Get a DOM element at a specific index</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/filter\">filter</a></td>\n<td>Filter DOM elements by a selector</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/find\">find</a></td>\n<td>Get descendants of DOM elements</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/first\">first</a></td>\n<td>Get the first DOM element within a set of DOM elements</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/last\">last</a></td>\n<td>Get the last DOM element</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/next\">next</a></td>\n<td>Get the next sibling of the DOM elements</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/nextall\">nextAll</a></td>\n<td>Get all following siblings of the DOM elements</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/nextuntil\">nextUntil</a></td>\n<td>Get all following siblings of the DOM elements until another element</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/not\">not</a></td>\n<td>Remove DOM elements from the set of DOM elements</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/parent\">parent</a></td>\n<td>Get the parent DOM element of the DOM elements</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/parents\">parents</a></td>\n<td>Get the parents DOM elements of the DOM elements</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/parentsuntil\">parentsUntil</a></td>\n<td>Get all ancestors of the DOM elements until another element</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/prev\">prev</a></td>\n<td>Get the previous sibling of elements</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/prevall\">prevAll</a></td>\n<td>Get all previous siblings of the DOM elements</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/prev\">prevUntil</a></td>\n<td>Get all previous siblings of the DOM elements until another element</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/siblings\">siblings</a></td>\n<td>Get all siblings DOM elements of the DOM elements</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Actions</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/blur\">blur</a></td>\n<td>Blur a DOM element</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/check\">check</a></td>\n<td>Select a checkbox or radio</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/clear\">clear</a></td>\n<td>Clear a value of an input or textarea</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/click\">click</a></td>\n<td>Click a DOM element</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/dblclick\">dblclick</a></td>\n<td>Double-click on a DOM element</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/focus\">focus</a></td>\n<td>Focus on a DOM element</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/select\">select</a></td>\n<td>Select an option in a select</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/submit\">submit</a></td>\n<td>Submit a form</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/type\">type</a></td>\n<td>Type into a DOM element</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/uncheck\">uncheck</a></td>\n<td>Uncheck a checkbox or radio</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Network Requests</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/request\">request</a></td>\n<td>Make HTTP request</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/route\">route</a></td>\n<td>Route responses to matching requests</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/server\">server</a></td>\n<td>Control the behavior of network requests and responses</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Connectors</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/each\">each</a></td>\n<td>Iterate through each item in the current subject</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/its\">its</a></td>\n<td>Get properties on the current subject</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/invoke\">invoke</a></td>\n<td>Invoke the function on the current subject</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/spread\">spread</a></td>\n<td>Spread an array as individual arguments to a callback function</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/then\">then</a></td>\n<td>Invokes a callback function with the current subject</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Location (URL)</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/hash\">hash</a></td>\n<td>Get the current URL hash</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/location\">location</a></td>\n<td>Get the <code>window.location</code></td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/url\">url</a></td>\n<td>Get the current URL</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Window</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/document\">document</a></td>\n<td>Get the document</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/title\">title</a></td>\n<td>Get the title of the document</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/window\">window</a></td>\n<td>Get global window object</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Waiting</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/wait\">wait</a></td>\n<td>Wait for a specific amount of time or resource to resolve</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Aliasing</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/as\">as</a></td>\n<td>Alias a route or DOM element for use later.</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Spies, Stubs &amp; Clocks</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/spy\">spy</a></td>\n<td>Wrap a method in a spy</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/stub\">stub</a></td>\n<td>Create a stub and/or replace a function with a stub</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/clock\">clock</a></td>\n<td>Control time in the browser</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/tick\">tick</a></td>\n<td>Move time in the browser</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Files</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/fixture\">fixture</a></td>\n<td>Load a fixture file to represent data</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/readfile\">readFile</a></td>\n<td>Read a file’s contents</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/writefile\">writeFile</a></td>\n<td>Write to a file with the specified contents</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Viewport</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/viewport\">viewport</a></td>\n<td>Change the screen size of your application</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Local Storage</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/clearlocalstorage\">clearLocalStorage</a></td>\n<td>Clear all data in local storage</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Cookies</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/clearcookie\">clearCookie</a></td>\n<td>Clear a browser cookie</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/clearcookies\">clearCookies</a></td>\n<td>Clear all browser cookies</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/getcookie\">getCookie</a></td>\n<td>Get a browser cookie</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/getcookies\">getCookies</a></td>\n<td>Get all browser cookies</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/setcookie\">setCookie</a></td>\n<td>Set a browser cookie</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Debugging</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/debug\">debug</a></td>\n<td>Set a <code>debugger</code></td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/pause\">pause</a></td>\n<td>Pause a command</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Misc</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/end\">end</a></td>\n<td>End the command chain</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/exec\">exec</a></td>\n<td>Execute a system command</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/focused\">focused</a></td>\n<td>Get the DOM element that is focused</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/log\">log</a></td>\n<td>Print a message to the Command Log</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/screenshot\">screenshot</a></td>\n<td>Take a screenshot</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/wrap\">wrap</a></td>\n<td>Wrap an object</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"Utilities\"><a href=\"#Utilities\" class=\"headerlink\" title=\"Utilities\"></a>Utilities</h1><p>Utilities give you access to methods from other commonly used libraries.</p>\n<table>\n<thead>\n<tr>\n<th>Commands</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/cypress-underscore\">_</a></td>\n<td>Call any Underscore method</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/cypress-jquery\">$</a></td>\n<td>Call any jQuery method</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/cypress-moment\">moment</a></td>\n<td>Format or parse dates using moment methods</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/cypress-blob\">Blob</a></td>\n<td>Convert base64 strings to blob objects</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/cypress-promise\">Promise</a></td>\n<td>Instantiate a bluebird promise</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"Cypress-API\"><a href=\"#Cypress-API\" class=\"headerlink\" title=\"Cypress API\"></a>Cypress API</h1><p>The Cypress API enables you to configure the behavior of how Cypress works internally. You can do things like access Environment Variables, change configuration, create custom commands, and more.</p>\n<table>\n<thead>\n<tr>\n<th>Commands</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/api/config\">config</a></td>\n<td>get and set configuration options</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/env\">env</a></td>\n<td>get and set environment variables</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/commands\">Commands</a></td>\n<td>Commands API</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/cookies\">Cookies</a></td>\n<td>Manage your application’s cookies</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/dom\">Dom</a></td>\n<td>Find out whether an element is hidden</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/api/api-server\">Server</a></td>\n<td>Permanently override default server options</td>\n</tr>\n</tbody>\n</table>\n"},{"_content":"","source":"api/commands/server.md","raw":"","date":"2017-04-19T18:50:48.000Z","updated":"2017-04-19T18:50:48.000Z","path":"api/commands/server.html","title":"","comments":1,"layout":"page","_id":"cj1pc3ifp0000n9g8j9gv1xqy","content":"","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":""},{"title":"prevuntil","_content":"\nGet all previous siblings of each DOM element in the set of matched DOM elements up to, but not including, the element matched by the selector\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.prevUntil` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#timeouts) |\n\n***\n\n# [cy.prevUntil( *selector* )](#usage)\n\nGet all of the previous siblings of the elements until the selector.\n\n***\n\n# [cy.prevUntil( *selector*, *filter )](#filter-usage)\n\nWhen a filter is provided, it retrieves all of the previous siblings up until the selector only if it matches that filter.\n\n***\n\n# [cy.prevUntil( *element* )](#element-usage)\n\nGet all of the previous siblings of the elements until the DOM node or jQuery object.\n\n***\n\n# [cy.prevUntil( *element*, *filter )](#element-filter-usage)\n\nWhen a filter is provided, it retrieves all of the previous siblings up until the DOM node or jQuery object only if it matches that filter.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.prevUntil`.\n\n**cy.prevUntil( *selector*, *options* )**\n**cy.prevUntil( *selector*, *filter*, *options* )**\n**cy.prevUntil( *element*, *options* )**\n**cy.prevUntil( *element*, *filter*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#timeouts) | Total time to retry getting the element\n\n***\n\n# Usage\n\n## Find all of the element's siblings before `#nuts` until `#veggies`\n\n```html\n<ul>\n  <li id=\"fruits\" class=\"header\">Fruits</li>\n  <li>apples</li>\n  <li>oranges</li>\n  <li>bananas</li>\n  <li id=\"veggies\" class=\"header\">Vegetables</li>\n  <li>cucumbers</li>\n  <li>carrots</li>\n  <li>corn</li>\n  <li id=\"nuts\" class=\"header\">Nuts</li>\n  <li>walnuts</li>\n  <li>cashews</li>\n  <li>almonds</li>\n</ul>\n```\n\n```javascript\n//returns [<li>cucumbers</li>, <li>carrots</li>, <li>corn</li>]\ncy.get(\"#nuts\").nextUntil(\"#veggies\")\n```\n\n***\n\n# Command Log\n\n## Find all of the element's siblings before `#nuts` until `#veggies`\n\n```javascript\ncy.get(\"#nuts\").nextUntil(\"#veggies\")\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"560\" alt=\"screen shot 2017-03-23 at 2 45 30 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24264621/69ed829c-0fd7-11e7-934d-c11157c36aca.png\">\n\nWhen clicking on `prevUntil` within the command log, the console outputs the following:\n\n<img width=\"560\" alt=\"screen shot 2017-03-23 at 2 45 36 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24264632/7743f57a-0fd7-11e7-99f8-c148acd17459.png\">\n\n***\n\n# Related\n\n- [prev](https://on.cypress.io/api/prev)\n- [prevAll](https://on.cypress.io/api/prevall)\n- [parentsUntil](https://on.cypress.io/api/parentsuntil)\n- [nextUntil](https://on.cypress.io/api/nextuntil)\n","source":"api/commands/prevuntil.md","raw":"title: prevuntil\n---\n\nGet all previous siblings of each DOM element in the set of matched DOM elements up to, but not including, the element matched by the selector\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.prevUntil` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#timeouts) |\n\n***\n\n# [cy.prevUntil( *selector* )](#usage)\n\nGet all of the previous siblings of the elements until the selector.\n\n***\n\n# [cy.prevUntil( *selector*, *filter )](#filter-usage)\n\nWhen a filter is provided, it retrieves all of the previous siblings up until the selector only if it matches that filter.\n\n***\n\n# [cy.prevUntil( *element* )](#element-usage)\n\nGet all of the previous siblings of the elements until the DOM node or jQuery object.\n\n***\n\n# [cy.prevUntil( *element*, *filter )](#element-filter-usage)\n\nWhen a filter is provided, it retrieves all of the previous siblings up until the DOM node or jQuery object only if it matches that filter.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.prevUntil`.\n\n**cy.prevUntil( *selector*, *options* )**\n**cy.prevUntil( *selector*, *filter*, *options* )**\n**cy.prevUntil( *element*, *options* )**\n**cy.prevUntil( *element*, *filter*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#timeouts) | Total time to retry getting the element\n\n***\n\n# Usage\n\n## Find all of the element's siblings before `#nuts` until `#veggies`\n\n```html\n<ul>\n  <li id=\"fruits\" class=\"header\">Fruits</li>\n  <li>apples</li>\n  <li>oranges</li>\n  <li>bananas</li>\n  <li id=\"veggies\" class=\"header\">Vegetables</li>\n  <li>cucumbers</li>\n  <li>carrots</li>\n  <li>corn</li>\n  <li id=\"nuts\" class=\"header\">Nuts</li>\n  <li>walnuts</li>\n  <li>cashews</li>\n  <li>almonds</li>\n</ul>\n```\n\n```javascript\n//returns [<li>cucumbers</li>, <li>carrots</li>, <li>corn</li>]\ncy.get(\"#nuts\").nextUntil(\"#veggies\")\n```\n\n***\n\n# Command Log\n\n## Find all of the element's siblings before `#nuts` until `#veggies`\n\n```javascript\ncy.get(\"#nuts\").nextUntil(\"#veggies\")\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"560\" alt=\"screen shot 2017-03-23 at 2 45 30 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24264621/69ed829c-0fd7-11e7-934d-c11157c36aca.png\">\n\nWhen clicking on `prevUntil` within the command log, the console outputs the following:\n\n<img width=\"560\" alt=\"screen shot 2017-03-23 at 2 45 36 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24264632/7743f57a-0fd7-11e7-99f8-c148acd17459.png\">\n\n***\n\n# Related\n\n- [prev](https://on.cypress.io/api/prev)\n- [prevAll](https://on.cypress.io/api/prevall)\n- [parentsUntil](https://on.cypress.io/api/parentsuntil)\n- [nextUntil](https://on.cypress.io/api/nextuntil)\n","date":"2017-04-19T18:50:48.000Z","updated":"2017-04-19T18:50:48.000Z","path":"api/commands/prevuntil.html","comments":1,"layout":"page","_id":"cj1pc3ifv0001n9g8bqvi8nt7","content":"<p>Get all previous siblings of each DOM element in the set of matched DOM elements up to, but not including, the element matched by the selector</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.prevUntil</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-prevUntil-selector\"><a href=\"#cy-prevUntil-selector\" class=\"headerlink\" title=\"cy.prevUntil( selector )\"></a><a href=\"#usage\">cy.prevUntil( <em>selector</em> )</a></h1><p>Get all of the previous siblings of the elements until the selector.</p>\n<hr>\n<h1 id=\"cy-prevUntil-selector-filter\"><a href=\"#cy-prevUntil-selector-filter\" class=\"headerlink\" title=\"cy.prevUntil( selector, *filter )\"></a><a href=\"#filter-usage\">cy.prevUntil( <em>selector</em>, *filter )</a></h1><p>When a filter is provided, it retrieves all of the previous siblings up until the selector only if it matches that filter.</p>\n<hr>\n<h1 id=\"cy-prevUntil-element\"><a href=\"#cy-prevUntil-element\" class=\"headerlink\" title=\"cy.prevUntil( element )\"></a><a href=\"#element-usage\">cy.prevUntil( <em>element</em> )</a></h1><p>Get all of the previous siblings of the elements until the DOM node or jQuery object.</p>\n<hr>\n<h1 id=\"cy-prevUntil-element-filter\"><a href=\"#cy-prevUntil-element-filter\" class=\"headerlink\" title=\"cy.prevUntil( element, *filter )\"></a><a href=\"#element-filter-usage\">cy.prevUntil( <em>element</em>, *filter )</a></h1><p>When a filter is provided, it retrieves all of the previous siblings up until the DOM node or jQuery object only if it matches that filter.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.prevUntil</code>.</p>\n<p><strong>cy.prevUntil( <em>selector</em>, <em>options</em> )</strong><br><strong>cy.prevUntil( <em>selector</em>, <em>filter</em>, <em>options</em> )</strong><br><strong>cy.prevUntil( <em>element</em>, <em>options</em> )</strong><br><strong>cy.prevUntil( <em>element</em>, <em>filter</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry getting the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Find-all-of-the-element’s-siblings-before-nuts-until-veggies\"><a href=\"#Find-all-of-the-element’s-siblings-before-nuts-until-veggies\" class=\"headerlink\" title=\"Find all of the element’s siblings before #nuts until #veggies\"></a>Find all of the element’s siblings before <code>#nuts</code> until <code>#veggies</code></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fruits\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span>Fruits<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>apples<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>oranges<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>bananas<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"veggies\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span>Vegetables<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>cucumbers<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>carrots<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>corn<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"nuts\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span>Nuts<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>walnuts<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>cashews<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>almonds<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//returns [&lt;li&gt;cucumbers&lt;/li&gt;, &lt;li&gt;carrots&lt;/li&gt;, &lt;li&gt;corn&lt;/li&gt;]</span></div><div class=\"line\">cy.get(<span class=\"string\">\"#nuts\"</span>).nextUntil(<span class=\"string\">\"#veggies\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Find-all-of-the-element’s-siblings-before-nuts-until-veggies-1\"><a href=\"#Find-all-of-the-element’s-siblings-before-nuts-until-veggies-1\" class=\"headerlink\" title=\"Find all of the element’s siblings before #nuts until #veggies\"></a>Find all of the element’s siblings before <code>#nuts</code> until <code>#veggies</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"#nuts\"</span>).nextUntil(<span class=\"string\">\"#veggies\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"560\" alt=\"screen shot 2017-03-23 at 2 45 30 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24264621/69ed829c-0fd7-11e7-934d-c11157c36aca.png\"></p>\n<p>When clicking on <code>prevUntil</code> within the command log, the console outputs the following:</p>\n<p><img width=\"560\" alt=\"screen shot 2017-03-23 at 2 45 36 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24264632/7743f57a-0fd7-11e7-99f8-c148acd17459.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/prev\" target=\"_blank\" rel=\"external\">prev</a></li>\n<li><a href=\"https://on.cypress.io/api/prevall\" target=\"_blank\" rel=\"external\">prevAll</a></li>\n<li><a href=\"https://on.cypress.io/api/parentsuntil\" target=\"_blank\" rel=\"external\">parentsUntil</a></li>\n<li><a href=\"https://on.cypress.io/api/nextuntil\" target=\"_blank\" rel=\"external\">nextUntil</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Get all previous siblings of each DOM element in the set of matched DOM elements up to, but not including, the element matched by the selector</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.prevUntil</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#timeouts\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-prevUntil-selector\"><a href=\"#cy-prevUntil-selector\" class=\"headerlink\" title=\"cy.prevUntil( selector )\"></a><a href=\"#usage\">cy.prevUntil( <em>selector</em> )</a></h1><p>Get all of the previous siblings of the elements until the selector.</p>\n<hr>\n<h1 id=\"cy-prevUntil-selector-filter\"><a href=\"#cy-prevUntil-selector-filter\" class=\"headerlink\" title=\"cy.prevUntil( selector, *filter )\"></a><a href=\"#filter-usage\">cy.prevUntil( <em>selector</em>, *filter )</a></h1><p>When a filter is provided, it retrieves all of the previous siblings up until the selector only if it matches that filter.</p>\n<hr>\n<h1 id=\"cy-prevUntil-element\"><a href=\"#cy-prevUntil-element\" class=\"headerlink\" title=\"cy.prevUntil( element )\"></a><a href=\"#element-usage\">cy.prevUntil( <em>element</em> )</a></h1><p>Get all of the previous siblings of the elements until the DOM node or jQuery object.</p>\n<hr>\n<h1 id=\"cy-prevUntil-element-filter\"><a href=\"#cy-prevUntil-element-filter\" class=\"headerlink\" title=\"cy.prevUntil( element, *filter )\"></a><a href=\"#element-filter-usage\">cy.prevUntil( <em>element</em>, *filter )</a></h1><p>When a filter is provided, it retrieves all of the previous siblings up until the DOM node or jQuery object only if it matches that filter.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.prevUntil</code>.</p>\n<p><strong>cy.prevUntil( <em>selector</em>, <em>options</em> )</strong><br><strong>cy.prevUntil( <em>selector</em>, <em>filter</em>, <em>options</em> )</strong><br><strong>cy.prevUntil( <em>element</em>, <em>options</em> )</strong><br><strong>cy.prevUntil( <em>element</em>, <em>filter</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#timeouts\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry getting the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Find-all-of-the-element’s-siblings-before-nuts-until-veggies\"><a href=\"#Find-all-of-the-element’s-siblings-before-nuts-until-veggies\" class=\"headerlink\" title=\"Find all of the element’s siblings before #nuts until #veggies\"></a>Find all of the element’s siblings before <code>#nuts</code> until <code>#veggies</code></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fruits\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span>Fruits<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>apples<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>oranges<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>bananas<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"veggies\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span>Vegetables<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>cucumbers<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>carrots<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>corn<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"nuts\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span>Nuts<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>walnuts<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>cashews<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>almonds<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//returns [&lt;li&gt;cucumbers&lt;/li&gt;, &lt;li&gt;carrots&lt;/li&gt;, &lt;li&gt;corn&lt;/li&gt;]</span></div><div class=\"line\">cy.get(<span class=\"string\">\"#nuts\"</span>).nextUntil(<span class=\"string\">\"#veggies\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Find-all-of-the-element’s-siblings-before-nuts-until-veggies-1\"><a href=\"#Find-all-of-the-element’s-siblings-before-nuts-until-veggies-1\" class=\"headerlink\" title=\"Find all of the element’s siblings before #nuts until #veggies\"></a>Find all of the element’s siblings before <code>#nuts</code> until <code>#veggies</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"#nuts\"</span>).nextUntil(<span class=\"string\">\"#veggies\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"560\" alt=\"screen shot 2017-03-23 at 2 45 30 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24264621/69ed829c-0fd7-11e7-934d-c11157c36aca.png\"></p>\n<p>When clicking on <code>prevUntil</code> within the command log, the console outputs the following:</p>\n<p><img width=\"560\" alt=\"screen shot 2017-03-23 at 2 45 36 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/24264632/7743f57a-0fd7-11e7-99f8-c148acd17459.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/prev\">prev</a></li>\n<li><a href=\"https://on.cypress.io/api/prevall\">prevAll</a></li>\n<li><a href=\"https://on.cypress.io/api/parentsuntil\">parentsUntil</a></li>\n<li><a href=\"https://on.cypress.io/api/nextuntil\">nextUntil</a></li>\n</ul>\n"},{"title":"readfile","_content":"\nReads a file and returns its contents. JSON is automatically parsed into JavaScript.\n\n| | |\n|--- | --- |\n| **Returns** | the contents of the file |\n| **Timeout** | `cy.readFile` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.readFile( *filePath* )](#section-usage)\n\nReads the file at the `filePath`. The `filePath` is relative to the project's root.\n\n***\n\n# [cy.readFile( *filePath*, *encoding* )](#section-specify-encoding)\n\nReads the file at the `filePath` with the `encoding`. The `filePath` is relative to the project's root.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.readFile`.\n\n**[cy.readFile( *filePath*, *options* )](#options-usage)**\n\n**[cy.readFile( *filePath*, *encoding*, *options* )](#options-usage)**\n\nOption | Default | Notes\n--- | --- | ---\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to wait for the `cy.readFile` command to be processed\n\n***\n\n# Usage\n\n## Read a `txt` file\n\nFor any file other than JSON, the contents of the file are returned.\n\n```javascript\n// message.txt contains:\n// Hello World\n\ncy.readFile(\"path/to/message.txt\").then(function (text) {\n  expect(text).to.equal(\"Hello World\")   // true\n})\n```\n\n## Read a `json` file\n\nFor JSON, the contents are parsed into JavaScript and returned.\n\n```javascript\n// data.json contains:\n// {\n//   \"name\": \"Eliza\",\n//   \"email\": \"eliza@example.com\"\n// }\n\ncy.readFile(\"path/to/data.json\").then(function (user) {\n  // user will equal:\n  // {\n  //   name: \"Eliza\",\n  //   email: \"eliza@example.com\"\n  // }\n  expect(user.name).to.equal(\"Eliza\")\n})\n```\n\n## Specify encoding\n\nSpecify the encoding with the second argument.\n\n```javascript\ncy.readFile(\"path/to/logo.png\", \"base64\").then(function (logo) {\n  // logo will be encoded as base64\n  // and should look something like this:\n  // aIJKnwxydrB10NVWqhlmmC+ZiWs7otHotSAAAOw==...\n})\n```\n\nThe following encodings are supported:\n\n* `ascii`\n* `base64`\n* `binary`\n* `hex`\n* `latin1`\n* `utf8`\n* `utf-8`\n* `ucs2`\n* `ucs-2`\n* `utf16le`\n* `utf-16le`\n\n***\n\n# Notes\n\n## Implicit assertion\n\nBy default, `cy.readFile` asserts that the file exists and will fail if it does not exist. It will retry reading the file if it does not initially exist until the file exists or the command times out.\n\n```javascript\n// will fail after the defaultCommandTimeout is reached\ncy.readFile('does-not-exist.yaml')\n```\n\n## Asserting non-existence\n\nYou can assert that a file does not exist like so:\n\n```javascript\n// will pass if the file does not exist\ncy.readFile('does-not-exist.yaml').should(\"not.exist\")\n```\n\n***\n\n# Command Log\n\n## List the contents of cypress.json\n\n```javascript\ncy.readFile(\"cypress.json\")\n```\n\nThe command above will display in the command log as:\n\n<img width=\"521\" alt=\"screen shot of command log\" src=\"https://cloud.githubusercontent.com/assets/1157043/17934353/a02d6c34-69e5-11e6-8f1d-ab1eda17ab3b.png\">\n\nWhen clicking on the `readFile` command within the command log, the console outputs the following:\n\n<img width=\"689\" alt=\"screen shot of console output\" src=\"https://cloud.githubusercontent.com/assets/1157043/17934460/089e0652-69e6-11e6-9f00-7eb282be0d27.png\">\n\n***\n\n# Related\n\n- [writeFile](https://on.cypress.io/api/writeFile)\n- [Creating Fixtures](https://on.cypress.io/guides/creating-fixtures)\n","source":"api/commands/readfile.md","raw":"title: readfile\n---\n\nReads a file and returns its contents. JSON is automatically parsed into JavaScript.\n\n| | |\n|--- | --- |\n| **Returns** | the contents of the file |\n| **Timeout** | `cy.readFile` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.readFile( *filePath* )](#section-usage)\n\nReads the file at the `filePath`. The `filePath` is relative to the project's root.\n\n***\n\n# [cy.readFile( *filePath*, *encoding* )](#section-specify-encoding)\n\nReads the file at the `filePath` with the `encoding`. The `filePath` is relative to the project's root.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.readFile`.\n\n**[cy.readFile( *filePath*, *options* )](#options-usage)**\n\n**[cy.readFile( *filePath*, *encoding*, *options* )](#options-usage)**\n\nOption | Default | Notes\n--- | --- | ---\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to wait for the `cy.readFile` command to be processed\n\n***\n\n# Usage\n\n## Read a `txt` file\n\nFor any file other than JSON, the contents of the file are returned.\n\n```javascript\n// message.txt contains:\n// Hello World\n\ncy.readFile(\"path/to/message.txt\").then(function (text) {\n  expect(text).to.equal(\"Hello World\")   // true\n})\n```\n\n## Read a `json` file\n\nFor JSON, the contents are parsed into JavaScript and returned.\n\n```javascript\n// data.json contains:\n// {\n//   \"name\": \"Eliza\",\n//   \"email\": \"eliza@example.com\"\n// }\n\ncy.readFile(\"path/to/data.json\").then(function (user) {\n  // user will equal:\n  // {\n  //   name: \"Eliza\",\n  //   email: \"eliza@example.com\"\n  // }\n  expect(user.name).to.equal(\"Eliza\")\n})\n```\n\n## Specify encoding\n\nSpecify the encoding with the second argument.\n\n```javascript\ncy.readFile(\"path/to/logo.png\", \"base64\").then(function (logo) {\n  // logo will be encoded as base64\n  // and should look something like this:\n  // aIJKnwxydrB10NVWqhlmmC+ZiWs7otHotSAAAOw==...\n})\n```\n\nThe following encodings are supported:\n\n* `ascii`\n* `base64`\n* `binary`\n* `hex`\n* `latin1`\n* `utf8`\n* `utf-8`\n* `ucs2`\n* `ucs-2`\n* `utf16le`\n* `utf-16le`\n\n***\n\n# Notes\n\n## Implicit assertion\n\nBy default, `cy.readFile` asserts that the file exists and will fail if it does not exist. It will retry reading the file if it does not initially exist until the file exists or the command times out.\n\n```javascript\n// will fail after the defaultCommandTimeout is reached\ncy.readFile('does-not-exist.yaml')\n```\n\n## Asserting non-existence\n\nYou can assert that a file does not exist like so:\n\n```javascript\n// will pass if the file does not exist\ncy.readFile('does-not-exist.yaml').should(\"not.exist\")\n```\n\n***\n\n# Command Log\n\n## List the contents of cypress.json\n\n```javascript\ncy.readFile(\"cypress.json\")\n```\n\nThe command above will display in the command log as:\n\n<img width=\"521\" alt=\"screen shot of command log\" src=\"https://cloud.githubusercontent.com/assets/1157043/17934353/a02d6c34-69e5-11e6-8f1d-ab1eda17ab3b.png\">\n\nWhen clicking on the `readFile` command within the command log, the console outputs the following:\n\n<img width=\"689\" alt=\"screen shot of console output\" src=\"https://cloud.githubusercontent.com/assets/1157043/17934460/089e0652-69e6-11e6-9f00-7eb282be0d27.png\">\n\n***\n\n# Related\n\n- [writeFile](https://on.cypress.io/api/writeFile)\n- [Creating Fixtures](https://on.cypress.io/guides/creating-fixtures)\n","date":"2017-04-19T18:50:48.000Z","updated":"2017-04-19T18:50:48.000Z","path":"api/commands/readfile.html","comments":1,"layout":"page","_id":"cj1pc3ifw0002n9g8xbqujung","content":"<p>Reads a file and returns its contents. JSON is automatically parsed into JavaScript.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the contents of the file</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.readFile</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-readFile-filePath\"><a href=\"#cy-readFile-filePath\" class=\"headerlink\" title=\"cy.readFile( filePath )\"></a><a href=\"#section-usage\">cy.readFile( <em>filePath</em> )</a></h1><p>Reads the file at the <code>filePath</code>. The <code>filePath</code> is relative to the project’s root.</p>\n<hr>\n<h1 id=\"cy-readFile-filePath-encoding\"><a href=\"#cy-readFile-filePath-encoding\" class=\"headerlink\" title=\"cy.readFile( filePath, encoding )\"></a><a href=\"#section-specify-encoding\">cy.readFile( <em>filePath</em>, <em>encoding</em> )</a></h1><p>Reads the file at the <code>filePath</code> with the <code>encoding</code>. The <code>filePath</code> is relative to the project’s root.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.readFile</code>.</p>\n<p><strong><a href=\"#options-usage\">cy.readFile( <em>filePath</em>, <em>options</em> )</a></strong></p>\n<p><strong><a href=\"#options-usage\">cy.readFile( <em>filePath</em>, <em>encoding</em>, <em>options</em> )</a></strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to wait for the <code>cy.readFile</code> command to be processed</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Read-a-txt-file\"><a href=\"#Read-a-txt-file\" class=\"headerlink\" title=\"Read a txt file\"></a>Read a <code>txt</code> file</h2><p>For any file other than JSON, the contents of the file are returned.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// message.txt contains:</span></div><div class=\"line\"><span class=\"comment\">// Hello World</span></div><div class=\"line\"></div><div class=\"line\">cy.readFile(<span class=\"string\">\"path/to/message.txt\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">text</span>) </span>&#123;</div><div class=\"line\">  expect(text).to.equal(<span class=\"string\">\"Hello World\"</span>)   <span class=\"comment\">// true</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Read-a-json-file\"><a href=\"#Read-a-json-file\" class=\"headerlink\" title=\"Read a json file\"></a>Read a <code>json</code> file</h2><p>For JSON, the contents are parsed into JavaScript and returned.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// data.json contains:</span></div><div class=\"line\"><span class=\"comment\">// &#123;</span></div><div class=\"line\"><span class=\"comment\">//   \"name\": \"Eliza\",</span></div><div class=\"line\"><span class=\"comment\">//   \"email\": \"eliza@example.com\"</span></div><div class=\"line\"><span class=\"comment\">// &#125;</span></div><div class=\"line\"></div><div class=\"line\">cy.readFile(<span class=\"string\">\"path/to/data.json\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">user</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// user will equal:</span></div><div class=\"line\">  <span class=\"comment\">// &#123;</span></div><div class=\"line\">  <span class=\"comment\">//   name: \"Eliza\",</span></div><div class=\"line\">  <span class=\"comment\">//   email: \"eliza@example.com\"</span></div><div class=\"line\">  <span class=\"comment\">// &#125;</span></div><div class=\"line\">  expect(user.name).to.equal(<span class=\"string\">\"Eliza\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Specify-encoding\"><a href=\"#Specify-encoding\" class=\"headerlink\" title=\"Specify encoding\"></a>Specify encoding</h2><p>Specify the encoding with the second argument.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.readFile(<span class=\"string\">\"path/to/logo.png\"</span>, <span class=\"string\">\"base64\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">logo</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// logo will be encoded as base64</span></div><div class=\"line\">  <span class=\"comment\">// and should look something like this:</span></div><div class=\"line\">  <span class=\"comment\">// aIJKnwxydrB10NVWqhlmmC+ZiWs7otHotSAAAOw==...</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>The following encodings are supported:</p>\n<ul>\n<li><code>ascii</code></li>\n<li><code>base64</code></li>\n<li><code>binary</code></li>\n<li><code>hex</code></li>\n<li><code>latin1</code></li>\n<li><code>utf8</code></li>\n<li><code>utf-8</code></li>\n<li><code>ucs2</code></li>\n<li><code>ucs-2</code></li>\n<li><code>utf16le</code></li>\n<li><code>utf-16le</code></li>\n</ul>\n<hr>\n<h1 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h1><h2 id=\"Implicit-assertion\"><a href=\"#Implicit-assertion\" class=\"headerlink\" title=\"Implicit assertion\"></a>Implicit assertion</h2><p>By default, <code>cy.readFile</code> asserts that the file exists and will fail if it does not exist. It will retry reading the file if it does not initially exist until the file exists or the command times out.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// will fail after the defaultCommandTimeout is reached</span></div><div class=\"line\">cy.readFile(<span class=\"string\">'does-not-exist.yaml'</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"Asserting-non-existence\"><a href=\"#Asserting-non-existence\" class=\"headerlink\" title=\"Asserting non-existence\"></a>Asserting non-existence</h2><p>You can assert that a file does not exist like so:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// will pass if the file does not exist</span></div><div class=\"line\">cy.readFile(<span class=\"string\">'does-not-exist.yaml'</span>).should(<span class=\"string\">\"not.exist\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"List-the-contents-of-cypress-json\"><a href=\"#List-the-contents-of-cypress-json\" class=\"headerlink\" title=\"List the contents of cypress.json\"></a>List the contents of cypress.json</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.readFile(<span class=\"string\">\"cypress.json\"</span>)</div></pre></td></tr></table></figure>\n<p>The command above will display in the command log as:</p>\n<p><img width=\"521\" alt=\"screen shot of command log\" src=\"https://cloud.githubusercontent.com/assets/1157043/17934353/a02d6c34-69e5-11e6-8f1d-ab1eda17ab3b.png\"></p>\n<p>When clicking on the <code>readFile</code> command within the command log, the console outputs the following:</p>\n<p><img width=\"689\" alt=\"screen shot of console output\" src=\"https://cloud.githubusercontent.com/assets/1157043/17934460/089e0652-69e6-11e6-9f00-7eb282be0d27.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/writeFile\" target=\"_blank\" rel=\"external\">writeFile</a></li>\n<li><a href=\"https://on.cypress.io/guides/creating-fixtures\" target=\"_blank\" rel=\"external\">Creating Fixtures</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Reads a file and returns its contents. JSON is automatically parsed into JavaScript.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the contents of the file</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.readFile</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-readFile-filePath\"><a href=\"#cy-readFile-filePath\" class=\"headerlink\" title=\"cy.readFile( filePath )\"></a><a href=\"#section-usage\">cy.readFile( <em>filePath</em> )</a></h1><p>Reads the file at the <code>filePath</code>. The <code>filePath</code> is relative to the project’s root.</p>\n<hr>\n<h1 id=\"cy-readFile-filePath-encoding\"><a href=\"#cy-readFile-filePath-encoding\" class=\"headerlink\" title=\"cy.readFile( filePath, encoding )\"></a><a href=\"#section-specify-encoding\">cy.readFile( <em>filePath</em>, <em>encoding</em> )</a></h1><p>Reads the file at the <code>filePath</code> with the <code>encoding</code>. The <code>filePath</code> is relative to the project’s root.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.readFile</code>.</p>\n<p><strong><a href=\"#options-usage\">cy.readFile( <em>filePath</em>, <em>options</em> )</a></strong></p>\n<p><strong><a href=\"#options-usage\">cy.readFile( <em>filePath</em>, <em>encoding</em>, <em>options</em> )</a></strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to wait for the <code>cy.readFile</code> command to be processed</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Read-a-txt-file\"><a href=\"#Read-a-txt-file\" class=\"headerlink\" title=\"Read a txt file\"></a>Read a <code>txt</code> file</h2><p>For any file other than JSON, the contents of the file are returned.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// message.txt contains:</span></div><div class=\"line\"><span class=\"comment\">// Hello World</span></div><div class=\"line\"></div><div class=\"line\">cy.readFile(<span class=\"string\">\"path/to/message.txt\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">text</span>) </span>&#123;</div><div class=\"line\">  expect(text).to.equal(<span class=\"string\">\"Hello World\"</span>)   <span class=\"comment\">// true</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Read-a-json-file\"><a href=\"#Read-a-json-file\" class=\"headerlink\" title=\"Read a json file\"></a>Read a <code>json</code> file</h2><p>For JSON, the contents are parsed into JavaScript and returned.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// data.json contains:</span></div><div class=\"line\"><span class=\"comment\">// &#123;</span></div><div class=\"line\"><span class=\"comment\">//   \"name\": \"Eliza\",</span></div><div class=\"line\"><span class=\"comment\">//   \"email\": \"eliza@example.com\"</span></div><div class=\"line\"><span class=\"comment\">// &#125;</span></div><div class=\"line\"></div><div class=\"line\">cy.readFile(<span class=\"string\">\"path/to/data.json\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">user</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// user will equal:</span></div><div class=\"line\">  <span class=\"comment\">// &#123;</span></div><div class=\"line\">  <span class=\"comment\">//   name: \"Eliza\",</span></div><div class=\"line\">  <span class=\"comment\">//   email: \"eliza@example.com\"</span></div><div class=\"line\">  <span class=\"comment\">// &#125;</span></div><div class=\"line\">  expect(user.name).to.equal(<span class=\"string\">\"Eliza\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Specify-encoding\"><a href=\"#Specify-encoding\" class=\"headerlink\" title=\"Specify encoding\"></a>Specify encoding</h2><p>Specify the encoding with the second argument.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.readFile(<span class=\"string\">\"path/to/logo.png\"</span>, <span class=\"string\">\"base64\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">logo</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// logo will be encoded as base64</span></div><div class=\"line\">  <span class=\"comment\">// and should look something like this:</span></div><div class=\"line\">  <span class=\"comment\">// aIJKnwxydrB10NVWqhlmmC+ZiWs7otHotSAAAOw==...</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>The following encodings are supported:</p>\n<ul>\n<li><code>ascii</code></li>\n<li><code>base64</code></li>\n<li><code>binary</code></li>\n<li><code>hex</code></li>\n<li><code>latin1</code></li>\n<li><code>utf8</code></li>\n<li><code>utf-8</code></li>\n<li><code>ucs2</code></li>\n<li><code>ucs-2</code></li>\n<li><code>utf16le</code></li>\n<li><code>utf-16le</code></li>\n</ul>\n<hr>\n<h1 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h1><h2 id=\"Implicit-assertion\"><a href=\"#Implicit-assertion\" class=\"headerlink\" title=\"Implicit assertion\"></a>Implicit assertion</h2><p>By default, <code>cy.readFile</code> asserts that the file exists and will fail if it does not exist. It will retry reading the file if it does not initially exist until the file exists or the command times out.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// will fail after the defaultCommandTimeout is reached</span></div><div class=\"line\">cy.readFile(<span class=\"string\">'does-not-exist.yaml'</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"Asserting-non-existence\"><a href=\"#Asserting-non-existence\" class=\"headerlink\" title=\"Asserting non-existence\"></a>Asserting non-existence</h2><p>You can assert that a file does not exist like so:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// will pass if the file does not exist</span></div><div class=\"line\">cy.readFile(<span class=\"string\">'does-not-exist.yaml'</span>).should(<span class=\"string\">\"not.exist\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"List-the-contents-of-cypress-json\"><a href=\"#List-the-contents-of-cypress-json\" class=\"headerlink\" title=\"List the contents of cypress.json\"></a>List the contents of cypress.json</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.readFile(<span class=\"string\">\"cypress.json\"</span>)</div></pre></td></tr></table></figure>\n<p>The command above will display in the command log as:</p>\n<p><img width=\"521\" alt=\"screen shot of command log\" src=\"https://cloud.githubusercontent.com/assets/1157043/17934353/a02d6c34-69e5-11e6-8f1d-ab1eda17ab3b.png\"></p>\n<p>When clicking on the <code>readFile</code> command within the command log, the console outputs the following:</p>\n<p><img width=\"689\" alt=\"screen shot of console output\" src=\"https://cloud.githubusercontent.com/assets/1157043/17934460/089e0652-69e6-11e6-9f00-7eb282be0d27.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/writeFile\">writeFile</a></li>\n<li><a href=\"https://on.cypress.io/guides/creating-fixtures\">Creating Fixtures</a></li>\n</ul>\n"},{"title":"reload","_content":"\nReload the page.\n\n| | |\n|--- | --- |\n| **Returns** | the `window` object of the newly reloaded page |\n| **Timeout** | `cy.reload` will retry for the duration of the [pageLoadTimeout](https://on.cypress.io/guides/configuration#section-timeouts) or the duration of the `timeout` specified in the command's [options](#section-options).  |\n\n***\n\n# [cy.reload()](#section-usage)\n\nReload the page from the current URL.\n\n***\n\n# [cy.reload( *forceReload* )](#section-force-reload-usage)\n\nReload the current page, without using the cache if `forceReload` is true\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.reload`.\n\n**cy.reload( *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`timeout`      | [pageLoadTimeout](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry the visit\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Reload the page as if the user clicked the Refresh button\n\n```javascript\ncy\n  .visit(\"http://localhost:3000/admin\")\n  .reload()\n```\n\n# Force Reload Usage\n\n***\n\n## Reload the page without using the cache\n\n```javascript\ncy\n  .visit(\"http://localhost:3000/admin\")\n  .reload(true)\n```\n\n***\n\n# Command Log\n\n## Reload the page\n\n```javascript\ncy.reload()\n```\n\nThe commands above will display in the command log as:\n\n![screen shot 2016-01-27 at 2 49 44 pm](https://cloud.githubusercontent.com/assets/1271364/12626196/6deb6fd0-c505-11e5-8803-cd2998ec0a12.png)\n\nWhen clicking on `cy.reload` within the command log, the console outputs the following:\n\n![screen shot 2016-01-27 at 2 50 01 pm](https://cloud.githubusercontent.com/assets/1271364/12626199/71a62ea8-c505-11e5-97cf-e7e4b92015e3.png)\n\n***\n\n# Related\n\n- [location](https://on.cypress.io/api/location)","source":"api/commands/reload.md","raw":"title: reload\n---\n\nReload the page.\n\n| | |\n|--- | --- |\n| **Returns** | the `window` object of the newly reloaded page |\n| **Timeout** | `cy.reload` will retry for the duration of the [pageLoadTimeout](https://on.cypress.io/guides/configuration#section-timeouts) or the duration of the `timeout` specified in the command's [options](#section-options).  |\n\n***\n\n# [cy.reload()](#section-usage)\n\nReload the page from the current URL.\n\n***\n\n# [cy.reload( *forceReload* )](#section-force-reload-usage)\n\nReload the current page, without using the cache if `forceReload` is true\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.reload`.\n\n**cy.reload( *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`timeout`      | [pageLoadTimeout](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry the visit\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Reload the page as if the user clicked the Refresh button\n\n```javascript\ncy\n  .visit(\"http://localhost:3000/admin\")\n  .reload()\n```\n\n# Force Reload Usage\n\n***\n\n## Reload the page without using the cache\n\n```javascript\ncy\n  .visit(\"http://localhost:3000/admin\")\n  .reload(true)\n```\n\n***\n\n# Command Log\n\n## Reload the page\n\n```javascript\ncy.reload()\n```\n\nThe commands above will display in the command log as:\n\n![screen shot 2016-01-27 at 2 49 44 pm](https://cloud.githubusercontent.com/assets/1271364/12626196/6deb6fd0-c505-11e5-8803-cd2998ec0a12.png)\n\nWhen clicking on `cy.reload` within the command log, the console outputs the following:\n\n![screen shot 2016-01-27 at 2 50 01 pm](https://cloud.githubusercontent.com/assets/1271364/12626199/71a62ea8-c505-11e5-97cf-e7e4b92015e3.png)\n\n***\n\n# Related\n\n- [location](https://on.cypress.io/api/location)","date":"2017-04-19T18:50:48.000Z","updated":"2017-04-19T18:50:48.000Z","path":"api/commands/reload.html","comments":1,"layout":"page","_id":"cj1pc3ifw0003n9g8w6nw4yyi","content":"<p>Reload the page.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the <code>window</code> object of the newly reloaded page</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.reload</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\">pageLoadTimeout</a> or the duration of the <code>timeout</code> specified in the command’s <a href=\"#section-options\">options</a>.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-reload\"><a href=\"#cy-reload\" class=\"headerlink\" title=\"cy.reload()\"></a><a href=\"#section-usage\">cy.reload()</a></h1><p>Reload the page from the current URL.</p>\n<hr>\n<h1 id=\"cy-reload-forceReload\"><a href=\"#cy-reload-forceReload\" class=\"headerlink\" title=\"cy.reload( forceReload )\"></a><a href=\"#section-force-reload-usage\">cy.reload( <em>forceReload</em> )</a></h1><p>Reload the current page, without using the cache if <code>forceReload</code> is true</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.reload</code>.</p>\n<p><strong>cy.reload( <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\">pageLoadTimeout</a></td>\n<td>Total time to retry the visit</td>\n</tr>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Reload-the-page-as-if-the-user-clicked-the-Refresh-button\"><a href=\"#Reload-the-page-as-if-the-user-clicked-the-Refresh-button\" class=\"headerlink\" title=\"Reload the page as if the user clicked the Refresh button\"></a>Reload the page as if the user clicked the Refresh button</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .visit(<span class=\"string\">\"http://localhost:3000/admin\"</span>)</div><div class=\"line\">  .reload()</div></pre></td></tr></table></figure>\n<h1 id=\"Force-Reload-Usage\"><a href=\"#Force-Reload-Usage\" class=\"headerlink\" title=\"Force Reload Usage\"></a>Force Reload Usage</h1><hr>\n<h2 id=\"Reload-the-page-without-using-the-cache\"><a href=\"#Reload-the-page-without-using-the-cache\" class=\"headerlink\" title=\"Reload the page without using the cache\"></a>Reload the page without using the cache</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .visit(<span class=\"string\">\"http://localhost:3000/admin\"</span>)</div><div class=\"line\">  .reload(<span class=\"literal\">true</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Reload-the-page\"><a href=\"#Reload-the-page\" class=\"headerlink\" title=\"Reload the page\"></a>Reload the page</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.reload()</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/12626196/6deb6fd0-c505-11e5-8803-cd2998ec0a12.png\" alt=\"screen shot 2016-01-27 at 2 49 44 pm\"></p>\n<p>When clicking on <code>cy.reload</code> within the command log, the console outputs the following:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/12626199/71a62ea8-c505-11e5-97cf-e7e4b92015e3.png\" alt=\"screen shot 2016-01-27 at 2 50 01 pm\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/location\" target=\"_blank\" rel=\"external\">location</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Reload the page.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the <code>window</code> object of the newly reloaded page</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.reload</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\">pageLoadTimeout</a> or the duration of the <code>timeout</code> specified in the command’s <a href=\"#section-options\">options</a>.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-reload\"><a href=\"#cy-reload\" class=\"headerlink\" title=\"cy.reload()\"></a><a href=\"#section-usage\">cy.reload()</a></h1><p>Reload the page from the current URL.</p>\n<hr>\n<h1 id=\"cy-reload-forceReload\"><a href=\"#cy-reload-forceReload\" class=\"headerlink\" title=\"cy.reload( forceReload )\"></a><a href=\"#section-force-reload-usage\">cy.reload( <em>forceReload</em> )</a></h1><p>Reload the current page, without using the cache if <code>forceReload</code> is true</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.reload</code>.</p>\n<p><strong>cy.reload( <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\">pageLoadTimeout</a></td>\n<td>Total time to retry the visit</td>\n</tr>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Reload-the-page-as-if-the-user-clicked-the-Refresh-button\"><a href=\"#Reload-the-page-as-if-the-user-clicked-the-Refresh-button\" class=\"headerlink\" title=\"Reload the page as if the user clicked the Refresh button\"></a>Reload the page as if the user clicked the Refresh button</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .visit(<span class=\"string\">\"http://localhost:3000/admin\"</span>)</div><div class=\"line\">  .reload()</div></pre></td></tr></table></figure>\n<h1 id=\"Force-Reload-Usage\"><a href=\"#Force-Reload-Usage\" class=\"headerlink\" title=\"Force Reload Usage\"></a>Force Reload Usage</h1><hr>\n<h2 id=\"Reload-the-page-without-using-the-cache\"><a href=\"#Reload-the-page-without-using-the-cache\" class=\"headerlink\" title=\"Reload the page without using the cache\"></a>Reload the page without using the cache</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .visit(<span class=\"string\">\"http://localhost:3000/admin\"</span>)</div><div class=\"line\">  .reload(<span class=\"literal\">true</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Reload-the-page\"><a href=\"#Reload-the-page\" class=\"headerlink\" title=\"Reload the page\"></a>Reload the page</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.reload()</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/12626196/6deb6fd0-c505-11e5-8803-cd2998ec0a12.png\" alt=\"screen shot 2016-01-27 at 2 49 44 pm\"></p>\n<p>When clicking on <code>cy.reload</code> within the command log, the console outputs the following:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/12626199/71a62ea8-c505-11e5-97cf-e7e4b92015e3.png\" alt=\"screen shot 2016-01-27 at 2 50 01 pm\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/location\">location</a></li>\n</ul>\n"},{"title":"request","_content":"\nUse `cy.request` to make HTTP requests. Great for talking to an external endpoint before, during, or after your tests for seeding, querying records, or API testing.\n\n| | |\n|--- | --- |\n| **Returns** | the `response` as an object literal. |\n| **Timeout** | `cy.request` will wait for the response for the duration of the [responseTimeout](https://on.cypress.io/guides/configuration#section-timeouts) or the [`timeout`](#section-options) passed in the options object of the command. |\n\n***\n\n# [cy.request( *url* )](#section-url-usage)\n\nMakes a `GET` request using the specified url.\n\n***\n\n# [cy.request( *url*, *body* )](#section-url-and-body-usage)\n\nMake a `GET` request to the provided url with the provided body.\n\n***\n\n# [cy.request( *method*, *url* )](#section-method-and-url-usage)\n\nMake a request using the provided method to the specified url.\n\n***\n\n# [cy.request( *method*, *url*, *body* )](#section-method-and-url-and-body-usage)\n\nAdditionally pass in the request `body` as a `String` or `Object Literal`. Cypress will set the `Accepts` request header and serialize the response body by its `Content-Type`.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.request`.\n\n**[cy.request( *options* )](#options-usage)**\n\nOption | Default | Notes\n--- | --- | ---\n`auth` | `null` | Any auth to send. Accepts an object literal.\n`body` | `null` | The Request Body to send along with the request.\n`failOnStatusCode` | `true` | Whether to fail on response codes other than `2xx` and `3xx`.\n`followRedirect` | `true` | Whether to automatically follow redirects.\n`form` | `false` | Whether to convert the `body` values to urlencoded content and automatically set the `x-www-form-urlencoded` header.\n`gzip` | `true` | Whether to accept the `gzip` encoding.\n`headers` | `null` | Any additional headers to send. Accepts an object literal.\n`log` | `true` | Whether to log the request in the Command Log\n`method` | `GET` | The HTTP method to use when making the request.\n`qs` | `null` | The query parameters to be appended to the `url` option when making the request.\n`timeout` | [`responseTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to wait for a response (in ms)\n`url` | `null` | The URL to make the request.\n\nYou can also set options for the `cy.request`'s `baseUrl` and `responseTimeout` globally in [configuration](https://on.cypress.io/guides/configuration).\n\n***\n\n# URL Usage\n\n## Make a `GET` request\n\n```javascript\n// make a request to seed the database prior to running each test\nbeforeEach(function(){\n  cy.request(\"http://localhost:8080/db/seed\")\n})\n```\n\n## Issue a simple HTTP request\n\n```javascript\ncy\n  // dont visit this page and load the resources\n  // instead let's just issue a simple HTTP request\n  // so we can make an assertion about its body\n  .request(\"/admin\")\n  .its(\"body\")\n  .should(\"include\", \"<h2>admin.html</h2>\")\n```\n\n***\n\n## Send the new subject to an HTTP's response on request\n\n```javascript\n// the response object is an object literal\n// containing status, body, headers, and duration\ncy.request(\"http://dev.local/users\").then(function(response){\n  // subject is now the response object\n  // {\n  //   status: 200,\n  //   headers: {...},\n  //   body: [{id: 1, name: \"Jane\"}, {id: 2, name: \"LeeAnn\"}],\n  //   duration: 28\n  // }\n})\n```\n\n***\n\n# Method and URL Usage\n\n## Send a `DELETE` request\n\n```javascript\n// Delete a user\ncy.request(\"DELETE\", \"http://localhost:8888/users/827\")\n```\n\n***\n\n# Method and URL and Body Usage\n\n## Send a `POST` request with a JSON body\n\n```javascript\n// the Accepts Request Header is automatically set based\n// on the type of body you supply\ncy\n  .request(\"POST\", \"http://localhost:8888/users/admin\", {name: \"Jane\"})\n  .then(function(response){\n    // response.body would automatically be serialized into JSON\n    expect(response.body).to.have.property(\"name\", \"Jane\") // true\n})\n```\n\n***\n\n# Options Usage\n\n## Request the dashboard while disabling auto redirect\n\n```javascript\n// to test the redirection behavior on login without a session\n// cy.request can be used to check the status code and redirectedToUrl property.\n//\n// the 'redirectedToUrl' property is a special Cypress property under the hood\n// that normalizes the url the browser would normally follow during a redirect\n\ncy.request({\n  url: '/dashboard',\n  followRedirect: false // turn off following redirects automatically\n})\n.then((resp) => {\n  // should have status code 302\n  expect(resp.status).to.eq(302)\n\n  // when we turn off following redirects, Cypress will also send us\n  // a 'redirectedToUrl' property with the fully qualified URL that we were redirected to.\n  expect(resp.redirectedToUrl).to.eq(\"http://localhost:8082/unauthorized\")\n})\n```\n\n***\n\n## HTML form submissions using form option\n\n```javascript\n// oftentimes once we have a proper e2e test around logging in\n// there is NO more reason to actually use our UI to log in users\n// doing so wastes a huge amount of time, as our entire page has to load\n// all associated resources, we have to wait to fill the\n// form and for the form submission and redirection process\n//\n// with cy.request we can bypass all of this because it automatically gets\n// and sets cookies under the hood which acts exactly as if these requests\n// came from the browser\n\ncy\n  .request({\n    method: 'POST',\n    url: '/login_with_form', // baseUrl will be prepended to this url\n    form: true, // indicates the body should be form urlencoded and sets Content-Type: application/x-www-form-urlencoded headers\n    body: {\n      username: 'jane.lane',\n      password: 'password123'\n    }\n  })\n\n  // just to prove we have a session\n  cy.getCookie(\"cypress-session-cookie\").should('exist')\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe using cy.request for HTML form submissions](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_html_web_form_spec.js)\",\n  \"title\": \"Using cy.request for HTML Forms\"\n}\n[/block]\n\n***\n\n# Notes\n\n## Why don't I see the XHR in the Network Tab of the Chrome Dev Tools?\n\nCypress does not actually make an XHR request out of the browser. Under the hood we are making the HTTP request from the desktop application (in node). Therefore you will not see the request inside of the Chrome Dev Tools.\n\nNote that we automatically set both Cookies + User Agent headers correctly as if the request was really coming from the browser.\n\n***\n\n## CORS is bypassed\n\nNormally when the browser detects a cross-origin HTTP request, it will send an `OPTIONS` preflight check to ensure the server allows cross-origin requests. `cy.request` bypasses CORS entirely.\n\n```javascript\n// we can make requests to any external server, no problem.\ncy\n  .request(\"https://www.google.com/webhp?#q=cypress.io+cors\")\n    .its(\"body\")\n    .should(\"include\", \"Testing, the way it should be\") // true\n```\n\n***\n\n## Cookies are automatically sent and received\n\nBefore sending the HTTP request, we will automatically attach cookies that would have otherwise been attached had the request come from the browser. Additionally, if a response has a `Set-Cookie` header, these are automatically set back on the browser cookies.\n\nIn other words, `cy.request` transparently performs all of the underlying functions as if it came from the browser.\n\n***\n\n## Rules for resolving a relative request url\n\nIf you provide a non fully qualified domain name (FQDN), Cypress will make its best guess as to which host you want the request to go to.\n\n```javascript\ncy\n  // after you visit somewhere, Cypress will assume this is the host\n  .visit(\"http://localhost:8080/app\")\n  .request(\"users/1.json\") // <-- url is http://localhost:8080/users/1.json\n```\n\nIf you make the `cy.request` prior to visiting a page, Cypress will use the host configured as the `baseUrl` property inside of `cypress.json`.\n\n```javascript\n// cypress.json\n{\n  baseUrl: \"http://localhost:1234\"\n}\n```\n\n```javascript\n// inside of your tests\ncy.request(\"seed/admin\") //<-- url is http://localhost:1234/seed/admin\n```\n\nIf Cypress cannot determine the host it will throw an explicit error.\n\n***\n\n# Related\n\n- [Recipe: Logging In - HTML Web Form](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_html_web_form_spec.js)\n- [Recipe: Logging In - XHR Web Form](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_xhr_web_form_spec.js)\n- [Recipe: Logging In - CSRF Tokens](https://github.com/cypress-io/cypress-example-recipes#logging-in---csrf-tokens)\n- [Recipe: Logging In - Single Sign on](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_single_sign_on_spec.js)\n- [visit](https://on.cypress.io/api/visit)\n","source":"api/commands/request.md","raw":"title: request\n---\n\nUse `cy.request` to make HTTP requests. Great for talking to an external endpoint before, during, or after your tests for seeding, querying records, or API testing.\n\n| | |\n|--- | --- |\n| **Returns** | the `response` as an object literal. |\n| **Timeout** | `cy.request` will wait for the response for the duration of the [responseTimeout](https://on.cypress.io/guides/configuration#section-timeouts) or the [`timeout`](#section-options) passed in the options object of the command. |\n\n***\n\n# [cy.request( *url* )](#section-url-usage)\n\nMakes a `GET` request using the specified url.\n\n***\n\n# [cy.request( *url*, *body* )](#section-url-and-body-usage)\n\nMake a `GET` request to the provided url with the provided body.\n\n***\n\n# [cy.request( *method*, *url* )](#section-method-and-url-usage)\n\nMake a request using the provided method to the specified url.\n\n***\n\n# [cy.request( *method*, *url*, *body* )](#section-method-and-url-and-body-usage)\n\nAdditionally pass in the request `body` as a `String` or `Object Literal`. Cypress will set the `Accepts` request header and serialize the response body by its `Content-Type`.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.request`.\n\n**[cy.request( *options* )](#options-usage)**\n\nOption | Default | Notes\n--- | --- | ---\n`auth` | `null` | Any auth to send. Accepts an object literal.\n`body` | `null` | The Request Body to send along with the request.\n`failOnStatusCode` | `true` | Whether to fail on response codes other than `2xx` and `3xx`.\n`followRedirect` | `true` | Whether to automatically follow redirects.\n`form` | `false` | Whether to convert the `body` values to urlencoded content and automatically set the `x-www-form-urlencoded` header.\n`gzip` | `true` | Whether to accept the `gzip` encoding.\n`headers` | `null` | Any additional headers to send. Accepts an object literal.\n`log` | `true` | Whether to log the request in the Command Log\n`method` | `GET` | The HTTP method to use when making the request.\n`qs` | `null` | The query parameters to be appended to the `url` option when making the request.\n`timeout` | [`responseTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to wait for a response (in ms)\n`url` | `null` | The URL to make the request.\n\nYou can also set options for the `cy.request`'s `baseUrl` and `responseTimeout` globally in [configuration](https://on.cypress.io/guides/configuration).\n\n***\n\n# URL Usage\n\n## Make a `GET` request\n\n```javascript\n// make a request to seed the database prior to running each test\nbeforeEach(function(){\n  cy.request(\"http://localhost:8080/db/seed\")\n})\n```\n\n## Issue a simple HTTP request\n\n```javascript\ncy\n  // dont visit this page and load the resources\n  // instead let's just issue a simple HTTP request\n  // so we can make an assertion about its body\n  .request(\"/admin\")\n  .its(\"body\")\n  .should(\"include\", \"<h2>admin.html</h2>\")\n```\n\n***\n\n## Send the new subject to an HTTP's response on request\n\n```javascript\n// the response object is an object literal\n// containing status, body, headers, and duration\ncy.request(\"http://dev.local/users\").then(function(response){\n  // subject is now the response object\n  // {\n  //   status: 200,\n  //   headers: {...},\n  //   body: [{id: 1, name: \"Jane\"}, {id: 2, name: \"LeeAnn\"}],\n  //   duration: 28\n  // }\n})\n```\n\n***\n\n# Method and URL Usage\n\n## Send a `DELETE` request\n\n```javascript\n// Delete a user\ncy.request(\"DELETE\", \"http://localhost:8888/users/827\")\n```\n\n***\n\n# Method and URL and Body Usage\n\n## Send a `POST` request with a JSON body\n\n```javascript\n// the Accepts Request Header is automatically set based\n// on the type of body you supply\ncy\n  .request(\"POST\", \"http://localhost:8888/users/admin\", {name: \"Jane\"})\n  .then(function(response){\n    // response.body would automatically be serialized into JSON\n    expect(response.body).to.have.property(\"name\", \"Jane\") // true\n})\n```\n\n***\n\n# Options Usage\n\n## Request the dashboard while disabling auto redirect\n\n```javascript\n// to test the redirection behavior on login without a session\n// cy.request can be used to check the status code and redirectedToUrl property.\n//\n// the 'redirectedToUrl' property is a special Cypress property under the hood\n// that normalizes the url the browser would normally follow during a redirect\n\ncy.request({\n  url: '/dashboard',\n  followRedirect: false // turn off following redirects automatically\n})\n.then((resp) => {\n  // should have status code 302\n  expect(resp.status).to.eq(302)\n\n  // when we turn off following redirects, Cypress will also send us\n  // a 'redirectedToUrl' property with the fully qualified URL that we were redirected to.\n  expect(resp.redirectedToUrl).to.eq(\"http://localhost:8082/unauthorized\")\n})\n```\n\n***\n\n## HTML form submissions using form option\n\n```javascript\n// oftentimes once we have a proper e2e test around logging in\n// there is NO more reason to actually use our UI to log in users\n// doing so wastes a huge amount of time, as our entire page has to load\n// all associated resources, we have to wait to fill the\n// form and for the form submission and redirection process\n//\n// with cy.request we can bypass all of this because it automatically gets\n// and sets cookies under the hood which acts exactly as if these requests\n// came from the browser\n\ncy\n  .request({\n    method: 'POST',\n    url: '/login_with_form', // baseUrl will be prepended to this url\n    form: true, // indicates the body should be form urlencoded and sets Content-Type: application/x-www-form-urlencoded headers\n    body: {\n      username: 'jane.lane',\n      password: 'password123'\n    }\n  })\n\n  // just to prove we have a session\n  cy.getCookie(\"cypress-session-cookie\").should('exist')\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe using cy.request for HTML form submissions](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_html_web_form_spec.js)\",\n  \"title\": \"Using cy.request for HTML Forms\"\n}\n[/block]\n\n***\n\n# Notes\n\n## Why don't I see the XHR in the Network Tab of the Chrome Dev Tools?\n\nCypress does not actually make an XHR request out of the browser. Under the hood we are making the HTTP request from the desktop application (in node). Therefore you will not see the request inside of the Chrome Dev Tools.\n\nNote that we automatically set both Cookies + User Agent headers correctly as if the request was really coming from the browser.\n\n***\n\n## CORS is bypassed\n\nNormally when the browser detects a cross-origin HTTP request, it will send an `OPTIONS` preflight check to ensure the server allows cross-origin requests. `cy.request` bypasses CORS entirely.\n\n```javascript\n// we can make requests to any external server, no problem.\ncy\n  .request(\"https://www.google.com/webhp?#q=cypress.io+cors\")\n    .its(\"body\")\n    .should(\"include\", \"Testing, the way it should be\") // true\n```\n\n***\n\n## Cookies are automatically sent and received\n\nBefore sending the HTTP request, we will automatically attach cookies that would have otherwise been attached had the request come from the browser. Additionally, if a response has a `Set-Cookie` header, these are automatically set back on the browser cookies.\n\nIn other words, `cy.request` transparently performs all of the underlying functions as if it came from the browser.\n\n***\n\n## Rules for resolving a relative request url\n\nIf you provide a non fully qualified domain name (FQDN), Cypress will make its best guess as to which host you want the request to go to.\n\n```javascript\ncy\n  // after you visit somewhere, Cypress will assume this is the host\n  .visit(\"http://localhost:8080/app\")\n  .request(\"users/1.json\") // <-- url is http://localhost:8080/users/1.json\n```\n\nIf you make the `cy.request` prior to visiting a page, Cypress will use the host configured as the `baseUrl` property inside of `cypress.json`.\n\n```javascript\n// cypress.json\n{\n  baseUrl: \"http://localhost:1234\"\n}\n```\n\n```javascript\n// inside of your tests\ncy.request(\"seed/admin\") //<-- url is http://localhost:1234/seed/admin\n```\n\nIf Cypress cannot determine the host it will throw an explicit error.\n\n***\n\n# Related\n\n- [Recipe: Logging In - HTML Web Form](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_html_web_form_spec.js)\n- [Recipe: Logging In - XHR Web Form](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_xhr_web_form_spec.js)\n- [Recipe: Logging In - CSRF Tokens](https://github.com/cypress-io/cypress-example-recipes#logging-in---csrf-tokens)\n- [Recipe: Logging In - Single Sign on](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_single_sign_on_spec.js)\n- [visit](https://on.cypress.io/api/visit)\n","date":"2017-04-19T18:50:48.000Z","updated":"2017-04-19T18:50:48.000Z","path":"api/commands/request.html","comments":1,"layout":"page","_id":"cj1pc3ifw0004n9g8m1wpyrl3","content":"<p>Use <code>cy.request</code> to make HTTP requests. Great for talking to an external endpoint before, during, or after your tests for seeding, querying records, or API testing.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the <code>response</code> as an object literal.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.request</code> will wait for the response for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\">responseTimeout</a> or the <a href=\"#section-options\"><code>timeout</code></a> passed in the options object of the command.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-request-url\"><a href=\"#cy-request-url\" class=\"headerlink\" title=\"cy.request( url )\"></a><a href=\"#section-url-usage\">cy.request( <em>url</em> )</a></h1><p>Makes a <code>GET</code> request using the specified url.</p>\n<hr>\n<h1 id=\"cy-request-url-body\"><a href=\"#cy-request-url-body\" class=\"headerlink\" title=\"cy.request( url, body )\"></a><a href=\"#section-url-and-body-usage\">cy.request( <em>url</em>, <em>body</em> )</a></h1><p>Make a <code>GET</code> request to the provided url with the provided body.</p>\n<hr>\n<h1 id=\"cy-request-method-url\"><a href=\"#cy-request-method-url\" class=\"headerlink\" title=\"cy.request( method, url )\"></a><a href=\"#section-method-and-url-usage\">cy.request( <em>method</em>, <em>url</em> )</a></h1><p>Make a request using the provided method to the specified url.</p>\n<hr>\n<h1 id=\"cy-request-method-url-body\"><a href=\"#cy-request-method-url-body\" class=\"headerlink\" title=\"cy.request( method, url, body )\"></a><a href=\"#section-method-and-url-and-body-usage\">cy.request( <em>method</em>, <em>url</em>, <em>body</em> )</a></h1><p>Additionally pass in the request <code>body</code> as a <code>String</code> or <code>Object Literal</code>. Cypress will set the <code>Accepts</code> request header and serialize the response body by its <code>Content-Type</code>.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.request</code>.</p>\n<p><strong><a href=\"#options-usage\">cy.request( <em>options</em> )</a></strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>auth</code></td>\n<td><code>null</code></td>\n<td>Any auth to send. Accepts an object literal.</td>\n</tr>\n<tr>\n<td><code>body</code></td>\n<td><code>null</code></td>\n<td>The Request Body to send along with the request.</td>\n</tr>\n<tr>\n<td><code>failOnStatusCode</code></td>\n<td><code>true</code></td>\n<td>Whether to fail on response codes other than <code>2xx</code> and <code>3xx</code>.</td>\n</tr>\n<tr>\n<td><code>followRedirect</code></td>\n<td><code>true</code></td>\n<td>Whether to automatically follow redirects.</td>\n</tr>\n<tr>\n<td><code>form</code></td>\n<td><code>false</code></td>\n<td>Whether to convert the <code>body</code> values to urlencoded content and automatically set the <code>x-www-form-urlencoded</code> header.</td>\n</tr>\n<tr>\n<td><code>gzip</code></td>\n<td><code>true</code></td>\n<td>Whether to accept the <code>gzip</code> encoding.</td>\n</tr>\n<tr>\n<td><code>headers</code></td>\n<td><code>null</code></td>\n<td>Any additional headers to send. Accepts an object literal.</td>\n</tr>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>Whether to log the request in the Command Log</td>\n</tr>\n<tr>\n<td><code>method</code></td>\n<td><code>GET</code></td>\n<td>The HTTP method to use when making the request.</td>\n</tr>\n<tr>\n<td><code>qs</code></td>\n<td><code>null</code></td>\n<td>The query parameters to be appended to the <code>url</code> option when making the request.</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>responseTimeout</code></a></td>\n<td>Total time to wait for a response (in ms)</td>\n</tr>\n<tr>\n<td><code>url</code></td>\n<td><code>null</code></td>\n<td>The URL to make the request.</td>\n</tr>\n</tbody>\n</table>\n<p>You can also set options for the <code>cy.request</code>‘s <code>baseUrl</code> and <code>responseTimeout</code> globally in <a href=\"https://on.cypress.io/guides/configuration\" target=\"_blank\" rel=\"external\">configuration</a>.</p>\n<hr>\n<h1 id=\"URL-Usage\"><a href=\"#URL-Usage\" class=\"headerlink\" title=\"URL Usage\"></a>URL Usage</h1><h2 id=\"Make-a-GET-request\"><a href=\"#Make-a-GET-request\" class=\"headerlink\" title=\"Make a GET request\"></a>Make a <code>GET</code> request</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// make a request to seed the database prior to running each test</span></div><div class=\"line\">beforeEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  cy.request(<span class=\"string\">\"http://localhost:8080/db/seed\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Issue-a-simple-HTTP-request\"><a href=\"#Issue-a-simple-HTTP-request\" class=\"headerlink\" title=\"Issue a simple HTTP request\"></a>Issue a simple HTTP request</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  <span class=\"comment\">// dont visit this page and load the resources</span></div><div class=\"line\">  <span class=\"comment\">// instead let's just issue a simple HTTP request</span></div><div class=\"line\">  <span class=\"comment\">// so we can make an assertion about its body</span></div><div class=\"line\">  .request(<span class=\"string\">\"/admin\"</span>)</div><div class=\"line\">  .its(<span class=\"string\">\"body\"</span>)</div><div class=\"line\">  .should(<span class=\"string\">\"include\"</span>, <span class=\"string\">\"&lt;h2&gt;admin.html&lt;/h2&gt;\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Send-the-new-subject-to-an-HTTP’s-response-on-request\"><a href=\"#Send-the-new-subject-to-an-HTTP’s-response-on-request\" class=\"headerlink\" title=\"Send the new subject to an HTTP’s response on request\"></a>Send the new subject to an HTTP’s response on request</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// the response object is an object literal</span></div><div class=\"line\"><span class=\"comment\">// containing status, body, headers, and duration</span></div><div class=\"line\">cy.request(<span class=\"string\">\"http://dev.local/users\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// subject is now the response object</span></div><div class=\"line\">  <span class=\"comment\">// &#123;</span></div><div class=\"line\">  <span class=\"comment\">//   status: 200,</span></div><div class=\"line\">  <span class=\"comment\">//   headers: &#123;...&#125;,</span></div><div class=\"line\">  <span class=\"comment\">//   body: [&#123;id: 1, name: \"Jane\"&#125;, &#123;id: 2, name: \"LeeAnn\"&#125;],</span></div><div class=\"line\">  <span class=\"comment\">//   duration: 28</span></div><div class=\"line\">  <span class=\"comment\">// &#125;</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Method-and-URL-Usage\"><a href=\"#Method-and-URL-Usage\" class=\"headerlink\" title=\"Method and URL Usage\"></a>Method and URL Usage</h1><h2 id=\"Send-a-DELETE-request\"><a href=\"#Send-a-DELETE-request\" class=\"headerlink\" title=\"Send a DELETE request\"></a>Send a <code>DELETE</code> request</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Delete a user</span></div><div class=\"line\">cy.request(<span class=\"string\">\"DELETE\"</span>, <span class=\"string\">\"http://localhost:8888/users/827\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Method-and-URL-and-Body-Usage\"><a href=\"#Method-and-URL-and-Body-Usage\" class=\"headerlink\" title=\"Method and URL and Body Usage\"></a>Method and URL and Body Usage</h1><h2 id=\"Send-a-POST-request-with-a-JSON-body\"><a href=\"#Send-a-POST-request-with-a-JSON-body\" class=\"headerlink\" title=\"Send a POST request with a JSON body\"></a>Send a <code>POST</code> request with a JSON body</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// the Accepts Request Header is automatically set based</span></div><div class=\"line\"><span class=\"comment\">// on the type of body you supply</span></div><div class=\"line\">cy</div><div class=\"line\">  .request(<span class=\"string\">\"POST\"</span>, <span class=\"string\">\"http://localhost:8888/users/admin\"</span>, &#123;<span class=\"attr\">name</span>: <span class=\"string\">\"Jane\"</span>&#125;)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// response.body would automatically be serialized into JSON</span></div><div class=\"line\">    expect(response.body).to.have.property(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"Jane\"</span>) <span class=\"comment\">// true</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Options-Usage\"><a href=\"#Options-Usage\" class=\"headerlink\" title=\"Options Usage\"></a>Options Usage</h1><h2 id=\"Request-the-dashboard-while-disabling-auto-redirect\"><a href=\"#Request-the-dashboard-while-disabling-auto-redirect\" class=\"headerlink\" title=\"Request the dashboard while disabling auto redirect\"></a>Request the dashboard while disabling auto redirect</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// to test the redirection behavior on login without a session</span></div><div class=\"line\"><span class=\"comment\">// cy.request can be used to check the status code and redirectedToUrl property.</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">// the 'redirectedToUrl' property is a special Cypress property under the hood</span></div><div class=\"line\"><span class=\"comment\">// that normalizes the url the browser would normally follow during a redirect</span></div><div class=\"line\"></div><div class=\"line\">cy.request(&#123;</div><div class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">'/dashboard'</span>,</div><div class=\"line\">  <span class=\"attr\">followRedirect</span>: <span class=\"literal\">false</span> <span class=\"comment\">// turn off following redirects automatically</span></div><div class=\"line\">&#125;)</div><div class=\"line\">.then(<span class=\"function\">(<span class=\"params\">resp</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// should have status code 302</span></div><div class=\"line\">  expect(resp.status).to.eq(<span class=\"number\">302</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// when we turn off following redirects, Cypress will also send us</span></div><div class=\"line\">  <span class=\"comment\">// a 'redirectedToUrl' property with the fully qualified URL that we were redirected to.</span></div><div class=\"line\">  expect(resp.redirectedToUrl).to.eq(<span class=\"string\">\"http://localhost:8082/unauthorized\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"HTML-form-submissions-using-form-option\"><a href=\"#HTML-form-submissions-using-form-option\" class=\"headerlink\" title=\"HTML form submissions using form option\"></a>HTML form submissions using form option</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// oftentimes once we have a proper e2e test around logging in</span></div><div class=\"line\"><span class=\"comment\">// there is NO more reason to actually use our UI to log in users</span></div><div class=\"line\"><span class=\"comment\">// doing so wastes a huge amount of time, as our entire page has to load</span></div><div class=\"line\"><span class=\"comment\">// all associated resources, we have to wait to fill the</span></div><div class=\"line\"><span class=\"comment\">// form and for the form submission and redirection process</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">// with cy.request we can bypass all of this because it automatically gets</span></div><div class=\"line\"><span class=\"comment\">// and sets cookies under the hood which acts exactly as if these requests</span></div><div class=\"line\"><span class=\"comment\">// came from the browser</span></div><div class=\"line\"></div><div class=\"line\">cy</div><div class=\"line\">  .request(&#123;</div><div class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">'POST'</span>,</div><div class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">'/login_with_form'</span>, <span class=\"comment\">// baseUrl will be prepended to this url</span></div><div class=\"line\">    form: <span class=\"literal\">true</span>, <span class=\"comment\">// indicates the body should be form urlencoded and sets Content-Type: application/x-www-form-urlencoded headers</span></div><div class=\"line\">    body: &#123;</div><div class=\"line\">      <span class=\"attr\">username</span>: <span class=\"string\">'jane.lane'</span>,</div><div class=\"line\">      <span class=\"attr\">password</span>: <span class=\"string\">'password123'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// just to prove we have a session</span></div><div class=\"line\">  cy.getCookie(<span class=\"string\">\"cypress-session-cookie\"</span>).should(<span class=\"string\">'exist'</span>)</div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_html_web_form_spec.js\" target=\"_blank\" rel=\"external\">Check out our example recipe using cy.request for HTML form submissions</a>“,<br>  “title”: “Using cy.request for HTML Forms”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h1><h2 id=\"Why-don’t-I-see-the-XHR-in-the-Network-Tab-of-the-Chrome-Dev-Tools\"><a href=\"#Why-don’t-I-see-the-XHR-in-the-Network-Tab-of-the-Chrome-Dev-Tools\" class=\"headerlink\" title=\"Why don’t I see the XHR in the Network Tab of the Chrome Dev Tools?\"></a>Why don’t I see the XHR in the Network Tab of the Chrome Dev Tools?</h2><p>Cypress does not actually make an XHR request out of the browser. Under the hood we are making the HTTP request from the desktop application (in node). Therefore you will not see the request inside of the Chrome Dev Tools.</p>\n<p>Note that we automatically set both Cookies + User Agent headers correctly as if the request was really coming from the browser.</p>\n<hr>\n<h2 id=\"CORS-is-bypassed\"><a href=\"#CORS-is-bypassed\" class=\"headerlink\" title=\"CORS is bypassed\"></a>CORS is bypassed</h2><p>Normally when the browser detects a cross-origin HTTP request, it will send an <code>OPTIONS</code> preflight check to ensure the server allows cross-origin requests. <code>cy.request</code> bypasses CORS entirely.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// we can make requests to any external server, no problem.</span></div><div class=\"line\">cy</div><div class=\"line\">  .request(<span class=\"string\">\"https://www.google.com/webhp?#q=cypress.io+cors\"</span>)</div><div class=\"line\">    .its(<span class=\"string\">\"body\"</span>)</div><div class=\"line\">    .should(<span class=\"string\">\"include\"</span>, <span class=\"string\">\"Testing, the way it should be\"</span>) <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Cookies-are-automatically-sent-and-received\"><a href=\"#Cookies-are-automatically-sent-and-received\" class=\"headerlink\" title=\"Cookies are automatically sent and received\"></a>Cookies are automatically sent and received</h2><p>Before sending the HTTP request, we will automatically attach cookies that would have otherwise been attached had the request come from the browser. Additionally, if a response has a <code>Set-Cookie</code> header, these are automatically set back on the browser cookies.</p>\n<p>In other words, <code>cy.request</code> transparently performs all of the underlying functions as if it came from the browser.</p>\n<hr>\n<h2 id=\"Rules-for-resolving-a-relative-request-url\"><a href=\"#Rules-for-resolving-a-relative-request-url\" class=\"headerlink\" title=\"Rules for resolving a relative request url\"></a>Rules for resolving a relative request url</h2><p>If you provide a non fully qualified domain name (FQDN), Cypress will make its best guess as to which host you want the request to go to.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  <span class=\"comment\">// after you visit somewhere, Cypress will assume this is the host</span></div><div class=\"line\">  .visit(<span class=\"string\">\"http://localhost:8080/app\"</span>)</div><div class=\"line\">  .request(<span class=\"string\">\"users/1.json\"</span>) <span class=\"comment\">// &lt;-- url is http://localhost:8080/users/1.json</span></div></pre></td></tr></table></figure>\n<p>If you make the <code>cy.request</code> prior to visiting a page, Cypress will use the host configured as the <code>baseUrl</code> property inside of <code>cypress.json</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// cypress.json</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">baseUrl</span>: <span class=\"string\">\"http://localhost:1234\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// inside of your tests</span></div><div class=\"line\">cy.request(<span class=\"string\">\"seed/admin\"</span>) <span class=\"comment\">//&lt;-- url is http://localhost:1234/seed/admin</span></div></pre></td></tr></table></figure>\n<p>If Cypress cannot determine the host it will throw an explicit error.</p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_html_web_form_spec.js\" target=\"_blank\" rel=\"external\">Recipe: Logging In - HTML Web Form</a></li>\n<li><a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_xhr_web_form_spec.js\" target=\"_blank\" rel=\"external\">Recipe: Logging In - XHR Web Form</a></li>\n<li><a href=\"https://github.com/cypress-io/cypress-example-recipes#logging-in---csrf-tokens\" target=\"_blank\" rel=\"external\">Recipe: Logging In - CSRF Tokens</a></li>\n<li><a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_single_sign_on_spec.js\" target=\"_blank\" rel=\"external\">Recipe: Logging In - Single Sign on</a></li>\n<li><a href=\"https://on.cypress.io/api/visit\" target=\"_blank\" rel=\"external\">visit</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Use <code>cy.request</code> to make HTTP requests. Great for talking to an external endpoint before, during, or after your tests for seeding, querying records, or API testing.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the <code>response</code> as an object literal.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.request</code> will wait for the response for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\">responseTimeout</a> or the <a href=\"#section-options\"><code>timeout</code></a> passed in the options object of the command.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-request-url\"><a href=\"#cy-request-url\" class=\"headerlink\" title=\"cy.request( url )\"></a><a href=\"#section-url-usage\">cy.request( <em>url</em> )</a></h1><p>Makes a <code>GET</code> request using the specified url.</p>\n<hr>\n<h1 id=\"cy-request-url-body\"><a href=\"#cy-request-url-body\" class=\"headerlink\" title=\"cy.request( url, body )\"></a><a href=\"#section-url-and-body-usage\">cy.request( <em>url</em>, <em>body</em> )</a></h1><p>Make a <code>GET</code> request to the provided url with the provided body.</p>\n<hr>\n<h1 id=\"cy-request-method-url\"><a href=\"#cy-request-method-url\" class=\"headerlink\" title=\"cy.request( method, url )\"></a><a href=\"#section-method-and-url-usage\">cy.request( <em>method</em>, <em>url</em> )</a></h1><p>Make a request using the provided method to the specified url.</p>\n<hr>\n<h1 id=\"cy-request-method-url-body\"><a href=\"#cy-request-method-url-body\" class=\"headerlink\" title=\"cy.request( method, url, body )\"></a><a href=\"#section-method-and-url-and-body-usage\">cy.request( <em>method</em>, <em>url</em>, <em>body</em> )</a></h1><p>Additionally pass in the request <code>body</code> as a <code>String</code> or <code>Object Literal</code>. Cypress will set the <code>Accepts</code> request header and serialize the response body by its <code>Content-Type</code>.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.request</code>.</p>\n<p><strong><a href=\"#options-usage\">cy.request( <em>options</em> )</a></strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>auth</code></td>\n<td><code>null</code></td>\n<td>Any auth to send. Accepts an object literal.</td>\n</tr>\n<tr>\n<td><code>body</code></td>\n<td><code>null</code></td>\n<td>The Request Body to send along with the request.</td>\n</tr>\n<tr>\n<td><code>failOnStatusCode</code></td>\n<td><code>true</code></td>\n<td>Whether to fail on response codes other than <code>2xx</code> and <code>3xx</code>.</td>\n</tr>\n<tr>\n<td><code>followRedirect</code></td>\n<td><code>true</code></td>\n<td>Whether to automatically follow redirects.</td>\n</tr>\n<tr>\n<td><code>form</code></td>\n<td><code>false</code></td>\n<td>Whether to convert the <code>body</code> values to urlencoded content and automatically set the <code>x-www-form-urlencoded</code> header.</td>\n</tr>\n<tr>\n<td><code>gzip</code></td>\n<td><code>true</code></td>\n<td>Whether to accept the <code>gzip</code> encoding.</td>\n</tr>\n<tr>\n<td><code>headers</code></td>\n<td><code>null</code></td>\n<td>Any additional headers to send. Accepts an object literal.</td>\n</tr>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>Whether to log the request in the Command Log</td>\n</tr>\n<tr>\n<td><code>method</code></td>\n<td><code>GET</code></td>\n<td>The HTTP method to use when making the request.</td>\n</tr>\n<tr>\n<td><code>qs</code></td>\n<td><code>null</code></td>\n<td>The query parameters to be appended to the <code>url</code> option when making the request.</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>responseTimeout</code></a></td>\n<td>Total time to wait for a response (in ms)</td>\n</tr>\n<tr>\n<td><code>url</code></td>\n<td><code>null</code></td>\n<td>The URL to make the request.</td>\n</tr>\n</tbody>\n</table>\n<p>You can also set options for the <code>cy.request</code>‘s <code>baseUrl</code> and <code>responseTimeout</code> globally in <a href=\"https://on.cypress.io/guides/configuration\">configuration</a>.</p>\n<hr>\n<h1 id=\"URL-Usage\"><a href=\"#URL-Usage\" class=\"headerlink\" title=\"URL Usage\"></a>URL Usage</h1><h2 id=\"Make-a-GET-request\"><a href=\"#Make-a-GET-request\" class=\"headerlink\" title=\"Make a GET request\"></a>Make a <code>GET</code> request</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// make a request to seed the database prior to running each test</span></div><div class=\"line\">beforeEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  cy.request(<span class=\"string\">\"http://localhost:8080/db/seed\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Issue-a-simple-HTTP-request\"><a href=\"#Issue-a-simple-HTTP-request\" class=\"headerlink\" title=\"Issue a simple HTTP request\"></a>Issue a simple HTTP request</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  <span class=\"comment\">// dont visit this page and load the resources</span></div><div class=\"line\">  <span class=\"comment\">// instead let's just issue a simple HTTP request</span></div><div class=\"line\">  <span class=\"comment\">// so we can make an assertion about its body</span></div><div class=\"line\">  .request(<span class=\"string\">\"/admin\"</span>)</div><div class=\"line\">  .its(<span class=\"string\">\"body\"</span>)</div><div class=\"line\">  .should(<span class=\"string\">\"include\"</span>, <span class=\"string\">\"&lt;h2&gt;admin.html&lt;/h2&gt;\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Send-the-new-subject-to-an-HTTP’s-response-on-request\"><a href=\"#Send-the-new-subject-to-an-HTTP’s-response-on-request\" class=\"headerlink\" title=\"Send the new subject to an HTTP’s response on request\"></a>Send the new subject to an HTTP’s response on request</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// the response object is an object literal</span></div><div class=\"line\"><span class=\"comment\">// containing status, body, headers, and duration</span></div><div class=\"line\">cy.request(<span class=\"string\">\"http://dev.local/users\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// subject is now the response object</span></div><div class=\"line\">  <span class=\"comment\">// &#123;</span></div><div class=\"line\">  <span class=\"comment\">//   status: 200,</span></div><div class=\"line\">  <span class=\"comment\">//   headers: &#123;...&#125;,</span></div><div class=\"line\">  <span class=\"comment\">//   body: [&#123;id: 1, name: \"Jane\"&#125;, &#123;id: 2, name: \"LeeAnn\"&#125;],</span></div><div class=\"line\">  <span class=\"comment\">//   duration: 28</span></div><div class=\"line\">  <span class=\"comment\">// &#125;</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Method-and-URL-Usage\"><a href=\"#Method-and-URL-Usage\" class=\"headerlink\" title=\"Method and URL Usage\"></a>Method and URL Usage</h1><h2 id=\"Send-a-DELETE-request\"><a href=\"#Send-a-DELETE-request\" class=\"headerlink\" title=\"Send a DELETE request\"></a>Send a <code>DELETE</code> request</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Delete a user</span></div><div class=\"line\">cy.request(<span class=\"string\">\"DELETE\"</span>, <span class=\"string\">\"http://localhost:8888/users/827\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Method-and-URL-and-Body-Usage\"><a href=\"#Method-and-URL-and-Body-Usage\" class=\"headerlink\" title=\"Method and URL and Body Usage\"></a>Method and URL and Body Usage</h1><h2 id=\"Send-a-POST-request-with-a-JSON-body\"><a href=\"#Send-a-POST-request-with-a-JSON-body\" class=\"headerlink\" title=\"Send a POST request with a JSON body\"></a>Send a <code>POST</code> request with a JSON body</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// the Accepts Request Header is automatically set based</span></div><div class=\"line\"><span class=\"comment\">// on the type of body you supply</span></div><div class=\"line\">cy</div><div class=\"line\">  .request(<span class=\"string\">\"POST\"</span>, <span class=\"string\">\"http://localhost:8888/users/admin\"</span>, &#123;<span class=\"attr\">name</span>: <span class=\"string\">\"Jane\"</span>&#125;)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// response.body would automatically be serialized into JSON</span></div><div class=\"line\">    expect(response.body).to.have.property(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"Jane\"</span>) <span class=\"comment\">// true</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Options-Usage\"><a href=\"#Options-Usage\" class=\"headerlink\" title=\"Options Usage\"></a>Options Usage</h1><h2 id=\"Request-the-dashboard-while-disabling-auto-redirect\"><a href=\"#Request-the-dashboard-while-disabling-auto-redirect\" class=\"headerlink\" title=\"Request the dashboard while disabling auto redirect\"></a>Request the dashboard while disabling auto redirect</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// to test the redirection behavior on login without a session</span></div><div class=\"line\"><span class=\"comment\">// cy.request can be used to check the status code and redirectedToUrl property.</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">// the 'redirectedToUrl' property is a special Cypress property under the hood</span></div><div class=\"line\"><span class=\"comment\">// that normalizes the url the browser would normally follow during a redirect</span></div><div class=\"line\"></div><div class=\"line\">cy.request(&#123;</div><div class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">'/dashboard'</span>,</div><div class=\"line\">  <span class=\"attr\">followRedirect</span>: <span class=\"literal\">false</span> <span class=\"comment\">// turn off following redirects automatically</span></div><div class=\"line\">&#125;)</div><div class=\"line\">.then(<span class=\"function\">(<span class=\"params\">resp</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// should have status code 302</span></div><div class=\"line\">  expect(resp.status).to.eq(<span class=\"number\">302</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// when we turn off following redirects, Cypress will also send us</span></div><div class=\"line\">  <span class=\"comment\">// a 'redirectedToUrl' property with the fully qualified URL that we were redirected to.</span></div><div class=\"line\">  expect(resp.redirectedToUrl).to.eq(<span class=\"string\">\"http://localhost:8082/unauthorized\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"HTML-form-submissions-using-form-option\"><a href=\"#HTML-form-submissions-using-form-option\" class=\"headerlink\" title=\"HTML form submissions using form option\"></a>HTML form submissions using form option</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// oftentimes once we have a proper e2e test around logging in</span></div><div class=\"line\"><span class=\"comment\">// there is NO more reason to actually use our UI to log in users</span></div><div class=\"line\"><span class=\"comment\">// doing so wastes a huge amount of time, as our entire page has to load</span></div><div class=\"line\"><span class=\"comment\">// all associated resources, we have to wait to fill the</span></div><div class=\"line\"><span class=\"comment\">// form and for the form submission and redirection process</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">// with cy.request we can bypass all of this because it automatically gets</span></div><div class=\"line\"><span class=\"comment\">// and sets cookies under the hood which acts exactly as if these requests</span></div><div class=\"line\"><span class=\"comment\">// came from the browser</span></div><div class=\"line\"></div><div class=\"line\">cy</div><div class=\"line\">  .request(&#123;</div><div class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">'POST'</span>,</div><div class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">'/login_with_form'</span>, <span class=\"comment\">// baseUrl will be prepended to this url</span></div><div class=\"line\">    form: <span class=\"literal\">true</span>, <span class=\"comment\">// indicates the body should be form urlencoded and sets Content-Type: application/x-www-form-urlencoded headers</span></div><div class=\"line\">    body: &#123;</div><div class=\"line\">      <span class=\"attr\">username</span>: <span class=\"string\">'jane.lane'</span>,</div><div class=\"line\">      <span class=\"attr\">password</span>: <span class=\"string\">'password123'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// just to prove we have a session</span></div><div class=\"line\">  cy.getCookie(<span class=\"string\">\"cypress-session-cookie\"</span>).should(<span class=\"string\">'exist'</span>)</div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_html_web_form_spec.js\">Check out our example recipe using cy.request for HTML form submissions</a>“,<br>  “title”: “Using cy.request for HTML Forms”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h1><h2 id=\"Why-don’t-I-see-the-XHR-in-the-Network-Tab-of-the-Chrome-Dev-Tools\"><a href=\"#Why-don’t-I-see-the-XHR-in-the-Network-Tab-of-the-Chrome-Dev-Tools\" class=\"headerlink\" title=\"Why don’t I see the XHR in the Network Tab of the Chrome Dev Tools?\"></a>Why don’t I see the XHR in the Network Tab of the Chrome Dev Tools?</h2><p>Cypress does not actually make an XHR request out of the browser. Under the hood we are making the HTTP request from the desktop application (in node). Therefore you will not see the request inside of the Chrome Dev Tools.</p>\n<p>Note that we automatically set both Cookies + User Agent headers correctly as if the request was really coming from the browser.</p>\n<hr>\n<h2 id=\"CORS-is-bypassed\"><a href=\"#CORS-is-bypassed\" class=\"headerlink\" title=\"CORS is bypassed\"></a>CORS is bypassed</h2><p>Normally when the browser detects a cross-origin HTTP request, it will send an <code>OPTIONS</code> preflight check to ensure the server allows cross-origin requests. <code>cy.request</code> bypasses CORS entirely.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// we can make requests to any external server, no problem.</span></div><div class=\"line\">cy</div><div class=\"line\">  .request(<span class=\"string\">\"https://www.google.com/webhp?#q=cypress.io+cors\"</span>)</div><div class=\"line\">    .its(<span class=\"string\">\"body\"</span>)</div><div class=\"line\">    .should(<span class=\"string\">\"include\"</span>, <span class=\"string\">\"Testing, the way it should be\"</span>) <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Cookies-are-automatically-sent-and-received\"><a href=\"#Cookies-are-automatically-sent-and-received\" class=\"headerlink\" title=\"Cookies are automatically sent and received\"></a>Cookies are automatically sent and received</h2><p>Before sending the HTTP request, we will automatically attach cookies that would have otherwise been attached had the request come from the browser. Additionally, if a response has a <code>Set-Cookie</code> header, these are automatically set back on the browser cookies.</p>\n<p>In other words, <code>cy.request</code> transparently performs all of the underlying functions as if it came from the browser.</p>\n<hr>\n<h2 id=\"Rules-for-resolving-a-relative-request-url\"><a href=\"#Rules-for-resolving-a-relative-request-url\" class=\"headerlink\" title=\"Rules for resolving a relative request url\"></a>Rules for resolving a relative request url</h2><p>If you provide a non fully qualified domain name (FQDN), Cypress will make its best guess as to which host you want the request to go to.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  <span class=\"comment\">// after you visit somewhere, Cypress will assume this is the host</span></div><div class=\"line\">  .visit(<span class=\"string\">\"http://localhost:8080/app\"</span>)</div><div class=\"line\">  .request(<span class=\"string\">\"users/1.json\"</span>) <span class=\"comment\">// &lt;-- url is http://localhost:8080/users/1.json</span></div></pre></td></tr></table></figure>\n<p>If you make the <code>cy.request</code> prior to visiting a page, Cypress will use the host configured as the <code>baseUrl</code> property inside of <code>cypress.json</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// cypress.json</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">baseUrl</span>: <span class=\"string\">\"http://localhost:1234\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// inside of your tests</span></div><div class=\"line\">cy.request(<span class=\"string\">\"seed/admin\"</span>) <span class=\"comment\">//&lt;-- url is http://localhost:1234/seed/admin</span></div></pre></td></tr></table></figure>\n<p>If Cypress cannot determine the host it will throw an explicit error.</p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_html_web_form_spec.js\">Recipe: Logging In - HTML Web Form</a></li>\n<li><a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_xhr_web_form_spec.js\">Recipe: Logging In - XHR Web Form</a></li>\n<li><a href=\"https://github.com/cypress-io/cypress-example-recipes#logging-in---csrf-tokens\">Recipe: Logging In - CSRF Tokens</a></li>\n<li><a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_single_sign_on_spec.js\">Recipe: Logging In - Single Sign on</a></li>\n<li><a href=\"https://on.cypress.io/api/visit\">visit</a></li>\n</ul>\n"},{"title":"root","_content":"\nGet the root element. By default the root is `document`. When calling `cy.root` in a [`cy.within`](https://on.cypress.io/api/within), the root element will be the return of the within command.\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.root` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.root()](#section-root-usage)\n\nGet the root element.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.root`.\n\n**cy.root( *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Get the root element\n\n```javascript\n// returns document\ncy.root()\n```\n\n***\n\n## Get the root element in a `within` scope\n\n```html\n<form>\n  <input name=\"email\" type=\"email\">\n  <input name=\"password\" type=\"password\">\n  <button type=\"submit\">Login</button>\n</form>\n```\n\n```javascript\ncy.get(\"form\").within(function(){\n  cy\n    .get(\"input[name='email']\").type(\"john.doe@email.com\")\n    .get(\"input[name='password']\").type(\"password\")\n\n    // the root element in a within is the previous\n    // commands subject, in this case <form>\n    .root().submit()\n})\n```\n\n***\n\n# Related\n\n- [get](https://on.cypress.io/api/get)\n- [within](https://on.cypress.io/api/within)\n","source":"api/commands/root.md","raw":"title: root\n---\n\nGet the root element. By default the root is `document`. When calling `cy.root` in a [`cy.within`](https://on.cypress.io/api/within), the root element will be the return of the within command.\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.root` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.root()](#section-root-usage)\n\nGet the root element.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.root`.\n\n**cy.root( *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Get the root element\n\n```javascript\n// returns document\ncy.root()\n```\n\n***\n\n## Get the root element in a `within` scope\n\n```html\n<form>\n  <input name=\"email\" type=\"email\">\n  <input name=\"password\" type=\"password\">\n  <button type=\"submit\">Login</button>\n</form>\n```\n\n```javascript\ncy.get(\"form\").within(function(){\n  cy\n    .get(\"input[name='email']\").type(\"john.doe@email.com\")\n    .get(\"input[name='password']\").type(\"password\")\n\n    // the root element in a within is the previous\n    // commands subject, in this case <form>\n    .root().submit()\n})\n```\n\n***\n\n# Related\n\n- [get](https://on.cypress.io/api/get)\n- [within](https://on.cypress.io/api/within)\n","date":"2017-04-19T18:50:48.000Z","updated":"2017-04-19T18:50:48.000Z","path":"api/commands/root.html","comments":1,"layout":"page","_id":"cj1pc3ifx0005n9g8ss5o1x64","content":"<p>Get the root element. By default the root is <code>document</code>. When calling <code>cy.root</code> in a <a href=\"https://on.cypress.io/api/within\" target=\"_blank\" rel=\"external\"><code>cy.within</code></a>, the root element will be the return of the within command.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.root</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-root\"><a href=\"#cy-root\" class=\"headerlink\" title=\"cy.root()\"></a><a href=\"#section-root-usage\">cy.root()</a></h1><p>Get the root element.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.root</code>.</p>\n<p><strong>cy.root( <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Get-the-root-element\"><a href=\"#Get-the-root-element\" class=\"headerlink\" title=\"Get the root element\"></a>Get the root element</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns document</span></div><div class=\"line\">cy.root()</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Get-the-root-element-in-a-within-scope\"><a href=\"#Get-the-root-element-in-a-within-scope\" class=\"headerlink\" title=\"Get the root element in a within scope\"></a>Get the root element in a <code>within</code> scope</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"form\"</span>).within(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  cy</div><div class=\"line\">    .get(<span class=\"string\">\"input[name='email']\"</span>).type(<span class=\"string\">\"john.doe@email.com\"</span>)</div><div class=\"line\">    .get(<span class=\"string\">\"input[name='password']\"</span>).type(<span class=\"string\">\"password\"</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// the root element in a within is the previous</span></div><div class=\"line\">    <span class=\"comment\">// commands subject, in this case &lt;form&gt;</span></div><div class=\"line\">    .root().submit()</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/get\" target=\"_blank\" rel=\"external\">get</a></li>\n<li><a href=\"https://on.cypress.io/api/within\" target=\"_blank\" rel=\"external\">within</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Get the root element. By default the root is <code>document</code>. When calling <code>cy.root</code> in a <a href=\"https://on.cypress.io/api/within\"><code>cy.within</code></a>, the root element will be the return of the within command.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.root</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-root\"><a href=\"#cy-root\" class=\"headerlink\" title=\"cy.root()\"></a><a href=\"#section-root-usage\">cy.root()</a></h1><p>Get the root element.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.root</code>.</p>\n<p><strong>cy.root( <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Get-the-root-element\"><a href=\"#Get-the-root-element\" class=\"headerlink\" title=\"Get the root element\"></a>Get the root element</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns document</span></div><div class=\"line\">cy.root()</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Get-the-root-element-in-a-within-scope\"><a href=\"#Get-the-root-element-in-a-within-scope\" class=\"headerlink\" title=\"Get the root element in a within scope\"></a>Get the root element in a <code>within</code> scope</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"form\"</span>).within(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  cy</div><div class=\"line\">    .get(<span class=\"string\">\"input[name='email']\"</span>).type(<span class=\"string\">\"john.doe@email.com\"</span>)</div><div class=\"line\">    .get(<span class=\"string\">\"input[name='password']\"</span>).type(<span class=\"string\">\"password\"</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// the root element in a within is the previous</span></div><div class=\"line\">    <span class=\"comment\">// commands subject, in this case &lt;form&gt;</span></div><div class=\"line\">    .root().submit()</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/get\">get</a></li>\n<li><a href=\"https://on.cypress.io/api/within\">within</a></li>\n</ul>\n"},{"title":"route","_content":"\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Read about Network Requests first.](https://on.cypress.io/guides/network-requests-xhr)\",\n  \"title\": \"New to Cypress?\"\n}\n[/block]\n\nUse `cy.route` to manage the behavior of network requests.\n\n| | |\n|--- | --- |\n| **Returns** | `null` |\n| **Timeout** | *cannot timeout* |\n\n***\n\n# [cy.route( *url* )](#section-url-usage)\n\nSet a route matching the specific `url` which is not stubbed but can be waited on later. This will match `GET` request methods.\n\n***\n\n# [cy.route( *url*, *response* )](#section-url-and-response-usage)\n\nSet a route matching the `url` stubbed with the supplied `response`. This will match `GET` request methods.\n\n***\n\n# [cy.route( *method*, *url* )](#section-method-and-url-usage)\n\nSet a route matching the specific `method` and `url` which is not stubbed but can be waited on later.\n\n***\n\n# [cy.route( *method*, *url*, *response* )](#section-method-url-and-response-usage)\n\nSet a route matching the `method` and `url` stubbed with the supplied `response`.\n\n***\n\n# [cy.route( *function* )](#section-function-usage)\n\nSet a route by returning an object literal from your callback function.\n\nFunctions which return a promise will automatically be awaited.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.route`. By default `cy.route` inherits its options from [`cy.server`](https://on.cypress.io/api/server).\n\n**[cy.route( *options* )](#options-usage)**\n\nOption | Default | Notes\n--- | --- | ---\n`method` | `GET` | method to match against requests\n`url`    | `null` | string or RegExp url to match against request urls\n`response` | `null` | response body when stubbing routes\n`status` | `200` | response status code when stubbing routes\n`delay` | `0` | delay for stubbed responses (in ms)\n`headers` | `null` | response headers for stubbed routes\n`force404` | `false` | forcibly send XHR's to 404 status when these XHR's do not match any existing [`cy.routes`](https://on.cypress.io/api/routes)\n`onRequest` | `null` | callback function when a request is sent\n`onResponse` | `null` | callback function when a response is returned\n`onAbort` | `null` | callback function which fires anytime an XHR is aborted\n\nYou can also set options for all [cy.wait](https://on.cypress.io/api/wait) `requestTimeout` and `responseTimeout` globally in [configuration](https://on.cypress.io/guides/configuration) to control how long to wait for the request and response of the supplied route.\n\n***\n\n# Url Usage\n\n## Wait on non-stubbed XHR's by url\n\n```javascript\n// by not passing a response to the route\n// Cypress will pass this request through\n// without stubbing it - but still allow\n// us to wait for it later\ncy\n  .server()\n  .route(/users/).as(\"getUsers\")\n  .visit(\"/users\")\n  .wait(\"@getUsers\")\n```\n\n***\n\n# Method and Url Usage\n\n## Wait on non-stubbed XHR's by method + url\n\n```javascript\n// by not passing a response to the route\n// Cypress will pass this request through\n// without stubbing it - but still allow\n// us to wait for it later\ncy\n  .server()\n  .route(\"POST\", /users/).as(\"postUser\")\n  .visit(\"/users\")\n  .get(\"#first-name\").type(\"Julius{enter}\")\n  .wait(\"@postUser\")\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe using cy.route to POST for login](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_xhr_web_form_spec.js)\",\n  \"title\": \"Setup route to POST to login\"\n}\n[/block]\n\n***\n\n# Url and Response Usage\n\n## Url as a string\n\nWhen passing a `string` as the `url`, the XHR's URL must match exactly what you've written.\n\n```javascript\ncy\n  .server()\n  .route(\"/users\", [{id: 1, name: \"Pat\"}])\n```\n\n***\n\n## Url as a string glob\n\nAs of `0.16.3` we now accept glob patterns. Under the hood Cypress is using [minimatch](https://github.com/isaacs/minimatch) to match glob patterns with URL's.\n\nThis means you can take advantage of `*` and `**` support. This makes it **much** easier to route against dynamic segments without having to build up a complex `regex`.\n\nWe expose [`Cypress.minimatch`](https://on.cypress.io/api/cypress-minimatch) as a function which you can use in your Dev Tools console to test routes. You can iterate much faster on a working pattern than guessing at why something isn't working.\n\n```javascript\n// match against any user id\n// /users/123/comments     <-- matches\n// /users/123/comments/465 <-- not matches\ncy\n  .server()\n  .route(\"/users/*/comments\")\n```\n\n```javascript\n// use ** glob to match all segments\n// /posts/1            <-- matches\n// /posts/foo/bar/baz  <-- matches\n// /posts/quuz?a=b&1=2 <-- matches\ncy\n  .server()\n  .route(\"/posts/**\")\n```\n\n***\n\n## Override Url options\n\nWhen we check `glob` patterns with `minimatch` by default we use `{ matchBase: true}`.\n\nYou can override these options in `cy.server`.\n\nIf you'd like to permanently override these options you can do so by setting [`Cypress.Server.defaults(...)`](https://on.cypress.io/api/api-server).\n\n```javascript\ncy\n  .server({\n    urlMatchingOptions: { matchBase: false, dot: true }\n  })\n  .route(...)\n```\n\n***\n\n## Url as a RegExp\n\nWhen passing a RegExp as the `url`, the XHR's url will be tested against the regular expression and will apply if it passes.\n\n```javascript\ncy\n  .server()\n  .route(/users\\/\\d+/, {id: 1, name: \"Phoebe\"})\n```\n\n```javascript\n// Application Code\n\n$.get(\"/users/1337\", function(data){\n  console.log(data) // => {id: 1, name: \"Phoebe\"}\n})\n```\n\n***\n\n## Matching requests and routes\n\nAny request that matches the `method` and `url` of a route will be responded to based on the configuration of that route.\n\nIf a request doesn't match any route [it will automatically receive a 404](#notes). For instance given we have the following routes:\n\n```javascript\ncy\n  .server()\n  .route(/users/, [{id: 19, name: \"Laura\"}, {id: 20, name: \"Jamie\"}])\n  .route(\"POST\", /messages/, {id: 123, message: \"Hi There!\"})\n  .get(\"form\").submit()\n```\n\n```javascript\n// Application Code\n\n// when our form is submitted\n$(\"form\").submit(function(){\n  // send an AJAX to: GET /users\n  $.get(\"/users\" )\n\n  // send an AJAX to: POST /messages\n  $.post(\"/messages\", {some: \"data\"})\n\n  // send an AJAX to: GET /updates\n  $.get(\"/updates\")\n})\n```\n\n**The above application code will issue 3 AJAX requests:**\n\n1. The `GET /users` will match our 1st route and respond with a 200 status code and the array of users.\n2. The `POST /messages` will match our 2nd route and respond with a 200 status code with the message object.\n3. The `GET /updates` did not match any routes and its response automatically sent back a 404 status code with an empty response body.\n\n***\n\n## Matching origins and non origin URL's\n\nWhen Cypress matches up an outgoing XHR request to a `cy.route` it actually attempts to match it against both the fully qualified URL and then additionally without the URL's origin.\n\n```javascript\ncy.route(\"/users/*\")\n```\n\nThe following XHR's which were `xhr.open(...)` with these URLs would:\n\n**Match**\n- /users/1\n- http://localhost:2020/users/2\n- https://google.com/users/3\n\n**Not Match**\n- /users/4/foo\n- http://localhost:2020/users/5/foo\n\n***\n\n# Method, Url, and Response Usage\n\n## Specify the method\n\n```javascript\ncy\n  .server()\n\n  // match all DELETE requests to \"/users\"\n  // and respond with an empty JSON object\n  .route(\"DELETE\", \"/users\", {})\n```\n\n***\n\n# Options Usage\n\n## Pass in an options object\n\n```javascript\ncy\n  .server()\n  .route({\n    method: \"DELETE\",\n    url: /user\\/\\d+/,\n    status: 412,\n    response: {\n      rolesCount: 2\n    },\n    delay: 500,\n    headers: {\n      \"X-Token\": null\n    },\n    onRequest: function(xhr) {\n      // do something with the\n      // raw XHR object when the\n      // request initially goes out\n    },\n    onResponse: function(xhr) {\n      // do something with the\n      // raw XHR object when the\n      // response comes back\n    }\n  })\n```\n\n## Simulate a server redirect\n\n```javascript\ncy\n  // simulate the server returning 503 with\n  // empty JSON response body\n  .route({\n    method: 'POST',\n    url: '/login',\n    response: {\n      // simulate a redirect to another page\n      redirect: '/error'\n    }\n  })\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe using cy.route to simulate a 503 on POST to login](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_xhr_web_form_spec.js)\",\n  \"title\": \"Setup route to error on POST to login\"\n}\n[/block]\n\n***\n\n## Use headers and fixtures for image route\n\n```javascript\ncy.route({\n  url: \"image.png\",\n  response: \"fx:logo.png,binary\" // binary encoding\n  headers: {\n    \"content-type\": \"binary/octet-stream\" // set content-type headers\n  }\n})\n```\n\n***\n\n## Setting a delay for a specific route\n\nYou can optionally pass in a delay option which will cause a delay (in ms) to the response for matched requests. The example below will cause the response to be delayed by 3 secs.\n\n```javascript\ncy.route({\n  method: \"PATCH\",\n  url: /activities\\/\\d+/,\n  response: {},\n  delay: 3000\n})\n```\n\n***\n\n# Function Usage\n\n## Set the routing options by a callback function\n\n```javascript\ncy.route(function(){\n  // ...do some custom logic here..\n\n  // and return an appropriate routing object here\n  return {\n    method: \"POST\",\n    url: \"/users/*/comments\",\n    response: this.commentsFixture\n  }\n})\n```\n\n***\n\n## Functions which return promises are awaited\n\n```javascript\ncy.route(function(){\n  // a silly example of async return\n  return new Cypress.Promise(function(resolve){\n    // resolve this promise after 1 second\n    setTimeout(function(){\n      resolve({\n        method: \"PUT\"\n        url: \"/posts/**\"\n        response: \"@postFixture\"\n      })\n    }, 1000)\n  })\n})\n```\n\n***\n\n# Notes\n\n## Understanding Stubbed vs Regular XHR's\n\nCypress indicates whether an XHR sent back a stubbed response vs actually going out to a server.\n\nXHR's that indicate `(XHR STUB)` in the Command Log have been stubbed and their response, status, headers, and delay have been controlled by your matching `cy.route`.\n\nXHR's that indicate `(XHR)` in the Command Log have not been stubbed and were passed directly through to a server.\n\n![screen shot 2015-12-21 at 7 03 57 pm](https://cloud.githubusercontent.com/assets/1268976/11944790/9b3fe2d8-a816-11e5-9e90-7405555d0c58.png)\n\nCypress also logs whether the XHR was stubbed or not to the console when you click on the command in the Command Log. It will indicate whether a request was stubbed, which url it matched or that it did not match any routes.\n\n![screen shot 2015-12-21 at 7 22 23 pm](https://cloud.githubusercontent.com/assets/1268976/11945010/0358123a-a819-11e5-9080-f4e0abf8aaa3.png)\n\nEven the `Initiator` is included, which is a stack trace to what caused the XHR to be sent.\n\n***\n\n## Requests that don't match a route\n\nYou can force routes that do not match a route to return 404:\n\nStatus | Body | Headers\n--- | --- | ---\n`404` | \"\" | `null`\n\nIf you'd like to enable this behavior you need to pass:\n\n```javascript\ncy.server({force404: true})\n```\n\nYou can [read more about this here.](https://on.cypress.io/api/server#prevent-sending-404s-to-unmatched-requests)\n\n***\n\n## Using Fixtures as Responses\n\nInstead of writing a response inline you can automatically connect a response with a fixture.\n\n```javascript\ncy\n  .server()\n  .route(/posts/, \"fixture:logo.png\").as(\"getLogo\")\n  .route(/users/, \"fixture:users/all.json\").as(\"getUsers\")\n  .route(/admin/, \"fixtures:users/admin.json\").as(\"getAdmin\")\n```\n\n```javascript\ncy\n  // route after receiving the fixture and\n  // working with the data\n  .fixture(\"user\").then(function(user){\n    user.firstName = \"Jennifer\"\n\n    // work with the users array here\n    cy.route(\"GET\", \"user/123\", user)\n  })\n  .visit(\"/users\")\n  .get(\".user\").should(\"include\", \"Jennifer\")\n```\n\nYou can also reference fixtures as strings directly in the response\n\n```javascript\n// we can link responses to fixtures simply\n// by passing the fixture string with an '@'\n// just like how you use aliases in\n// cy.get(...) and cy.wait(...)\ncy\n  .fixture(\"user\").as(\"fxUser\")\n  .route(\"POST\", \"/users/*\", \"@fxUser\")\n```\n\nYou can [read more about fixtures here.](https://on.cypress.io/api/fixture)\n\n***\n\n## Using Response Functions\n\nYou can also use a function as a response which enables you to add logic surrounding the response.\n\nFunctions which return promises will automatically be awaited.\n\n```javascript\nvar commentsResponse = function(routeData){\n  //routeData is a reference to the current route's information\n\n  return {\n    data: someOtherFunction(routeData)\n  }\n}\n\ncy.route(\"POST\", \"/comments/**\", commentsResponse)\n```\n\n***\n\n## Response Headers are automatically set\n\nBy default, Cypress will automatically set `Content-Type` and `Content-Length` based on what your `response body` looks like.\n\nIf you'd like to override this, explicitly pass in `headers` as an `object literal`.\n\n***\n\n# Command Log\n\n```javascript\ncy\n  .server()\n  .route(/accounts/).as(\"accountsGet\")\n  .route(/company/, \"fixtures:company\").as(\"companyGet\")\n  .route(/teams/,   \"fixtures:teams\").as(\"teamsGet\")\n```\n\nWhenever you start a server and add routes, Cypress will display a new Instrument Log called **Routes**. It will list the routing table in the Instrument Log, including the `method`, `url`, `stubbed`, `alias` and number of matched requests:\n\n![screen shot 2015-12-21 at 7 04 41 pm](https://cloud.githubusercontent.com/assets/1268976/11944789/9b3f69b6-a816-11e5-8b8f-bf8a235cf700.png)\n\nWhen XHR's are made, Cypress will log them in the Command Log and indicate whether they matched a routing alias:\n\n![screen shot 2015-12-21 at 7 19 20 pm](https://cloud.githubusercontent.com/assets/1268976/11944892/ca762cf0-a817-11e5-8713-91ced4a36a8a.png)\n\nWhen clicking on `XHR Stub` within the Command Log, the console outputs the following:\n\n![screen shot 2015-12-21 at 7 22 23 pm copy](https://cloud.githubusercontent.com/assets/1268976/11944950/711af9e6-a818-11e5-86b6-d17554403355.png)\n\n***\n\n# Related\n\n- [Guide: Network Requests](https://on.cypress.io/guides/network-requests-xhr)\n- [Recipe: Loggin in - XHR Web Form](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_xhr_web_form_spec.js)\n- [server](https://on.cypress.io/api/server)\n- [wait](https://on.cypress.io/api/wait)\n- [as](https://on.cypress.io/api/as)\n- [fixture](https://on.cypress.io/api/fixture)\n","source":"api/commands/route.md","raw":"title: route\n---\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Read about Network Requests first.](https://on.cypress.io/guides/network-requests-xhr)\",\n  \"title\": \"New to Cypress?\"\n}\n[/block]\n\nUse `cy.route` to manage the behavior of network requests.\n\n| | |\n|--- | --- |\n| **Returns** | `null` |\n| **Timeout** | *cannot timeout* |\n\n***\n\n# [cy.route( *url* )](#section-url-usage)\n\nSet a route matching the specific `url` which is not stubbed but can be waited on later. This will match `GET` request methods.\n\n***\n\n# [cy.route( *url*, *response* )](#section-url-and-response-usage)\n\nSet a route matching the `url` stubbed with the supplied `response`. This will match `GET` request methods.\n\n***\n\n# [cy.route( *method*, *url* )](#section-method-and-url-usage)\n\nSet a route matching the specific `method` and `url` which is not stubbed but can be waited on later.\n\n***\n\n# [cy.route( *method*, *url*, *response* )](#section-method-url-and-response-usage)\n\nSet a route matching the `method` and `url` stubbed with the supplied `response`.\n\n***\n\n# [cy.route( *function* )](#section-function-usage)\n\nSet a route by returning an object literal from your callback function.\n\nFunctions which return a promise will automatically be awaited.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.route`. By default `cy.route` inherits its options from [`cy.server`](https://on.cypress.io/api/server).\n\n**[cy.route( *options* )](#options-usage)**\n\nOption | Default | Notes\n--- | --- | ---\n`method` | `GET` | method to match against requests\n`url`    | `null` | string or RegExp url to match against request urls\n`response` | `null` | response body when stubbing routes\n`status` | `200` | response status code when stubbing routes\n`delay` | `0` | delay for stubbed responses (in ms)\n`headers` | `null` | response headers for stubbed routes\n`force404` | `false` | forcibly send XHR's to 404 status when these XHR's do not match any existing [`cy.routes`](https://on.cypress.io/api/routes)\n`onRequest` | `null` | callback function when a request is sent\n`onResponse` | `null` | callback function when a response is returned\n`onAbort` | `null` | callback function which fires anytime an XHR is aborted\n\nYou can also set options for all [cy.wait](https://on.cypress.io/api/wait) `requestTimeout` and `responseTimeout` globally in [configuration](https://on.cypress.io/guides/configuration) to control how long to wait for the request and response of the supplied route.\n\n***\n\n# Url Usage\n\n## Wait on non-stubbed XHR's by url\n\n```javascript\n// by not passing a response to the route\n// Cypress will pass this request through\n// without stubbing it - but still allow\n// us to wait for it later\ncy\n  .server()\n  .route(/users/).as(\"getUsers\")\n  .visit(\"/users\")\n  .wait(\"@getUsers\")\n```\n\n***\n\n# Method and Url Usage\n\n## Wait on non-stubbed XHR's by method + url\n\n```javascript\n// by not passing a response to the route\n// Cypress will pass this request through\n// without stubbing it - but still allow\n// us to wait for it later\ncy\n  .server()\n  .route(\"POST\", /users/).as(\"postUser\")\n  .visit(\"/users\")\n  .get(\"#first-name\").type(\"Julius{enter}\")\n  .wait(\"@postUser\")\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe using cy.route to POST for login](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_xhr_web_form_spec.js)\",\n  \"title\": \"Setup route to POST to login\"\n}\n[/block]\n\n***\n\n# Url and Response Usage\n\n## Url as a string\n\nWhen passing a `string` as the `url`, the XHR's URL must match exactly what you've written.\n\n```javascript\ncy\n  .server()\n  .route(\"/users\", [{id: 1, name: \"Pat\"}])\n```\n\n***\n\n## Url as a string glob\n\nAs of `0.16.3` we now accept glob patterns. Under the hood Cypress is using [minimatch](https://github.com/isaacs/minimatch) to match glob patterns with URL's.\n\nThis means you can take advantage of `*` and `**` support. This makes it **much** easier to route against dynamic segments without having to build up a complex `regex`.\n\nWe expose [`Cypress.minimatch`](https://on.cypress.io/api/cypress-minimatch) as a function which you can use in your Dev Tools console to test routes. You can iterate much faster on a working pattern than guessing at why something isn't working.\n\n```javascript\n// match against any user id\n// /users/123/comments     <-- matches\n// /users/123/comments/465 <-- not matches\ncy\n  .server()\n  .route(\"/users/*/comments\")\n```\n\n```javascript\n// use ** glob to match all segments\n// /posts/1            <-- matches\n// /posts/foo/bar/baz  <-- matches\n// /posts/quuz?a=b&1=2 <-- matches\ncy\n  .server()\n  .route(\"/posts/**\")\n```\n\n***\n\n## Override Url options\n\nWhen we check `glob` patterns with `minimatch` by default we use `{ matchBase: true}`.\n\nYou can override these options in `cy.server`.\n\nIf you'd like to permanently override these options you can do so by setting [`Cypress.Server.defaults(...)`](https://on.cypress.io/api/api-server).\n\n```javascript\ncy\n  .server({\n    urlMatchingOptions: { matchBase: false, dot: true }\n  })\n  .route(...)\n```\n\n***\n\n## Url as a RegExp\n\nWhen passing a RegExp as the `url`, the XHR's url will be tested against the regular expression and will apply if it passes.\n\n```javascript\ncy\n  .server()\n  .route(/users\\/\\d+/, {id: 1, name: \"Phoebe\"})\n```\n\n```javascript\n// Application Code\n\n$.get(\"/users/1337\", function(data){\n  console.log(data) // => {id: 1, name: \"Phoebe\"}\n})\n```\n\n***\n\n## Matching requests and routes\n\nAny request that matches the `method` and `url` of a route will be responded to based on the configuration of that route.\n\nIf a request doesn't match any route [it will automatically receive a 404](#notes). For instance given we have the following routes:\n\n```javascript\ncy\n  .server()\n  .route(/users/, [{id: 19, name: \"Laura\"}, {id: 20, name: \"Jamie\"}])\n  .route(\"POST\", /messages/, {id: 123, message: \"Hi There!\"})\n  .get(\"form\").submit()\n```\n\n```javascript\n// Application Code\n\n// when our form is submitted\n$(\"form\").submit(function(){\n  // send an AJAX to: GET /users\n  $.get(\"/users\" )\n\n  // send an AJAX to: POST /messages\n  $.post(\"/messages\", {some: \"data\"})\n\n  // send an AJAX to: GET /updates\n  $.get(\"/updates\")\n})\n```\n\n**The above application code will issue 3 AJAX requests:**\n\n1. The `GET /users` will match our 1st route and respond with a 200 status code and the array of users.\n2. The `POST /messages` will match our 2nd route and respond with a 200 status code with the message object.\n3. The `GET /updates` did not match any routes and its response automatically sent back a 404 status code with an empty response body.\n\n***\n\n## Matching origins and non origin URL's\n\nWhen Cypress matches up an outgoing XHR request to a `cy.route` it actually attempts to match it against both the fully qualified URL and then additionally without the URL's origin.\n\n```javascript\ncy.route(\"/users/*\")\n```\n\nThe following XHR's which were `xhr.open(...)` with these URLs would:\n\n**Match**\n- /users/1\n- http://localhost:2020/users/2\n- https://google.com/users/3\n\n**Not Match**\n- /users/4/foo\n- http://localhost:2020/users/5/foo\n\n***\n\n# Method, Url, and Response Usage\n\n## Specify the method\n\n```javascript\ncy\n  .server()\n\n  // match all DELETE requests to \"/users\"\n  // and respond with an empty JSON object\n  .route(\"DELETE\", \"/users\", {})\n```\n\n***\n\n# Options Usage\n\n## Pass in an options object\n\n```javascript\ncy\n  .server()\n  .route({\n    method: \"DELETE\",\n    url: /user\\/\\d+/,\n    status: 412,\n    response: {\n      rolesCount: 2\n    },\n    delay: 500,\n    headers: {\n      \"X-Token\": null\n    },\n    onRequest: function(xhr) {\n      // do something with the\n      // raw XHR object when the\n      // request initially goes out\n    },\n    onResponse: function(xhr) {\n      // do something with the\n      // raw XHR object when the\n      // response comes back\n    }\n  })\n```\n\n## Simulate a server redirect\n\n```javascript\ncy\n  // simulate the server returning 503 with\n  // empty JSON response body\n  .route({\n    method: 'POST',\n    url: '/login',\n    response: {\n      // simulate a redirect to another page\n      redirect: '/error'\n    }\n  })\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe using cy.route to simulate a 503 on POST to login](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_xhr_web_form_spec.js)\",\n  \"title\": \"Setup route to error on POST to login\"\n}\n[/block]\n\n***\n\n## Use headers and fixtures for image route\n\n```javascript\ncy.route({\n  url: \"image.png\",\n  response: \"fx:logo.png,binary\" // binary encoding\n  headers: {\n    \"content-type\": \"binary/octet-stream\" // set content-type headers\n  }\n})\n```\n\n***\n\n## Setting a delay for a specific route\n\nYou can optionally pass in a delay option which will cause a delay (in ms) to the response for matched requests. The example below will cause the response to be delayed by 3 secs.\n\n```javascript\ncy.route({\n  method: \"PATCH\",\n  url: /activities\\/\\d+/,\n  response: {},\n  delay: 3000\n})\n```\n\n***\n\n# Function Usage\n\n## Set the routing options by a callback function\n\n```javascript\ncy.route(function(){\n  // ...do some custom logic here..\n\n  // and return an appropriate routing object here\n  return {\n    method: \"POST\",\n    url: \"/users/*/comments\",\n    response: this.commentsFixture\n  }\n})\n```\n\n***\n\n## Functions which return promises are awaited\n\n```javascript\ncy.route(function(){\n  // a silly example of async return\n  return new Cypress.Promise(function(resolve){\n    // resolve this promise after 1 second\n    setTimeout(function(){\n      resolve({\n        method: \"PUT\"\n        url: \"/posts/**\"\n        response: \"@postFixture\"\n      })\n    }, 1000)\n  })\n})\n```\n\n***\n\n# Notes\n\n## Understanding Stubbed vs Regular XHR's\n\nCypress indicates whether an XHR sent back a stubbed response vs actually going out to a server.\n\nXHR's that indicate `(XHR STUB)` in the Command Log have been stubbed and their response, status, headers, and delay have been controlled by your matching `cy.route`.\n\nXHR's that indicate `(XHR)` in the Command Log have not been stubbed and were passed directly through to a server.\n\n![screen shot 2015-12-21 at 7 03 57 pm](https://cloud.githubusercontent.com/assets/1268976/11944790/9b3fe2d8-a816-11e5-9e90-7405555d0c58.png)\n\nCypress also logs whether the XHR was stubbed or not to the console when you click on the command in the Command Log. It will indicate whether a request was stubbed, which url it matched or that it did not match any routes.\n\n![screen shot 2015-12-21 at 7 22 23 pm](https://cloud.githubusercontent.com/assets/1268976/11945010/0358123a-a819-11e5-9080-f4e0abf8aaa3.png)\n\nEven the `Initiator` is included, which is a stack trace to what caused the XHR to be sent.\n\n***\n\n## Requests that don't match a route\n\nYou can force routes that do not match a route to return 404:\n\nStatus | Body | Headers\n--- | --- | ---\n`404` | \"\" | `null`\n\nIf you'd like to enable this behavior you need to pass:\n\n```javascript\ncy.server({force404: true})\n```\n\nYou can [read more about this here.](https://on.cypress.io/api/server#prevent-sending-404s-to-unmatched-requests)\n\n***\n\n## Using Fixtures as Responses\n\nInstead of writing a response inline you can automatically connect a response with a fixture.\n\n```javascript\ncy\n  .server()\n  .route(/posts/, \"fixture:logo.png\").as(\"getLogo\")\n  .route(/users/, \"fixture:users/all.json\").as(\"getUsers\")\n  .route(/admin/, \"fixtures:users/admin.json\").as(\"getAdmin\")\n```\n\n```javascript\ncy\n  // route after receiving the fixture and\n  // working with the data\n  .fixture(\"user\").then(function(user){\n    user.firstName = \"Jennifer\"\n\n    // work with the users array here\n    cy.route(\"GET\", \"user/123\", user)\n  })\n  .visit(\"/users\")\n  .get(\".user\").should(\"include\", \"Jennifer\")\n```\n\nYou can also reference fixtures as strings directly in the response\n\n```javascript\n// we can link responses to fixtures simply\n// by passing the fixture string with an '@'\n// just like how you use aliases in\n// cy.get(...) and cy.wait(...)\ncy\n  .fixture(\"user\").as(\"fxUser\")\n  .route(\"POST\", \"/users/*\", \"@fxUser\")\n```\n\nYou can [read more about fixtures here.](https://on.cypress.io/api/fixture)\n\n***\n\n## Using Response Functions\n\nYou can also use a function as a response which enables you to add logic surrounding the response.\n\nFunctions which return promises will automatically be awaited.\n\n```javascript\nvar commentsResponse = function(routeData){\n  //routeData is a reference to the current route's information\n\n  return {\n    data: someOtherFunction(routeData)\n  }\n}\n\ncy.route(\"POST\", \"/comments/**\", commentsResponse)\n```\n\n***\n\n## Response Headers are automatically set\n\nBy default, Cypress will automatically set `Content-Type` and `Content-Length` based on what your `response body` looks like.\n\nIf you'd like to override this, explicitly pass in `headers` as an `object literal`.\n\n***\n\n# Command Log\n\n```javascript\ncy\n  .server()\n  .route(/accounts/).as(\"accountsGet\")\n  .route(/company/, \"fixtures:company\").as(\"companyGet\")\n  .route(/teams/,   \"fixtures:teams\").as(\"teamsGet\")\n```\n\nWhenever you start a server and add routes, Cypress will display a new Instrument Log called **Routes**. It will list the routing table in the Instrument Log, including the `method`, `url`, `stubbed`, `alias` and number of matched requests:\n\n![screen shot 2015-12-21 at 7 04 41 pm](https://cloud.githubusercontent.com/assets/1268976/11944789/9b3f69b6-a816-11e5-8b8f-bf8a235cf700.png)\n\nWhen XHR's are made, Cypress will log them in the Command Log and indicate whether they matched a routing alias:\n\n![screen shot 2015-12-21 at 7 19 20 pm](https://cloud.githubusercontent.com/assets/1268976/11944892/ca762cf0-a817-11e5-8713-91ced4a36a8a.png)\n\nWhen clicking on `XHR Stub` within the Command Log, the console outputs the following:\n\n![screen shot 2015-12-21 at 7 22 23 pm copy](https://cloud.githubusercontent.com/assets/1268976/11944950/711af9e6-a818-11e5-86b6-d17554403355.png)\n\n***\n\n# Related\n\n- [Guide: Network Requests](https://on.cypress.io/guides/network-requests-xhr)\n- [Recipe: Loggin in - XHR Web Form](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_xhr_web_form_spec.js)\n- [server](https://on.cypress.io/api/server)\n- [wait](https://on.cypress.io/api/wait)\n- [as](https://on.cypress.io/api/as)\n- [fixture](https://on.cypress.io/api/fixture)\n","date":"2017-04-19T18:50:48.000Z","updated":"2017-04-19T18:50:48.000Z","path":"api/commands/route.html","comments":1,"layout":"page","_id":"cj1pc3ifx0006n9g8z5b0faon","content":"<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://on.cypress.io/guides/network-requests-xhr\" target=\"_blank\" rel=\"external\">Read about Network Requests first.</a>“,<br>  “title”: “New to Cypress?”<br>}<br>[/block]</p>\n<p>Use <code>cy.route</code> to manage the behavior of network requests.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td><code>null</code></td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><em>cannot timeout</em></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-route-url\"><a href=\"#cy-route-url\" class=\"headerlink\" title=\"cy.route( url )\"></a><a href=\"#section-url-usage\">cy.route( <em>url</em> )</a></h1><p>Set a route matching the specific <code>url</code> which is not stubbed but can be waited on later. This will match <code>GET</code> request methods.</p>\n<hr>\n<h1 id=\"cy-route-url-response\"><a href=\"#cy-route-url-response\" class=\"headerlink\" title=\"cy.route( url, response )\"></a><a href=\"#section-url-and-response-usage\">cy.route( <em>url</em>, <em>response</em> )</a></h1><p>Set a route matching the <code>url</code> stubbed with the supplied <code>response</code>. This will match <code>GET</code> request methods.</p>\n<hr>\n<h1 id=\"cy-route-method-url\"><a href=\"#cy-route-method-url\" class=\"headerlink\" title=\"cy.route( method, url )\"></a><a href=\"#section-method-and-url-usage\">cy.route( <em>method</em>, <em>url</em> )</a></h1><p>Set a route matching the specific <code>method</code> and <code>url</code> which is not stubbed but can be waited on later.</p>\n<hr>\n<h1 id=\"cy-route-method-url-response\"><a href=\"#cy-route-method-url-response\" class=\"headerlink\" title=\"cy.route( method, url, response )\"></a><a href=\"#section-method-url-and-response-usage\">cy.route( <em>method</em>, <em>url</em>, <em>response</em> )</a></h1><p>Set a route matching the <code>method</code> and <code>url</code> stubbed with the supplied <code>response</code>.</p>\n<hr>\n<h1 id=\"cy-route-function\"><a href=\"#cy-route-function\" class=\"headerlink\" title=\"cy.route( function )\"></a><a href=\"#section-function-usage\">cy.route( <em>function</em> )</a></h1><p>Set a route by returning an object literal from your callback function.</p>\n<p>Functions which return a promise will automatically be awaited.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.route</code>. By default <code>cy.route</code> inherits its options from <a href=\"https://on.cypress.io/api/server\" target=\"_blank\" rel=\"external\"><code>cy.server</code></a>.</p>\n<p><strong><a href=\"#options-usage\">cy.route( <em>options</em> )</a></strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>method</code></td>\n<td><code>GET</code></td>\n<td>method to match against requests</td>\n</tr>\n<tr>\n<td><code>url</code></td>\n<td><code>null</code></td>\n<td>string or RegExp url to match against request urls</td>\n</tr>\n<tr>\n<td><code>response</code></td>\n<td><code>null</code></td>\n<td>response body when stubbing routes</td>\n</tr>\n<tr>\n<td><code>status</code></td>\n<td><code>200</code></td>\n<td>response status code when stubbing routes</td>\n</tr>\n<tr>\n<td><code>delay</code></td>\n<td><code>0</code></td>\n<td>delay for stubbed responses (in ms)</td>\n</tr>\n<tr>\n<td><code>headers</code></td>\n<td><code>null</code></td>\n<td>response headers for stubbed routes</td>\n</tr>\n<tr>\n<td><code>force404</code></td>\n<td><code>false</code></td>\n<td>forcibly send XHR’s to 404 status when these XHR’s do not match any existing <a href=\"https://on.cypress.io/api/routes\" target=\"_blank\" rel=\"external\"><code>cy.routes</code></a></td>\n</tr>\n<tr>\n<td><code>onRequest</code></td>\n<td><code>null</code></td>\n<td>callback function when a request is sent</td>\n</tr>\n<tr>\n<td><code>onResponse</code></td>\n<td><code>null</code></td>\n<td>callback function when a response is returned</td>\n</tr>\n<tr>\n<td><code>onAbort</code></td>\n<td><code>null</code></td>\n<td>callback function which fires anytime an XHR is aborted</td>\n</tr>\n</tbody>\n</table>\n<p>You can also set options for all <a href=\"https://on.cypress.io/api/wait\" target=\"_blank\" rel=\"external\">cy.wait</a> <code>requestTimeout</code> and <code>responseTimeout</code> globally in <a href=\"https://on.cypress.io/guides/configuration\" target=\"_blank\" rel=\"external\">configuration</a> to control how long to wait for the request and response of the supplied route.</p>\n<hr>\n<h1 id=\"Url-Usage\"><a href=\"#Url-Usage\" class=\"headerlink\" title=\"Url Usage\"></a>Url Usage</h1><h2 id=\"Wait-on-non-stubbed-XHR’s-by-url\"><a href=\"#Wait-on-non-stubbed-XHR’s-by-url\" class=\"headerlink\" title=\"Wait on non-stubbed XHR’s by url\"></a>Wait on non-stubbed XHR’s by url</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// by not passing a response to the route</span></div><div class=\"line\"><span class=\"comment\">// Cypress will pass this request through</span></div><div class=\"line\"><span class=\"comment\">// without stubbing it - but still allow</span></div><div class=\"line\"><span class=\"comment\">// us to wait for it later</span></div><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"regexp\">/users/</span>).as(<span class=\"string\">\"getUsers\"</span>)</div><div class=\"line\">  .visit(<span class=\"string\">\"/users\"</span>)</div><div class=\"line\">  .wait(<span class=\"string\">\"@getUsers\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Method-and-Url-Usage\"><a href=\"#Method-and-Url-Usage\" class=\"headerlink\" title=\"Method and Url Usage\"></a>Method and Url Usage</h1><h2 id=\"Wait-on-non-stubbed-XHR’s-by-method-url\"><a href=\"#Wait-on-non-stubbed-XHR’s-by-method-url\" class=\"headerlink\" title=\"Wait on non-stubbed XHR’s by method + url\"></a>Wait on non-stubbed XHR’s by method + url</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// by not passing a response to the route</span></div><div class=\"line\"><span class=\"comment\">// Cypress will pass this request through</span></div><div class=\"line\"><span class=\"comment\">// without stubbing it - but still allow</span></div><div class=\"line\"><span class=\"comment\">// us to wait for it later</span></div><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"string\">\"POST\"</span>, /users/).as(<span class=\"string\">\"postUser\"</span>)</div><div class=\"line\">  .visit(<span class=\"string\">\"/users\"</span>)</div><div class=\"line\">  .get(<span class=\"string\">\"#first-name\"</span>).type(<span class=\"string\">\"Julius&#123;enter&#125;\"</span>)</div><div class=\"line\">  .wait(<span class=\"string\">\"@postUser\"</span>)</div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_xhr_web_form_spec.js\" target=\"_blank\" rel=\"external\">Check out our example recipe using cy.route to POST for login</a>“,<br>  “title”: “Setup route to POST to login”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Url-and-Response-Usage\"><a href=\"#Url-and-Response-Usage\" class=\"headerlink\" title=\"Url and Response Usage\"></a>Url and Response Usage</h1><h2 id=\"Url-as-a-string\"><a href=\"#Url-as-a-string\" class=\"headerlink\" title=\"Url as a string\"></a>Url as a string</h2><p>When passing a <code>string</code> as the <code>url</code>, the XHR’s URL must match exactly what you’ve written.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"string\">\"/users\"</span>, [&#123;<span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"Pat\"</span>&#125;])</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Url-as-a-string-glob\"><a href=\"#Url-as-a-string-glob\" class=\"headerlink\" title=\"Url as a string glob\"></a>Url as a string glob</h2><p>As of <code>0.16.3</code> we now accept glob patterns. Under the hood Cypress is using <a href=\"https://github.com/isaacs/minimatch\" target=\"_blank\" rel=\"external\">minimatch</a> to match glob patterns with URL’s.</p>\n<p>This means you can take advantage of <code>*</code> and <code>**</code> support. This makes it <strong>much</strong> easier to route against dynamic segments without having to build up a complex <code>regex</code>.</p>\n<p>We expose <a href=\"https://on.cypress.io/api/cypress-minimatch\" target=\"_blank\" rel=\"external\"><code>Cypress.minimatch</code></a> as a function which you can use in your Dev Tools console to test routes. You can iterate much faster on a working pattern than guessing at why something isn’t working.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// match against any user id</span></div><div class=\"line\"><span class=\"comment\">// /users/123/comments     &lt;-- matches</span></div><div class=\"line\"><span class=\"comment\">// /users/123/comments/465 &lt;-- not matches</span></div><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"string\">\"/users/*/comments\"</span>)</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// use ** glob to match all segments</span></div><div class=\"line\"><span class=\"comment\">// /posts/1            &lt;-- matches</span></div><div class=\"line\"><span class=\"comment\">// /posts/foo/bar/baz  &lt;-- matches</span></div><div class=\"line\"><span class=\"comment\">// /posts/quuz?a=b&amp;1=2 &lt;-- matches</span></div><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"string\">\"/posts/**\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Override-Url-options\"><a href=\"#Override-Url-options\" class=\"headerlink\" title=\"Override Url options\"></a>Override Url options</h2><p>When we check <code>glob</code> patterns with <code>minimatch</code> by default we use <code>{ matchBase: true}</code>.</p>\n<p>You can override these options in <code>cy.server</code>.</p>\n<p>If you’d like to permanently override these options you can do so by setting <a href=\"https://on.cypress.io/api/api-server\" target=\"_blank\" rel=\"external\"><code>Cypress.Server.defaults(...)</code></a>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server(&#123;</div><div class=\"line\">    <span class=\"attr\">urlMatchingOptions</span>: &#123; <span class=\"attr\">matchBase</span>: <span class=\"literal\">false</span>, <span class=\"attr\">dot</span>: <span class=\"literal\">true</span> &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">  .route(...)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Url-as-a-RegExp\"><a href=\"#Url-as-a-RegExp\" class=\"headerlink\" title=\"Url as a RegExp\"></a>Url as a RegExp</h2><p>When passing a RegExp as the <code>url</code>, the XHR’s url will be tested against the regular expression and will apply if it passes.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"regexp\">/users\\/\\d+/</span>, &#123;<span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"Phoebe\"</span>&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Application Code</span></div><div class=\"line\"></div><div class=\"line\">$.get(<span class=\"string\">\"/users/1337\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(data) <span class=\"comment\">// =&gt; &#123;id: 1, name: \"Phoebe\"&#125;</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Matching-requests-and-routes\"><a href=\"#Matching-requests-and-routes\" class=\"headerlink\" title=\"Matching requests and routes\"></a>Matching requests and routes</h2><p>Any request that matches the <code>method</code> and <code>url</code> of a route will be responded to based on the configuration of that route.</p>\n<p>If a request doesn’t match any route <a href=\"#notes\">it will automatically receive a 404</a>. For instance given we have the following routes:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"regexp\">/users/</span>, [&#123;<span class=\"attr\">id</span>: <span class=\"number\">19</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"Laura\"</span>&#125;, &#123;<span class=\"attr\">id</span>: <span class=\"number\">20</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"Jamie\"</span>&#125;])</div><div class=\"line\">  .route(<span class=\"string\">\"POST\"</span>, /messages/, &#123;<span class=\"attr\">id</span>: <span class=\"number\">123</span>, <span class=\"attr\">message</span>: <span class=\"string\">\"Hi There!\"</span>&#125;)</div><div class=\"line\">  .get(<span class=\"string\">\"form\"</span>).submit()</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Application Code</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// when our form is submitted</span></div><div class=\"line\">$(<span class=\"string\">\"form\"</span>).submit(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// send an AJAX to: GET /users</span></div><div class=\"line\">  $.get(<span class=\"string\">\"/users\"</span> )</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// send an AJAX to: POST /messages</span></div><div class=\"line\">  $.post(<span class=\"string\">\"/messages\"</span>, &#123;<span class=\"attr\">some</span>: <span class=\"string\">\"data\"</span>&#125;)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// send an AJAX to: GET /updates</span></div><div class=\"line\">  $.get(<span class=\"string\">\"/updates\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p><strong>The above application code will issue 3 AJAX requests:</strong></p>\n<ol>\n<li>The <code>GET /users</code> will match our 1st route and respond with a 200 status code and the array of users.</li>\n<li>The <code>POST /messages</code> will match our 2nd route and respond with a 200 status code with the message object.</li>\n<li>The <code>GET /updates</code> did not match any routes and its response automatically sent back a 404 status code with an empty response body.</li>\n</ol>\n<hr>\n<h2 id=\"Matching-origins-and-non-origin-URL’s\"><a href=\"#Matching-origins-and-non-origin-URL’s\" class=\"headerlink\" title=\"Matching origins and non origin URL’s\"></a>Matching origins and non origin URL’s</h2><p>When Cypress matches up an outgoing XHR request to a <code>cy.route</code> it actually attempts to match it against both the fully qualified URL and then additionally without the URL’s origin.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.route(<span class=\"string\">\"/users/*\"</span>)</div></pre></td></tr></table></figure>\n<p>The following XHR’s which were <code>xhr.open(...)</code> with these URLs would:</p>\n<p><strong>Match</strong></p>\n<ul>\n<li>/users/1</li>\n<li><a href=\"http://localhost:2020/users/2\" target=\"_blank\" rel=\"external\">http://localhost:2020/users/2</a></li>\n<li><a href=\"https://google.com/users/3\" target=\"_blank\" rel=\"external\">https://google.com/users/3</a></li>\n</ul>\n<p><strong>Not Match</strong></p>\n<ul>\n<li>/users/4/foo</li>\n<li><a href=\"http://localhost:2020/users/5/foo\" target=\"_blank\" rel=\"external\">http://localhost:2020/users/5/foo</a></li>\n</ul>\n<hr>\n<h1 id=\"Method-Url-and-Response-Usage\"><a href=\"#Method-Url-and-Response-Usage\" class=\"headerlink\" title=\"Method, Url, and Response Usage\"></a>Method, Url, and Response Usage</h1><h2 id=\"Specify-the-method\"><a href=\"#Specify-the-method\" class=\"headerlink\" title=\"Specify the method\"></a>Specify the method</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// match all DELETE requests to \"/users\"</span></div><div class=\"line\">  <span class=\"comment\">// and respond with an empty JSON object</span></div><div class=\"line\">  .route(<span class=\"string\">\"DELETE\"</span>, <span class=\"string\">\"/users\"</span>, &#123;&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Options-Usage\"><a href=\"#Options-Usage\" class=\"headerlink\" title=\"Options Usage\"></a>Options Usage</h1><h2 id=\"Pass-in-an-options-object\"><a href=\"#Pass-in-an-options-object\" class=\"headerlink\" title=\"Pass in an options object\"></a>Pass in an options object</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(&#123;</div><div class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">\"DELETE\"</span>,</div><div class=\"line\">    <span class=\"attr\">url</span>: <span class=\"regexp\">/user\\/\\d+/</span>,</div><div class=\"line\">    <span class=\"attr\">status</span>: <span class=\"number\">412</span>,</div><div class=\"line\">    <span class=\"attr\">response</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">rolesCount</span>: <span class=\"number\">2</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">delay</span>: <span class=\"number\">500</span>,</div><div class=\"line\">    <span class=\"attr\">headers</span>: &#123;</div><div class=\"line\">      <span class=\"string\">\"X-Token\"</span>: <span class=\"literal\">null</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">onRequest</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">xhr</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// do something with the</span></div><div class=\"line\">      <span class=\"comment\">// raw XHR object when the</span></div><div class=\"line\">      <span class=\"comment\">// request initially goes out</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">onResponse</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">xhr</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// do something with the</span></div><div class=\"line\">      <span class=\"comment\">// raw XHR object when the</span></div><div class=\"line\">      <span class=\"comment\">// response comes back</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Simulate-a-server-redirect\"><a href=\"#Simulate-a-server-redirect\" class=\"headerlink\" title=\"Simulate a server redirect\"></a>Simulate a server redirect</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  <span class=\"comment\">// simulate the server returning 503 with</span></div><div class=\"line\">  <span class=\"comment\">// empty JSON response body</span></div><div class=\"line\">  .route(&#123;</div><div class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">'POST'</span>,</div><div class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">'/login'</span>,</div><div class=\"line\">    <span class=\"attr\">response</span>: &#123;</div><div class=\"line\">      <span class=\"comment\">// simulate a redirect to another page</span></div><div class=\"line\">      redirect: <span class=\"string\">'/error'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_xhr_web_form_spec.js\" target=\"_blank\" rel=\"external\">Check out our example recipe using cy.route to simulate a 503 on POST to login</a>“,<br>  “title”: “Setup route to error on POST to login”<br>}<br>[/block]</p>\n<hr>\n<h2 id=\"Use-headers-and-fixtures-for-image-route\"><a href=\"#Use-headers-and-fixtures-for-image-route\" class=\"headerlink\" title=\"Use headers and fixtures for image route\"></a>Use headers and fixtures for image route</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.route(&#123;</div><div class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">\"image.png\"</span>,</div><div class=\"line\">  <span class=\"attr\">response</span>: <span class=\"string\">\"fx:logo.png,binary\"</span> <span class=\"comment\">// binary encoding</span></div><div class=\"line\">  headers: &#123;</div><div class=\"line\">    <span class=\"string\">\"content-type\"</span>: <span class=\"string\">\"binary/octet-stream\"</span> <span class=\"comment\">// set content-type headers</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Setting-a-delay-for-a-specific-route\"><a href=\"#Setting-a-delay-for-a-specific-route\" class=\"headerlink\" title=\"Setting a delay for a specific route\"></a>Setting a delay for a specific route</h2><p>You can optionally pass in a delay option which will cause a delay (in ms) to the response for matched requests. The example below will cause the response to be delayed by 3 secs.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.route(&#123;</div><div class=\"line\">  <span class=\"attr\">method</span>: <span class=\"string\">\"PATCH\"</span>,</div><div class=\"line\">  <span class=\"attr\">url</span>: <span class=\"regexp\">/activities\\/\\d+/</span>,</div><div class=\"line\">  <span class=\"attr\">response</span>: &#123;&#125;,</div><div class=\"line\">  <span class=\"attr\">delay</span>: <span class=\"number\">3000</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Function-Usage\"><a href=\"#Function-Usage\" class=\"headerlink\" title=\"Function Usage\"></a>Function Usage</h1><h2 id=\"Set-the-routing-options-by-a-callback-function\"><a href=\"#Set-the-routing-options-by-a-callback-function\" class=\"headerlink\" title=\"Set the routing options by a callback function\"></a>Set the routing options by a callback function</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.route(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...do some custom logic here..</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// and return an appropriate routing object here</span></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">\"POST\"</span>,</div><div class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">\"/users/*/comments\"</span>,</div><div class=\"line\">    <span class=\"attr\">response</span>: <span class=\"keyword\">this</span>.commentsFixture</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Functions-which-return-promises-are-awaited\"><a href=\"#Functions-which-return-promises-are-awaited\" class=\"headerlink\" title=\"Functions which return promises are awaited\"></a>Functions which return promises are awaited</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.route(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// a silly example of async return</span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Cypress.Promise(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// resolve this promise after 1 second</span></div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      resolve(&#123;</div><div class=\"line\">        <span class=\"attr\">method</span>: <span class=\"string\">\"PUT\"</span></div><div class=\"line\">        url: <span class=\"string\">\"/posts/**\"</span></div><div class=\"line\">        response: <span class=\"string\">\"@postFixture\"</span></div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;, <span class=\"number\">1000</span>)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h1><h2 id=\"Understanding-Stubbed-vs-Regular-XHR’s\"><a href=\"#Understanding-Stubbed-vs-Regular-XHR’s\" class=\"headerlink\" title=\"Understanding Stubbed vs Regular XHR’s\"></a>Understanding Stubbed vs Regular XHR’s</h2><p>Cypress indicates whether an XHR sent back a stubbed response vs actually going out to a server.</p>\n<p>XHR’s that indicate <code>(XHR STUB)</code> in the Command Log have been stubbed and their response, status, headers, and delay have been controlled by your matching <code>cy.route</code>.</p>\n<p>XHR’s that indicate <code>(XHR)</code> in the Command Log have not been stubbed and were passed directly through to a server.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/11944790/9b3fe2d8-a816-11e5-9e90-7405555d0c58.png\" alt=\"screen shot 2015-12-21 at 7 03 57 pm\"></p>\n<p>Cypress also logs whether the XHR was stubbed or not to the console when you click on the command in the Command Log. It will indicate whether a request was stubbed, which url it matched or that it did not match any routes.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/11945010/0358123a-a819-11e5-9080-f4e0abf8aaa3.png\" alt=\"screen shot 2015-12-21 at 7 22 23 pm\"></p>\n<p>Even the <code>Initiator</code> is included, which is a stack trace to what caused the XHR to be sent.</p>\n<hr>\n<h2 id=\"Requests-that-don’t-match-a-route\"><a href=\"#Requests-that-don’t-match-a-route\" class=\"headerlink\" title=\"Requests that don’t match a route\"></a>Requests that don’t match a route</h2><p>You can force routes that do not match a route to return 404:</p>\n<table>\n<thead>\n<tr>\n<th>Status</th>\n<th>Body</th>\n<th>Headers</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>404</code></td>\n<td>“”</td>\n<td><code>null</code></td>\n</tr>\n</tbody>\n</table>\n<p>If you’d like to enable this behavior you need to pass:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.server(&#123;<span class=\"attr\">force404</span>: <span class=\"literal\">true</span>&#125;)</div></pre></td></tr></table></figure>\n<p>You can <a href=\"https://on.cypress.io/api/server#prevent-sending-404s-to-unmatched-requests\" target=\"_blank\" rel=\"external\">read more about this here.</a></p>\n<hr>\n<h2 id=\"Using-Fixtures-as-Responses\"><a href=\"#Using-Fixtures-as-Responses\" class=\"headerlink\" title=\"Using Fixtures as Responses\"></a>Using Fixtures as Responses</h2><p>Instead of writing a response inline you can automatically connect a response with a fixture.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"regexp\">/posts/</span>, <span class=\"string\">\"fixture:logo.png\"</span>).as(<span class=\"string\">\"getLogo\"</span>)</div><div class=\"line\">  .route(<span class=\"regexp\">/users/</span>, <span class=\"string\">\"fixture:users/all.json\"</span>).as(<span class=\"string\">\"getUsers\"</span>)</div><div class=\"line\">  .route(<span class=\"regexp\">/admin/</span>, <span class=\"string\">\"fixtures:users/admin.json\"</span>).as(<span class=\"string\">\"getAdmin\"</span>)</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  <span class=\"comment\">// route after receiving the fixture and</span></div><div class=\"line\">  <span class=\"comment\">// working with the data</span></div><div class=\"line\">  .fixture(<span class=\"string\">\"user\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">user</span>)</span>&#123;</div><div class=\"line\">    user.firstName = <span class=\"string\">\"Jennifer\"</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// work with the users array here</span></div><div class=\"line\">    cy.route(<span class=\"string\">\"GET\"</span>, <span class=\"string\">\"user/123\"</span>, user)</div><div class=\"line\">  &#125;)</div><div class=\"line\">  .visit(<span class=\"string\">\"/users\"</span>)</div><div class=\"line\">  .get(<span class=\"string\">\".user\"</span>).should(<span class=\"string\">\"include\"</span>, <span class=\"string\">\"Jennifer\"</span>)</div></pre></td></tr></table></figure>\n<p>You can also reference fixtures as strings directly in the response</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// we can link responses to fixtures simply</span></div><div class=\"line\"><span class=\"comment\">// by passing the fixture string with an '@'</span></div><div class=\"line\"><span class=\"comment\">// just like how you use aliases in</span></div><div class=\"line\"><span class=\"comment\">// cy.get(...) and cy.wait(...)</span></div><div class=\"line\">cy</div><div class=\"line\">  .fixture(<span class=\"string\">\"user\"</span>).as(<span class=\"string\">\"fxUser\"</span>)</div><div class=\"line\">  .route(<span class=\"string\">\"POST\"</span>, <span class=\"string\">\"/users/*\"</span>, <span class=\"string\">\"@fxUser\"</span>)</div></pre></td></tr></table></figure>\n<p>You can <a href=\"https://on.cypress.io/api/fixture\" target=\"_blank\" rel=\"external\">read more about fixtures here.</a></p>\n<hr>\n<h2 id=\"Using-Response-Functions\"><a href=\"#Using-Response-Functions\" class=\"headerlink\" title=\"Using Response Functions\"></a>Using Response Functions</h2><p>You can also use a function as a response which enables you to add logic surrounding the response.</p>\n<p>Functions which return promises will automatically be awaited.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> commentsResponse = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">routeData</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//routeData is a reference to the current route's information</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">data</span>: someOtherFunction(routeData)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">cy.route(<span class=\"string\">\"POST\"</span>, <span class=\"string\">\"/comments/**\"</span>, commentsResponse)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Response-Headers-are-automatically-set\"><a href=\"#Response-Headers-are-automatically-set\" class=\"headerlink\" title=\"Response Headers are automatically set\"></a>Response Headers are automatically set</h2><p>By default, Cypress will automatically set <code>Content-Type</code> and <code>Content-Length</code> based on what your <code>response body</code> looks like.</p>\n<p>If you’d like to override this, explicitly pass in <code>headers</code> as an <code>object literal</code>.</p>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"regexp\">/accounts/</span>).as(<span class=\"string\">\"accountsGet\"</span>)</div><div class=\"line\">  .route(<span class=\"regexp\">/company/</span>, <span class=\"string\">\"fixtures:company\"</span>).as(<span class=\"string\">\"companyGet\"</span>)</div><div class=\"line\">  .route(<span class=\"regexp\">/teams/</span>,   <span class=\"string\">\"fixtures:teams\"</span>).as(<span class=\"string\">\"teamsGet\"</span>)</div></pre></td></tr></table></figure>\n<p>Whenever you start a server and add routes, Cypress will display a new Instrument Log called <strong>Routes</strong>. It will list the routing table in the Instrument Log, including the <code>method</code>, <code>url</code>, <code>stubbed</code>, <code>alias</code> and number of matched requests:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/11944789/9b3f69b6-a816-11e5-8b8f-bf8a235cf700.png\" alt=\"screen shot 2015-12-21 at 7 04 41 pm\"></p>\n<p>When XHR’s are made, Cypress will log them in the Command Log and indicate whether they matched a routing alias:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/11944892/ca762cf0-a817-11e5-8713-91ced4a36a8a.png\" alt=\"screen shot 2015-12-21 at 7 19 20 pm\"></p>\n<p>When clicking on <code>XHR Stub</code> within the Command Log, the console outputs the following:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/11944950/711af9e6-a818-11e5-86b6-d17554403355.png\" alt=\"screen shot 2015-12-21 at 7 22 23 pm copy\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/guides/network-requests-xhr\" target=\"_blank\" rel=\"external\">Guide: Network Requests</a></li>\n<li><a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_xhr_web_form_spec.js\" target=\"_blank\" rel=\"external\">Recipe: Loggin in - XHR Web Form</a></li>\n<li><a href=\"https://on.cypress.io/api/server\" target=\"_blank\" rel=\"external\">server</a></li>\n<li><a href=\"https://on.cypress.io/api/wait\" target=\"_blank\" rel=\"external\">wait</a></li>\n<li><a href=\"https://on.cypress.io/api/as\" target=\"_blank\" rel=\"external\">as</a></li>\n<li><a href=\"https://on.cypress.io/api/fixture\" target=\"_blank\" rel=\"external\">fixture</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://on.cypress.io/guides/network-requests-xhr\">Read about Network Requests first.</a>“,<br>  “title”: “New to Cypress?”<br>}<br>[/block]</p>\n<p>Use <code>cy.route</code> to manage the behavior of network requests.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td><code>null</code></td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><em>cannot timeout</em></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-route-url\"><a href=\"#cy-route-url\" class=\"headerlink\" title=\"cy.route( url )\"></a><a href=\"#section-url-usage\">cy.route( <em>url</em> )</a></h1><p>Set a route matching the specific <code>url</code> which is not stubbed but can be waited on later. This will match <code>GET</code> request methods.</p>\n<hr>\n<h1 id=\"cy-route-url-response\"><a href=\"#cy-route-url-response\" class=\"headerlink\" title=\"cy.route( url, response )\"></a><a href=\"#section-url-and-response-usage\">cy.route( <em>url</em>, <em>response</em> )</a></h1><p>Set a route matching the <code>url</code> stubbed with the supplied <code>response</code>. This will match <code>GET</code> request methods.</p>\n<hr>\n<h1 id=\"cy-route-method-url\"><a href=\"#cy-route-method-url\" class=\"headerlink\" title=\"cy.route( method, url )\"></a><a href=\"#section-method-and-url-usage\">cy.route( <em>method</em>, <em>url</em> )</a></h1><p>Set a route matching the specific <code>method</code> and <code>url</code> which is not stubbed but can be waited on later.</p>\n<hr>\n<h1 id=\"cy-route-method-url-response\"><a href=\"#cy-route-method-url-response\" class=\"headerlink\" title=\"cy.route( method, url, response )\"></a><a href=\"#section-method-url-and-response-usage\">cy.route( <em>method</em>, <em>url</em>, <em>response</em> )</a></h1><p>Set a route matching the <code>method</code> and <code>url</code> stubbed with the supplied <code>response</code>.</p>\n<hr>\n<h1 id=\"cy-route-function\"><a href=\"#cy-route-function\" class=\"headerlink\" title=\"cy.route( function )\"></a><a href=\"#section-function-usage\">cy.route( <em>function</em> )</a></h1><p>Set a route by returning an object literal from your callback function.</p>\n<p>Functions which return a promise will automatically be awaited.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.route</code>. By default <code>cy.route</code> inherits its options from <a href=\"https://on.cypress.io/api/server\"><code>cy.server</code></a>.</p>\n<p><strong><a href=\"#options-usage\">cy.route( <em>options</em> )</a></strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>method</code></td>\n<td><code>GET</code></td>\n<td>method to match against requests</td>\n</tr>\n<tr>\n<td><code>url</code></td>\n<td><code>null</code></td>\n<td>string or RegExp url to match against request urls</td>\n</tr>\n<tr>\n<td><code>response</code></td>\n<td><code>null</code></td>\n<td>response body when stubbing routes</td>\n</tr>\n<tr>\n<td><code>status</code></td>\n<td><code>200</code></td>\n<td>response status code when stubbing routes</td>\n</tr>\n<tr>\n<td><code>delay</code></td>\n<td><code>0</code></td>\n<td>delay for stubbed responses (in ms)</td>\n</tr>\n<tr>\n<td><code>headers</code></td>\n<td><code>null</code></td>\n<td>response headers for stubbed routes</td>\n</tr>\n<tr>\n<td><code>force404</code></td>\n<td><code>false</code></td>\n<td>forcibly send XHR’s to 404 status when these XHR’s do not match any existing <a href=\"https://on.cypress.io/api/routes\"><code>cy.routes</code></a></td>\n</tr>\n<tr>\n<td><code>onRequest</code></td>\n<td><code>null</code></td>\n<td>callback function when a request is sent</td>\n</tr>\n<tr>\n<td><code>onResponse</code></td>\n<td><code>null</code></td>\n<td>callback function when a response is returned</td>\n</tr>\n<tr>\n<td><code>onAbort</code></td>\n<td><code>null</code></td>\n<td>callback function which fires anytime an XHR is aborted</td>\n</tr>\n</tbody>\n</table>\n<p>You can also set options for all <a href=\"https://on.cypress.io/api/wait\">cy.wait</a> <code>requestTimeout</code> and <code>responseTimeout</code> globally in <a href=\"https://on.cypress.io/guides/configuration\">configuration</a> to control how long to wait for the request and response of the supplied route.</p>\n<hr>\n<h1 id=\"Url-Usage\"><a href=\"#Url-Usage\" class=\"headerlink\" title=\"Url Usage\"></a>Url Usage</h1><h2 id=\"Wait-on-non-stubbed-XHR’s-by-url\"><a href=\"#Wait-on-non-stubbed-XHR’s-by-url\" class=\"headerlink\" title=\"Wait on non-stubbed XHR’s by url\"></a>Wait on non-stubbed XHR’s by url</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// by not passing a response to the route</span></div><div class=\"line\"><span class=\"comment\">// Cypress will pass this request through</span></div><div class=\"line\"><span class=\"comment\">// without stubbing it - but still allow</span></div><div class=\"line\"><span class=\"comment\">// us to wait for it later</span></div><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"regexp\">/users/</span>).as(<span class=\"string\">\"getUsers\"</span>)</div><div class=\"line\">  .visit(<span class=\"string\">\"/users\"</span>)</div><div class=\"line\">  .wait(<span class=\"string\">\"@getUsers\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Method-and-Url-Usage\"><a href=\"#Method-and-Url-Usage\" class=\"headerlink\" title=\"Method and Url Usage\"></a>Method and Url Usage</h1><h2 id=\"Wait-on-non-stubbed-XHR’s-by-method-url\"><a href=\"#Wait-on-non-stubbed-XHR’s-by-method-url\" class=\"headerlink\" title=\"Wait on non-stubbed XHR’s by method + url\"></a>Wait on non-stubbed XHR’s by method + url</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// by not passing a response to the route</span></div><div class=\"line\"><span class=\"comment\">// Cypress will pass this request through</span></div><div class=\"line\"><span class=\"comment\">// without stubbing it - but still allow</span></div><div class=\"line\"><span class=\"comment\">// us to wait for it later</span></div><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"string\">\"POST\"</span>, /users/).as(<span class=\"string\">\"postUser\"</span>)</div><div class=\"line\">  .visit(<span class=\"string\">\"/users\"</span>)</div><div class=\"line\">  .get(<span class=\"string\">\"#first-name\"</span>).type(<span class=\"string\">\"Julius&#123;enter&#125;\"</span>)</div><div class=\"line\">  .wait(<span class=\"string\">\"@postUser\"</span>)</div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_xhr_web_form_spec.js\">Check out our example recipe using cy.route to POST for login</a>“,<br>  “title”: “Setup route to POST to login”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Url-and-Response-Usage\"><a href=\"#Url-and-Response-Usage\" class=\"headerlink\" title=\"Url and Response Usage\"></a>Url and Response Usage</h1><h2 id=\"Url-as-a-string\"><a href=\"#Url-as-a-string\" class=\"headerlink\" title=\"Url as a string\"></a>Url as a string</h2><p>When passing a <code>string</code> as the <code>url</code>, the XHR’s URL must match exactly what you’ve written.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"string\">\"/users\"</span>, [&#123;<span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"Pat\"</span>&#125;])</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Url-as-a-string-glob\"><a href=\"#Url-as-a-string-glob\" class=\"headerlink\" title=\"Url as a string glob\"></a>Url as a string glob</h2><p>As of <code>0.16.3</code> we now accept glob patterns. Under the hood Cypress is using <a href=\"https://github.com/isaacs/minimatch\">minimatch</a> to match glob patterns with URL’s.</p>\n<p>This means you can take advantage of <code>*</code> and <code>**</code> support. This makes it <strong>much</strong> easier to route against dynamic segments without having to build up a complex <code>regex</code>.</p>\n<p>We expose <a href=\"https://on.cypress.io/api/cypress-minimatch\"><code>Cypress.minimatch</code></a> as a function which you can use in your Dev Tools console to test routes. You can iterate much faster on a working pattern than guessing at why something isn’t working.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// match against any user id</span></div><div class=\"line\"><span class=\"comment\">// /users/123/comments     &lt;-- matches</span></div><div class=\"line\"><span class=\"comment\">// /users/123/comments/465 &lt;-- not matches</span></div><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"string\">\"/users/*/comments\"</span>)</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// use ** glob to match all segments</span></div><div class=\"line\"><span class=\"comment\">// /posts/1            &lt;-- matches</span></div><div class=\"line\"><span class=\"comment\">// /posts/foo/bar/baz  &lt;-- matches</span></div><div class=\"line\"><span class=\"comment\">// /posts/quuz?a=b&amp;1=2 &lt;-- matches</span></div><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"string\">\"/posts/**\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Override-Url-options\"><a href=\"#Override-Url-options\" class=\"headerlink\" title=\"Override Url options\"></a>Override Url options</h2><p>When we check <code>glob</code> patterns with <code>minimatch</code> by default we use <code>{ matchBase: true}</code>.</p>\n<p>You can override these options in <code>cy.server</code>.</p>\n<p>If you’d like to permanently override these options you can do so by setting <a href=\"https://on.cypress.io/api/api-server\"><code>Cypress.Server.defaults(...)</code></a>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server(&#123;</div><div class=\"line\">    <span class=\"attr\">urlMatchingOptions</span>: &#123; <span class=\"attr\">matchBase</span>: <span class=\"literal\">false</span>, <span class=\"attr\">dot</span>: <span class=\"literal\">true</span> &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">  .route(...)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Url-as-a-RegExp\"><a href=\"#Url-as-a-RegExp\" class=\"headerlink\" title=\"Url as a RegExp\"></a>Url as a RegExp</h2><p>When passing a RegExp as the <code>url</code>, the XHR’s url will be tested against the regular expression and will apply if it passes.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"regexp\">/users\\/\\d+/</span>, &#123;<span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"Phoebe\"</span>&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Application Code</span></div><div class=\"line\"></div><div class=\"line\">$.get(<span class=\"string\">\"/users/1337\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(data) <span class=\"comment\">// =&gt; &#123;id: 1, name: \"Phoebe\"&#125;</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Matching-requests-and-routes\"><a href=\"#Matching-requests-and-routes\" class=\"headerlink\" title=\"Matching requests and routes\"></a>Matching requests and routes</h2><p>Any request that matches the <code>method</code> and <code>url</code> of a route will be responded to based on the configuration of that route.</p>\n<p>If a request doesn’t match any route <a href=\"#notes\">it will automatically receive a 404</a>. For instance given we have the following routes:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"regexp\">/users/</span>, [&#123;<span class=\"attr\">id</span>: <span class=\"number\">19</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"Laura\"</span>&#125;, &#123;<span class=\"attr\">id</span>: <span class=\"number\">20</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"Jamie\"</span>&#125;])</div><div class=\"line\">  .route(<span class=\"string\">\"POST\"</span>, /messages/, &#123;<span class=\"attr\">id</span>: <span class=\"number\">123</span>, <span class=\"attr\">message</span>: <span class=\"string\">\"Hi There!\"</span>&#125;)</div><div class=\"line\">  .get(<span class=\"string\">\"form\"</span>).submit()</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Application Code</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// when our form is submitted</span></div><div class=\"line\">$(<span class=\"string\">\"form\"</span>).submit(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// send an AJAX to: GET /users</span></div><div class=\"line\">  $.get(<span class=\"string\">\"/users\"</span> )</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// send an AJAX to: POST /messages</span></div><div class=\"line\">  $.post(<span class=\"string\">\"/messages\"</span>, &#123;<span class=\"attr\">some</span>: <span class=\"string\">\"data\"</span>&#125;)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// send an AJAX to: GET /updates</span></div><div class=\"line\">  $.get(<span class=\"string\">\"/updates\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p><strong>The above application code will issue 3 AJAX requests:</strong></p>\n<ol>\n<li>The <code>GET /users</code> will match our 1st route and respond with a 200 status code and the array of users.</li>\n<li>The <code>POST /messages</code> will match our 2nd route and respond with a 200 status code with the message object.</li>\n<li>The <code>GET /updates</code> did not match any routes and its response automatically sent back a 404 status code with an empty response body.</li>\n</ol>\n<hr>\n<h2 id=\"Matching-origins-and-non-origin-URL’s\"><a href=\"#Matching-origins-and-non-origin-URL’s\" class=\"headerlink\" title=\"Matching origins and non origin URL’s\"></a>Matching origins and non origin URL’s</h2><p>When Cypress matches up an outgoing XHR request to a <code>cy.route</code> it actually attempts to match it against both the fully qualified URL and then additionally without the URL’s origin.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.route(<span class=\"string\">\"/users/*\"</span>)</div></pre></td></tr></table></figure>\n<p>The following XHR’s which were <code>xhr.open(...)</code> with these URLs would:</p>\n<p><strong>Match</strong></p>\n<ul>\n<li>/users/1</li>\n<li><a href=\"http://localhost:2020/users/2\">http://localhost:2020/users/2</a></li>\n<li><a href=\"https://google.com/users/3\">https://google.com/users/3</a></li>\n</ul>\n<p><strong>Not Match</strong></p>\n<ul>\n<li>/users/4/foo</li>\n<li><a href=\"http://localhost:2020/users/5/foo\">http://localhost:2020/users/5/foo</a></li>\n</ul>\n<hr>\n<h1 id=\"Method-Url-and-Response-Usage\"><a href=\"#Method-Url-and-Response-Usage\" class=\"headerlink\" title=\"Method, Url, and Response Usage\"></a>Method, Url, and Response Usage</h1><h2 id=\"Specify-the-method\"><a href=\"#Specify-the-method\" class=\"headerlink\" title=\"Specify the method\"></a>Specify the method</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// match all DELETE requests to \"/users\"</span></div><div class=\"line\">  <span class=\"comment\">// and respond with an empty JSON object</span></div><div class=\"line\">  .route(<span class=\"string\">\"DELETE\"</span>, <span class=\"string\">\"/users\"</span>, &#123;&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Options-Usage\"><a href=\"#Options-Usage\" class=\"headerlink\" title=\"Options Usage\"></a>Options Usage</h1><h2 id=\"Pass-in-an-options-object\"><a href=\"#Pass-in-an-options-object\" class=\"headerlink\" title=\"Pass in an options object\"></a>Pass in an options object</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(&#123;</div><div class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">\"DELETE\"</span>,</div><div class=\"line\">    <span class=\"attr\">url</span>: <span class=\"regexp\">/user\\/\\d+/</span>,</div><div class=\"line\">    <span class=\"attr\">status</span>: <span class=\"number\">412</span>,</div><div class=\"line\">    <span class=\"attr\">response</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">rolesCount</span>: <span class=\"number\">2</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">delay</span>: <span class=\"number\">500</span>,</div><div class=\"line\">    <span class=\"attr\">headers</span>: &#123;</div><div class=\"line\">      <span class=\"string\">\"X-Token\"</span>: <span class=\"literal\">null</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">onRequest</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">xhr</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// do something with the</span></div><div class=\"line\">      <span class=\"comment\">// raw XHR object when the</span></div><div class=\"line\">      <span class=\"comment\">// request initially goes out</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">onResponse</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">xhr</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// do something with the</span></div><div class=\"line\">      <span class=\"comment\">// raw XHR object when the</span></div><div class=\"line\">      <span class=\"comment\">// response comes back</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Simulate-a-server-redirect\"><a href=\"#Simulate-a-server-redirect\" class=\"headerlink\" title=\"Simulate a server redirect\"></a>Simulate a server redirect</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  <span class=\"comment\">// simulate the server returning 503 with</span></div><div class=\"line\">  <span class=\"comment\">// empty JSON response body</span></div><div class=\"line\">  .route(&#123;</div><div class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">'POST'</span>,</div><div class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">'/login'</span>,</div><div class=\"line\">    <span class=\"attr\">response</span>: &#123;</div><div class=\"line\">      <span class=\"comment\">// simulate a redirect to another page</span></div><div class=\"line\">      redirect: <span class=\"string\">'/error'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_xhr_web_form_spec.js\">Check out our example recipe using cy.route to simulate a 503 on POST to login</a>“,<br>  “title”: “Setup route to error on POST to login”<br>}<br>[/block]</p>\n<hr>\n<h2 id=\"Use-headers-and-fixtures-for-image-route\"><a href=\"#Use-headers-and-fixtures-for-image-route\" class=\"headerlink\" title=\"Use headers and fixtures for image route\"></a>Use headers and fixtures for image route</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.route(&#123;</div><div class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">\"image.png\"</span>,</div><div class=\"line\">  <span class=\"attr\">response</span>: <span class=\"string\">\"fx:logo.png,binary\"</span> <span class=\"comment\">// binary encoding</span></div><div class=\"line\">  headers: &#123;</div><div class=\"line\">    <span class=\"string\">\"content-type\"</span>: <span class=\"string\">\"binary/octet-stream\"</span> <span class=\"comment\">// set content-type headers</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Setting-a-delay-for-a-specific-route\"><a href=\"#Setting-a-delay-for-a-specific-route\" class=\"headerlink\" title=\"Setting a delay for a specific route\"></a>Setting a delay for a specific route</h2><p>You can optionally pass in a delay option which will cause a delay (in ms) to the response for matched requests. The example below will cause the response to be delayed by 3 secs.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.route(&#123;</div><div class=\"line\">  <span class=\"attr\">method</span>: <span class=\"string\">\"PATCH\"</span>,</div><div class=\"line\">  <span class=\"attr\">url</span>: <span class=\"regexp\">/activities\\/\\d+/</span>,</div><div class=\"line\">  <span class=\"attr\">response</span>: &#123;&#125;,</div><div class=\"line\">  <span class=\"attr\">delay</span>: <span class=\"number\">3000</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Function-Usage\"><a href=\"#Function-Usage\" class=\"headerlink\" title=\"Function Usage\"></a>Function Usage</h1><h2 id=\"Set-the-routing-options-by-a-callback-function\"><a href=\"#Set-the-routing-options-by-a-callback-function\" class=\"headerlink\" title=\"Set the routing options by a callback function\"></a>Set the routing options by a callback function</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.route(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...do some custom logic here..</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// and return an appropriate routing object here</span></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">\"POST\"</span>,</div><div class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">\"/users/*/comments\"</span>,</div><div class=\"line\">    <span class=\"attr\">response</span>: <span class=\"keyword\">this</span>.commentsFixture</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Functions-which-return-promises-are-awaited\"><a href=\"#Functions-which-return-promises-are-awaited\" class=\"headerlink\" title=\"Functions which return promises are awaited\"></a>Functions which return promises are awaited</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.route(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// a silly example of async return</span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Cypress.Promise(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// resolve this promise after 1 second</span></div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      resolve(&#123;</div><div class=\"line\">        <span class=\"attr\">method</span>: <span class=\"string\">\"PUT\"</span></div><div class=\"line\">        url: <span class=\"string\">\"/posts/**\"</span></div><div class=\"line\">        response: <span class=\"string\">\"@postFixture\"</span></div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;, <span class=\"number\">1000</span>)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h1><h2 id=\"Understanding-Stubbed-vs-Regular-XHR’s\"><a href=\"#Understanding-Stubbed-vs-Regular-XHR’s\" class=\"headerlink\" title=\"Understanding Stubbed vs Regular XHR’s\"></a>Understanding Stubbed vs Regular XHR’s</h2><p>Cypress indicates whether an XHR sent back a stubbed response vs actually going out to a server.</p>\n<p>XHR’s that indicate <code>(XHR STUB)</code> in the Command Log have been stubbed and their response, status, headers, and delay have been controlled by your matching <code>cy.route</code>.</p>\n<p>XHR’s that indicate <code>(XHR)</code> in the Command Log have not been stubbed and were passed directly through to a server.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/11944790/9b3fe2d8-a816-11e5-9e90-7405555d0c58.png\" alt=\"screen shot 2015-12-21 at 7 03 57 pm\"></p>\n<p>Cypress also logs whether the XHR was stubbed or not to the console when you click on the command in the Command Log. It will indicate whether a request was stubbed, which url it matched or that it did not match any routes.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/11945010/0358123a-a819-11e5-9080-f4e0abf8aaa3.png\" alt=\"screen shot 2015-12-21 at 7 22 23 pm\"></p>\n<p>Even the <code>Initiator</code> is included, which is a stack trace to what caused the XHR to be sent.</p>\n<hr>\n<h2 id=\"Requests-that-don’t-match-a-route\"><a href=\"#Requests-that-don’t-match-a-route\" class=\"headerlink\" title=\"Requests that don’t match a route\"></a>Requests that don’t match a route</h2><p>You can force routes that do not match a route to return 404:</p>\n<table>\n<thead>\n<tr>\n<th>Status</th>\n<th>Body</th>\n<th>Headers</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>404</code></td>\n<td>“”</td>\n<td><code>null</code></td>\n</tr>\n</tbody>\n</table>\n<p>If you’d like to enable this behavior you need to pass:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.server(&#123;<span class=\"attr\">force404</span>: <span class=\"literal\">true</span>&#125;)</div></pre></td></tr></table></figure>\n<p>You can <a href=\"https://on.cypress.io/api/server#prevent-sending-404s-to-unmatched-requests\">read more about this here.</a></p>\n<hr>\n<h2 id=\"Using-Fixtures-as-Responses\"><a href=\"#Using-Fixtures-as-Responses\" class=\"headerlink\" title=\"Using Fixtures as Responses\"></a>Using Fixtures as Responses</h2><p>Instead of writing a response inline you can automatically connect a response with a fixture.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"regexp\">/posts/</span>, <span class=\"string\">\"fixture:logo.png\"</span>).as(<span class=\"string\">\"getLogo\"</span>)</div><div class=\"line\">  .route(<span class=\"regexp\">/users/</span>, <span class=\"string\">\"fixture:users/all.json\"</span>).as(<span class=\"string\">\"getUsers\"</span>)</div><div class=\"line\">  .route(<span class=\"regexp\">/admin/</span>, <span class=\"string\">\"fixtures:users/admin.json\"</span>).as(<span class=\"string\">\"getAdmin\"</span>)</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  <span class=\"comment\">// route after receiving the fixture and</span></div><div class=\"line\">  <span class=\"comment\">// working with the data</span></div><div class=\"line\">  .fixture(<span class=\"string\">\"user\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">user</span>)</span>&#123;</div><div class=\"line\">    user.firstName = <span class=\"string\">\"Jennifer\"</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// work with the users array here</span></div><div class=\"line\">    cy.route(<span class=\"string\">\"GET\"</span>, <span class=\"string\">\"user/123\"</span>, user)</div><div class=\"line\">  &#125;)</div><div class=\"line\">  .visit(<span class=\"string\">\"/users\"</span>)</div><div class=\"line\">  .get(<span class=\"string\">\".user\"</span>).should(<span class=\"string\">\"include\"</span>, <span class=\"string\">\"Jennifer\"</span>)</div></pre></td></tr></table></figure>\n<p>You can also reference fixtures as strings directly in the response</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// we can link responses to fixtures simply</span></div><div class=\"line\"><span class=\"comment\">// by passing the fixture string with an '@'</span></div><div class=\"line\"><span class=\"comment\">// just like how you use aliases in</span></div><div class=\"line\"><span class=\"comment\">// cy.get(...) and cy.wait(...)</span></div><div class=\"line\">cy</div><div class=\"line\">  .fixture(<span class=\"string\">\"user\"</span>).as(<span class=\"string\">\"fxUser\"</span>)</div><div class=\"line\">  .route(<span class=\"string\">\"POST\"</span>, <span class=\"string\">\"/users/*\"</span>, <span class=\"string\">\"@fxUser\"</span>)</div></pre></td></tr></table></figure>\n<p>You can <a href=\"https://on.cypress.io/api/fixture\">read more about fixtures here.</a></p>\n<hr>\n<h2 id=\"Using-Response-Functions\"><a href=\"#Using-Response-Functions\" class=\"headerlink\" title=\"Using Response Functions\"></a>Using Response Functions</h2><p>You can also use a function as a response which enables you to add logic surrounding the response.</p>\n<p>Functions which return promises will automatically be awaited.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> commentsResponse = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">routeData</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//routeData is a reference to the current route's information</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">data</span>: someOtherFunction(routeData)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">cy.route(<span class=\"string\">\"POST\"</span>, <span class=\"string\">\"/comments/**\"</span>, commentsResponse)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Response-Headers-are-automatically-set\"><a href=\"#Response-Headers-are-automatically-set\" class=\"headerlink\" title=\"Response Headers are automatically set\"></a>Response Headers are automatically set</h2><p>By default, Cypress will automatically set <code>Content-Type</code> and <code>Content-Length</code> based on what your <code>response body</code> looks like.</p>\n<p>If you’d like to override this, explicitly pass in <code>headers</code> as an <code>object literal</code>.</p>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"regexp\">/accounts/</span>).as(<span class=\"string\">\"accountsGet\"</span>)</div><div class=\"line\">  .route(<span class=\"regexp\">/company/</span>, <span class=\"string\">\"fixtures:company\"</span>).as(<span class=\"string\">\"companyGet\"</span>)</div><div class=\"line\">  .route(<span class=\"regexp\">/teams/</span>,   <span class=\"string\">\"fixtures:teams\"</span>).as(<span class=\"string\">\"teamsGet\"</span>)</div></pre></td></tr></table></figure>\n<p>Whenever you start a server and add routes, Cypress will display a new Instrument Log called <strong>Routes</strong>. It will list the routing table in the Instrument Log, including the <code>method</code>, <code>url</code>, <code>stubbed</code>, <code>alias</code> and number of matched requests:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/11944789/9b3f69b6-a816-11e5-8b8f-bf8a235cf700.png\" alt=\"screen shot 2015-12-21 at 7 04 41 pm\"></p>\n<p>When XHR’s are made, Cypress will log them in the Command Log and indicate whether they matched a routing alias:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/11944892/ca762cf0-a817-11e5-8713-91ced4a36a8a.png\" alt=\"screen shot 2015-12-21 at 7 19 20 pm\"></p>\n<p>When clicking on <code>XHR Stub</code> within the Command Log, the console outputs the following:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/11944950/711af9e6-a818-11e5-86b6-d17554403355.png\" alt=\"screen shot 2015-12-21 at 7 22 23 pm copy\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/guides/network-requests-xhr\">Guide: Network Requests</a></li>\n<li><a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_xhr_web_form_spec.js\">Recipe: Loggin in - XHR Web Form</a></li>\n<li><a href=\"https://on.cypress.io/api/server\">server</a></li>\n<li><a href=\"https://on.cypress.io/api/wait\">wait</a></li>\n<li><a href=\"https://on.cypress.io/api/as\">as</a></li>\n<li><a href=\"https://on.cypress.io/api/fixture\">fixture</a></li>\n</ul>\n"},{"title":"screenshot","_content":"\nTake a screenshot of the Command Log and the test runner (the app being tested). The screenshot will be stored in `cypress/screenshots` by default.\n\nYou can change the directory where screenshots are saved in your [configuration](https://on.cypress.io/guides/configuration#section-folders).\n\n| | |\n|--- | --- |\n| **Returns** | `null` |\n| **Timeout** | `cy.screenshot` will wait up for the duration of [`responseTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) for the automation server to process this command. |\n\n***\n\n# [cy.screenshot()](#section-usage)\n\nTake a screenshot of the screen and save as a `.png` in `cypress/screenshots`. By default the filename will be the title of the test.\n\n***\n\n# [cy.screenshot( *filename* )](#section-filename-usage)\n\nTake a screenshot of the screen and save as a `.png` in `cypress/screenshots`. The filename will be the filename passed in as the argument.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.screenshot`.\n\n**cy.screenshot( *options* )**\n**cy.screenshot( *filename*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`responseTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to wait for the automation server to process this command.\n\n***\n\n# Usage\n\n## Take a screenshot\n\n```javascript\n// screenshot will be saved at\n// cypress/sreenshots/takes a screenshot.png\nit(\"takes a screenshot\", function(){\n  // returns null\n  cy.screenshot()\n})\n```\n\n***\n\n# Filename Usage\n\n## Take a screenshot and save as specific filename\n\n```javascript\n// screenshot will be saved at\n// cypress/sreenshots/clickingOnNav.png\ncy.screenshot(\"clickingOnNav\")\n```\n\n***\n\n# Notes\n\n## Automatic screenshots on test failure\n\nWhen running headlessly or in [Continuous Integration](https://on.cypress.io/guides/continuous-integration), Cypress will automatically take a screenshot when a test fails. You can optionally turn this off by setting `screenshotOnHeadlessFailure` to `false` in your [configuration](https://on.cypress.io/guides/configuration).\n\n***\n\n## Default screenshots folder\n\nBy default, screenshots will be saved in `cypress/screenshots`. You can change the directory where screenshots are saved in your [configuration](https://on.cypress.io/guides/configuration#section-folders).\n\n***\n\n## Screenshots in CI\n\nWhen running in [Circle CI](https://circleci.com/), we will automatically export screenshots as artifacts. This makes them available directly in their web UI. If you're using Circle CI, you'll be able to see screenshots without doing anything.\n\nIf you're using Travis, you'll need to upload artifacts to an s3 bucket as per their [uploading artifacts doc](https://docs.travis-ci.com/user/uploading-artifacts/).\n\n***\n\n## Understanding when a screenshot happens\n\nTaking a screenshot is an asynchronous action which takes around `100ms` to complete. By the time the screenshot is taken it's possible something in your application may have changed. It's important to realize that the screenshot may not reflect 100% of what your application looked like when the command was issued.\n\nFor example - say this command times outs `cy.get(\"#element\")`. This causes your test to fail. We'll then take a screenshot when the test fails but it's possible something in your application changes within the `100ms` timeframe. Hypothetically your app could render the element you were searching for. When this happens the screenshot may provide confusing results. It's unlikely but theoretically possible.\n\n## No Command Log scrolling during screenshots\n\n Currently you may not be able to see the Command Log at the exact test you took the screenshot due to the view not scrolling when the screenshot is taken.\n\n***\n\n# Command Log\n\n## Take a screenshot with a specific filename\n\n```javascript\ncy.screenshot(\"my-image\")\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"559\" alt=\"screen shot 2016-06-13 at 10 46 25 am\" src=\"https://cloud.githubusercontent.com/assets/1271364/16012082/ded7af6c-3155-11e6-83cb-b0dcb6f850a7.png\">\n\nWhen clicking on `screenshot` within the command log, the console outputs the following:\n\n<img width=\"667\" alt=\"screen shot 2016-06-13 at 10 46 15 am\" src=\"https://cloud.githubusercontent.com/assets/1271364/16012081/ded22a2e-3155-11e6-8303-0f1ec64e209b.png\">","source":"api/commands/screenshot.md","raw":"title: screenshot\n---\n\nTake a screenshot of the Command Log and the test runner (the app being tested). The screenshot will be stored in `cypress/screenshots` by default.\n\nYou can change the directory where screenshots are saved in your [configuration](https://on.cypress.io/guides/configuration#section-folders).\n\n| | |\n|--- | --- |\n| **Returns** | `null` |\n| **Timeout** | `cy.screenshot` will wait up for the duration of [`responseTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) for the automation server to process this command. |\n\n***\n\n# [cy.screenshot()](#section-usage)\n\nTake a screenshot of the screen and save as a `.png` in `cypress/screenshots`. By default the filename will be the title of the test.\n\n***\n\n# [cy.screenshot( *filename* )](#section-filename-usage)\n\nTake a screenshot of the screen and save as a `.png` in `cypress/screenshots`. The filename will be the filename passed in as the argument.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.screenshot`.\n\n**cy.screenshot( *options* )**\n**cy.screenshot( *filename*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`responseTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to wait for the automation server to process this command.\n\n***\n\n# Usage\n\n## Take a screenshot\n\n```javascript\n// screenshot will be saved at\n// cypress/sreenshots/takes a screenshot.png\nit(\"takes a screenshot\", function(){\n  // returns null\n  cy.screenshot()\n})\n```\n\n***\n\n# Filename Usage\n\n## Take a screenshot and save as specific filename\n\n```javascript\n// screenshot will be saved at\n// cypress/sreenshots/clickingOnNav.png\ncy.screenshot(\"clickingOnNav\")\n```\n\n***\n\n# Notes\n\n## Automatic screenshots on test failure\n\nWhen running headlessly or in [Continuous Integration](https://on.cypress.io/guides/continuous-integration), Cypress will automatically take a screenshot when a test fails. You can optionally turn this off by setting `screenshotOnHeadlessFailure` to `false` in your [configuration](https://on.cypress.io/guides/configuration).\n\n***\n\n## Default screenshots folder\n\nBy default, screenshots will be saved in `cypress/screenshots`. You can change the directory where screenshots are saved in your [configuration](https://on.cypress.io/guides/configuration#section-folders).\n\n***\n\n## Screenshots in CI\n\nWhen running in [Circle CI](https://circleci.com/), we will automatically export screenshots as artifacts. This makes them available directly in their web UI. If you're using Circle CI, you'll be able to see screenshots without doing anything.\n\nIf you're using Travis, you'll need to upload artifacts to an s3 bucket as per their [uploading artifacts doc](https://docs.travis-ci.com/user/uploading-artifacts/).\n\n***\n\n## Understanding when a screenshot happens\n\nTaking a screenshot is an asynchronous action which takes around `100ms` to complete. By the time the screenshot is taken it's possible something in your application may have changed. It's important to realize that the screenshot may not reflect 100% of what your application looked like when the command was issued.\n\nFor example - say this command times outs `cy.get(\"#element\")`. This causes your test to fail. We'll then take a screenshot when the test fails but it's possible something in your application changes within the `100ms` timeframe. Hypothetically your app could render the element you were searching for. When this happens the screenshot may provide confusing results. It's unlikely but theoretically possible.\n\n## No Command Log scrolling during screenshots\n\n Currently you may not be able to see the Command Log at the exact test you took the screenshot due to the view not scrolling when the screenshot is taken.\n\n***\n\n# Command Log\n\n## Take a screenshot with a specific filename\n\n```javascript\ncy.screenshot(\"my-image\")\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"559\" alt=\"screen shot 2016-06-13 at 10 46 25 am\" src=\"https://cloud.githubusercontent.com/assets/1271364/16012082/ded7af6c-3155-11e6-83cb-b0dcb6f850a7.png\">\n\nWhen clicking on `screenshot` within the command log, the console outputs the following:\n\n<img width=\"667\" alt=\"screen shot 2016-06-13 at 10 46 15 am\" src=\"https://cloud.githubusercontent.com/assets/1271364/16012081/ded22a2e-3155-11e6-8303-0f1ec64e209b.png\">","date":"2017-04-19T18:50:48.000Z","updated":"2017-04-19T18:50:48.000Z","path":"api/commands/screenshot.html","comments":1,"layout":"page","_id":"cj1pc3ify0007n9g8uvax9fmz","content":"<p>Take a screenshot of the Command Log and the test runner (the app being tested). The screenshot will be stored in <code>cypress/screenshots</code> by default.</p>\n<p>You can change the directory where screenshots are saved in your <a href=\"https://on.cypress.io/guides/configuration#section-folders\" target=\"_blank\" rel=\"external\">configuration</a>.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td><code>null</code></td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.screenshot</code> will wait up for the duration of <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>responseTimeout</code></a> for the automation server to process this command.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-screenshot\"><a href=\"#cy-screenshot\" class=\"headerlink\" title=\"cy.screenshot()\"></a><a href=\"#section-usage\">cy.screenshot()</a></h1><p>Take a screenshot of the screen and save as a <code>.png</code> in <code>cypress/screenshots</code>. By default the filename will be the title of the test.</p>\n<hr>\n<h1 id=\"cy-screenshot-filename\"><a href=\"#cy-screenshot-filename\" class=\"headerlink\" title=\"cy.screenshot( filename )\"></a><a href=\"#section-filename-usage\">cy.screenshot( <em>filename</em> )</a></h1><p>Take a screenshot of the screen and save as a <code>.png</code> in <code>cypress/screenshots</code>. The filename will be the filename passed in as the argument.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.screenshot</code>.</p>\n<p><strong>cy.screenshot( <em>options</em> )</strong><br><strong>cy.screenshot( <em>filename</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>responseTimeout</code></a></td>\n<td>Total time to wait for the automation server to process this command.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Take-a-screenshot\"><a href=\"#Take-a-screenshot\" class=\"headerlink\" title=\"Take a screenshot\"></a>Take a screenshot</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// screenshot will be saved at</span></div><div class=\"line\"><span class=\"comment\">// cypress/sreenshots/takes a screenshot.png</span></div><div class=\"line\">it(<span class=\"string\">\"takes a screenshot\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// returns null</span></div><div class=\"line\">  cy.screenshot()</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Filename-Usage\"><a href=\"#Filename-Usage\" class=\"headerlink\" title=\"Filename Usage\"></a>Filename Usage</h1><h2 id=\"Take-a-screenshot-and-save-as-specific-filename\"><a href=\"#Take-a-screenshot-and-save-as-specific-filename\" class=\"headerlink\" title=\"Take a screenshot and save as specific filename\"></a>Take a screenshot and save as specific filename</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// screenshot will be saved at</span></div><div class=\"line\"><span class=\"comment\">// cypress/sreenshots/clickingOnNav.png</span></div><div class=\"line\">cy.screenshot(<span class=\"string\">\"clickingOnNav\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h1><h2 id=\"Automatic-screenshots-on-test-failure\"><a href=\"#Automatic-screenshots-on-test-failure\" class=\"headerlink\" title=\"Automatic screenshots on test failure\"></a>Automatic screenshots on test failure</h2><p>When running headlessly or in <a href=\"https://on.cypress.io/guides/continuous-integration\" target=\"_blank\" rel=\"external\">Continuous Integration</a>, Cypress will automatically take a screenshot when a test fails. You can optionally turn this off by setting <code>screenshotOnHeadlessFailure</code> to <code>false</code> in your <a href=\"https://on.cypress.io/guides/configuration\" target=\"_blank\" rel=\"external\">configuration</a>.</p>\n<hr>\n<h2 id=\"Default-screenshots-folder\"><a href=\"#Default-screenshots-folder\" class=\"headerlink\" title=\"Default screenshots folder\"></a>Default screenshots folder</h2><p>By default, screenshots will be saved in <code>cypress/screenshots</code>. You can change the directory where screenshots are saved in your <a href=\"https://on.cypress.io/guides/configuration#section-folders\" target=\"_blank\" rel=\"external\">configuration</a>.</p>\n<hr>\n<h2 id=\"Screenshots-in-CI\"><a href=\"#Screenshots-in-CI\" class=\"headerlink\" title=\"Screenshots in CI\"></a>Screenshots in CI</h2><p>When running in <a href=\"https://circleci.com/\" target=\"_blank\" rel=\"external\">Circle CI</a>, we will automatically export screenshots as artifacts. This makes them available directly in their web UI. If you’re using Circle CI, you’ll be able to see screenshots without doing anything.</p>\n<p>If you’re using Travis, you’ll need to upload artifacts to an s3 bucket as per their <a href=\"https://docs.travis-ci.com/user/uploading-artifacts/\" target=\"_blank\" rel=\"external\">uploading artifacts doc</a>.</p>\n<hr>\n<h2 id=\"Understanding-when-a-screenshot-happens\"><a href=\"#Understanding-when-a-screenshot-happens\" class=\"headerlink\" title=\"Understanding when a screenshot happens\"></a>Understanding when a screenshot happens</h2><p>Taking a screenshot is an asynchronous action which takes around <code>100ms</code> to complete. By the time the screenshot is taken it’s possible something in your application may have changed. It’s important to realize that the screenshot may not reflect 100% of what your application looked like when the command was issued.</p>\n<p>For example - say this command times outs <code>cy.get(&quot;#element&quot;)</code>. This causes your test to fail. We’ll then take a screenshot when the test fails but it’s possible something in your application changes within the <code>100ms</code> timeframe. Hypothetically your app could render the element you were searching for. When this happens the screenshot may provide confusing results. It’s unlikely but theoretically possible.</p>\n<h2 id=\"No-Command-Log-scrolling-during-screenshots\"><a href=\"#No-Command-Log-scrolling-during-screenshots\" class=\"headerlink\" title=\"No Command Log scrolling during screenshots\"></a>No Command Log scrolling during screenshots</h2><p> Currently you may not be able to see the Command Log at the exact test you took the screenshot due to the view not scrolling when the screenshot is taken.</p>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Take-a-screenshot-with-a-specific-filename\"><a href=\"#Take-a-screenshot-with-a-specific-filename\" class=\"headerlink\" title=\"Take a screenshot with a specific filename\"></a>Take a screenshot with a specific filename</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.screenshot(<span class=\"string\">\"my-image\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"559\" alt=\"screen shot 2016-06-13 at 10 46 25 am\" src=\"https://cloud.githubusercontent.com/assets/1271364/16012082/ded7af6c-3155-11e6-83cb-b0dcb6f850a7.png\"></p>\n<p>When clicking on <code>screenshot</code> within the command log, the console outputs the following:</p>\n<p><img width=\"667\" alt=\"screen shot 2016-06-13 at 10 46 15 am\" src=\"https://cloud.githubusercontent.com/assets/1271364/16012081/ded22a2e-3155-11e6-8303-0f1ec64e209b.png\"></p>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Take a screenshot of the Command Log and the test runner (the app being tested). The screenshot will be stored in <code>cypress/screenshots</code> by default.</p>\n<p>You can change the directory where screenshots are saved in your <a href=\"https://on.cypress.io/guides/configuration#section-folders\">configuration</a>.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td><code>null</code></td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.screenshot</code> will wait up for the duration of <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>responseTimeout</code></a> for the automation server to process this command.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-screenshot\"><a href=\"#cy-screenshot\" class=\"headerlink\" title=\"cy.screenshot()\"></a><a href=\"#section-usage\">cy.screenshot()</a></h1><p>Take a screenshot of the screen and save as a <code>.png</code> in <code>cypress/screenshots</code>. By default the filename will be the title of the test.</p>\n<hr>\n<h1 id=\"cy-screenshot-filename\"><a href=\"#cy-screenshot-filename\" class=\"headerlink\" title=\"cy.screenshot( filename )\"></a><a href=\"#section-filename-usage\">cy.screenshot( <em>filename</em> )</a></h1><p>Take a screenshot of the screen and save as a <code>.png</code> in <code>cypress/screenshots</code>. The filename will be the filename passed in as the argument.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.screenshot</code>.</p>\n<p><strong>cy.screenshot( <em>options</em> )</strong><br><strong>cy.screenshot( <em>filename</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>responseTimeout</code></a></td>\n<td>Total time to wait for the automation server to process this command.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Take-a-screenshot\"><a href=\"#Take-a-screenshot\" class=\"headerlink\" title=\"Take a screenshot\"></a>Take a screenshot</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// screenshot will be saved at</span></div><div class=\"line\"><span class=\"comment\">// cypress/sreenshots/takes a screenshot.png</span></div><div class=\"line\">it(<span class=\"string\">\"takes a screenshot\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// returns null</span></div><div class=\"line\">  cy.screenshot()</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Filename-Usage\"><a href=\"#Filename-Usage\" class=\"headerlink\" title=\"Filename Usage\"></a>Filename Usage</h1><h2 id=\"Take-a-screenshot-and-save-as-specific-filename\"><a href=\"#Take-a-screenshot-and-save-as-specific-filename\" class=\"headerlink\" title=\"Take a screenshot and save as specific filename\"></a>Take a screenshot and save as specific filename</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// screenshot will be saved at</span></div><div class=\"line\"><span class=\"comment\">// cypress/sreenshots/clickingOnNav.png</span></div><div class=\"line\">cy.screenshot(<span class=\"string\">\"clickingOnNav\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h1><h2 id=\"Automatic-screenshots-on-test-failure\"><a href=\"#Automatic-screenshots-on-test-failure\" class=\"headerlink\" title=\"Automatic screenshots on test failure\"></a>Automatic screenshots on test failure</h2><p>When running headlessly or in <a href=\"https://on.cypress.io/guides/continuous-integration\">Continuous Integration</a>, Cypress will automatically take a screenshot when a test fails. You can optionally turn this off by setting <code>screenshotOnHeadlessFailure</code> to <code>false</code> in your <a href=\"https://on.cypress.io/guides/configuration\">configuration</a>.</p>\n<hr>\n<h2 id=\"Default-screenshots-folder\"><a href=\"#Default-screenshots-folder\" class=\"headerlink\" title=\"Default screenshots folder\"></a>Default screenshots folder</h2><p>By default, screenshots will be saved in <code>cypress/screenshots</code>. You can change the directory where screenshots are saved in your <a href=\"https://on.cypress.io/guides/configuration#section-folders\">configuration</a>.</p>\n<hr>\n<h2 id=\"Screenshots-in-CI\"><a href=\"#Screenshots-in-CI\" class=\"headerlink\" title=\"Screenshots in CI\"></a>Screenshots in CI</h2><p>When running in <a href=\"https://circleci.com/\">Circle CI</a>, we will automatically export screenshots as artifacts. This makes them available directly in their web UI. If you’re using Circle CI, you’ll be able to see screenshots without doing anything.</p>\n<p>If you’re using Travis, you’ll need to upload artifacts to an s3 bucket as per their <a href=\"https://docs.travis-ci.com/user/uploading-artifacts/\">uploading artifacts doc</a>.</p>\n<hr>\n<h2 id=\"Understanding-when-a-screenshot-happens\"><a href=\"#Understanding-when-a-screenshot-happens\" class=\"headerlink\" title=\"Understanding when a screenshot happens\"></a>Understanding when a screenshot happens</h2><p>Taking a screenshot is an asynchronous action which takes around <code>100ms</code> to complete. By the time the screenshot is taken it’s possible something in your application may have changed. It’s important to realize that the screenshot may not reflect 100% of what your application looked like when the command was issued.</p>\n<p>For example - say this command times outs <code>cy.get(&quot;#element&quot;)</code>. This causes your test to fail. We’ll then take a screenshot when the test fails but it’s possible something in your application changes within the <code>100ms</code> timeframe. Hypothetically your app could render the element you were searching for. When this happens the screenshot may provide confusing results. It’s unlikely but theoretically possible.</p>\n<h2 id=\"No-Command-Log-scrolling-during-screenshots\"><a href=\"#No-Command-Log-scrolling-during-screenshots\" class=\"headerlink\" title=\"No Command Log scrolling during screenshots\"></a>No Command Log scrolling during screenshots</h2><p> Currently you may not be able to see the Command Log at the exact test you took the screenshot due to the view not scrolling when the screenshot is taken.</p>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Take-a-screenshot-with-a-specific-filename\"><a href=\"#Take-a-screenshot-with-a-specific-filename\" class=\"headerlink\" title=\"Take a screenshot with a specific filename\"></a>Take a screenshot with a specific filename</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.screenshot(<span class=\"string\">\"my-image\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"559\" alt=\"screen shot 2016-06-13 at 10 46 25 am\" src=\"https://cloud.githubusercontent.com/assets/1271364/16012082/ded7af6c-3155-11e6-83cb-b0dcb6f850a7.png\"></p>\n<p>When clicking on <code>screenshot</code> within the command log, the console outputs the following:</p>\n<p><img width=\"667\" alt=\"screen shot 2016-06-13 at 10 46 15 am\" src=\"https://cloud.githubusercontent.com/assets/1271364/16012081/ded22a2e-3155-11e6-8303-0f1ec64e209b.png\"></p>\n"},{"title":"select","_content":"\nSelect an option within a `<select>` DOM element.\n\n**The following events are fired during select:** `mousedown`, `focus`, `mouseup`, `click`\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.select` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) or the duration of the `timeout` specified in the command's [options](#section-options). |\n\n***\n\n# [cy.select( *text* )](#section-text-usage)\n\nSelect an option within a `<select>` element based on the text content of the option.\n\n***\n\n# [cy.select( *value* )](#section-value-usage)\n\nSelect an option within a `<select>` element based on the value of the option.\n\n***\n\n# [cy.select( *texts* )](#section-texts-usage)\n\nSelect multiple options within a `<select>` element based on the text of the option.\n\n***\n\n# [cy.select( *values* )](#section-values-usage)\n\nSelect multiple options within a `<select>` element based on the value of the option.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.select`.\n\n**cy.select( *text*, *options* )**\n**cy.select( *value*, *options* )**\n**cy.select( *array*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`force` | `false` | Forces select, disables error checking prior to select\n`interval` | `50` | Interval which to retry a select\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry the select\n`log` | `true` | whether to display command in command log\n\n***\n\n# Text Usage\n\n## Select the option with the text `apples`\n\n```html\n<select>\n  <option value=\"456\">apples</option>\n  <option value=\"457\">oranges</option>\n  <option value=\"458\">bananas</option>\n</select>\n```\n\n```javascript\n// returns <option value=\"456\">apples</option>\ncy.get(\"select\").select(\"apples\")\n```\n\n***\n\n# Value Usage\n\n## Select the option with the value \"456\"\n\n```html\n<select>\n  <option value=\"456\">apples</option>\n  <option value=\"457\">oranges</option>\n  <option value=\"458\">bananas</option>\n</select>\n```\n\n```javascript\n// returns <option value=\"456\">apples</option>\ncy.get(\"select\").select(\"456\")\n```\n\n***\n\n# Texts Usage\n\n## Select the options with the texts \"apples\" and \"bananas\"\n\n```html\n<select multiple>\n  <option value=\"456\">apples</option>\n  <option value=\"457\">oranges</option>\n  <option value=\"458\">bananas</option>\n</select>\n```\n\n```javascript\ncy.get(\"select\").select([\"apples\", \"bananas\"])\n```\n\n***\n\n# Values Usage\n\n## Select the options with the values \"456\" and \"457\"\n\n```html\n<select multiple>\n  <option value=\"456\">apples</option>\n  <option value=\"457\">oranges</option>\n  <option value=\"458\">bananas</option>\n</select>\n```\n\n```javascript\ncy.get(\"select\").select([\"456\", \"457\"])\n```\n\n***\n\n# Command Log\n\n## Select the option with the text \"Homer Simpson\"\n\n```javascript\ncy.get(\"select\").select(\"Homer Simpson\")\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"575\" alt=\"screen shot 2015-11-29 at 1 17 27 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459044/a2fd8fca-969b-11e5-8d23-3a118b82b5de.png\">\n\nWhen clicking on `select` within the command log, the console outputs the following:\n\n<img width=\"560\" alt=\"screen shot 2015-11-29 at 1 17 45 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459045/a6b3bde2-969b-11e5-9357-272ea9684987.png\">\n\n***\n\n# Related\n\n- [click](https://on.cypress.io/api/click)","source":"api/commands/select.md","raw":"title: select\n---\n\nSelect an option within a `<select>` DOM element.\n\n**The following events are fired during select:** `mousedown`, `focus`, `mouseup`, `click`\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.select` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) or the duration of the `timeout` specified in the command's [options](#section-options). |\n\n***\n\n# [cy.select( *text* )](#section-text-usage)\n\nSelect an option within a `<select>` element based on the text content of the option.\n\n***\n\n# [cy.select( *value* )](#section-value-usage)\n\nSelect an option within a `<select>` element based on the value of the option.\n\n***\n\n# [cy.select( *texts* )](#section-texts-usage)\n\nSelect multiple options within a `<select>` element based on the text of the option.\n\n***\n\n# [cy.select( *values* )](#section-values-usage)\n\nSelect multiple options within a `<select>` element based on the value of the option.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.select`.\n\n**cy.select( *text*, *options* )**\n**cy.select( *value*, *options* )**\n**cy.select( *array*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`force` | `false` | Forces select, disables error checking prior to select\n`interval` | `50` | Interval which to retry a select\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry the select\n`log` | `true` | whether to display command in command log\n\n***\n\n# Text Usage\n\n## Select the option with the text `apples`\n\n```html\n<select>\n  <option value=\"456\">apples</option>\n  <option value=\"457\">oranges</option>\n  <option value=\"458\">bananas</option>\n</select>\n```\n\n```javascript\n// returns <option value=\"456\">apples</option>\ncy.get(\"select\").select(\"apples\")\n```\n\n***\n\n# Value Usage\n\n## Select the option with the value \"456\"\n\n```html\n<select>\n  <option value=\"456\">apples</option>\n  <option value=\"457\">oranges</option>\n  <option value=\"458\">bananas</option>\n</select>\n```\n\n```javascript\n// returns <option value=\"456\">apples</option>\ncy.get(\"select\").select(\"456\")\n```\n\n***\n\n# Texts Usage\n\n## Select the options with the texts \"apples\" and \"bananas\"\n\n```html\n<select multiple>\n  <option value=\"456\">apples</option>\n  <option value=\"457\">oranges</option>\n  <option value=\"458\">bananas</option>\n</select>\n```\n\n```javascript\ncy.get(\"select\").select([\"apples\", \"bananas\"])\n```\n\n***\n\n# Values Usage\n\n## Select the options with the values \"456\" and \"457\"\n\n```html\n<select multiple>\n  <option value=\"456\">apples</option>\n  <option value=\"457\">oranges</option>\n  <option value=\"458\">bananas</option>\n</select>\n```\n\n```javascript\ncy.get(\"select\").select([\"456\", \"457\"])\n```\n\n***\n\n# Command Log\n\n## Select the option with the text \"Homer Simpson\"\n\n```javascript\ncy.get(\"select\").select(\"Homer Simpson\")\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"575\" alt=\"screen shot 2015-11-29 at 1 17 27 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459044/a2fd8fca-969b-11e5-8d23-3a118b82b5de.png\">\n\nWhen clicking on `select` within the command log, the console outputs the following:\n\n<img width=\"560\" alt=\"screen shot 2015-11-29 at 1 17 45 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459045/a6b3bde2-969b-11e5-9357-272ea9684987.png\">\n\n***\n\n# Related\n\n- [click](https://on.cypress.io/api/click)","date":"2017-04-19T18:50:48.000Z","updated":"2017-04-19T18:50:48.000Z","path":"api/commands/select.html","comments":1,"layout":"page","_id":"cj1pc3ify0008n9g8x8pyw1ww","content":"<p>Select an option within a <code>&lt;select&gt;</code> DOM element.</p>\n<p><strong>The following events are fired during select:</strong> <code>mousedown</code>, <code>focus</code>, <code>mouseup</code>, <code>click</code></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.select</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a> or the duration of the <code>timeout</code> specified in the command’s <a href=\"#section-options\">options</a>.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-select-text\"><a href=\"#cy-select-text\" class=\"headerlink\" title=\"cy.select( text )\"></a><a href=\"#section-text-usage\">cy.select( <em>text</em> )</a></h1><p>Select an option within a <code>&lt;select&gt;</code> element based on the text content of the option.</p>\n<hr>\n<h1 id=\"cy-select-value\"><a href=\"#cy-select-value\" class=\"headerlink\" title=\"cy.select( value )\"></a><a href=\"#section-value-usage\">cy.select( <em>value</em> )</a></h1><p>Select an option within a <code>&lt;select&gt;</code> element based on the value of the option.</p>\n<hr>\n<h1 id=\"cy-select-texts\"><a href=\"#cy-select-texts\" class=\"headerlink\" title=\"cy.select( texts )\"></a><a href=\"#section-texts-usage\">cy.select( <em>texts</em> )</a></h1><p>Select multiple options within a <code>&lt;select&gt;</code> element based on the text of the option.</p>\n<hr>\n<h1 id=\"cy-select-values\"><a href=\"#cy-select-values\" class=\"headerlink\" title=\"cy.select( values )\"></a><a href=\"#section-values-usage\">cy.select( <em>values</em> )</a></h1><p>Select multiple options within a <code>&lt;select&gt;</code> element based on the value of the option.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.select</code>.</p>\n<p><strong>cy.select( <em>text</em>, <em>options</em> )</strong><br><strong>cy.select( <em>value</em>, <em>options</em> )</strong><br><strong>cy.select( <em>array</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>force</code></td>\n<td><code>false</code></td>\n<td>Forces select, disables error checking prior to select</td>\n</tr>\n<tr>\n<td><code>interval</code></td>\n<td><code>50</code></td>\n<td>Interval which to retry a select</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry the select</td>\n</tr>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Text-Usage\"><a href=\"#Text-Usage\" class=\"headerlink\" title=\"Text Usage\"></a>Text Usage</h1><h2 id=\"Select-the-option-with-the-text-apples\"><a href=\"#Select-the-option-with-the-text-apples\" class=\"headerlink\" title=\"Select the option with the text apples\"></a>Select the option with the text <code>apples</code></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"456\"</span>&gt;</span>apples<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"457\"</span>&gt;</span>oranges<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"458\"</span>&gt;</span>bananas<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns &lt;option value=\"456\"&gt;apples&lt;/option&gt;</span></div><div class=\"line\">cy.get(<span class=\"string\">\"select\"</span>).select(<span class=\"string\">\"apples\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Value-Usage\"><a href=\"#Value-Usage\" class=\"headerlink\" title=\"Value Usage\"></a>Value Usage</h1><h2 id=\"Select-the-option-with-the-value-“456”\"><a href=\"#Select-the-option-with-the-value-“456”\" class=\"headerlink\" title=\"Select the option with the value “456”\"></a>Select the option with the value “456”</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"456\"</span>&gt;</span>apples<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"457\"</span>&gt;</span>oranges<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"458\"</span>&gt;</span>bananas<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns &lt;option value=\"456\"&gt;apples&lt;/option&gt;</span></div><div class=\"line\">cy.get(<span class=\"string\">\"select\"</span>).select(<span class=\"string\">\"456\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Texts-Usage\"><a href=\"#Texts-Usage\" class=\"headerlink\" title=\"Texts Usage\"></a>Texts Usage</h1><h2 id=\"Select-the-options-with-the-texts-“apples”-and-“bananas”\"><a href=\"#Select-the-options-with-the-texts-“apples”-and-“bananas”\" class=\"headerlink\" title=\"Select the options with the texts “apples” and “bananas”\"></a>Select the options with the texts “apples” and “bananas”</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">multiple</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"456\"</span>&gt;</span>apples<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"457\"</span>&gt;</span>oranges<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"458\"</span>&gt;</span>bananas<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"select\"</span>).select([<span class=\"string\">\"apples\"</span>, <span class=\"string\">\"bananas\"</span>])</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Values-Usage\"><a href=\"#Values-Usage\" class=\"headerlink\" title=\"Values Usage\"></a>Values Usage</h1><h2 id=\"Select-the-options-with-the-values-“456”-and-“457”\"><a href=\"#Select-the-options-with-the-values-“456”-and-“457”\" class=\"headerlink\" title=\"Select the options with the values “456” and “457”\"></a>Select the options with the values “456” and “457”</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">multiple</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"456\"</span>&gt;</span>apples<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"457\"</span>&gt;</span>oranges<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"458\"</span>&gt;</span>bananas<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"select\"</span>).select([<span class=\"string\">\"456\"</span>, <span class=\"string\">\"457\"</span>])</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Select-the-option-with-the-text-“Homer-Simpson”\"><a href=\"#Select-the-option-with-the-text-“Homer-Simpson”\" class=\"headerlink\" title=\"Select the option with the text “Homer Simpson”\"></a>Select the option with the text “Homer Simpson”</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"select\"</span>).select(<span class=\"string\">\"Homer Simpson\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"575\" alt=\"screen shot 2015-11-29 at 1 17 27 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459044/a2fd8fca-969b-11e5-8d23-3a118b82b5de.png\"></p>\n<p>When clicking on <code>select</code> within the command log, the console outputs the following:</p>\n<p><img width=\"560\" alt=\"screen shot 2015-11-29 at 1 17 45 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459045/a6b3bde2-969b-11e5-9357-272ea9684987.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/click\" target=\"_blank\" rel=\"external\">click</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Select an option within a <code>&lt;select&gt;</code> DOM element.</p>\n<p><strong>The following events are fired during select:</strong> <code>mousedown</code>, <code>focus</code>, <code>mouseup</code>, <code>click</code></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.select</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a> or the duration of the <code>timeout</code> specified in the command’s <a href=\"#section-options\">options</a>.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-select-text\"><a href=\"#cy-select-text\" class=\"headerlink\" title=\"cy.select( text )\"></a><a href=\"#section-text-usage\">cy.select( <em>text</em> )</a></h1><p>Select an option within a <code>&lt;select&gt;</code> element based on the text content of the option.</p>\n<hr>\n<h1 id=\"cy-select-value\"><a href=\"#cy-select-value\" class=\"headerlink\" title=\"cy.select( value )\"></a><a href=\"#section-value-usage\">cy.select( <em>value</em> )</a></h1><p>Select an option within a <code>&lt;select&gt;</code> element based on the value of the option.</p>\n<hr>\n<h1 id=\"cy-select-texts\"><a href=\"#cy-select-texts\" class=\"headerlink\" title=\"cy.select( texts )\"></a><a href=\"#section-texts-usage\">cy.select( <em>texts</em> )</a></h1><p>Select multiple options within a <code>&lt;select&gt;</code> element based on the text of the option.</p>\n<hr>\n<h1 id=\"cy-select-values\"><a href=\"#cy-select-values\" class=\"headerlink\" title=\"cy.select( values )\"></a><a href=\"#section-values-usage\">cy.select( <em>values</em> )</a></h1><p>Select multiple options within a <code>&lt;select&gt;</code> element based on the value of the option.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.select</code>.</p>\n<p><strong>cy.select( <em>text</em>, <em>options</em> )</strong><br><strong>cy.select( <em>value</em>, <em>options</em> )</strong><br><strong>cy.select( <em>array</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>force</code></td>\n<td><code>false</code></td>\n<td>Forces select, disables error checking prior to select</td>\n</tr>\n<tr>\n<td><code>interval</code></td>\n<td><code>50</code></td>\n<td>Interval which to retry a select</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry the select</td>\n</tr>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Text-Usage\"><a href=\"#Text-Usage\" class=\"headerlink\" title=\"Text Usage\"></a>Text Usage</h1><h2 id=\"Select-the-option-with-the-text-apples\"><a href=\"#Select-the-option-with-the-text-apples\" class=\"headerlink\" title=\"Select the option with the text apples\"></a>Select the option with the text <code>apples</code></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"456\"</span>&gt;</span>apples<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"457\"</span>&gt;</span>oranges<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"458\"</span>&gt;</span>bananas<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns &lt;option value=\"456\"&gt;apples&lt;/option&gt;</span></div><div class=\"line\">cy.get(<span class=\"string\">\"select\"</span>).select(<span class=\"string\">\"apples\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Value-Usage\"><a href=\"#Value-Usage\" class=\"headerlink\" title=\"Value Usage\"></a>Value Usage</h1><h2 id=\"Select-the-option-with-the-value-“456”\"><a href=\"#Select-the-option-with-the-value-“456”\" class=\"headerlink\" title=\"Select the option with the value “456”\"></a>Select the option with the value “456”</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"456\"</span>&gt;</span>apples<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"457\"</span>&gt;</span>oranges<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"458\"</span>&gt;</span>bananas<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns &lt;option value=\"456\"&gt;apples&lt;/option&gt;</span></div><div class=\"line\">cy.get(<span class=\"string\">\"select\"</span>).select(<span class=\"string\">\"456\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Texts-Usage\"><a href=\"#Texts-Usage\" class=\"headerlink\" title=\"Texts Usage\"></a>Texts Usage</h1><h2 id=\"Select-the-options-with-the-texts-“apples”-and-“bananas”\"><a href=\"#Select-the-options-with-the-texts-“apples”-and-“bananas”\" class=\"headerlink\" title=\"Select the options with the texts “apples” and “bananas”\"></a>Select the options with the texts “apples” and “bananas”</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">multiple</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"456\"</span>&gt;</span>apples<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"457\"</span>&gt;</span>oranges<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"458\"</span>&gt;</span>bananas<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"select\"</span>).select([<span class=\"string\">\"apples\"</span>, <span class=\"string\">\"bananas\"</span>])</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Values-Usage\"><a href=\"#Values-Usage\" class=\"headerlink\" title=\"Values Usage\"></a>Values Usage</h1><h2 id=\"Select-the-options-with-the-values-“456”-and-“457”\"><a href=\"#Select-the-options-with-the-values-“456”-and-“457”\" class=\"headerlink\" title=\"Select the options with the values “456” and “457”\"></a>Select the options with the values “456” and “457”</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">multiple</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"456\"</span>&gt;</span>apples<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"457\"</span>&gt;</span>oranges<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"458\"</span>&gt;</span>bananas<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"select\"</span>).select([<span class=\"string\">\"456\"</span>, <span class=\"string\">\"457\"</span>])</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Select-the-option-with-the-text-“Homer-Simpson”\"><a href=\"#Select-the-option-with-the-text-“Homer-Simpson”\" class=\"headerlink\" title=\"Select the option with the text “Homer Simpson”\"></a>Select the option with the text “Homer Simpson”</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"select\"</span>).select(<span class=\"string\">\"Homer Simpson\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"575\" alt=\"screen shot 2015-11-29 at 1 17 27 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459044/a2fd8fca-969b-11e5-8d23-3a118b82b5de.png\"></p>\n<p>When clicking on <code>select</code> within the command log, the console outputs the following:</p>\n<p><img width=\"560\" alt=\"screen shot 2015-11-29 at 1 17 45 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459045/a6b3bde2-969b-11e5-9357-272ea9684987.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/click\">click</a></li>\n</ul>\n"},{"title":"setcookie","_content":"\nSet a browser cookie.\n\n| | |\n|--- | --- |\n| **Returns** | a cookie object |\n| **Timeout** | `cy.setCookie` will wait up for the duration of [`responseTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) for the automation server to process this command. |\n\n***\n\n# [cy.setCookie( *name*, *value* )](#section-usage)\n\nSets a browser cookie.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.setCookie`.\n\n**[cy.setCookie( *name*, *value*, *options* )](#options-usage)**\n\nOption | Default | Notes\n--- | --- | ---\n`path` | `/` | the cookie path\n`domain` | `window.location.hostname` | the domain the cookie is visible to\n`secure` | `false` | whether the cookie is a secure cookie\n`httpOnly` | `false` | whether the cookie is an HTTP only cookie\n`expiry` | 20 years into the future | when the cookie expires, specified in seconds since [Unix Epoch](https://en.wikipedia.org/wiki/Unix_time).\n`timeout` | [`responseTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to wait for the `cy.setCookie` command to be processed\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Set a cookie\n\n```javascript\ncy\n  .getCookies().should('be.empty')\n  .setCookie('session_id', '189jd09sufh33aaiidhf99d09')\n  .getCookie('session_id').should('have.property', 'value', '189jd09sufh33aaiidhf99d09')\n```\n\n***\n\n# Command Log\n\n## Get cookie\n\n```javascript\ncy\n  .getCookies().should('be.empty')\n  .setCookie('fakeCookie1', '123ABC')\n  .getCookie('fakeCookie1').should('have.property', 'value', '123ABC')\n```\n\nThe commands above will display in the command log as:\n\n![screen shot 2016-05-10 at 12 15 53 pm](https://cloud.githubusercontent.com/assets/1271364/15153887/00b4c98e-16a9-11e6-8df5-bb2018582439.png)\n\nWhen clicking on `setCookie` within the command log, the console outputs the following:\n\n![screen shot 2016-05-10 at 12 16 01 pm](https://cloud.githubusercontent.com/assets/1271364/15153886/00b41782-16a9-11e6-99db-bc085c3513b3.png)\n\n***\n\n# Related\n\n- [clearCookie](https://on.cypress.io/api/clearcookie)\n- [clearCookies](https://on.cypress.io/api/clearcookies)\n- [getCookie](https://on.cypress.io/api/getcookie)\n- [getCookies](https://on.cypress.io/api/getcookies)\n- [Cypress Cookies API](https://on.cypress.io/api/cookies)","source":"api/commands/setcookie.md","raw":"title: setcookie\n---\n\nSet a browser cookie.\n\n| | |\n|--- | --- |\n| **Returns** | a cookie object |\n| **Timeout** | `cy.setCookie` will wait up for the duration of [`responseTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) for the automation server to process this command. |\n\n***\n\n# [cy.setCookie( *name*, *value* )](#section-usage)\n\nSets a browser cookie.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.setCookie`.\n\n**[cy.setCookie( *name*, *value*, *options* )](#options-usage)**\n\nOption | Default | Notes\n--- | --- | ---\n`path` | `/` | the cookie path\n`domain` | `window.location.hostname` | the domain the cookie is visible to\n`secure` | `false` | whether the cookie is a secure cookie\n`httpOnly` | `false` | whether the cookie is an HTTP only cookie\n`expiry` | 20 years into the future | when the cookie expires, specified in seconds since [Unix Epoch](https://en.wikipedia.org/wiki/Unix_time).\n`timeout` | [`responseTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to wait for the `cy.setCookie` command to be processed\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Set a cookie\n\n```javascript\ncy\n  .getCookies().should('be.empty')\n  .setCookie('session_id', '189jd09sufh33aaiidhf99d09')\n  .getCookie('session_id').should('have.property', 'value', '189jd09sufh33aaiidhf99d09')\n```\n\n***\n\n# Command Log\n\n## Get cookie\n\n```javascript\ncy\n  .getCookies().should('be.empty')\n  .setCookie('fakeCookie1', '123ABC')\n  .getCookie('fakeCookie1').should('have.property', 'value', '123ABC')\n```\n\nThe commands above will display in the command log as:\n\n![screen shot 2016-05-10 at 12 15 53 pm](https://cloud.githubusercontent.com/assets/1271364/15153887/00b4c98e-16a9-11e6-8df5-bb2018582439.png)\n\nWhen clicking on `setCookie` within the command log, the console outputs the following:\n\n![screen shot 2016-05-10 at 12 16 01 pm](https://cloud.githubusercontent.com/assets/1271364/15153886/00b41782-16a9-11e6-99db-bc085c3513b3.png)\n\n***\n\n# Related\n\n- [clearCookie](https://on.cypress.io/api/clearcookie)\n- [clearCookies](https://on.cypress.io/api/clearcookies)\n- [getCookie](https://on.cypress.io/api/getcookie)\n- [getCookies](https://on.cypress.io/api/getcookies)\n- [Cypress Cookies API](https://on.cypress.io/api/cookies)","date":"2017-04-19T18:50:48.000Z","updated":"2017-04-19T18:50:48.000Z","path":"api/commands/setcookie.html","comments":1,"layout":"page","_id":"cj1pc3ifz0009n9g8ndgnfo9c","content":"<p>Set a browser cookie.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>a cookie object</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.setCookie</code> will wait up for the duration of <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>responseTimeout</code></a> for the automation server to process this command.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-setCookie-name-value\"><a href=\"#cy-setCookie-name-value\" class=\"headerlink\" title=\"cy.setCookie( name, value )\"></a><a href=\"#section-usage\">cy.setCookie( <em>name</em>, <em>value</em> )</a></h1><p>Sets a browser cookie.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.setCookie</code>.</p>\n<p><strong><a href=\"#options-usage\">cy.setCookie( <em>name</em>, <em>value</em>, <em>options</em> )</a></strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>path</code></td>\n<td><code>/</code></td>\n<td>the cookie path</td>\n</tr>\n<tr>\n<td><code>domain</code></td>\n<td><code>window.location.hostname</code></td>\n<td>the domain the cookie is visible to</td>\n</tr>\n<tr>\n<td><code>secure</code></td>\n<td><code>false</code></td>\n<td>whether the cookie is a secure cookie</td>\n</tr>\n<tr>\n<td><code>httpOnly</code></td>\n<td><code>false</code></td>\n<td>whether the cookie is an HTTP only cookie</td>\n</tr>\n<tr>\n<td><code>expiry</code></td>\n<td>20 years into the future</td>\n<td>when the cookie expires, specified in seconds since <a href=\"https://en.wikipedia.org/wiki/Unix_time\" target=\"_blank\" rel=\"external\">Unix Epoch</a>.</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>responseTimeout</code></a></td>\n<td>Total time to wait for the <code>cy.setCookie</code> command to be processed</td>\n</tr>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Set-a-cookie\"><a href=\"#Set-a-cookie\" class=\"headerlink\" title=\"Set a cookie\"></a>Set a cookie</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .getCookies().should(<span class=\"string\">'be.empty'</span>)</div><div class=\"line\">  .setCookie(<span class=\"string\">'session_id'</span>, <span class=\"string\">'189jd09sufh33aaiidhf99d09'</span>)</div><div class=\"line\">  .getCookie(<span class=\"string\">'session_id'</span>).should(<span class=\"string\">'have.property'</span>, <span class=\"string\">'value'</span>, <span class=\"string\">'189jd09sufh33aaiidhf99d09'</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Get-cookie\"><a href=\"#Get-cookie\" class=\"headerlink\" title=\"Get cookie\"></a>Get cookie</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .getCookies().should(<span class=\"string\">'be.empty'</span>)</div><div class=\"line\">  .setCookie(<span class=\"string\">'fakeCookie1'</span>, <span class=\"string\">'123ABC'</span>)</div><div class=\"line\">  .getCookie(<span class=\"string\">'fakeCookie1'</span>).should(<span class=\"string\">'have.property'</span>, <span class=\"string\">'value'</span>, <span class=\"string\">'123ABC'</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/15153887/00b4c98e-16a9-11e6-8df5-bb2018582439.png\" alt=\"screen shot 2016-05-10 at 12 15 53 pm\"></p>\n<p>When clicking on <code>setCookie</code> within the command log, the console outputs the following:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/15153886/00b41782-16a9-11e6-99db-bc085c3513b3.png\" alt=\"screen shot 2016-05-10 at 12 16 01 pm\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/clearcookie\" target=\"_blank\" rel=\"external\">clearCookie</a></li>\n<li><a href=\"https://on.cypress.io/api/clearcookies\" target=\"_blank\" rel=\"external\">clearCookies</a></li>\n<li><a href=\"https://on.cypress.io/api/getcookie\" target=\"_blank\" rel=\"external\">getCookie</a></li>\n<li><a href=\"https://on.cypress.io/api/getcookies\" target=\"_blank\" rel=\"external\">getCookies</a></li>\n<li><a href=\"https://on.cypress.io/api/cookies\" target=\"_blank\" rel=\"external\">Cypress Cookies API</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Set a browser cookie.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>a cookie object</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.setCookie</code> will wait up for the duration of <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>responseTimeout</code></a> for the automation server to process this command.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-setCookie-name-value\"><a href=\"#cy-setCookie-name-value\" class=\"headerlink\" title=\"cy.setCookie( name, value )\"></a><a href=\"#section-usage\">cy.setCookie( <em>name</em>, <em>value</em> )</a></h1><p>Sets a browser cookie.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.setCookie</code>.</p>\n<p><strong><a href=\"#options-usage\">cy.setCookie( <em>name</em>, <em>value</em>, <em>options</em> )</a></strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>path</code></td>\n<td><code>/</code></td>\n<td>the cookie path</td>\n</tr>\n<tr>\n<td><code>domain</code></td>\n<td><code>window.location.hostname</code></td>\n<td>the domain the cookie is visible to</td>\n</tr>\n<tr>\n<td><code>secure</code></td>\n<td><code>false</code></td>\n<td>whether the cookie is a secure cookie</td>\n</tr>\n<tr>\n<td><code>httpOnly</code></td>\n<td><code>false</code></td>\n<td>whether the cookie is an HTTP only cookie</td>\n</tr>\n<tr>\n<td><code>expiry</code></td>\n<td>20 years into the future</td>\n<td>when the cookie expires, specified in seconds since <a href=\"https://en.wikipedia.org/wiki/Unix_time\">Unix Epoch</a>.</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>responseTimeout</code></a></td>\n<td>Total time to wait for the <code>cy.setCookie</code> command to be processed</td>\n</tr>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Set-a-cookie\"><a href=\"#Set-a-cookie\" class=\"headerlink\" title=\"Set a cookie\"></a>Set a cookie</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .getCookies().should(<span class=\"string\">'be.empty'</span>)</div><div class=\"line\">  .setCookie(<span class=\"string\">'session_id'</span>, <span class=\"string\">'189jd09sufh33aaiidhf99d09'</span>)</div><div class=\"line\">  .getCookie(<span class=\"string\">'session_id'</span>).should(<span class=\"string\">'have.property'</span>, <span class=\"string\">'value'</span>, <span class=\"string\">'189jd09sufh33aaiidhf99d09'</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Get-cookie\"><a href=\"#Get-cookie\" class=\"headerlink\" title=\"Get cookie\"></a>Get cookie</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .getCookies().should(<span class=\"string\">'be.empty'</span>)</div><div class=\"line\">  .setCookie(<span class=\"string\">'fakeCookie1'</span>, <span class=\"string\">'123ABC'</span>)</div><div class=\"line\">  .getCookie(<span class=\"string\">'fakeCookie1'</span>).should(<span class=\"string\">'have.property'</span>, <span class=\"string\">'value'</span>, <span class=\"string\">'123ABC'</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/15153887/00b4c98e-16a9-11e6-8df5-bb2018582439.png\" alt=\"screen shot 2016-05-10 at 12 15 53 pm\"></p>\n<p>When clicking on <code>setCookie</code> within the command log, the console outputs the following:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/15153886/00b41782-16a9-11e6-99db-bc085c3513b3.png\" alt=\"screen shot 2016-05-10 at 12 16 01 pm\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/clearcookie\">clearCookie</a></li>\n<li><a href=\"https://on.cypress.io/api/clearcookies\">clearCookies</a></li>\n<li><a href=\"https://on.cypress.io/api/getcookie\">getCookie</a></li>\n<li><a href=\"https://on.cypress.io/api/getcookies\">getCookies</a></li>\n<li><a href=\"https://on.cypress.io/api/cookies\">Cypress Cookies API</a></li>\n</ul>\n"},{"title":"siblings","_content":"\nGet the siblings DOM elements of each element in the set of matched DOM elements.\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.siblings` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.siblings()](#section-usage)\n\nGet the siblings of each DOM element in the set of matched DOM elements.\n\n***\n\n# [cy.siblings( *selector* )](#section-selector-usage)\n\nGet the siblings of each DOM element in the set of matched DOM elements filtered by a selector.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.siblings`.\n\n**cy.siblings( *options* )**\n**cy.siblings( *selector*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry getting the element\n\n***\n\n# Usage\n\n## Get the siblings of each li.\n\n```html\n<ul>\n  <li>Home</li>\n  <li>Contact</li>\n  <li class=\"active\">Services</li>\n  <li>Price</li>\n</ul>\n```\n\n```javascript\n// returns all other li's in list\ncy.get(\".active\").siblings()\n```\n\n***\n\n# Selector Usage\n\n## Get siblings of element with class `active`.\n\n```javascript\n// returns <li class=\"active\">Services</li>\ncy.get(\"li\").siblings(\".active\")\n```\n\n***\n\n# Command Log\n\n## Get the siblings of element with class `active`\n\n```javascript\ncy.get(\".left-nav\").find(\"li.active\").siblings()\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"561\" alt=\"screen shot 2015-11-29 at 12 48 55 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458897/a93f2a1e-9697-11e5-8a5b-b131156e1aa4.png\">\n\nWhen clicking on `siblings` within the command log, the console outputs the following:\n\n<img width=\"429\" alt=\"screen shot 2015-11-29 at 12 49 09 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458898/ab940fd2-9697-11e5-96ab-a4c34efa3431.png\">\n\n***\n\n# Related\n\n- [prev](https://on.cypress.io/api/prev)\n- [next](https://on.cypress.io/api/next)","source":"api/commands/siblings.md","raw":"title: siblings\n---\n\nGet the siblings DOM elements of each element in the set of matched DOM elements.\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.siblings` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.siblings()](#section-usage)\n\nGet the siblings of each DOM element in the set of matched DOM elements.\n\n***\n\n# [cy.siblings( *selector* )](#section-selector-usage)\n\nGet the siblings of each DOM element in the set of matched DOM elements filtered by a selector.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.siblings`.\n\n**cy.siblings( *options* )**\n**cy.siblings( *selector*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry getting the element\n\n***\n\n# Usage\n\n## Get the siblings of each li.\n\n```html\n<ul>\n  <li>Home</li>\n  <li>Contact</li>\n  <li class=\"active\">Services</li>\n  <li>Price</li>\n</ul>\n```\n\n```javascript\n// returns all other li's in list\ncy.get(\".active\").siblings()\n```\n\n***\n\n# Selector Usage\n\n## Get siblings of element with class `active`.\n\n```javascript\n// returns <li class=\"active\">Services</li>\ncy.get(\"li\").siblings(\".active\")\n```\n\n***\n\n# Command Log\n\n## Get the siblings of element with class `active`\n\n```javascript\ncy.get(\".left-nav\").find(\"li.active\").siblings()\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"561\" alt=\"screen shot 2015-11-29 at 12 48 55 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458897/a93f2a1e-9697-11e5-8a5b-b131156e1aa4.png\">\n\nWhen clicking on `siblings` within the command log, the console outputs the following:\n\n<img width=\"429\" alt=\"screen shot 2015-11-29 at 12 49 09 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458898/ab940fd2-9697-11e5-96ab-a4c34efa3431.png\">\n\n***\n\n# Related\n\n- [prev](https://on.cypress.io/api/prev)\n- [next](https://on.cypress.io/api/next)","date":"2017-04-19T18:50:48.000Z","updated":"2017-04-19T18:50:48.000Z","path":"api/commands/siblings.html","comments":1,"layout":"page","_id":"cj1pc3ifz000an9g8eqp6yelf","content":"<p>Get the siblings DOM elements of each element in the set of matched DOM elements.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.siblings</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-siblings\"><a href=\"#cy-siblings\" class=\"headerlink\" title=\"cy.siblings()\"></a><a href=\"#section-usage\">cy.siblings()</a></h1><p>Get the siblings of each DOM element in the set of matched DOM elements.</p>\n<hr>\n<h1 id=\"cy-siblings-selector\"><a href=\"#cy-siblings-selector\" class=\"headerlink\" title=\"cy.siblings( selector )\"></a><a href=\"#section-selector-usage\">cy.siblings( <em>selector</em> )</a></h1><p>Get the siblings of each DOM element in the set of matched DOM elements filtered by a selector.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.siblings</code>.</p>\n<p><strong>cy.siblings( <em>options</em> )</strong><br><strong>cy.siblings( <em>selector</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry getting the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Get-the-siblings-of-each-li\"><a href=\"#Get-the-siblings-of-each-li\" class=\"headerlink\" title=\"Get the siblings of each li.\"></a>Get the siblings of each li.</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Contact<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active\"</span>&gt;</span>Services<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Price<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns all other li's in list</span></div><div class=\"line\">cy.get(<span class=\"string\">\".active\"</span>).siblings()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Selector-Usage\"><a href=\"#Selector-Usage\" class=\"headerlink\" title=\"Selector Usage\"></a>Selector Usage</h1><h2 id=\"Get-siblings-of-element-with-class-active\"><a href=\"#Get-siblings-of-element-with-class-active\" class=\"headerlink\" title=\"Get siblings of element with class active.\"></a>Get siblings of element with class <code>active</code>.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns &lt;li class=\"active\"&gt;Services&lt;/li&gt;</span></div><div class=\"line\">cy.get(<span class=\"string\">\"li\"</span>).siblings(<span class=\"string\">\".active\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Get-the-siblings-of-element-with-class-active\"><a href=\"#Get-the-siblings-of-element-with-class-active\" class=\"headerlink\" title=\"Get the siblings of element with class active\"></a>Get the siblings of element with class <code>active</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\".left-nav\"</span>).find(<span class=\"string\">\"li.active\"</span>).siblings()</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"561\" alt=\"screen shot 2015-11-29 at 12 48 55 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458897/a93f2a1e-9697-11e5-8a5b-b131156e1aa4.png\"></p>\n<p>When clicking on <code>siblings</code> within the command log, the console outputs the following:</p>\n<p><img width=\"429\" alt=\"screen shot 2015-11-29 at 12 49 09 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458898/ab940fd2-9697-11e5-96ab-a4c34efa3431.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/prev\" target=\"_blank\" rel=\"external\">prev</a></li>\n<li><a href=\"https://on.cypress.io/api/next\" target=\"_blank\" rel=\"external\">next</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Get the siblings DOM elements of each element in the set of matched DOM elements.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.siblings</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-siblings\"><a href=\"#cy-siblings\" class=\"headerlink\" title=\"cy.siblings()\"></a><a href=\"#section-usage\">cy.siblings()</a></h1><p>Get the siblings of each DOM element in the set of matched DOM elements.</p>\n<hr>\n<h1 id=\"cy-siblings-selector\"><a href=\"#cy-siblings-selector\" class=\"headerlink\" title=\"cy.siblings( selector )\"></a><a href=\"#section-selector-usage\">cy.siblings( <em>selector</em> )</a></h1><p>Get the siblings of each DOM element in the set of matched DOM elements filtered by a selector.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.siblings</code>.</p>\n<p><strong>cy.siblings( <em>options</em> )</strong><br><strong>cy.siblings( <em>selector</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry getting the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Get-the-siblings-of-each-li\"><a href=\"#Get-the-siblings-of-each-li\" class=\"headerlink\" title=\"Get the siblings of each li.\"></a>Get the siblings of each li.</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Contact<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active\"</span>&gt;</span>Services<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Price<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns all other li's in list</span></div><div class=\"line\">cy.get(<span class=\"string\">\".active\"</span>).siblings()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Selector-Usage\"><a href=\"#Selector-Usage\" class=\"headerlink\" title=\"Selector Usage\"></a>Selector Usage</h1><h2 id=\"Get-siblings-of-element-with-class-active\"><a href=\"#Get-siblings-of-element-with-class-active\" class=\"headerlink\" title=\"Get siblings of element with class active.\"></a>Get siblings of element with class <code>active</code>.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// returns &lt;li class=\"active\"&gt;Services&lt;/li&gt;</span></div><div class=\"line\">cy.get(<span class=\"string\">\"li\"</span>).siblings(<span class=\"string\">\".active\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Get-the-siblings-of-element-with-class-active\"><a href=\"#Get-the-siblings-of-element-with-class-active\" class=\"headerlink\" title=\"Get the siblings of element with class active\"></a>Get the siblings of element with class <code>active</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\".left-nav\"</span>).find(<span class=\"string\">\"li.active\"</span>).siblings()</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"561\" alt=\"screen shot 2015-11-29 at 12 48 55 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458897/a93f2a1e-9697-11e5-8a5b-b131156e1aa4.png\"></p>\n<p>When clicking on <code>siblings</code> within the command log, the console outputs the following:</p>\n<p><img width=\"429\" alt=\"screen shot 2015-11-29 at 12 49 09 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458898/ab940fd2-9697-11e5-96ab-a4c34efa3431.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/prev\">prev</a></li>\n<li><a href=\"https://on.cypress.io/api/next\">next</a></li>\n</ul>\n"},{"title":"should","_content":"\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Read about making assertions first.](https://on.cypress.io/guides/making-assertions)\",\n  \"title\": \"New to Cypress?\"\n}\n[/block]\n\n`cy.should` makes assertions about the current subject.\n\n| | |\n|--- | --- |\n| **Returns** | the current subject but (in some cases) a new subject |\n| **Timeout** | the assertion will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.should( *chainers* )](#section-chainers-usage)\n\nImplicitly assert about the current subject.\n\n***\n\n# [cy.should( *chainers*, *value* )](#section-chainers-with-value-usage)\n\nImplicitly assert a value about the current subject. Returns the existing current subject (usually). Some chai methods and chai-jQuery methods return a new (different) subject for chain-ability.\n\n***\n\n# [cy.should( *chainers*, *method*, *value* )](#section-chainers-with-method-and-value-usage)\n\nImplicitly assert about the subject by calling a method and providing a value to that method.\n\n***\n\n# [cy.should( *function* )](#section-function-usage)\n\nPass a function that can have any number of explicit assertions within it. Does not change the subject. Whatever was passed to the function is what is returned.\n\n***\n\n# Chainers Usage\n\n## Assert the checkbox is disabled\n\n```javascript\ncy.get(\":checkbox\").should(\"be.disabled\")\n```\n\n***\n\n## The current subject is returned\n\n```javascript\ncy.get(\"option:first\").should(\"be.selected\").then(function($option)){\n  // $option is still the current subject\n})\n```\n\n***\n\n# Chainers with Value Usage\n\n## Assert the class is 'form-horizontal'\n\n```javascript\ncy.get(\"form\").should(\"have.class\", \"form-horizontal\")\n```\n\n***\n\n## Assert the value is not 'foo'\n\n```javascript\ncy.get(\"input\").should(\"not.have.value\", \"foo\")\n```\n\n***\n\n## The current subject is returned\n\n```javascript\ncy.get(\"button\").should(\"have.id\", \"new-user\").then(function($button){\n  // $button is still the current subject\n})\n```\n\n***\n\n# Chainers with Method and Value Usage\n\n## Assert the href is equal to '/users'\n\n```javascript\n// have.attr comes from chai-jquery\ncy.get(\"#header a\").should(\"have.attr\", \"href\", \"/users\")\n```\n\n***\n\n# Function Usage\n\n## Verify length, content, and classes from multiple `<p>`\n\nPassing a function to `should` enables you to assert on arbitrary subjects. This gives you the opportunity to *massage* what you'd like to assert on.\n\nJust be sure *not* to include any code that has side effects in your callback function.\n\nThe callback function will be retried over and over again until no assertions within it throw.\n\n```html\n<div>\n  <p class=\"text-primary\">Hello World</p>\n  <p class=\"text-danger\">You have an error</p>\n  <p class=\"text-default\">Try again later</p>\n</div>\n```\n\n```javascript\ncy\n  .get(\"p\")\n  .should(function($p){\n    // should have found 3 elements\n    expect($p).to.have.length(3)\n\n    // make sure the first contains some text content\n    expect($p.first()).to.contain(\"Hello World\")\n\n    // use jquery's map to grab all of their classes\n    // jquery's map returns a new jquery object\n    var classes = $p.map(function(i, el){\n      return cy.$(el).attr(\"class\")\n    })\n\n    // call classes.get() to make this a plain array\n    expect(classes.get()).to.deep.eq([\n      \"text-primary\",\n      \"text-danger\",\n      \"text-default\"\n    ])\n  })\n```\n\n***\n\n## Using a callback function will not change the subject\n\n```javascript\ncy\n  .get(\"button\").should(function($button){\n    // whatever we return here is ignored\n    // as Cypress will always force the return\n    // value for future commands to be the same\n    // as the previous subject which is <button>\n\n    expect({foo: \"bar\"}).to.deep.eq({foo: \"bar\"})\n\n    // whatever the return value (if any) is ignored\n    return {foo: \"bar\"}\n  })\n\n  .then(function($button){\n    // $button === <button>\n    // the subject is unchanged no matter what was returned\n  })\n```\n\n***\n\n# Multiple Assertions\n\n## Chaining multiple assertions\n\nCypress makes it easy to chain assertions together.\n\nIn this example we use [`cy.and`](https://on.cypress.io/api/and) which is identical to `should`.\n\n```javascript\n// our subject is not changed by our first assertion,\n// so we can continue to use DOM based assertions\ncy.get(\"option:first\").should(\"be.selected\").and(\"have.value\", \"Metallica\")\n```\n\n***\n\n## Assertions that change the subject\n\nSometimes using a specific chainer will automatically change the assertion subject.\n\nFor instance in `chai`, the method [`have.property(\"...\")`](http://chaijs.com/api/bdd/) will automatically change the subject.\n\nAdditionally in [`Chai-jQuery`](https://github.com/chaijs/chai-jquery#attrname-value), the methods: `attr`, `prop`, `css`, and `data` also change the subject.\n\nThis allows you to utilize other `chainer` methods such as `match` when making assertions about values.\n\n```javascript\n// in this example our subject changed to the string 'sans-serif' because\n// have.css(\"font-family\") returned a string instead of the <body> element\ncy\n  // subject is <body>\n  .get(\"body\")\n\n  // subject changes to the string return value of 'font-family'\n  .should(\"have.css\", \"font-family\")\n\n  // use match to assert the string matches a regular expression\n  .and(\"match\", /sans-serif/)\n```\n\n```javascript\n// in this example our subject changed to the string '/users' because\n// have.attr, href, /users returned a string instead of the <a> element\ncy\n  // subject is <a>\n  .get(\"a\")\n\n  // subject changes to the string 'users'\n  .should(\"have.attr\", \"href\", \"/users\")\n```\n\n***\n\n# Automatic Retry Support\n\nCypress won't resolve your commands until all of its assertions pass.\n\n## Wait until the assertions pass\n\n```javascript\n// Application Code\n$(\"button\").click(function(){\n  $button = $(this)\n\n  setTimeout(function(){\n    $button.removeClass(\"inactive\").addClass(\"active\")\n  }, 1000)\n})\n```\n\n```javascript\ncy\n  .get(\"button\")\n    .click()\n    .should(\"have.class\", \"active\")\n    .and(\"not.have.class\", \"inactive\")\n```\n\nYou can [read more about how Cypress resolves your assertions](https://on.cypress.io/guides/making-assertions#section-resolving-assertions) here.\n\n***\n\n# Notes\n\n## What assertions and chainers can I use?\n\nThe chainers that `cy.should` accepts come from:\n\n* Chai\n* Chai-jQuery\n\nA [list of these](https://on.cypress.io/guides/making-assertions#available-assertions) can be found here.\n\n***\n\n## How do I know which assertions change the subject and which keep it the same?\n\nThe chainers that come from [Chai](https://on.cypress.io/guides/bundled-tools#section-chai) or [Chai-jQuery](https://on.cypress.io/guides/bundled-tools#section-chai-jquery) will always document what they return.\n\nAlternatively, it is very easy to use Cypress itself to figure this out.\n\nYou can [read more about debugging assertions](https://on.cypress.io/guides/making-assertions#sections-debugging-assertions) here.\n\n***\n\n## Can I pass options to cy.should()?\n\nOptions passed to the preceding command will be passed through to `cy.should`.\n\nThe following example is an example of increasing the `timeout` of the `cy.should`:\n\n```javascript\ncy\n  .get(\"input\", {timeout: 10000}) // <-- wait up to 10 seconds for this 'input' to be found\n    .should(\"have.value\", \"foo\")   // <-- and to have the value 'foo'\n    .and(\"have.class\", \"radio\")    // <-- and to have the class 'radio'\n\n  .parents(\"#foo\", {timeout: 2000}) // <--\n    .should(\"not.exist\")            // <-- wait up to 2 seconds for this element NOT to be found\n```\n\n```javascript\ncy.find(\"input\", {timeout: 10000}).should(\"have.value\", \"foo\").and(\"have.class\", \"radio\")\n                         ↲\n      // adding the timeout here will automatically\n      // flow down to the assertions, and they will\n      // be retried for up to 10 seconds\n```\n\n***\n\n# Command Log\n\n## Assert that there should be 8 children in a nav\n\n```javascript\n//\ncy\n  .get(\".left-nav>.nav\")\n    .children()\n      .should(\"have.length\", 8)\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"525\" alt=\"screen shot 2015-11-29 at 12 08 35 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458632/04e5da58-9692-11e5-870d-8f9e274192d1.png\">\n\nWhen clicking on `assert` within the command log, the console outputs the following:\n\n<img width=\"768\" alt=\"screen shot 2015-11-29 at 12 08 45 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458633/08a7b238-9692-11e5-9d5d-620122436bc0.png\">\n\n***\n\n# Related\n\n- [and](https://on.cypress.io/api/and)\n- [Assertions](https://on.cypress.io/guides/making-assertions)","source":"api/commands/should.md","raw":"title: should\n---\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Read about making assertions first.](https://on.cypress.io/guides/making-assertions)\",\n  \"title\": \"New to Cypress?\"\n}\n[/block]\n\n`cy.should` makes assertions about the current subject.\n\n| | |\n|--- | --- |\n| **Returns** | the current subject but (in some cases) a new subject |\n| **Timeout** | the assertion will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.should( *chainers* )](#section-chainers-usage)\n\nImplicitly assert about the current subject.\n\n***\n\n# [cy.should( *chainers*, *value* )](#section-chainers-with-value-usage)\n\nImplicitly assert a value about the current subject. Returns the existing current subject (usually). Some chai methods and chai-jQuery methods return a new (different) subject for chain-ability.\n\n***\n\n# [cy.should( *chainers*, *method*, *value* )](#section-chainers-with-method-and-value-usage)\n\nImplicitly assert about the subject by calling a method and providing a value to that method.\n\n***\n\n# [cy.should( *function* )](#section-function-usage)\n\nPass a function that can have any number of explicit assertions within it. Does not change the subject. Whatever was passed to the function is what is returned.\n\n***\n\n# Chainers Usage\n\n## Assert the checkbox is disabled\n\n```javascript\ncy.get(\":checkbox\").should(\"be.disabled\")\n```\n\n***\n\n## The current subject is returned\n\n```javascript\ncy.get(\"option:first\").should(\"be.selected\").then(function($option)){\n  // $option is still the current subject\n})\n```\n\n***\n\n# Chainers with Value Usage\n\n## Assert the class is 'form-horizontal'\n\n```javascript\ncy.get(\"form\").should(\"have.class\", \"form-horizontal\")\n```\n\n***\n\n## Assert the value is not 'foo'\n\n```javascript\ncy.get(\"input\").should(\"not.have.value\", \"foo\")\n```\n\n***\n\n## The current subject is returned\n\n```javascript\ncy.get(\"button\").should(\"have.id\", \"new-user\").then(function($button){\n  // $button is still the current subject\n})\n```\n\n***\n\n# Chainers with Method and Value Usage\n\n## Assert the href is equal to '/users'\n\n```javascript\n// have.attr comes from chai-jquery\ncy.get(\"#header a\").should(\"have.attr\", \"href\", \"/users\")\n```\n\n***\n\n# Function Usage\n\n## Verify length, content, and classes from multiple `<p>`\n\nPassing a function to `should` enables you to assert on arbitrary subjects. This gives you the opportunity to *massage* what you'd like to assert on.\n\nJust be sure *not* to include any code that has side effects in your callback function.\n\nThe callback function will be retried over and over again until no assertions within it throw.\n\n```html\n<div>\n  <p class=\"text-primary\">Hello World</p>\n  <p class=\"text-danger\">You have an error</p>\n  <p class=\"text-default\">Try again later</p>\n</div>\n```\n\n```javascript\ncy\n  .get(\"p\")\n  .should(function($p){\n    // should have found 3 elements\n    expect($p).to.have.length(3)\n\n    // make sure the first contains some text content\n    expect($p.first()).to.contain(\"Hello World\")\n\n    // use jquery's map to grab all of their classes\n    // jquery's map returns a new jquery object\n    var classes = $p.map(function(i, el){\n      return cy.$(el).attr(\"class\")\n    })\n\n    // call classes.get() to make this a plain array\n    expect(classes.get()).to.deep.eq([\n      \"text-primary\",\n      \"text-danger\",\n      \"text-default\"\n    ])\n  })\n```\n\n***\n\n## Using a callback function will not change the subject\n\n```javascript\ncy\n  .get(\"button\").should(function($button){\n    // whatever we return here is ignored\n    // as Cypress will always force the return\n    // value for future commands to be the same\n    // as the previous subject which is <button>\n\n    expect({foo: \"bar\"}).to.deep.eq({foo: \"bar\"})\n\n    // whatever the return value (if any) is ignored\n    return {foo: \"bar\"}\n  })\n\n  .then(function($button){\n    // $button === <button>\n    // the subject is unchanged no matter what was returned\n  })\n```\n\n***\n\n# Multiple Assertions\n\n## Chaining multiple assertions\n\nCypress makes it easy to chain assertions together.\n\nIn this example we use [`cy.and`](https://on.cypress.io/api/and) which is identical to `should`.\n\n```javascript\n// our subject is not changed by our first assertion,\n// so we can continue to use DOM based assertions\ncy.get(\"option:first\").should(\"be.selected\").and(\"have.value\", \"Metallica\")\n```\n\n***\n\n## Assertions that change the subject\n\nSometimes using a specific chainer will automatically change the assertion subject.\n\nFor instance in `chai`, the method [`have.property(\"...\")`](http://chaijs.com/api/bdd/) will automatically change the subject.\n\nAdditionally in [`Chai-jQuery`](https://github.com/chaijs/chai-jquery#attrname-value), the methods: `attr`, `prop`, `css`, and `data` also change the subject.\n\nThis allows you to utilize other `chainer` methods such as `match` when making assertions about values.\n\n```javascript\n// in this example our subject changed to the string 'sans-serif' because\n// have.css(\"font-family\") returned a string instead of the <body> element\ncy\n  // subject is <body>\n  .get(\"body\")\n\n  // subject changes to the string return value of 'font-family'\n  .should(\"have.css\", \"font-family\")\n\n  // use match to assert the string matches a regular expression\n  .and(\"match\", /sans-serif/)\n```\n\n```javascript\n// in this example our subject changed to the string '/users' because\n// have.attr, href, /users returned a string instead of the <a> element\ncy\n  // subject is <a>\n  .get(\"a\")\n\n  // subject changes to the string 'users'\n  .should(\"have.attr\", \"href\", \"/users\")\n```\n\n***\n\n# Automatic Retry Support\n\nCypress won't resolve your commands until all of its assertions pass.\n\n## Wait until the assertions pass\n\n```javascript\n// Application Code\n$(\"button\").click(function(){\n  $button = $(this)\n\n  setTimeout(function(){\n    $button.removeClass(\"inactive\").addClass(\"active\")\n  }, 1000)\n})\n```\n\n```javascript\ncy\n  .get(\"button\")\n    .click()\n    .should(\"have.class\", \"active\")\n    .and(\"not.have.class\", \"inactive\")\n```\n\nYou can [read more about how Cypress resolves your assertions](https://on.cypress.io/guides/making-assertions#section-resolving-assertions) here.\n\n***\n\n# Notes\n\n## What assertions and chainers can I use?\n\nThe chainers that `cy.should` accepts come from:\n\n* Chai\n* Chai-jQuery\n\nA [list of these](https://on.cypress.io/guides/making-assertions#available-assertions) can be found here.\n\n***\n\n## How do I know which assertions change the subject and which keep it the same?\n\nThe chainers that come from [Chai](https://on.cypress.io/guides/bundled-tools#section-chai) or [Chai-jQuery](https://on.cypress.io/guides/bundled-tools#section-chai-jquery) will always document what they return.\n\nAlternatively, it is very easy to use Cypress itself to figure this out.\n\nYou can [read more about debugging assertions](https://on.cypress.io/guides/making-assertions#sections-debugging-assertions) here.\n\n***\n\n## Can I pass options to cy.should()?\n\nOptions passed to the preceding command will be passed through to `cy.should`.\n\nThe following example is an example of increasing the `timeout` of the `cy.should`:\n\n```javascript\ncy\n  .get(\"input\", {timeout: 10000}) // <-- wait up to 10 seconds for this 'input' to be found\n    .should(\"have.value\", \"foo\")   // <-- and to have the value 'foo'\n    .and(\"have.class\", \"radio\")    // <-- and to have the class 'radio'\n\n  .parents(\"#foo\", {timeout: 2000}) // <--\n    .should(\"not.exist\")            // <-- wait up to 2 seconds for this element NOT to be found\n```\n\n```javascript\ncy.find(\"input\", {timeout: 10000}).should(\"have.value\", \"foo\").and(\"have.class\", \"radio\")\n                         ↲\n      // adding the timeout here will automatically\n      // flow down to the assertions, and they will\n      // be retried for up to 10 seconds\n```\n\n***\n\n# Command Log\n\n## Assert that there should be 8 children in a nav\n\n```javascript\n//\ncy\n  .get(\".left-nav>.nav\")\n    .children()\n      .should(\"have.length\", 8)\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"525\" alt=\"screen shot 2015-11-29 at 12 08 35 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458632/04e5da58-9692-11e5-870d-8f9e274192d1.png\">\n\nWhen clicking on `assert` within the command log, the console outputs the following:\n\n<img width=\"768\" alt=\"screen shot 2015-11-29 at 12 08 45 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458633/08a7b238-9692-11e5-9d5d-620122436bc0.png\">\n\n***\n\n# Related\n\n- [and](https://on.cypress.io/api/and)\n- [Assertions](https://on.cypress.io/guides/making-assertions)","date":"2017-04-19T18:50:48.000Z","updated":"2017-04-19T18:50:48.000Z","path":"api/commands/should.html","comments":1,"layout":"page","_id":"cj1pc3ig0000bn9g8czfflwbo","content":"<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://on.cypress.io/guides/making-assertions\" target=\"_blank\" rel=\"external\">Read about making assertions first.</a>“,<br>  “title”: “New to Cypress?”<br>}<br>[/block]</p>\n<p><code>cy.should</code> makes assertions about the current subject.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the current subject but (in some cases) a new subject</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td>the assertion will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-should-chainers\"><a href=\"#cy-should-chainers\" class=\"headerlink\" title=\"cy.should( chainers )\"></a><a href=\"#section-chainers-usage\">cy.should( <em>chainers</em> )</a></h1><p>Implicitly assert about the current subject.</p>\n<hr>\n<h1 id=\"cy-should-chainers-value\"><a href=\"#cy-should-chainers-value\" class=\"headerlink\" title=\"cy.should( chainers, value )\"></a><a href=\"#section-chainers-with-value-usage\">cy.should( <em>chainers</em>, <em>value</em> )</a></h1><p>Implicitly assert a value about the current subject. Returns the existing current subject (usually). Some chai methods and chai-jQuery methods return a new (different) subject for chain-ability.</p>\n<hr>\n<h1 id=\"cy-should-chainers-method-value\"><a href=\"#cy-should-chainers-method-value\" class=\"headerlink\" title=\"cy.should( chainers, method, value )\"></a><a href=\"#section-chainers-with-method-and-value-usage\">cy.should( <em>chainers</em>, <em>method</em>, <em>value</em> )</a></h1><p>Implicitly assert about the subject by calling a method and providing a value to that method.</p>\n<hr>\n<h1 id=\"cy-should-function\"><a href=\"#cy-should-function\" class=\"headerlink\" title=\"cy.should( function )\"></a><a href=\"#section-function-usage\">cy.should( <em>function</em> )</a></h1><p>Pass a function that can have any number of explicit assertions within it. Does not change the subject. Whatever was passed to the function is what is returned.</p>\n<hr>\n<h1 id=\"Chainers-Usage\"><a href=\"#Chainers-Usage\" class=\"headerlink\" title=\"Chainers Usage\"></a>Chainers Usage</h1><h2 id=\"Assert-the-checkbox-is-disabled\"><a href=\"#Assert-the-checkbox-is-disabled\" class=\"headerlink\" title=\"Assert the checkbox is disabled\"></a>Assert the checkbox is disabled</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\":checkbox\"</span>).should(<span class=\"string\">\"be.disabled\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"The-current-subject-is-returned\"><a href=\"#The-current-subject-is-returned\" class=\"headerlink\" title=\"The current subject is returned\"></a>The current subject is returned</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"option:first\"</span>).should(<span class=\"string\">\"be.selected\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$option</span>))</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// $option is still the current subject</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Chainers-with-Value-Usage\"><a href=\"#Chainers-with-Value-Usage\" class=\"headerlink\" title=\"Chainers with Value Usage\"></a>Chainers with Value Usage</h1><h2 id=\"Assert-the-class-is-‘form-horizontal’\"><a href=\"#Assert-the-class-is-‘form-horizontal’\" class=\"headerlink\" title=\"Assert the class is ‘form-horizontal’\"></a>Assert the class is ‘form-horizontal’</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"form\"</span>).should(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"form-horizontal\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Assert-the-value-is-not-‘foo’\"><a href=\"#Assert-the-value-is-not-‘foo’\" class=\"headerlink\" title=\"Assert the value is not ‘foo’\"></a>Assert the value is not ‘foo’</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"input\"</span>).should(<span class=\"string\">\"not.have.value\"</span>, <span class=\"string\">\"foo\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"The-current-subject-is-returned-1\"><a href=\"#The-current-subject-is-returned-1\" class=\"headerlink\" title=\"The current subject is returned\"></a>The current subject is returned</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).should(<span class=\"string\">\"have.id\"</span>, <span class=\"string\">\"new-user\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$button</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// $button is still the current subject</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Chainers-with-Method-and-Value-Usage\"><a href=\"#Chainers-with-Method-and-Value-Usage\" class=\"headerlink\" title=\"Chainers with Method and Value Usage\"></a>Chainers with Method and Value Usage</h1><h2 id=\"Assert-the-href-is-equal-to-‘-users’\"><a href=\"#Assert-the-href-is-equal-to-‘-users’\" class=\"headerlink\" title=\"Assert the href is equal to ‘/users’\"></a>Assert the href is equal to ‘/users’</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// have.attr comes from chai-jquery</span></div><div class=\"line\">cy.get(<span class=\"string\">\"#header a\"</span>).should(<span class=\"string\">\"have.attr\"</span>, <span class=\"string\">\"href\"</span>, <span class=\"string\">\"/users\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Function-Usage\"><a href=\"#Function-Usage\" class=\"headerlink\" title=\"Function Usage\"></a>Function Usage</h1><h2 id=\"Verify-length-content-and-classes-from-multiple-lt-p-gt\"><a href=\"#Verify-length-content-and-classes-from-multiple-lt-p-gt\" class=\"headerlink\" title=\"Verify length, content, and classes from multiple &lt;p&gt;\"></a>Verify length, content, and classes from multiple <code>&lt;p&gt;</code></h2><p>Passing a function to <code>should</code> enables you to assert on arbitrary subjects. This gives you the opportunity to <em>massage</em> what you’d like to assert on.</p>\n<p>Just be sure <em>not</em> to include any code that has side effects in your callback function.</p>\n<p>The callback function will be retried over and over again until no assertions within it throw.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text-primary\"</span>&gt;</span>Hello World<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text-danger\"</span>&gt;</span>You have an error<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text-default\"</span>&gt;</span>Try again later<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"p\"</span>)</div><div class=\"line\">  .should(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$p</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// should have found 3 elements</span></div><div class=\"line\">    expect($p).to.have.length(<span class=\"number\">3</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// make sure the first contains some text content</span></div><div class=\"line\">    expect($p.first()).to.contain(<span class=\"string\">\"Hello World\"</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// use jquery's map to grab all of their classes</span></div><div class=\"line\">    <span class=\"comment\">// jquery's map returns a new jquery object</span></div><div class=\"line\">    <span class=\"keyword\">var</span> classes = $p.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i, el</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> cy.$(el).attr(<span class=\"string\">\"class\"</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// call classes.get() to make this a plain array</span></div><div class=\"line\">    expect(classes.get()).to.deep.eq([</div><div class=\"line\">      <span class=\"string\">\"text-primary\"</span>,</div><div class=\"line\">      <span class=\"string\">\"text-danger\"</span>,</div><div class=\"line\">      <span class=\"string\">\"text-default\"</span></div><div class=\"line\">    ])</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Using-a-callback-function-will-not-change-the-subject\"><a href=\"#Using-a-callback-function-will-not-change-the-subject\" class=\"headerlink\" title=\"Using a callback function will not change the subject\"></a>Using a callback function will not change the subject</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"button\"</span>).should(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$button</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// whatever we return here is ignored</span></div><div class=\"line\">    <span class=\"comment\">// as Cypress will always force the return</span></div><div class=\"line\">    <span class=\"comment\">// value for future commands to be the same</span></div><div class=\"line\">    <span class=\"comment\">// as the previous subject which is &lt;button&gt;</span></div><div class=\"line\"></div><div class=\"line\">    expect(&#123;<span class=\"attr\">foo</span>: <span class=\"string\">\"bar\"</span>&#125;).to.deep.eq(&#123;<span class=\"attr\">foo</span>: <span class=\"string\">\"bar\"</span>&#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// whatever the return value (if any) is ignored</span></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">foo</span>: <span class=\"string\">\"bar\"</span>&#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$button</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// $button === &lt;button&gt;</span></div><div class=\"line\">    <span class=\"comment\">// the subject is unchanged no matter what was returned</span></div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Multiple-Assertions\"><a href=\"#Multiple-Assertions\" class=\"headerlink\" title=\"Multiple Assertions\"></a>Multiple Assertions</h1><h2 id=\"Chaining-multiple-assertions\"><a href=\"#Chaining-multiple-assertions\" class=\"headerlink\" title=\"Chaining multiple assertions\"></a>Chaining multiple assertions</h2><p>Cypress makes it easy to chain assertions together.</p>\n<p>In this example we use <a href=\"https://on.cypress.io/api/and\" target=\"_blank\" rel=\"external\"><code>cy.and</code></a> which is identical to <code>should</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// our subject is not changed by our first assertion,</span></div><div class=\"line\"><span class=\"comment\">// so we can continue to use DOM based assertions</span></div><div class=\"line\">cy.get(<span class=\"string\">\"option:first\"</span>).should(<span class=\"string\">\"be.selected\"</span>).and(<span class=\"string\">\"have.value\"</span>, <span class=\"string\">\"Metallica\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Assertions-that-change-the-subject\"><a href=\"#Assertions-that-change-the-subject\" class=\"headerlink\" title=\"Assertions that change the subject\"></a>Assertions that change the subject</h2><p>Sometimes using a specific chainer will automatically change the assertion subject.</p>\n<p>For instance in <code>chai</code>, the method <a href=\"http://chaijs.com/api/bdd/\" target=\"_blank\" rel=\"external\"><code>have.property(&quot;...&quot;)</code></a> will automatically change the subject.</p>\n<p>Additionally in <a href=\"https://github.com/chaijs/chai-jquery#attrname-value\" target=\"_blank\" rel=\"external\"><code>Chai-jQuery</code></a>, the methods: <code>attr</code>, <code>prop</code>, <code>css</code>, and <code>data</code> also change the subject.</p>\n<p>This allows you to utilize other <code>chainer</code> methods such as <code>match</code> when making assertions about values.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in this example our subject changed to the string 'sans-serif' because</span></div><div class=\"line\"><span class=\"comment\">// have.css(\"font-family\") returned a string instead of the &lt;body&gt; element</span></div><div class=\"line\">cy</div><div class=\"line\">  <span class=\"comment\">// subject is &lt;body&gt;</span></div><div class=\"line\">  .get(<span class=\"string\">\"body\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// subject changes to the string return value of 'font-family'</span></div><div class=\"line\">  .should(<span class=\"string\">\"have.css\"</span>, <span class=\"string\">\"font-family\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// use match to assert the string matches a regular expression</span></div><div class=\"line\">  .and(<span class=\"string\">\"match\"</span>, /sans-serif/)</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in this example our subject changed to the string '/users' because</span></div><div class=\"line\"><span class=\"comment\">// have.attr, href, /users returned a string instead of the &lt;a&gt; element</span></div><div class=\"line\">cy</div><div class=\"line\">  <span class=\"comment\">// subject is &lt;a&gt;</span></div><div class=\"line\">  .get(<span class=\"string\">\"a\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// subject changes to the string 'users'</span></div><div class=\"line\">  .should(<span class=\"string\">\"have.attr\"</span>, <span class=\"string\">\"href\"</span>, <span class=\"string\">\"/users\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Automatic-Retry-Support\"><a href=\"#Automatic-Retry-Support\" class=\"headerlink\" title=\"Automatic Retry Support\"></a>Automatic Retry Support</h1><p>Cypress won’t resolve your commands until all of its assertions pass.</p>\n<h2 id=\"Wait-until-the-assertions-pass\"><a href=\"#Wait-until-the-assertions-pass\" class=\"headerlink\" title=\"Wait until the assertions pass\"></a>Wait until the assertions pass</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Application Code</span></div><div class=\"line\">$(<span class=\"string\">\"button\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  $button = $(<span class=\"keyword\">this</span>)</div><div class=\"line\"></div><div class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $button.removeClass(<span class=\"string\">\"inactive\"</span>).addClass(<span class=\"string\">\"active\"</span>)</div><div class=\"line\">  &#125;, <span class=\"number\">1000</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"button\"</span>)</div><div class=\"line\">    .click()</div><div class=\"line\">    .should(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"active\"</span>)</div><div class=\"line\">    .and(<span class=\"string\">\"not.have.class\"</span>, <span class=\"string\">\"inactive\"</span>)</div></pre></td></tr></table></figure>\n<p>You can <a href=\"https://on.cypress.io/guides/making-assertions#section-resolving-assertions\" target=\"_blank\" rel=\"external\">read more about how Cypress resolves your assertions</a> here.</p>\n<hr>\n<h1 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h1><h2 id=\"What-assertions-and-chainers-can-I-use\"><a href=\"#What-assertions-and-chainers-can-I-use\" class=\"headerlink\" title=\"What assertions and chainers can I use?\"></a>What assertions and chainers can I use?</h2><p>The chainers that <code>cy.should</code> accepts come from:</p>\n<ul>\n<li>Chai</li>\n<li>Chai-jQuery</li>\n</ul>\n<p>A <a href=\"https://on.cypress.io/guides/making-assertions#available-assertions\" target=\"_blank\" rel=\"external\">list of these</a> can be found here.</p>\n<hr>\n<h2 id=\"How-do-I-know-which-assertions-change-the-subject-and-which-keep-it-the-same\"><a href=\"#How-do-I-know-which-assertions-change-the-subject-and-which-keep-it-the-same\" class=\"headerlink\" title=\"How do I know which assertions change the subject and which keep it the same?\"></a>How do I know which assertions change the subject and which keep it the same?</h2><p>The chainers that come from <a href=\"https://on.cypress.io/guides/bundled-tools#section-chai\" target=\"_blank\" rel=\"external\">Chai</a> or <a href=\"https://on.cypress.io/guides/bundled-tools#section-chai-jquery\" target=\"_blank\" rel=\"external\">Chai-jQuery</a> will always document what they return.</p>\n<p>Alternatively, it is very easy to use Cypress itself to figure this out.</p>\n<p>You can <a href=\"https://on.cypress.io/guides/making-assertions#sections-debugging-assertions\" target=\"_blank\" rel=\"external\">read more about debugging assertions</a> here.</p>\n<hr>\n<h2 id=\"Can-I-pass-options-to-cy-should\"><a href=\"#Can-I-pass-options-to-cy-should\" class=\"headerlink\" title=\"Can I pass options to cy.should()?\"></a>Can I pass options to cy.should()?</h2><p>Options passed to the preceding command will be passed through to <code>cy.should</code>.</p>\n<p>The following example is an example of increasing the <code>timeout</code> of the <code>cy.should</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"input\"</span>, &#123;<span class=\"attr\">timeout</span>: <span class=\"number\">10000</span>&#125;) <span class=\"comment\">// &lt;-- wait up to 10 seconds for this 'input' to be found</span></div><div class=\"line\">    .should(<span class=\"string\">\"have.value\"</span>, <span class=\"string\">\"foo\"</span>)   <span class=\"comment\">// &lt;-- and to have the value 'foo'</span></div><div class=\"line\">    .and(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"radio\"</span>)    <span class=\"comment\">// &lt;-- and to have the class 'radio'</span></div><div class=\"line\"></div><div class=\"line\">  .parents(<span class=\"string\">\"#foo\"</span>, &#123;<span class=\"attr\">timeout</span>: <span class=\"number\">2000</span>&#125;) <span class=\"comment\">// &lt;--</span></div><div class=\"line\">    .should(<span class=\"string\">\"not.exist\"</span>)            <span class=\"comment\">// &lt;-- wait up to 2 seconds for this element NOT to be found</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.find(<span class=\"string\">\"input\"</span>, &#123;<span class=\"attr\">timeout</span>: <span class=\"number\">10000</span>&#125;).should(<span class=\"string\">\"have.value\"</span>, <span class=\"string\">\"foo\"</span>).and(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"radio\"</span>)</div><div class=\"line\">                         ↲</div><div class=\"line\">      <span class=\"comment\">// adding the timeout here will automatically</span></div><div class=\"line\">      <span class=\"comment\">// flow down to the assertions, and they will</span></div><div class=\"line\">      <span class=\"comment\">// be retried for up to 10 seconds</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Assert-that-there-should-be-8-children-in-a-nav\"><a href=\"#Assert-that-there-should-be-8-children-in-a-nav\" class=\"headerlink\" title=\"Assert that there should be 8 children in a nav\"></a>Assert that there should be 8 children in a nav</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\".left-nav&gt;.nav\"</span>)</div><div class=\"line\">    .children()</div><div class=\"line\">      .should(<span class=\"string\">\"have.length\"</span>, <span class=\"number\">8</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"525\" alt=\"screen shot 2015-11-29 at 12 08 35 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458632/04e5da58-9692-11e5-870d-8f9e274192d1.png\"></p>\n<p>When clicking on <code>assert</code> within the command log, the console outputs the following:</p>\n<p><img width=\"768\" alt=\"screen shot 2015-11-29 at 12 08 45 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458633/08a7b238-9692-11e5-9d5d-620122436bc0.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/and\" target=\"_blank\" rel=\"external\">and</a></li>\n<li><a href=\"https://on.cypress.io/guides/making-assertions\" target=\"_blank\" rel=\"external\">Assertions</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://on.cypress.io/guides/making-assertions\">Read about making assertions first.</a>“,<br>  “title”: “New to Cypress?”<br>}<br>[/block]</p>\n<p><code>cy.should</code> makes assertions about the current subject.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the current subject but (in some cases) a new subject</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td>the assertion will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-should-chainers\"><a href=\"#cy-should-chainers\" class=\"headerlink\" title=\"cy.should( chainers )\"></a><a href=\"#section-chainers-usage\">cy.should( <em>chainers</em> )</a></h1><p>Implicitly assert about the current subject.</p>\n<hr>\n<h1 id=\"cy-should-chainers-value\"><a href=\"#cy-should-chainers-value\" class=\"headerlink\" title=\"cy.should( chainers, value )\"></a><a href=\"#section-chainers-with-value-usage\">cy.should( <em>chainers</em>, <em>value</em> )</a></h1><p>Implicitly assert a value about the current subject. Returns the existing current subject (usually). Some chai methods and chai-jQuery methods return a new (different) subject for chain-ability.</p>\n<hr>\n<h1 id=\"cy-should-chainers-method-value\"><a href=\"#cy-should-chainers-method-value\" class=\"headerlink\" title=\"cy.should( chainers, method, value )\"></a><a href=\"#section-chainers-with-method-and-value-usage\">cy.should( <em>chainers</em>, <em>method</em>, <em>value</em> )</a></h1><p>Implicitly assert about the subject by calling a method and providing a value to that method.</p>\n<hr>\n<h1 id=\"cy-should-function\"><a href=\"#cy-should-function\" class=\"headerlink\" title=\"cy.should( function )\"></a><a href=\"#section-function-usage\">cy.should( <em>function</em> )</a></h1><p>Pass a function that can have any number of explicit assertions within it. Does not change the subject. Whatever was passed to the function is what is returned.</p>\n<hr>\n<h1 id=\"Chainers-Usage\"><a href=\"#Chainers-Usage\" class=\"headerlink\" title=\"Chainers Usage\"></a>Chainers Usage</h1><h2 id=\"Assert-the-checkbox-is-disabled\"><a href=\"#Assert-the-checkbox-is-disabled\" class=\"headerlink\" title=\"Assert the checkbox is disabled\"></a>Assert the checkbox is disabled</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\":checkbox\"</span>).should(<span class=\"string\">\"be.disabled\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"The-current-subject-is-returned\"><a href=\"#The-current-subject-is-returned\" class=\"headerlink\" title=\"The current subject is returned\"></a>The current subject is returned</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"option:first\"</span>).should(<span class=\"string\">\"be.selected\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$option</span>))</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// $option is still the current subject</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Chainers-with-Value-Usage\"><a href=\"#Chainers-with-Value-Usage\" class=\"headerlink\" title=\"Chainers with Value Usage\"></a>Chainers with Value Usage</h1><h2 id=\"Assert-the-class-is-‘form-horizontal’\"><a href=\"#Assert-the-class-is-‘form-horizontal’\" class=\"headerlink\" title=\"Assert the class is ‘form-horizontal’\"></a>Assert the class is ‘form-horizontal’</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"form\"</span>).should(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"form-horizontal\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Assert-the-value-is-not-‘foo’\"><a href=\"#Assert-the-value-is-not-‘foo’\" class=\"headerlink\" title=\"Assert the value is not ‘foo’\"></a>Assert the value is not ‘foo’</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"input\"</span>).should(<span class=\"string\">\"not.have.value\"</span>, <span class=\"string\">\"foo\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"The-current-subject-is-returned-1\"><a href=\"#The-current-subject-is-returned-1\" class=\"headerlink\" title=\"The current subject is returned\"></a>The current subject is returned</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).should(<span class=\"string\">\"have.id\"</span>, <span class=\"string\">\"new-user\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$button</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// $button is still the current subject</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Chainers-with-Method-and-Value-Usage\"><a href=\"#Chainers-with-Method-and-Value-Usage\" class=\"headerlink\" title=\"Chainers with Method and Value Usage\"></a>Chainers with Method and Value Usage</h1><h2 id=\"Assert-the-href-is-equal-to-‘-users’\"><a href=\"#Assert-the-href-is-equal-to-‘-users’\" class=\"headerlink\" title=\"Assert the href is equal to ‘/users’\"></a>Assert the href is equal to ‘/users’</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// have.attr comes from chai-jquery</span></div><div class=\"line\">cy.get(<span class=\"string\">\"#header a\"</span>).should(<span class=\"string\">\"have.attr\"</span>, <span class=\"string\">\"href\"</span>, <span class=\"string\">\"/users\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Function-Usage\"><a href=\"#Function-Usage\" class=\"headerlink\" title=\"Function Usage\"></a>Function Usage</h1><h2 id=\"Verify-length-content-and-classes-from-multiple-lt-p-gt\"><a href=\"#Verify-length-content-and-classes-from-multiple-lt-p-gt\" class=\"headerlink\" title=\"Verify length, content, and classes from multiple &lt;p&gt;\"></a>Verify length, content, and classes from multiple <code>&lt;p&gt;</code></h2><p>Passing a function to <code>should</code> enables you to assert on arbitrary subjects. This gives you the opportunity to <em>massage</em> what you’d like to assert on.</p>\n<p>Just be sure <em>not</em> to include any code that has side effects in your callback function.</p>\n<p>The callback function will be retried over and over again until no assertions within it throw.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text-primary\"</span>&gt;</span>Hello World<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text-danger\"</span>&gt;</span>You have an error<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text-default\"</span>&gt;</span>Try again later<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"p\"</span>)</div><div class=\"line\">  .should(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$p</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// should have found 3 elements</span></div><div class=\"line\">    expect($p).to.have.length(<span class=\"number\">3</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// make sure the first contains some text content</span></div><div class=\"line\">    expect($p.first()).to.contain(<span class=\"string\">\"Hello World\"</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// use jquery's map to grab all of their classes</span></div><div class=\"line\">    <span class=\"comment\">// jquery's map returns a new jquery object</span></div><div class=\"line\">    <span class=\"keyword\">var</span> classes = $p.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i, el</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> cy.$(el).attr(<span class=\"string\">\"class\"</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// call classes.get() to make this a plain array</span></div><div class=\"line\">    expect(classes.get()).to.deep.eq([</div><div class=\"line\">      <span class=\"string\">\"text-primary\"</span>,</div><div class=\"line\">      <span class=\"string\">\"text-danger\"</span>,</div><div class=\"line\">      <span class=\"string\">\"text-default\"</span></div><div class=\"line\">    ])</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Using-a-callback-function-will-not-change-the-subject\"><a href=\"#Using-a-callback-function-will-not-change-the-subject\" class=\"headerlink\" title=\"Using a callback function will not change the subject\"></a>Using a callback function will not change the subject</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"button\"</span>).should(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$button</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// whatever we return here is ignored</span></div><div class=\"line\">    <span class=\"comment\">// as Cypress will always force the return</span></div><div class=\"line\">    <span class=\"comment\">// value for future commands to be the same</span></div><div class=\"line\">    <span class=\"comment\">// as the previous subject which is &lt;button&gt;</span></div><div class=\"line\"></div><div class=\"line\">    expect(&#123;<span class=\"attr\">foo</span>: <span class=\"string\">\"bar\"</span>&#125;).to.deep.eq(&#123;<span class=\"attr\">foo</span>: <span class=\"string\">\"bar\"</span>&#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// whatever the return value (if any) is ignored</span></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">foo</span>: <span class=\"string\">\"bar\"</span>&#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$button</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// $button === &lt;button&gt;</span></div><div class=\"line\">    <span class=\"comment\">// the subject is unchanged no matter what was returned</span></div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Multiple-Assertions\"><a href=\"#Multiple-Assertions\" class=\"headerlink\" title=\"Multiple Assertions\"></a>Multiple Assertions</h1><h2 id=\"Chaining-multiple-assertions\"><a href=\"#Chaining-multiple-assertions\" class=\"headerlink\" title=\"Chaining multiple assertions\"></a>Chaining multiple assertions</h2><p>Cypress makes it easy to chain assertions together.</p>\n<p>In this example we use <a href=\"https://on.cypress.io/api/and\"><code>cy.and</code></a> which is identical to <code>should</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// our subject is not changed by our first assertion,</span></div><div class=\"line\"><span class=\"comment\">// so we can continue to use DOM based assertions</span></div><div class=\"line\">cy.get(<span class=\"string\">\"option:first\"</span>).should(<span class=\"string\">\"be.selected\"</span>).and(<span class=\"string\">\"have.value\"</span>, <span class=\"string\">\"Metallica\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Assertions-that-change-the-subject\"><a href=\"#Assertions-that-change-the-subject\" class=\"headerlink\" title=\"Assertions that change the subject\"></a>Assertions that change the subject</h2><p>Sometimes using a specific chainer will automatically change the assertion subject.</p>\n<p>For instance in <code>chai</code>, the method <a href=\"http://chaijs.com/api/bdd/\"><code>have.property(&quot;...&quot;)</code></a> will automatically change the subject.</p>\n<p>Additionally in <a href=\"https://github.com/chaijs/chai-jquery#attrname-value\"><code>Chai-jQuery</code></a>, the methods: <code>attr</code>, <code>prop</code>, <code>css</code>, and <code>data</code> also change the subject.</p>\n<p>This allows you to utilize other <code>chainer</code> methods such as <code>match</code> when making assertions about values.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in this example our subject changed to the string 'sans-serif' because</span></div><div class=\"line\"><span class=\"comment\">// have.css(\"font-family\") returned a string instead of the &lt;body&gt; element</span></div><div class=\"line\">cy</div><div class=\"line\">  <span class=\"comment\">// subject is &lt;body&gt;</span></div><div class=\"line\">  .get(<span class=\"string\">\"body\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// subject changes to the string return value of 'font-family'</span></div><div class=\"line\">  .should(<span class=\"string\">\"have.css\"</span>, <span class=\"string\">\"font-family\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// use match to assert the string matches a regular expression</span></div><div class=\"line\">  .and(<span class=\"string\">\"match\"</span>, /sans-serif/)</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in this example our subject changed to the string '/users' because</span></div><div class=\"line\"><span class=\"comment\">// have.attr, href, /users returned a string instead of the &lt;a&gt; element</span></div><div class=\"line\">cy</div><div class=\"line\">  <span class=\"comment\">// subject is &lt;a&gt;</span></div><div class=\"line\">  .get(<span class=\"string\">\"a\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// subject changes to the string 'users'</span></div><div class=\"line\">  .should(<span class=\"string\">\"have.attr\"</span>, <span class=\"string\">\"href\"</span>, <span class=\"string\">\"/users\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Automatic-Retry-Support\"><a href=\"#Automatic-Retry-Support\" class=\"headerlink\" title=\"Automatic Retry Support\"></a>Automatic Retry Support</h1><p>Cypress won’t resolve your commands until all of its assertions pass.</p>\n<h2 id=\"Wait-until-the-assertions-pass\"><a href=\"#Wait-until-the-assertions-pass\" class=\"headerlink\" title=\"Wait until the assertions pass\"></a>Wait until the assertions pass</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Application Code</span></div><div class=\"line\">$(<span class=\"string\">\"button\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  $button = $(<span class=\"keyword\">this</span>)</div><div class=\"line\"></div><div class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $button.removeClass(<span class=\"string\">\"inactive\"</span>).addClass(<span class=\"string\">\"active\"</span>)</div><div class=\"line\">  &#125;, <span class=\"number\">1000</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"button\"</span>)</div><div class=\"line\">    .click()</div><div class=\"line\">    .should(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"active\"</span>)</div><div class=\"line\">    .and(<span class=\"string\">\"not.have.class\"</span>, <span class=\"string\">\"inactive\"</span>)</div></pre></td></tr></table></figure>\n<p>You can <a href=\"https://on.cypress.io/guides/making-assertions#section-resolving-assertions\">read more about how Cypress resolves your assertions</a> here.</p>\n<hr>\n<h1 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h1><h2 id=\"What-assertions-and-chainers-can-I-use\"><a href=\"#What-assertions-and-chainers-can-I-use\" class=\"headerlink\" title=\"What assertions and chainers can I use?\"></a>What assertions and chainers can I use?</h2><p>The chainers that <code>cy.should</code> accepts come from:</p>\n<ul>\n<li>Chai</li>\n<li>Chai-jQuery</li>\n</ul>\n<p>A <a href=\"https://on.cypress.io/guides/making-assertions#available-assertions\">list of these</a> can be found here.</p>\n<hr>\n<h2 id=\"How-do-I-know-which-assertions-change-the-subject-and-which-keep-it-the-same\"><a href=\"#How-do-I-know-which-assertions-change-the-subject-and-which-keep-it-the-same\" class=\"headerlink\" title=\"How do I know which assertions change the subject and which keep it the same?\"></a>How do I know which assertions change the subject and which keep it the same?</h2><p>The chainers that come from <a href=\"https://on.cypress.io/guides/bundled-tools#section-chai\">Chai</a> or <a href=\"https://on.cypress.io/guides/bundled-tools#section-chai-jquery\">Chai-jQuery</a> will always document what they return.</p>\n<p>Alternatively, it is very easy to use Cypress itself to figure this out.</p>\n<p>You can <a href=\"https://on.cypress.io/guides/making-assertions#sections-debugging-assertions\">read more about debugging assertions</a> here.</p>\n<hr>\n<h2 id=\"Can-I-pass-options-to-cy-should\"><a href=\"#Can-I-pass-options-to-cy-should\" class=\"headerlink\" title=\"Can I pass options to cy.should()?\"></a>Can I pass options to cy.should()?</h2><p>Options passed to the preceding command will be passed through to <code>cy.should</code>.</p>\n<p>The following example is an example of increasing the <code>timeout</code> of the <code>cy.should</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"input\"</span>, &#123;<span class=\"attr\">timeout</span>: <span class=\"number\">10000</span>&#125;) <span class=\"comment\">// &lt;-- wait up to 10 seconds for this 'input' to be found</span></div><div class=\"line\">    .should(<span class=\"string\">\"have.value\"</span>, <span class=\"string\">\"foo\"</span>)   <span class=\"comment\">// &lt;-- and to have the value 'foo'</span></div><div class=\"line\">    .and(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"radio\"</span>)    <span class=\"comment\">// &lt;-- and to have the class 'radio'</span></div><div class=\"line\"></div><div class=\"line\">  .parents(<span class=\"string\">\"#foo\"</span>, &#123;<span class=\"attr\">timeout</span>: <span class=\"number\">2000</span>&#125;) <span class=\"comment\">// &lt;--</span></div><div class=\"line\">    .should(<span class=\"string\">\"not.exist\"</span>)            <span class=\"comment\">// &lt;-- wait up to 2 seconds for this element NOT to be found</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.find(<span class=\"string\">\"input\"</span>, &#123;<span class=\"attr\">timeout</span>: <span class=\"number\">10000</span>&#125;).should(<span class=\"string\">\"have.value\"</span>, <span class=\"string\">\"foo\"</span>).and(<span class=\"string\">\"have.class\"</span>, <span class=\"string\">\"radio\"</span>)</div><div class=\"line\">                         ↲</div><div class=\"line\">      <span class=\"comment\">// adding the timeout here will automatically</span></div><div class=\"line\">      <span class=\"comment\">// flow down to the assertions, and they will</span></div><div class=\"line\">      <span class=\"comment\">// be retried for up to 10 seconds</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Assert-that-there-should-be-8-children-in-a-nav\"><a href=\"#Assert-that-there-should-be-8-children-in-a-nav\" class=\"headerlink\" title=\"Assert that there should be 8 children in a nav\"></a>Assert that there should be 8 children in a nav</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\".left-nav&gt;.nav\"</span>)</div><div class=\"line\">    .children()</div><div class=\"line\">      .should(<span class=\"string\">\"have.length\"</span>, <span class=\"number\">8</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"525\" alt=\"screen shot 2015-11-29 at 12 08 35 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458632/04e5da58-9692-11e5-870d-8f9e274192d1.png\"></p>\n<p>When clicking on <code>assert</code> within the command log, the console outputs the following:</p>\n<p><img width=\"768\" alt=\"screen shot 2015-11-29 at 12 08 45 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11458633/08a7b238-9692-11e5-9d5d-620122436bc0.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/and\">and</a></li>\n<li><a href=\"https://on.cypress.io/guides/making-assertions\">Assertions</a></li>\n</ul>\n"},{"title":"spread","_content":"\nThe spread command allows an expression to be expanded in places where multiple arguments are expected. Similar to [`cy.then`](https://on.cypress.io/api/then), but always expects an array as it's subject.\n\n| | |\n|--- | --- |\n| **Returns** | the value of the spread |\n| **Timeout** | *cannot timeout* |\n\n***\n\n# [cy.spread( *fn* )](#section-usage)\n\nExpand an array of arguments.\n\n***\n\n# Usage\n\n## Expand the array of aliased routes\n\n```javascript\ncy\n  .server()\n  .route(/users/).as(\"getUsers\")\n  .route(/activities/).as(\"getActivities\")\n  .route(/comments/).as(\"getComments\")\n  .wait([\"@getUsers\", \"@getActivities\", \"@getComments\"])\n  .spread(function(getUsers, getActivities, getComments){\n    // each XHR is now an individual argument\n  })\n```\n\n***\n\n# Related\n\n- [then](https://on.cypress.io/api/then)\n- [wait](https://on.cypress.io/api/wait)","source":"api/commands/spread.md","raw":"title: spread\n---\n\nThe spread command allows an expression to be expanded in places where multiple arguments are expected. Similar to [`cy.then`](https://on.cypress.io/api/then), but always expects an array as it's subject.\n\n| | |\n|--- | --- |\n| **Returns** | the value of the spread |\n| **Timeout** | *cannot timeout* |\n\n***\n\n# [cy.spread( *fn* )](#section-usage)\n\nExpand an array of arguments.\n\n***\n\n# Usage\n\n## Expand the array of aliased routes\n\n```javascript\ncy\n  .server()\n  .route(/users/).as(\"getUsers\")\n  .route(/activities/).as(\"getActivities\")\n  .route(/comments/).as(\"getComments\")\n  .wait([\"@getUsers\", \"@getActivities\", \"@getComments\"])\n  .spread(function(getUsers, getActivities, getComments){\n    // each XHR is now an individual argument\n  })\n```\n\n***\n\n# Related\n\n- [then](https://on.cypress.io/api/then)\n- [wait](https://on.cypress.io/api/wait)","date":"2017-04-19T18:51:19.000Z","updated":"2017-04-19T18:51:19.000Z","path":"api/commands/spread.html","comments":1,"layout":"page","_id":"cj1pc41xb0000pgg8nt7runap","content":"<p>The spread command allows an expression to be expanded in places where multiple arguments are expected. Similar to <a href=\"https://on.cypress.io/api/then\" target=\"_blank\" rel=\"external\"><code>cy.then</code></a>, but always expects an array as it’s subject.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the value of the spread</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><em>cannot timeout</em></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-spread-fn\"><a href=\"#cy-spread-fn\" class=\"headerlink\" title=\"cy.spread( fn )\"></a><a href=\"#section-usage\">cy.spread( <em>fn</em> )</a></h1><p>Expand an array of arguments.</p>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Expand-the-array-of-aliased-routes\"><a href=\"#Expand-the-array-of-aliased-routes\" class=\"headerlink\" title=\"Expand the array of aliased routes\"></a>Expand the array of aliased routes</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"regexp\">/users/</span>).as(<span class=\"string\">\"getUsers\"</span>)</div><div class=\"line\">  .route(<span class=\"regexp\">/activities/</span>).as(<span class=\"string\">\"getActivities\"</span>)</div><div class=\"line\">  .route(<span class=\"regexp\">/comments/</span>).as(<span class=\"string\">\"getComments\"</span>)</div><div class=\"line\">  .wait([<span class=\"string\">\"@getUsers\"</span>, <span class=\"string\">\"@getActivities\"</span>, <span class=\"string\">\"@getComments\"</span>])</div><div class=\"line\">  .spread(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">getUsers, getActivities, getComments</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// each XHR is now an individual argument</span></div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/then\" target=\"_blank\" rel=\"external\">then</a></li>\n<li><a href=\"https://on.cypress.io/api/wait\" target=\"_blank\" rel=\"external\">wait</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>The spread command allows an expression to be expanded in places where multiple arguments are expected. Similar to <a href=\"https://on.cypress.io/api/then\"><code>cy.then</code></a>, but always expects an array as it’s subject.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the value of the spread</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><em>cannot timeout</em></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-spread-fn\"><a href=\"#cy-spread-fn\" class=\"headerlink\" title=\"cy.spread( fn )\"></a><a href=\"#section-usage\">cy.spread( <em>fn</em> )</a></h1><p>Expand an array of arguments.</p>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Expand-the-array-of-aliased-routes\"><a href=\"#Expand-the-array-of-aliased-routes\" class=\"headerlink\" title=\"Expand the array of aliased routes\"></a>Expand the array of aliased routes</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"regexp\">/users/</span>).as(<span class=\"string\">\"getUsers\"</span>)</div><div class=\"line\">  .route(<span class=\"regexp\">/activities/</span>).as(<span class=\"string\">\"getActivities\"</span>)</div><div class=\"line\">  .route(<span class=\"regexp\">/comments/</span>).as(<span class=\"string\">\"getComments\"</span>)</div><div class=\"line\">  .wait([<span class=\"string\">\"@getUsers\"</span>, <span class=\"string\">\"@getActivities\"</span>, <span class=\"string\">\"@getComments\"</span>])</div><div class=\"line\">  .spread(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">getUsers, getActivities, getComments</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// each XHR is now an individual argument</span></div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/then\">then</a></li>\n<li><a href=\"https://on.cypress.io/api/wait\">wait</a></li>\n</ul>\n"},{"title":"stub","_content":"\nA stub is used to replace a function, record its usage and control its behavior. You can track calls to the functions and what arguments the function was called with. You can also control what the function returns and even cause it to throw an exception.\n\n`cy.stub` returns a [sinon.js stub](http://sinonjs.org/docs/#stubs). All methods found on sinon.js spies and stubs are supported. `cy.stub` creates stubs in a [sandbox](http://sinonjs.org/docs/#sandbox), so all stubs created are automatically reset/restored between tests without you having to explicitly reset/restore them.\n\nCypress has built-in [sinon-as-promised](https://github.com/bendrucker/sinon-as-promised) support, so the stubs returned by `cy.stub` supports the `.resolves` and `.rejects` API provided by `sinon-as-promised`.\n\nCypress also has built-in [sinon-chai](https://github.com/domenic/sinon-chai) support, so any [assertions](https://github.com/domenic/sinon-chai#assertions) supported by `sinon-chai` can be used without any configuration.\n\nUnlike most Cypress commands, `cy.stub` is *synchronous* and returns a value (the stub) instead of a Promise-like chain-able object.\n\n| | |\n|--- | --- |\n| **Returns** | the stub |\n\n***\n\n# [cy.stub()](#section-usage)\n\nCreates and returns a stub. See the [sinon.js stub docs](http://sinonjs.org/docs/#stubs) for methods on the stub.\n\n***\n\n# [cy.stub( *object*, *\"method\"* )](#section-replace-a-method-with-a-stub)\n\nReplaces the `method` on the `object` with a stub and returns the stub. See the [sinon.js stub docs](http://sinonjs.org/docs/#stubs) for methods on the stub.\n\n***\n\n# [cy.stub( *object*, *\"method\"*, replacerFn )](#section-replace-a-method-with-a-function)\n\nReplaces the `method` on the `object` with the `replacerFn` wrapped in a spy.See the [sinon.js spy docs](http://sinonjs.org/docs/#spies) for methods on the spy.\n\n***\n\n# Usage\n\n## Create a stub and manually replace a function\n\n```javascript\n// assume App.start calls util.addListeners\nutil.addListeners = cy.stub()\nApp.start()\nexpect(util.addListeners).to.be.called\n```\n\n***\n\n## Replace a method with a stub\n\n```javascript\n// assume App.start calls util.addListeners\ncy.stub(util, \"addListeners\")\nApp.start()\nexpect(util.addListeners).to.be.called\n```\n\n***\n\n## Replace a method with a function\n\n```javascript\n// assume App.start calls util.addListeners\nlet listenersAdded = false\ncy.stub(util, \"addListeners\", function () {\n  listenersAdded = true\n})\nApp.start()\nexpect(listenersAdded).to.be.true\n```\n\n***\n\n## Specify the return value of a stubbed method\n\n```javascript\n// assume App.start calls util.addListeners, which returns a function\n// that removes the listeners\nconst removeStub = cy.stub()\ncy.stub(util, \"addListeners\").returns(removeStub)\nApp.start()\nApp.stop()\nexpect(removeStub).to.be.called\n```\n\n***\n\n## Example Recipe\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe testing spying, stubbing and time](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/spy_stub_clock_spec.js)\",\n  \"title\": \"Using cy.stub\"\n}\n[/block]\n\n***\n\n## Alias a stub\n\nAdding an alias using [`cy.as`](https://on.cypress.io/api/as) to stubs makes them easier to identify in error messages and Cypress's command log.\n\n```javascript\nconst obj = {\n  foo () {}\n}\nconst stub = cy.stub(obj, \"foo\").as(\"anyArgs\")\nconst withFoo = stub.withArgs(\"foo\").as(\"withFoo\")\nobj.foo()\nexpect(stub).to.be.called\nexpect(withFoo).to.be.called // purposefully failing assertion\n```\n\nYou will see the following in the command log:\n\n![stubs with aliases](https://cloud.githubusercontent.com/assets/1157043/22437243/4cc778a4-e6f5-11e6-8f07-e601d3438c4f.png)\n\n***\n\n# Command Log\n\n## Create a stub, alias it, and call it\n\n```javascript\nconst obj = {\n  foo () {}\n}\nconst stub = cy.stub(obj, \"foo\").as(\"foo\")\nobj.foo(\"foo\", \"bar\")\nexpect(stub).to.be.called\n```\n\nThe command above will display in the command log as:\n\n<img width=\"454\" alt=\"screen shot of command log\" src=\"https://cloud.githubusercontent.com/assets/1157043/22437473/335f7104-e6f6-11e6-8ee8-74dc21e7d4fa.png\">\n\nWhen clicking on the `(stub-1)` event within the command log, the console outputs the following:\n\n<img width=\"585\" alt=\"screen shot of console output\" src=\"https://cloud.githubusercontent.com/assets/1157043/22437546/6b01e574-e6f6-11e6-878f-e10c2316d213.png\">\n\n***\n\n# Related\n\n- [Guide: Stubs, Spies and Clocks ](https://on.cypress.io/guides/stubs-spies-clocks)\n- [Recipe: Controlling Behavior with Spies, Stubs, and Clocks](https://github.com/cypress-io/cypress-example-recipes#controlling-behavior-with-spies-stubs-and-clocks)\n- [Recipe: Unit Test - Stubbing Dependencies](https://github.com/cypress-io/cypress-example-recipes#unit-test---stubbing-dependencies)\n- [spy](https://on.cypress.io/api/spy)\n- [clock](https://on.cypress.io/api/clock)\n","source":"api/commands/stub.md","raw":"title: stub\n---\n\nA stub is used to replace a function, record its usage and control its behavior. You can track calls to the functions and what arguments the function was called with. You can also control what the function returns and even cause it to throw an exception.\n\n`cy.stub` returns a [sinon.js stub](http://sinonjs.org/docs/#stubs). All methods found on sinon.js spies and stubs are supported. `cy.stub` creates stubs in a [sandbox](http://sinonjs.org/docs/#sandbox), so all stubs created are automatically reset/restored between tests without you having to explicitly reset/restore them.\n\nCypress has built-in [sinon-as-promised](https://github.com/bendrucker/sinon-as-promised) support, so the stubs returned by `cy.stub` supports the `.resolves` and `.rejects` API provided by `sinon-as-promised`.\n\nCypress also has built-in [sinon-chai](https://github.com/domenic/sinon-chai) support, so any [assertions](https://github.com/domenic/sinon-chai#assertions) supported by `sinon-chai` can be used without any configuration.\n\nUnlike most Cypress commands, `cy.stub` is *synchronous* and returns a value (the stub) instead of a Promise-like chain-able object.\n\n| | |\n|--- | --- |\n| **Returns** | the stub |\n\n***\n\n# [cy.stub()](#section-usage)\n\nCreates and returns a stub. See the [sinon.js stub docs](http://sinonjs.org/docs/#stubs) for methods on the stub.\n\n***\n\n# [cy.stub( *object*, *\"method\"* )](#section-replace-a-method-with-a-stub)\n\nReplaces the `method` on the `object` with a stub and returns the stub. See the [sinon.js stub docs](http://sinonjs.org/docs/#stubs) for methods on the stub.\n\n***\n\n# [cy.stub( *object*, *\"method\"*, replacerFn )](#section-replace-a-method-with-a-function)\n\nReplaces the `method` on the `object` with the `replacerFn` wrapped in a spy.See the [sinon.js spy docs](http://sinonjs.org/docs/#spies) for methods on the spy.\n\n***\n\n# Usage\n\n## Create a stub and manually replace a function\n\n```javascript\n// assume App.start calls util.addListeners\nutil.addListeners = cy.stub()\nApp.start()\nexpect(util.addListeners).to.be.called\n```\n\n***\n\n## Replace a method with a stub\n\n```javascript\n// assume App.start calls util.addListeners\ncy.stub(util, \"addListeners\")\nApp.start()\nexpect(util.addListeners).to.be.called\n```\n\n***\n\n## Replace a method with a function\n\n```javascript\n// assume App.start calls util.addListeners\nlet listenersAdded = false\ncy.stub(util, \"addListeners\", function () {\n  listenersAdded = true\n})\nApp.start()\nexpect(listenersAdded).to.be.true\n```\n\n***\n\n## Specify the return value of a stubbed method\n\n```javascript\n// assume App.start calls util.addListeners, which returns a function\n// that removes the listeners\nconst removeStub = cy.stub()\ncy.stub(util, \"addListeners\").returns(removeStub)\nApp.start()\nApp.stop()\nexpect(removeStub).to.be.called\n```\n\n***\n\n## Example Recipe\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe testing spying, stubbing and time](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/spy_stub_clock_spec.js)\",\n  \"title\": \"Using cy.stub\"\n}\n[/block]\n\n***\n\n## Alias a stub\n\nAdding an alias using [`cy.as`](https://on.cypress.io/api/as) to stubs makes them easier to identify in error messages and Cypress's command log.\n\n```javascript\nconst obj = {\n  foo () {}\n}\nconst stub = cy.stub(obj, \"foo\").as(\"anyArgs\")\nconst withFoo = stub.withArgs(\"foo\").as(\"withFoo\")\nobj.foo()\nexpect(stub).to.be.called\nexpect(withFoo).to.be.called // purposefully failing assertion\n```\n\nYou will see the following in the command log:\n\n![stubs with aliases](https://cloud.githubusercontent.com/assets/1157043/22437243/4cc778a4-e6f5-11e6-8f07-e601d3438c4f.png)\n\n***\n\n# Command Log\n\n## Create a stub, alias it, and call it\n\n```javascript\nconst obj = {\n  foo () {}\n}\nconst stub = cy.stub(obj, \"foo\").as(\"foo\")\nobj.foo(\"foo\", \"bar\")\nexpect(stub).to.be.called\n```\n\nThe command above will display in the command log as:\n\n<img width=\"454\" alt=\"screen shot of command log\" src=\"https://cloud.githubusercontent.com/assets/1157043/22437473/335f7104-e6f6-11e6-8ee8-74dc21e7d4fa.png\">\n\nWhen clicking on the `(stub-1)` event within the command log, the console outputs the following:\n\n<img width=\"585\" alt=\"screen shot of console output\" src=\"https://cloud.githubusercontent.com/assets/1157043/22437546/6b01e574-e6f6-11e6-878f-e10c2316d213.png\">\n\n***\n\n# Related\n\n- [Guide: Stubs, Spies and Clocks ](https://on.cypress.io/guides/stubs-spies-clocks)\n- [Recipe: Controlling Behavior with Spies, Stubs, and Clocks](https://github.com/cypress-io/cypress-example-recipes#controlling-behavior-with-spies-stubs-and-clocks)\n- [Recipe: Unit Test - Stubbing Dependencies](https://github.com/cypress-io/cypress-example-recipes#unit-test---stubbing-dependencies)\n- [spy](https://on.cypress.io/api/spy)\n- [clock](https://on.cypress.io/api/clock)\n","date":"2017-04-19T18:51:19.000Z","updated":"2017-04-19T18:51:19.000Z","path":"api/commands/stub.html","comments":1,"layout":"page","_id":"cj1pc41xc0001pgg8wytjr4jl","content":"<p>A stub is used to replace a function, record its usage and control its behavior. You can track calls to the functions and what arguments the function was called with. You can also control what the function returns and even cause it to throw an exception.</p>\n<p><code>cy.stub</code> returns a <a href=\"http://sinonjs.org/docs/#stubs\" target=\"_blank\" rel=\"external\">sinon.js stub</a>. All methods found on sinon.js spies and stubs are supported. <code>cy.stub</code> creates stubs in a <a href=\"http://sinonjs.org/docs/#sandbox\" target=\"_blank\" rel=\"external\">sandbox</a>, so all stubs created are automatically reset/restored between tests without you having to explicitly reset/restore them.</p>\n<p>Cypress has built-in <a href=\"https://github.com/bendrucker/sinon-as-promised\" target=\"_blank\" rel=\"external\">sinon-as-promised</a> support, so the stubs returned by <code>cy.stub</code> supports the <code>.resolves</code> and <code>.rejects</code> API provided by <code>sinon-as-promised</code>.</p>\n<p>Cypress also has built-in <a href=\"https://github.com/domenic/sinon-chai\" target=\"_blank\" rel=\"external\">sinon-chai</a> support, so any <a href=\"https://github.com/domenic/sinon-chai#assertions\" target=\"_blank\" rel=\"external\">assertions</a> supported by <code>sinon-chai</code> can be used without any configuration.</p>\n<p>Unlike most Cypress commands, <code>cy.stub</code> is <em>synchronous</em> and returns a value (the stub) instead of a Promise-like chain-able object.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the stub</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-stub\"><a href=\"#cy-stub\" class=\"headerlink\" title=\"cy.stub()\"></a><a href=\"#section-usage\">cy.stub()</a></h1><p>Creates and returns a stub. See the <a href=\"http://sinonjs.org/docs/#stubs\" target=\"_blank\" rel=\"external\">sinon.js stub docs</a> for methods on the stub.</p>\n<hr>\n<h1 id=\"cy-stub-object-“method”\"><a href=\"#cy-stub-object-“method”\" class=\"headerlink\" title=\"cy.stub( object, “method” )\"></a><a href=\"#section-replace-a-method-with-a-stub\">cy.stub( <em>object</em>, <em>“method”</em> )</a></h1><p>Replaces the <code>method</code> on the <code>object</code> with a stub and returns the stub. See the <a href=\"http://sinonjs.org/docs/#stubs\" target=\"_blank\" rel=\"external\">sinon.js stub docs</a> for methods on the stub.</p>\n<hr>\n<h1 id=\"cy-stub-object-“method”-replacerFn\"><a href=\"#cy-stub-object-“method”-replacerFn\" class=\"headerlink\" title=\"cy.stub( object, “method”, replacerFn )\"></a><a href=\"#section-replace-a-method-with-a-function\">cy.stub( <em>object</em>, <em>“method”</em>, replacerFn )</a></h1><p>Replaces the <code>method</code> on the <code>object</code> with the <code>replacerFn</code> wrapped in a spy.See the <a href=\"http://sinonjs.org/docs/#spies\" target=\"_blank\" rel=\"external\">sinon.js spy docs</a> for methods on the spy.</p>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Create-a-stub-and-manually-replace-a-function\"><a href=\"#Create-a-stub-and-manually-replace-a-function\" class=\"headerlink\" title=\"Create a stub and manually replace a function\"></a>Create a stub and manually replace a function</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// assume App.start calls util.addListeners</span></div><div class=\"line\">util.addListeners = cy.stub()</div><div class=\"line\">App.start()</div><div class=\"line\">expect(util.addListeners).to.be.called</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Replace-a-method-with-a-stub\"><a href=\"#Replace-a-method-with-a-stub\" class=\"headerlink\" title=\"Replace a method with a stub\"></a>Replace a method with a stub</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// assume App.start calls util.addListeners</span></div><div class=\"line\">cy.stub(util, <span class=\"string\">\"addListeners\"</span>)</div><div class=\"line\">App.start()</div><div class=\"line\">expect(util.addListeners).to.be.called</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Replace-a-method-with-a-function\"><a href=\"#Replace-a-method-with-a-function\" class=\"headerlink\" title=\"Replace a method with a function\"></a>Replace a method with a function</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// assume App.start calls util.addListeners</span></div><div class=\"line\"><span class=\"keyword\">let</span> listenersAdded = <span class=\"literal\">false</span></div><div class=\"line\">cy.stub(util, <span class=\"string\">\"addListeners\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  listenersAdded = <span class=\"literal\">true</span></div><div class=\"line\">&#125;)</div><div class=\"line\">App.start()</div><div class=\"line\">expect(listenersAdded).to.be.true</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Specify-the-return-value-of-a-stubbed-method\"><a href=\"#Specify-the-return-value-of-a-stubbed-method\" class=\"headerlink\" title=\"Specify the return value of a stubbed method\"></a>Specify the return value of a stubbed method</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// assume App.start calls util.addListeners, which returns a function</span></div><div class=\"line\"><span class=\"comment\">// that removes the listeners</span></div><div class=\"line\"><span class=\"keyword\">const</span> removeStub = cy.stub()</div><div class=\"line\">cy.stub(util, <span class=\"string\">\"addListeners\"</span>).returns(removeStub)</div><div class=\"line\">App.start()</div><div class=\"line\">App.stop()</div><div class=\"line\">expect(removeStub).to.be.called</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Example-Recipe\"><a href=\"#Example-Recipe\" class=\"headerlink\" title=\"Example Recipe\"></a>Example Recipe</h2><p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/spy_stub_clock_spec.js\" target=\"_blank\" rel=\"external\">Check out our example recipe testing spying, stubbing and time</a>“,<br>  “title”: “Using cy.stub”<br>}<br>[/block]</p>\n<hr>\n<h2 id=\"Alias-a-stub\"><a href=\"#Alias-a-stub\" class=\"headerlink\" title=\"Alias a stub\"></a>Alias a stub</h2><p>Adding an alias using <a href=\"https://on.cypress.io/api/as\" target=\"_blank\" rel=\"external\"><code>cy.as</code></a> to stubs makes them easier to identify in error messages and Cypress’s command log.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</div><div class=\"line\">  foo () &#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">const</span> stub = cy.stub(obj, <span class=\"string\">\"foo\"</span>).as(<span class=\"string\">\"anyArgs\"</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> withFoo = stub.withArgs(<span class=\"string\">\"foo\"</span>).as(<span class=\"string\">\"withFoo\"</span>)</div><div class=\"line\">obj.foo()</div><div class=\"line\">expect(stub).to.be.called</div><div class=\"line\">expect(withFoo).to.be.called <span class=\"comment\">// purposefully failing assertion</span></div></pre></td></tr></table></figure>\n<p>You will see the following in the command log:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1157043/22437243/4cc778a4-e6f5-11e6-8f07-e601d3438c4f.png\" alt=\"stubs with aliases\"></p>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Create-a-stub-alias-it-and-call-it\"><a href=\"#Create-a-stub-alias-it-and-call-it\" class=\"headerlink\" title=\"Create a stub, alias it, and call it\"></a>Create a stub, alias it, and call it</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</div><div class=\"line\">  foo () &#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">const</span> stub = cy.stub(obj, <span class=\"string\">\"foo\"</span>).as(<span class=\"string\">\"foo\"</span>)</div><div class=\"line\">obj.foo(<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>)</div><div class=\"line\">expect(stub).to.be.called</div></pre></td></tr></table></figure>\n<p>The command above will display in the command log as:</p>\n<p><img width=\"454\" alt=\"screen shot of command log\" src=\"https://cloud.githubusercontent.com/assets/1157043/22437473/335f7104-e6f6-11e6-8ee8-74dc21e7d4fa.png\"></p>\n<p>When clicking on the <code>(stub-1)</code> event within the command log, the console outputs the following:</p>\n<p><img width=\"585\" alt=\"screen shot of console output\" src=\"https://cloud.githubusercontent.com/assets/1157043/22437546/6b01e574-e6f6-11e6-878f-e10c2316d213.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/guides/stubs-spies-clocks\" target=\"_blank\" rel=\"external\">Guide: Stubs, Spies and Clocks </a></li>\n<li><a href=\"https://github.com/cypress-io/cypress-example-recipes#controlling-behavior-with-spies-stubs-and-clocks\" target=\"_blank\" rel=\"external\">Recipe: Controlling Behavior with Spies, Stubs, and Clocks</a></li>\n<li><a href=\"https://github.com/cypress-io/cypress-example-recipes#unit-test---stubbing-dependencies\" target=\"_blank\" rel=\"external\">Recipe: Unit Test - Stubbing Dependencies</a></li>\n<li><a href=\"https://on.cypress.io/api/spy\" target=\"_blank\" rel=\"external\">spy</a></li>\n<li><a href=\"https://on.cypress.io/api/clock\" target=\"_blank\" rel=\"external\">clock</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>A stub is used to replace a function, record its usage and control its behavior. You can track calls to the functions and what arguments the function was called with. You can also control what the function returns and even cause it to throw an exception.</p>\n<p><code>cy.stub</code> returns a <a href=\"http://sinonjs.org/docs/#stubs\">sinon.js stub</a>. All methods found on sinon.js spies and stubs are supported. <code>cy.stub</code> creates stubs in a <a href=\"http://sinonjs.org/docs/#sandbox\">sandbox</a>, so all stubs created are automatically reset/restored between tests without you having to explicitly reset/restore them.</p>\n<p>Cypress has built-in <a href=\"https://github.com/bendrucker/sinon-as-promised\">sinon-as-promised</a> support, so the stubs returned by <code>cy.stub</code> supports the <code>.resolves</code> and <code>.rejects</code> API provided by <code>sinon-as-promised</code>.</p>\n<p>Cypress also has built-in <a href=\"https://github.com/domenic/sinon-chai\">sinon-chai</a> support, so any <a href=\"https://github.com/domenic/sinon-chai#assertions\">assertions</a> supported by <code>sinon-chai</code> can be used without any configuration.</p>\n<p>Unlike most Cypress commands, <code>cy.stub</code> is <em>synchronous</em> and returns a value (the stub) instead of a Promise-like chain-able object.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the stub</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-stub\"><a href=\"#cy-stub\" class=\"headerlink\" title=\"cy.stub()\"></a><a href=\"#section-usage\">cy.stub()</a></h1><p>Creates and returns a stub. See the <a href=\"http://sinonjs.org/docs/#stubs\">sinon.js stub docs</a> for methods on the stub.</p>\n<hr>\n<h1 id=\"cy-stub-object-“method”\"><a href=\"#cy-stub-object-“method”\" class=\"headerlink\" title=\"cy.stub( object, “method” )\"></a><a href=\"#section-replace-a-method-with-a-stub\">cy.stub( <em>object</em>, <em>“method”</em> )</a></h1><p>Replaces the <code>method</code> on the <code>object</code> with a stub and returns the stub. See the <a href=\"http://sinonjs.org/docs/#stubs\">sinon.js stub docs</a> for methods on the stub.</p>\n<hr>\n<h1 id=\"cy-stub-object-“method”-replacerFn\"><a href=\"#cy-stub-object-“method”-replacerFn\" class=\"headerlink\" title=\"cy.stub( object, “method”, replacerFn )\"></a><a href=\"#section-replace-a-method-with-a-function\">cy.stub( <em>object</em>, <em>“method”</em>, replacerFn )</a></h1><p>Replaces the <code>method</code> on the <code>object</code> with the <code>replacerFn</code> wrapped in a spy.See the <a href=\"http://sinonjs.org/docs/#spies\">sinon.js spy docs</a> for methods on the spy.</p>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Create-a-stub-and-manually-replace-a-function\"><a href=\"#Create-a-stub-and-manually-replace-a-function\" class=\"headerlink\" title=\"Create a stub and manually replace a function\"></a>Create a stub and manually replace a function</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// assume App.start calls util.addListeners</span></div><div class=\"line\">util.addListeners = cy.stub()</div><div class=\"line\">App.start()</div><div class=\"line\">expect(util.addListeners).to.be.called</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Replace-a-method-with-a-stub\"><a href=\"#Replace-a-method-with-a-stub\" class=\"headerlink\" title=\"Replace a method with a stub\"></a>Replace a method with a stub</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// assume App.start calls util.addListeners</span></div><div class=\"line\">cy.stub(util, <span class=\"string\">\"addListeners\"</span>)</div><div class=\"line\">App.start()</div><div class=\"line\">expect(util.addListeners).to.be.called</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Replace-a-method-with-a-function\"><a href=\"#Replace-a-method-with-a-function\" class=\"headerlink\" title=\"Replace a method with a function\"></a>Replace a method with a function</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// assume App.start calls util.addListeners</span></div><div class=\"line\"><span class=\"keyword\">let</span> listenersAdded = <span class=\"literal\">false</span></div><div class=\"line\">cy.stub(util, <span class=\"string\">\"addListeners\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  listenersAdded = <span class=\"literal\">true</span></div><div class=\"line\">&#125;)</div><div class=\"line\">App.start()</div><div class=\"line\">expect(listenersAdded).to.be.true</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Specify-the-return-value-of-a-stubbed-method\"><a href=\"#Specify-the-return-value-of-a-stubbed-method\" class=\"headerlink\" title=\"Specify the return value of a stubbed method\"></a>Specify the return value of a stubbed method</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// assume App.start calls util.addListeners, which returns a function</span></div><div class=\"line\"><span class=\"comment\">// that removes the listeners</span></div><div class=\"line\"><span class=\"keyword\">const</span> removeStub = cy.stub()</div><div class=\"line\">cy.stub(util, <span class=\"string\">\"addListeners\"</span>).returns(removeStub)</div><div class=\"line\">App.start()</div><div class=\"line\">App.stop()</div><div class=\"line\">expect(removeStub).to.be.called</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Example-Recipe\"><a href=\"#Example-Recipe\" class=\"headerlink\" title=\"Example Recipe\"></a>Example Recipe</h2><p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/spy_stub_clock_spec.js\">Check out our example recipe testing spying, stubbing and time</a>“,<br>  “title”: “Using cy.stub”<br>}<br>[/block]</p>\n<hr>\n<h2 id=\"Alias-a-stub\"><a href=\"#Alias-a-stub\" class=\"headerlink\" title=\"Alias a stub\"></a>Alias a stub</h2><p>Adding an alias using <a href=\"https://on.cypress.io/api/as\"><code>cy.as</code></a> to stubs makes them easier to identify in error messages and Cypress’s command log.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</div><div class=\"line\">  foo () &#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">const</span> stub = cy.stub(obj, <span class=\"string\">\"foo\"</span>).as(<span class=\"string\">\"anyArgs\"</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> withFoo = stub.withArgs(<span class=\"string\">\"foo\"</span>).as(<span class=\"string\">\"withFoo\"</span>)</div><div class=\"line\">obj.foo()</div><div class=\"line\">expect(stub).to.be.called</div><div class=\"line\">expect(withFoo).to.be.called <span class=\"comment\">// purposefully failing assertion</span></div></pre></td></tr></table></figure>\n<p>You will see the following in the command log:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1157043/22437243/4cc778a4-e6f5-11e6-8f07-e601d3438c4f.png\" alt=\"stubs with aliases\"></p>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Create-a-stub-alias-it-and-call-it\"><a href=\"#Create-a-stub-alias-it-and-call-it\" class=\"headerlink\" title=\"Create a stub, alias it, and call it\"></a>Create a stub, alias it, and call it</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</div><div class=\"line\">  foo () &#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">const</span> stub = cy.stub(obj, <span class=\"string\">\"foo\"</span>).as(<span class=\"string\">\"foo\"</span>)</div><div class=\"line\">obj.foo(<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>)</div><div class=\"line\">expect(stub).to.be.called</div></pre></td></tr></table></figure>\n<p>The command above will display in the command log as:</p>\n<p><img width=\"454\" alt=\"screen shot of command log\" src=\"https://cloud.githubusercontent.com/assets/1157043/22437473/335f7104-e6f6-11e6-8ee8-74dc21e7d4fa.png\"></p>\n<p>When clicking on the <code>(stub-1)</code> event within the command log, the console outputs the following:</p>\n<p><img width=\"585\" alt=\"screen shot of console output\" src=\"https://cloud.githubusercontent.com/assets/1157043/22437546/6b01e574-e6f6-11e6-878f-e10c2316d213.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/guides/stubs-spies-clocks\">Guide: Stubs, Spies and Clocks </a></li>\n<li><a href=\"https://github.com/cypress-io/cypress-example-recipes#controlling-behavior-with-spies-stubs-and-clocks\">Recipe: Controlling Behavior with Spies, Stubs, and Clocks</a></li>\n<li><a href=\"https://github.com/cypress-io/cypress-example-recipes#unit-test---stubbing-dependencies\">Recipe: Unit Test - Stubbing Dependencies</a></li>\n<li><a href=\"https://on.cypress.io/api/spy\">spy</a></li>\n<li><a href=\"https://on.cypress.io/api/clock\">clock</a></li>\n</ul>\n"},{"title":"spy","_content":"\nWrap a method in a spy in order to record calls to the functions and what arguments the function was called with.\n\n`cy.spy` returns a [Sinon.js spy](http://sinonjs.org/docs/#spies). All [methods](http://sinonjs.org/docs/#spies-api) found on Sinon.JS spies are supported. `cy.spy` creates spies in a [sandbox](http://sinonjs.org/docs/#sandbox), so all spies created are automatically reset/restored between tests without you having to explicitly reset/restore them.\n\nThe main difference between `cy.spy` and [`cy.stub`](https://on.cypress.io/api/stub) is that `cy.spy` does not replace the method, it only wraps it. So, while invocations are recorded, the original method is still called. This can be very useful when testing methods on native browser objects. You can verify a method is being called by your test and still have the original method action invoked.\n\nCypress has also built-in [sinon-chai](https://github.com/domenic/sinon-chai) support, so any [assertions](https://github.com/domenic/sinon-chai#assertions) supported by `sinon-chai` can be used without any configuration.\n\nUnlike most Cypress commands, `cy.spy` is *synchronous* and returns a value (the spy) instead of a Promise-like chain-able object.\n\n| | |\n|--- | --- |\n| **Returns** | the spy |\n\n***\n\n# [cy.spy( *object*, *\"method\"* )](#section-usage)\n\nWraps the `method` on the `object` with a spy and returns the spy. See the [sinon.js spy docs](http://sinonjs.org/docs/#spies) for [methods](http://sinonjs.org/docs/#spies-api) on the spy.\n\n***\n\n# Usage\n\n## Wrap a method with a spy\n\n```javascript\n// assume App.start calls util.addListeners\ncy.spy(util, \"addListeners\")\nApp.start()\nexpect(util.addListeners).to.be.called\n\n```\n\n***\n\n## Example Recipe\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe testing spying, stubbing and time](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/spy_stub_clock_spec.js)\",\n  \"title\": \"Using cy.spy\"\n}\n[/block]\n\n***\n\n## Alias a spy\n\nAdding an alias using [`cy.as`](https://on.cypress.io/api/as) to spies makes them easier to identify in error messages and Cypress's command log.\n\n```javascript\nconst obj = {\n  foo () {}\n}\nconst spy = cy.spy(obj, \"foo\").as(\"anyArgs\")\nconst withFoo = spy.withArgs(\"foo\").as(\"withFoo\")\nobj.foo()\nexpect(spy).to.be.called\nexpect(withFoo).to.be.called // purposefully failing assertion\n```\n\nYou will see the following in the command log:\n\n![spies with aliases](https://cloud.githubusercontent.com/assets/1157043/22437291/805bd0d4-e6f5-11e6-99c5-bded81b9c42b.png)\n\n***\n\n# Command Log\n\n## Create a spy, alias it, and call it\n\n```javascript\nconst obj = {\n  foo () {}\n}\nconst spy = cy.spy(obj, \"foo\").as(\"foo\")\nobj.foo(\"foo\", \"bar\")\nexpect(spy).to.be.called\n```\n\nThe command above will display in the command log as:\n\n<img width=\"454\" alt=\"screen shot of command log\" src=\"https://cloud.githubusercontent.com/assets/1157043/22437713/1d5f7be6-e6f7-11e6-9457-f35cbeaa5385.png\">\n\nWhen clicking on the `spy-1` event within the command log, the console outputs the following:\n\n<img width=\"585\" alt=\"screen shot of console output\" src=\"https://cloud.githubusercontent.com/assets/1157043/22437712/1d5ed1e6-e6f7-11e6-9808-e61936b1d75f.png\">\n\n***\n\n# Related\n\n- [Guide: Stubs, Spies and Clocks ](https://on.cypress.io/guides/stubs-spies-clocks)\n- [Recipe: Controlling Behavior with Spies, Stubs, and Clocks](https://github.com/cypress-io/cypress-example-recipes#controlling-behavior-with-spies-stubs-and-clocks)\n- [stub](https://on.cypress.io/api/stub)\n- [clock](https://on.cypress.io/api/clock)\n","source":"api/commands/spy.md","raw":"title: spy\n---\n\nWrap a method in a spy in order to record calls to the functions and what arguments the function was called with.\n\n`cy.spy` returns a [Sinon.js spy](http://sinonjs.org/docs/#spies). All [methods](http://sinonjs.org/docs/#spies-api) found on Sinon.JS spies are supported. `cy.spy` creates spies in a [sandbox](http://sinonjs.org/docs/#sandbox), so all spies created are automatically reset/restored between tests without you having to explicitly reset/restore them.\n\nThe main difference between `cy.spy` and [`cy.stub`](https://on.cypress.io/api/stub) is that `cy.spy` does not replace the method, it only wraps it. So, while invocations are recorded, the original method is still called. This can be very useful when testing methods on native browser objects. You can verify a method is being called by your test and still have the original method action invoked.\n\nCypress has also built-in [sinon-chai](https://github.com/domenic/sinon-chai) support, so any [assertions](https://github.com/domenic/sinon-chai#assertions) supported by `sinon-chai` can be used without any configuration.\n\nUnlike most Cypress commands, `cy.spy` is *synchronous* and returns a value (the spy) instead of a Promise-like chain-able object.\n\n| | |\n|--- | --- |\n| **Returns** | the spy |\n\n***\n\n# [cy.spy( *object*, *\"method\"* )](#section-usage)\n\nWraps the `method` on the `object` with a spy and returns the spy. See the [sinon.js spy docs](http://sinonjs.org/docs/#spies) for [methods](http://sinonjs.org/docs/#spies-api) on the spy.\n\n***\n\n# Usage\n\n## Wrap a method with a spy\n\n```javascript\n// assume App.start calls util.addListeners\ncy.spy(util, \"addListeners\")\nApp.start()\nexpect(util.addListeners).to.be.called\n\n```\n\n***\n\n## Example Recipe\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe testing spying, stubbing and time](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/spy_stub_clock_spec.js)\",\n  \"title\": \"Using cy.spy\"\n}\n[/block]\n\n***\n\n## Alias a spy\n\nAdding an alias using [`cy.as`](https://on.cypress.io/api/as) to spies makes them easier to identify in error messages and Cypress's command log.\n\n```javascript\nconst obj = {\n  foo () {}\n}\nconst spy = cy.spy(obj, \"foo\").as(\"anyArgs\")\nconst withFoo = spy.withArgs(\"foo\").as(\"withFoo\")\nobj.foo()\nexpect(spy).to.be.called\nexpect(withFoo).to.be.called // purposefully failing assertion\n```\n\nYou will see the following in the command log:\n\n![spies with aliases](https://cloud.githubusercontent.com/assets/1157043/22437291/805bd0d4-e6f5-11e6-99c5-bded81b9c42b.png)\n\n***\n\n# Command Log\n\n## Create a spy, alias it, and call it\n\n```javascript\nconst obj = {\n  foo () {}\n}\nconst spy = cy.spy(obj, \"foo\").as(\"foo\")\nobj.foo(\"foo\", \"bar\")\nexpect(spy).to.be.called\n```\n\nThe command above will display in the command log as:\n\n<img width=\"454\" alt=\"screen shot of command log\" src=\"https://cloud.githubusercontent.com/assets/1157043/22437713/1d5f7be6-e6f7-11e6-9457-f35cbeaa5385.png\">\n\nWhen clicking on the `spy-1` event within the command log, the console outputs the following:\n\n<img width=\"585\" alt=\"screen shot of console output\" src=\"https://cloud.githubusercontent.com/assets/1157043/22437712/1d5ed1e6-e6f7-11e6-9808-e61936b1d75f.png\">\n\n***\n\n# Related\n\n- [Guide: Stubs, Spies and Clocks ](https://on.cypress.io/guides/stubs-spies-clocks)\n- [Recipe: Controlling Behavior with Spies, Stubs, and Clocks](https://github.com/cypress-io/cypress-example-recipes#controlling-behavior-with-spies-stubs-and-clocks)\n- [stub](https://on.cypress.io/api/stub)\n- [clock](https://on.cypress.io/api/clock)\n","date":"2017-04-19T18:51:19.000Z","updated":"2017-04-19T18:51:19.000Z","path":"api/commands/spy.html","comments":1,"layout":"page","_id":"cj1pc41xd0002pgg881x5y1bw","content":"<p>Wrap a method in a spy in order to record calls to the functions and what arguments the function was called with.</p>\n<p><code>cy.spy</code> returns a <a href=\"http://sinonjs.org/docs/#spies\" target=\"_blank\" rel=\"external\">Sinon.js spy</a>. All <a href=\"http://sinonjs.org/docs/#spies-api\" target=\"_blank\" rel=\"external\">methods</a> found on Sinon.JS spies are supported. <code>cy.spy</code> creates spies in a <a href=\"http://sinonjs.org/docs/#sandbox\" target=\"_blank\" rel=\"external\">sandbox</a>, so all spies created are automatically reset/restored between tests without you having to explicitly reset/restore them.</p>\n<p>The main difference between <code>cy.spy</code> and <a href=\"https://on.cypress.io/api/stub\" target=\"_blank\" rel=\"external\"><code>cy.stub</code></a> is that <code>cy.spy</code> does not replace the method, it only wraps it. So, while invocations are recorded, the original method is still called. This can be very useful when testing methods on native browser objects. You can verify a method is being called by your test and still have the original method action invoked.</p>\n<p>Cypress has also built-in <a href=\"https://github.com/domenic/sinon-chai\" target=\"_blank\" rel=\"external\">sinon-chai</a> support, so any <a href=\"https://github.com/domenic/sinon-chai#assertions\" target=\"_blank\" rel=\"external\">assertions</a> supported by <code>sinon-chai</code> can be used without any configuration.</p>\n<p>Unlike most Cypress commands, <code>cy.spy</code> is <em>synchronous</em> and returns a value (the spy) instead of a Promise-like chain-able object.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the spy</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-spy-object-“method”\"><a href=\"#cy-spy-object-“method”\" class=\"headerlink\" title=\"cy.spy( object, “method” )\"></a><a href=\"#section-usage\">cy.spy( <em>object</em>, <em>“method”</em> )</a></h1><p>Wraps the <code>method</code> on the <code>object</code> with a spy and returns the spy. See the <a href=\"http://sinonjs.org/docs/#spies\" target=\"_blank\" rel=\"external\">sinon.js spy docs</a> for <a href=\"http://sinonjs.org/docs/#spies-api\" target=\"_blank\" rel=\"external\">methods</a> on the spy.</p>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Wrap-a-method-with-a-spy\"><a href=\"#Wrap-a-method-with-a-spy\" class=\"headerlink\" title=\"Wrap a method with a spy\"></a>Wrap a method with a spy</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// assume App.start calls util.addListeners</span></div><div class=\"line\">cy.spy(util, <span class=\"string\">\"addListeners\"</span>)</div><div class=\"line\">App.start()</div><div class=\"line\">expect(util.addListeners).to.be.called</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Example-Recipe\"><a href=\"#Example-Recipe\" class=\"headerlink\" title=\"Example Recipe\"></a>Example Recipe</h2><p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/spy_stub_clock_spec.js\" target=\"_blank\" rel=\"external\">Check out our example recipe testing spying, stubbing and time</a>“,<br>  “title”: “Using cy.spy”<br>}<br>[/block]</p>\n<hr>\n<h2 id=\"Alias-a-spy\"><a href=\"#Alias-a-spy\" class=\"headerlink\" title=\"Alias a spy\"></a>Alias a spy</h2><p>Adding an alias using <a href=\"https://on.cypress.io/api/as\" target=\"_blank\" rel=\"external\"><code>cy.as</code></a> to spies makes them easier to identify in error messages and Cypress’s command log.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</div><div class=\"line\">  foo () &#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">const</span> spy = cy.spy(obj, <span class=\"string\">\"foo\"</span>).as(<span class=\"string\">\"anyArgs\"</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> withFoo = spy.withArgs(<span class=\"string\">\"foo\"</span>).as(<span class=\"string\">\"withFoo\"</span>)</div><div class=\"line\">obj.foo()</div><div class=\"line\">expect(spy).to.be.called</div><div class=\"line\">expect(withFoo).to.be.called <span class=\"comment\">// purposefully failing assertion</span></div></pre></td></tr></table></figure>\n<p>You will see the following in the command log:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1157043/22437291/805bd0d4-e6f5-11e6-99c5-bded81b9c42b.png\" alt=\"spies with aliases\"></p>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Create-a-spy-alias-it-and-call-it\"><a href=\"#Create-a-spy-alias-it-and-call-it\" class=\"headerlink\" title=\"Create a spy, alias it, and call it\"></a>Create a spy, alias it, and call it</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</div><div class=\"line\">  foo () &#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">const</span> spy = cy.spy(obj, <span class=\"string\">\"foo\"</span>).as(<span class=\"string\">\"foo\"</span>)</div><div class=\"line\">obj.foo(<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>)</div><div class=\"line\">expect(spy).to.be.called</div></pre></td></tr></table></figure>\n<p>The command above will display in the command log as:</p>\n<p><img width=\"454\" alt=\"screen shot of command log\" src=\"https://cloud.githubusercontent.com/assets/1157043/22437713/1d5f7be6-e6f7-11e6-9457-f35cbeaa5385.png\"></p>\n<p>When clicking on the <code>spy-1</code> event within the command log, the console outputs the following:</p>\n<p><img width=\"585\" alt=\"screen shot of console output\" src=\"https://cloud.githubusercontent.com/assets/1157043/22437712/1d5ed1e6-e6f7-11e6-9808-e61936b1d75f.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/guides/stubs-spies-clocks\" target=\"_blank\" rel=\"external\">Guide: Stubs, Spies and Clocks </a></li>\n<li><a href=\"https://github.com/cypress-io/cypress-example-recipes#controlling-behavior-with-spies-stubs-and-clocks\" target=\"_blank\" rel=\"external\">Recipe: Controlling Behavior with Spies, Stubs, and Clocks</a></li>\n<li><a href=\"https://on.cypress.io/api/stub\" target=\"_blank\" rel=\"external\">stub</a></li>\n<li><a href=\"https://on.cypress.io/api/clock\" target=\"_blank\" rel=\"external\">clock</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Wrap a method in a spy in order to record calls to the functions and what arguments the function was called with.</p>\n<p><code>cy.spy</code> returns a <a href=\"http://sinonjs.org/docs/#spies\">Sinon.js spy</a>. All <a href=\"http://sinonjs.org/docs/#spies-api\">methods</a> found on Sinon.JS spies are supported. <code>cy.spy</code> creates spies in a <a href=\"http://sinonjs.org/docs/#sandbox\">sandbox</a>, so all spies created are automatically reset/restored between tests without you having to explicitly reset/restore them.</p>\n<p>The main difference between <code>cy.spy</code> and <a href=\"https://on.cypress.io/api/stub\"><code>cy.stub</code></a> is that <code>cy.spy</code> does not replace the method, it only wraps it. So, while invocations are recorded, the original method is still called. This can be very useful when testing methods on native browser objects. You can verify a method is being called by your test and still have the original method action invoked.</p>\n<p>Cypress has also built-in <a href=\"https://github.com/domenic/sinon-chai\">sinon-chai</a> support, so any <a href=\"https://github.com/domenic/sinon-chai#assertions\">assertions</a> supported by <code>sinon-chai</code> can be used without any configuration.</p>\n<p>Unlike most Cypress commands, <code>cy.spy</code> is <em>synchronous</em> and returns a value (the spy) instead of a Promise-like chain-able object.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the spy</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-spy-object-“method”\"><a href=\"#cy-spy-object-“method”\" class=\"headerlink\" title=\"cy.spy( object, “method” )\"></a><a href=\"#section-usage\">cy.spy( <em>object</em>, <em>“method”</em> )</a></h1><p>Wraps the <code>method</code> on the <code>object</code> with a spy and returns the spy. See the <a href=\"http://sinonjs.org/docs/#spies\">sinon.js spy docs</a> for <a href=\"http://sinonjs.org/docs/#spies-api\">methods</a> on the spy.</p>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Wrap-a-method-with-a-spy\"><a href=\"#Wrap-a-method-with-a-spy\" class=\"headerlink\" title=\"Wrap a method with a spy\"></a>Wrap a method with a spy</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// assume App.start calls util.addListeners</span></div><div class=\"line\">cy.spy(util, <span class=\"string\">\"addListeners\"</span>)</div><div class=\"line\">App.start()</div><div class=\"line\">expect(util.addListeners).to.be.called</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Example-Recipe\"><a href=\"#Example-Recipe\" class=\"headerlink\" title=\"Example Recipe\"></a>Example Recipe</h2><p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/spy_stub_clock_spec.js\">Check out our example recipe testing spying, stubbing and time</a>“,<br>  “title”: “Using cy.spy”<br>}<br>[/block]</p>\n<hr>\n<h2 id=\"Alias-a-spy\"><a href=\"#Alias-a-spy\" class=\"headerlink\" title=\"Alias a spy\"></a>Alias a spy</h2><p>Adding an alias using <a href=\"https://on.cypress.io/api/as\"><code>cy.as</code></a> to spies makes them easier to identify in error messages and Cypress’s command log.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</div><div class=\"line\">  foo () &#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">const</span> spy = cy.spy(obj, <span class=\"string\">\"foo\"</span>).as(<span class=\"string\">\"anyArgs\"</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> withFoo = spy.withArgs(<span class=\"string\">\"foo\"</span>).as(<span class=\"string\">\"withFoo\"</span>)</div><div class=\"line\">obj.foo()</div><div class=\"line\">expect(spy).to.be.called</div><div class=\"line\">expect(withFoo).to.be.called <span class=\"comment\">// purposefully failing assertion</span></div></pre></td></tr></table></figure>\n<p>You will see the following in the command log:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1157043/22437291/805bd0d4-e6f5-11e6-99c5-bded81b9c42b.png\" alt=\"spies with aliases\"></p>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Create-a-spy-alias-it-and-call-it\"><a href=\"#Create-a-spy-alias-it-and-call-it\" class=\"headerlink\" title=\"Create a spy, alias it, and call it\"></a>Create a spy, alias it, and call it</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</div><div class=\"line\">  foo () &#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">const</span> spy = cy.spy(obj, <span class=\"string\">\"foo\"</span>).as(<span class=\"string\">\"foo\"</span>)</div><div class=\"line\">obj.foo(<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>)</div><div class=\"line\">expect(spy).to.be.called</div></pre></td></tr></table></figure>\n<p>The command above will display in the command log as:</p>\n<p><img width=\"454\" alt=\"screen shot of command log\" src=\"https://cloud.githubusercontent.com/assets/1157043/22437713/1d5f7be6-e6f7-11e6-9457-f35cbeaa5385.png\"></p>\n<p>When clicking on the <code>spy-1</code> event within the command log, the console outputs the following:</p>\n<p><img width=\"585\" alt=\"screen shot of console output\" src=\"https://cloud.githubusercontent.com/assets/1157043/22437712/1d5ed1e6-e6f7-11e6-9808-e61936b1d75f.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/guides/stubs-spies-clocks\">Guide: Stubs, Spies and Clocks </a></li>\n<li><a href=\"https://github.com/cypress-io/cypress-example-recipes#controlling-behavior-with-spies-stubs-and-clocks\">Recipe: Controlling Behavior with Spies, Stubs, and Clocks</a></li>\n<li><a href=\"https://on.cypress.io/api/stub\">stub</a></li>\n<li><a href=\"https://on.cypress.io/api/clock\">clock</a></li>\n</ul>\n"},{"title":"title","_content":"\nGet the title of the document.\n\n| | |\n|--- | --- |\n| **Returns** | the `document` title as a string |\n| **Timeout** | `cy.title` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.title()](#section-usage)\n\nGet the title of the document.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.click`.\n\n**cy.title( *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Assert that the document's title contains \"New User\"\n\n```javascript\ncy.title().should(\"contain\", \"New User\")\n```\n\n***\n\n# Command Log\n\n## Assert that the document's title contains \"New User\"\n\n```javascript\ncy.title().should(\"contain\", \"New User\")\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"577\" alt=\"screen shot 2015-11-29 at 2 12 54 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459376/587ae9b8-96a3-11e5-86b4-ce7ba00ccda5.png\">\n\nWhen clicking on `title` within the command log, the console outputs the following:\n\n<img width=\"437\" alt=\"screen shot 2015-11-29 at 2 13 06 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459377/5b8110e2-96a3-11e5-97e6-fbeb80f83277.png\">\n\n***\n\n# Related\n\n- [document](https://on.cypress.io/api/document)","source":"api/commands/title.md","raw":"title: title\n---\n\nGet the title of the document.\n\n| | |\n|--- | --- |\n| **Returns** | the `document` title as a string |\n| **Timeout** | `cy.title` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.title()](#section-usage)\n\nGet the title of the document.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.click`.\n\n**cy.title( *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Assert that the document's title contains \"New User\"\n\n```javascript\ncy.title().should(\"contain\", \"New User\")\n```\n\n***\n\n# Command Log\n\n## Assert that the document's title contains \"New User\"\n\n```javascript\ncy.title().should(\"contain\", \"New User\")\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"577\" alt=\"screen shot 2015-11-29 at 2 12 54 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459376/587ae9b8-96a3-11e5-86b4-ce7ba00ccda5.png\">\n\nWhen clicking on `title` within the command log, the console outputs the following:\n\n<img width=\"437\" alt=\"screen shot 2015-11-29 at 2 13 06 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459377/5b8110e2-96a3-11e5-97e6-fbeb80f83277.png\">\n\n***\n\n# Related\n\n- [document](https://on.cypress.io/api/document)","date":"2017-04-19T18:51:19.000Z","updated":"2017-04-19T18:51:19.000Z","path":"api/commands/title.html","comments":1,"layout":"page","_id":"cj1pc41xd0003pgg89zdhtiq5","content":"<p>Get the title of the document.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the <code>document</code> title as a string</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.title</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-title\"><a href=\"#cy-title\" class=\"headerlink\" title=\"cy.title()\"></a><a href=\"#section-usage\">cy.title()</a></h1><p>Get the title of the document.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.click</code>.</p>\n<p><strong>cy.title( <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Assert-that-the-document’s-title-contains-“New-User”\"><a href=\"#Assert-that-the-document’s-title-contains-“New-User”\" class=\"headerlink\" title=\"Assert that the document’s title contains “New User”\"></a>Assert that the document’s title contains “New User”</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.title().should(<span class=\"string\">\"contain\"</span>, <span class=\"string\">\"New User\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Assert-that-the-document’s-title-contains-“New-User”-1\"><a href=\"#Assert-that-the-document’s-title-contains-“New-User”-1\" class=\"headerlink\" title=\"Assert that the document’s title contains “New User”\"></a>Assert that the document’s title contains “New User”</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.title().should(<span class=\"string\">\"contain\"</span>, <span class=\"string\">\"New User\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"577\" alt=\"screen shot 2015-11-29 at 2 12 54 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459376/587ae9b8-96a3-11e5-86b4-ce7ba00ccda5.png\"></p>\n<p>When clicking on <code>title</code> within the command log, the console outputs the following:</p>\n<p><img width=\"437\" alt=\"screen shot 2015-11-29 at 2 13 06 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459377/5b8110e2-96a3-11e5-97e6-fbeb80f83277.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/document\" target=\"_blank\" rel=\"external\">document</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Get the title of the document.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the <code>document</code> title as a string</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.title</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-title\"><a href=\"#cy-title\" class=\"headerlink\" title=\"cy.title()\"></a><a href=\"#section-usage\">cy.title()</a></h1><p>Get the title of the document.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.click</code>.</p>\n<p><strong>cy.title( <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Assert-that-the-document’s-title-contains-“New-User”\"><a href=\"#Assert-that-the-document’s-title-contains-“New-User”\" class=\"headerlink\" title=\"Assert that the document’s title contains “New User”\"></a>Assert that the document’s title contains “New User”</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.title().should(<span class=\"string\">\"contain\"</span>, <span class=\"string\">\"New User\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Assert-that-the-document’s-title-contains-“New-User”-1\"><a href=\"#Assert-that-the-document’s-title-contains-“New-User”-1\" class=\"headerlink\" title=\"Assert that the document’s title contains “New User”\"></a>Assert that the document’s title contains “New User”</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.title().should(<span class=\"string\">\"contain\"</span>, <span class=\"string\">\"New User\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"577\" alt=\"screen shot 2015-11-29 at 2 12 54 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459376/587ae9b8-96a3-11e5-86b4-ce7ba00ccda5.png\"></p>\n<p>When clicking on <code>title</code> within the command log, the console outputs the following:</p>\n<p><img width=\"437\" alt=\"screen shot 2015-11-29 at 2 13 06 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459377/5b8110e2-96a3-11e5-97e6-fbeb80f83277.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/document\">document</a></li>\n</ul>\n"},{"title":"tick","_content":"\n`cy.tick` is used to move time after overriding native time functions with [`cy.clock`](https://on.cypress.io/api/clock).\n\nIt moves the clock the specified number of `milliseconds`. Any timers within the affected range of time will be called.\n\n[`cy.clock`](https://on.cypress.io/api/clock) must be called before `cy.tick` in order to override native time functions first.\n\n| | |\n|--- | --- |\n| **Returns** | the `clock` object. See [clock API](https://on.cypress.io/api/clock#section-clock-api) |\n\n***\n\n# [cy.tick( *milliseconds* )](#section-usage)\n\nMoves the clock the specified number of `milliseconds`. Any timers within the affected range of time will be called.\n\n***\n\n# Usage\n\n## Create a clock and move time to trigger a setTimeout\n\n```javascript\n// app code loaded by index.html\nwindow.foo = () => {\n  setTimeout(() => {\n    document.getElementById('#foo').textContent = 'Foo'\n  }, 500)\n}\n\n// test\ncy\n  .clock()\n  .visit(\"/index.html\")\n  .window().invoke(\"foo\")\n  .tick(500)\n  .get(\"#foo\")\n    .should(\"have.text\", \"Foo\")\n```\n\n***\n\n## Example Recipe\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe testing spying, stubbing and time](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/spy_stub_clock_spec.js)\",\n  \"title\": \"Using cy.clock and cy.tick\"\n}\n[/block]\n\n***\n\n# Command Log\n\n## Create a clock and tick it 1 second\n\n```javascript\ncy\n  .clock()\n  .tick(1000)\n```\n\nThe command above will display in the command log as:\n\n<img width=\"448\" alt=\"screen shot of command log\" src=\"https://cloud.githubusercontent.com/assets/1157043/22437918/059f60a6-e6f8-11e6-903d-d868e044615d.png\">\n\nWhen clicking on the `tick` command within the command log, the console outputs the following:\n\n<img width=\"1059\" alt=\"screen shot of console output\" src=\"https://cloud.githubusercontent.com/assets/1157043/22438009/504fecd8-e6f8-11e6-8ef1-4d7cb0b5594c.png\">\n\n***\n\n# Related\n\n- [Guide: Stubs, Spies and Clocks ](https://on.cypress.io/guides/stubs-spies-clocks)\n- [Recipe: Controlling Behavior with Spies, Stubs, and Clocks](https://github.com/cypress-io/cypress-example-recipes#controlling-behavior-with-spies-stubs-and-clocks)\n- [clock](https://on.cypress.io/api/clock)\n- [stub](https://on.cypress.io/api/stub)\n- [spy](https://on.cypress.io/api/spy)\n","source":"api/commands/tick.md","raw":"title: tick\n---\n\n`cy.tick` is used to move time after overriding native time functions with [`cy.clock`](https://on.cypress.io/api/clock).\n\nIt moves the clock the specified number of `milliseconds`. Any timers within the affected range of time will be called.\n\n[`cy.clock`](https://on.cypress.io/api/clock) must be called before `cy.tick` in order to override native time functions first.\n\n| | |\n|--- | --- |\n| **Returns** | the `clock` object. See [clock API](https://on.cypress.io/api/clock#section-clock-api) |\n\n***\n\n# [cy.tick( *milliseconds* )](#section-usage)\n\nMoves the clock the specified number of `milliseconds`. Any timers within the affected range of time will be called.\n\n***\n\n# Usage\n\n## Create a clock and move time to trigger a setTimeout\n\n```javascript\n// app code loaded by index.html\nwindow.foo = () => {\n  setTimeout(() => {\n    document.getElementById('#foo').textContent = 'Foo'\n  }, 500)\n}\n\n// test\ncy\n  .clock()\n  .visit(\"/index.html\")\n  .window().invoke(\"foo\")\n  .tick(500)\n  .get(\"#foo\")\n    .should(\"have.text\", \"Foo\")\n```\n\n***\n\n## Example Recipe\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe testing spying, stubbing and time](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/spy_stub_clock_spec.js)\",\n  \"title\": \"Using cy.clock and cy.tick\"\n}\n[/block]\n\n***\n\n# Command Log\n\n## Create a clock and tick it 1 second\n\n```javascript\ncy\n  .clock()\n  .tick(1000)\n```\n\nThe command above will display in the command log as:\n\n<img width=\"448\" alt=\"screen shot of command log\" src=\"https://cloud.githubusercontent.com/assets/1157043/22437918/059f60a6-e6f8-11e6-903d-d868e044615d.png\">\n\nWhen clicking on the `tick` command within the command log, the console outputs the following:\n\n<img width=\"1059\" alt=\"screen shot of console output\" src=\"https://cloud.githubusercontent.com/assets/1157043/22438009/504fecd8-e6f8-11e6-8ef1-4d7cb0b5594c.png\">\n\n***\n\n# Related\n\n- [Guide: Stubs, Spies and Clocks ](https://on.cypress.io/guides/stubs-spies-clocks)\n- [Recipe: Controlling Behavior with Spies, Stubs, and Clocks](https://github.com/cypress-io/cypress-example-recipes#controlling-behavior-with-spies-stubs-and-clocks)\n- [clock](https://on.cypress.io/api/clock)\n- [stub](https://on.cypress.io/api/stub)\n- [spy](https://on.cypress.io/api/spy)\n","date":"2017-04-19T18:51:19.000Z","updated":"2017-04-19T18:51:19.000Z","path":"api/commands/tick.html","comments":1,"layout":"page","_id":"cj1pc41xe0004pgg8dizbz6yh","content":"<p><code>cy.tick</code> is used to move time after overriding native time functions with <a href=\"https://on.cypress.io/api/clock\" target=\"_blank\" rel=\"external\"><code>cy.clock</code></a>.</p>\n<p>It moves the clock the specified number of <code>milliseconds</code>. Any timers within the affected range of time will be called.</p>\n<p><a href=\"https://on.cypress.io/api/clock\" target=\"_blank\" rel=\"external\"><code>cy.clock</code></a> must be called before <code>cy.tick</code> in order to override native time functions first.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the <code>clock</code> object. See <a href=\"https://on.cypress.io/api/clock#section-clock-api\" target=\"_blank\" rel=\"external\">clock API</a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-tick-milliseconds\"><a href=\"#cy-tick-milliseconds\" class=\"headerlink\" title=\"cy.tick( milliseconds )\"></a><a href=\"#section-usage\">cy.tick( <em>milliseconds</em> )</a></h1><p>Moves the clock the specified number of <code>milliseconds</code>. Any timers within the affected range of time will be called.</p>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Create-a-clock-and-move-time-to-trigger-a-setTimeout\"><a href=\"#Create-a-clock-and-move-time-to-trigger-a-setTimeout\" class=\"headerlink\" title=\"Create a clock and move time to trigger a setTimeout\"></a>Create a clock and move time to trigger a setTimeout</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// app code loaded by index.html</span></div><div class=\"line\"><span class=\"built_in\">window</span>.foo = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'#foo'</span>).textContent = <span class=\"string\">'Foo'</span></div><div class=\"line\">  &#125;, <span class=\"number\">500</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// test</span></div><div class=\"line\">cy</div><div class=\"line\">  .clock()</div><div class=\"line\">  .visit(<span class=\"string\">\"/index.html\"</span>)</div><div class=\"line\">  .window().invoke(<span class=\"string\">\"foo\"</span>)</div><div class=\"line\">  .tick(<span class=\"number\">500</span>)</div><div class=\"line\">  .get(<span class=\"string\">\"#foo\"</span>)</div><div class=\"line\">    .should(<span class=\"string\">\"have.text\"</span>, <span class=\"string\">\"Foo\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Example-Recipe\"><a href=\"#Example-Recipe\" class=\"headerlink\" title=\"Example Recipe\"></a>Example Recipe</h2><p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/spy_stub_clock_spec.js\" target=\"_blank\" rel=\"external\">Check out our example recipe testing spying, stubbing and time</a>“,<br>  “title”: “Using cy.clock and cy.tick”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Create-a-clock-and-tick-it-1-second\"><a href=\"#Create-a-clock-and-tick-it-1-second\" class=\"headerlink\" title=\"Create a clock and tick it 1 second\"></a>Create a clock and tick it 1 second</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .clock()</div><div class=\"line\">  .tick(<span class=\"number\">1000</span>)</div></pre></td></tr></table></figure>\n<p>The command above will display in the command log as:</p>\n<p><img width=\"448\" alt=\"screen shot of command log\" src=\"https://cloud.githubusercontent.com/assets/1157043/22437918/059f60a6-e6f8-11e6-903d-d868e044615d.png\"></p>\n<p>When clicking on the <code>tick</code> command within the command log, the console outputs the following:</p>\n<p><img width=\"1059\" alt=\"screen shot of console output\" src=\"https://cloud.githubusercontent.com/assets/1157043/22438009/504fecd8-e6f8-11e6-8ef1-4d7cb0b5594c.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/guides/stubs-spies-clocks\" target=\"_blank\" rel=\"external\">Guide: Stubs, Spies and Clocks </a></li>\n<li><a href=\"https://github.com/cypress-io/cypress-example-recipes#controlling-behavior-with-spies-stubs-and-clocks\" target=\"_blank\" rel=\"external\">Recipe: Controlling Behavior with Spies, Stubs, and Clocks</a></li>\n<li><a href=\"https://on.cypress.io/api/clock\" target=\"_blank\" rel=\"external\">clock</a></li>\n<li><a href=\"https://on.cypress.io/api/stub\" target=\"_blank\" rel=\"external\">stub</a></li>\n<li><a href=\"https://on.cypress.io/api/spy\" target=\"_blank\" rel=\"external\">spy</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p><code>cy.tick</code> is used to move time after overriding native time functions with <a href=\"https://on.cypress.io/api/clock\"><code>cy.clock</code></a>.</p>\n<p>It moves the clock the specified number of <code>milliseconds</code>. Any timers within the affected range of time will be called.</p>\n<p><a href=\"https://on.cypress.io/api/clock\"><code>cy.clock</code></a> must be called before <code>cy.tick</code> in order to override native time functions first.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the <code>clock</code> object. See <a href=\"https://on.cypress.io/api/clock#section-clock-api\">clock API</a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-tick-milliseconds\"><a href=\"#cy-tick-milliseconds\" class=\"headerlink\" title=\"cy.tick( milliseconds )\"></a><a href=\"#section-usage\">cy.tick( <em>milliseconds</em> )</a></h1><p>Moves the clock the specified number of <code>milliseconds</code>. Any timers within the affected range of time will be called.</p>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Create-a-clock-and-move-time-to-trigger-a-setTimeout\"><a href=\"#Create-a-clock-and-move-time-to-trigger-a-setTimeout\" class=\"headerlink\" title=\"Create a clock and move time to trigger a setTimeout\"></a>Create a clock and move time to trigger a setTimeout</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// app code loaded by index.html</span></div><div class=\"line\"><span class=\"built_in\">window</span>.foo = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'#foo'</span>).textContent = <span class=\"string\">'Foo'</span></div><div class=\"line\">  &#125;, <span class=\"number\">500</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// test</span></div><div class=\"line\">cy</div><div class=\"line\">  .clock()</div><div class=\"line\">  .visit(<span class=\"string\">\"/index.html\"</span>)</div><div class=\"line\">  .window().invoke(<span class=\"string\">\"foo\"</span>)</div><div class=\"line\">  .tick(<span class=\"number\">500</span>)</div><div class=\"line\">  .get(<span class=\"string\">\"#foo\"</span>)</div><div class=\"line\">    .should(<span class=\"string\">\"have.text\"</span>, <span class=\"string\">\"Foo\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Example-Recipe\"><a href=\"#Example-Recipe\" class=\"headerlink\" title=\"Example Recipe\"></a>Example Recipe</h2><p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/spy_stub_clock_spec.js\">Check out our example recipe testing spying, stubbing and time</a>“,<br>  “title”: “Using cy.clock and cy.tick”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Create-a-clock-and-tick-it-1-second\"><a href=\"#Create-a-clock-and-tick-it-1-second\" class=\"headerlink\" title=\"Create a clock and tick it 1 second\"></a>Create a clock and tick it 1 second</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .clock()</div><div class=\"line\">  .tick(<span class=\"number\">1000</span>)</div></pre></td></tr></table></figure>\n<p>The command above will display in the command log as:</p>\n<p><img width=\"448\" alt=\"screen shot of command log\" src=\"https://cloud.githubusercontent.com/assets/1157043/22437918/059f60a6-e6f8-11e6-903d-d868e044615d.png\"></p>\n<p>When clicking on the <code>tick</code> command within the command log, the console outputs the following:</p>\n<p><img width=\"1059\" alt=\"screen shot of console output\" src=\"https://cloud.githubusercontent.com/assets/1157043/22438009/504fecd8-e6f8-11e6-8ef1-4d7cb0b5594c.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/guides/stubs-spies-clocks\">Guide: Stubs, Spies and Clocks </a></li>\n<li><a href=\"https://github.com/cypress-io/cypress-example-recipes#controlling-behavior-with-spies-stubs-and-clocks\">Recipe: Controlling Behavior with Spies, Stubs, and Clocks</a></li>\n<li><a href=\"https://on.cypress.io/api/clock\">clock</a></li>\n<li><a href=\"https://on.cypress.io/api/stub\">stub</a></li>\n<li><a href=\"https://on.cypress.io/api/spy\">spy</a></li>\n</ul>\n"},{"title":"then","_content":"\n`cy.then()` will yield you the current subject as the first argument.\n\n`cy.then()` is modeled identically to the way Promises work in JavaScript.  Whatever is returned from the callback function becomes the new subject, and will flow into the next command, with the exception of `null` and `undefined`.\n\nWhen `null` or `undefined` is returned by the callback function, the subject will not be modified and will instead carry over to the next command.\n\nJust like Promises, you can return any compatible \"thenable\" (anything that has a `.then()` interface) and Cypress will wait for that to resolve before continuing forward through the chain of commands.\n\n| | |\n|--- | --- |\n| **Returns** | the return of the callback function |\n| **Timeout** | `cy.then` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) or the duration of the `timeout` specified in the command's [options](#section-options). |\n\n***\n\n# [cy.then( *function* )](#section-usage)\n\nYield the current subject as the first argument.\n\n***\n\n# Usage\n\n## The element `input` is yielded\n\n```html\n<form id=\"todos\">\n  <input type=\"text\" class=\"addTodo\" />\n</form>\n```\n\n```javascript\ncy.get(\"form\").find(\"input\").then(function($input){\n  // work with $input subject here\n  // we can potentially use it within an assertion\n  // or just call some methods on it and return a new subject\n})\n```\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.then`.\n\n**[cy.click( *options*,  *function* )](#options-usage)**\n\nOption | Default | Notes\n--- | --- | ---\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry the click\n\n***\n\n# Usage\n\n## Assert explicitly about the subject `<li>`'s\n\n```html\n<div id=\"todos\">\n  <li>Walk the dog</li>\n  <li>Feed the cat</li>\n  <li>Write JavaScript</li>\n</div>\n```\n\n```javascript\ncy.get(\"#todos li\").then(function($lis){\n  expect($lis).to.have.length(3)\n  expect($lis.eq(0)).to.contain(\"Walk the dog\")\n  expect($lis.eq(1)).to.contain(\"Feed the cat\")\n  expect($lis.eq(2)).to.contain(\"Write JavaScript\")\n})\n```\n\nNormally you'd use implicit subject assertions via [should](https://on.cypress.io/api/should) or [and](https://on.cypress.io/api/and), but it's sometimes it's more convenient to write explicit assertions about a given subject.\n\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"Any errors raised by failed assertions will immediately bubble up and cause the test to fail.\"\n}\n[/block]\n\n***\n\n## The subject is changed by returning `{foo: 'bar'}`\n\n```javascript\ncy.then(function(){\n  return {foo: \"bar\"}\n}).then(function(obj){\n  // subject is now the obj {foo: \"bar\"}\n  expect(obj).to.deep.eq({foo: \"bar\"}) // true\n})\n```\n\n***\n\n## Cypress waits for the Promise to resolve before continuing\n\n```javascript\n// if using Q\ncy.get(\"button\").click().then(function($button){\n  var p = Q.defer()\n\n  setTimeout(function(){\n    p.resolve()\n  }, 5000)\n\n  return p.promise\n})\n\n// if using bluebird\ncy.get(\"button\").click().then(function($button){\n  return Promise.delay(5000)\n})\n\n// if using jQuery deferred's\ncy.get(\"button\").click().then(function($button){\n  var df = $.Deferred()\n\n  setTimeout(function(){\n    df.resolve()\n  }, 5000)\n\n  return df\n})\n```\n\n***\n\n## Returning `null` or `undefined` will not modify the subject\n\n```javascript\ncy\n  .get(\"form\").then(function($form){\n    console.log(\"form is:\", $form)\n    // undefined is returned here, therefore\n    // the $form subject will automatically\n    // carry over and allow for continued chaining\n  }).find(\"input\").then(function($input){\n    // we have our real $input element here since\n    // our form element carried over and we called\n    // .find(\"input\") on it\n  })\n```\n\n***\n\n# Options Usage\n\n```javascript\ncy.then({timeout: 7000}, function(){\n  // code here\n})\n```\n\n***\n\n# Related\n\n- [its](https://on.cypress.io/api/its)\n- [invoke](https://on.cypress.io/api/invoke)\n- [Issuing Commands](https://on.cypress.io/guides/issuing-commands)\n","source":"api/commands/then.md","raw":"title: then\n---\n\n`cy.then()` will yield you the current subject as the first argument.\n\n`cy.then()` is modeled identically to the way Promises work in JavaScript.  Whatever is returned from the callback function becomes the new subject, and will flow into the next command, with the exception of `null` and `undefined`.\n\nWhen `null` or `undefined` is returned by the callback function, the subject will not be modified and will instead carry over to the next command.\n\nJust like Promises, you can return any compatible \"thenable\" (anything that has a `.then()` interface) and Cypress will wait for that to resolve before continuing forward through the chain of commands.\n\n| | |\n|--- | --- |\n| **Returns** | the return of the callback function |\n| **Timeout** | `cy.then` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) or the duration of the `timeout` specified in the command's [options](#section-options). |\n\n***\n\n# [cy.then( *function* )](#section-usage)\n\nYield the current subject as the first argument.\n\n***\n\n# Usage\n\n## The element `input` is yielded\n\n```html\n<form id=\"todos\">\n  <input type=\"text\" class=\"addTodo\" />\n</form>\n```\n\n```javascript\ncy.get(\"form\").find(\"input\").then(function($input){\n  // work with $input subject here\n  // we can potentially use it within an assertion\n  // or just call some methods on it and return a new subject\n})\n```\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.then`.\n\n**[cy.click( *options*,  *function* )](#options-usage)**\n\nOption | Default | Notes\n--- | --- | ---\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry the click\n\n***\n\n# Usage\n\n## Assert explicitly about the subject `<li>`'s\n\n```html\n<div id=\"todos\">\n  <li>Walk the dog</li>\n  <li>Feed the cat</li>\n  <li>Write JavaScript</li>\n</div>\n```\n\n```javascript\ncy.get(\"#todos li\").then(function($lis){\n  expect($lis).to.have.length(3)\n  expect($lis.eq(0)).to.contain(\"Walk the dog\")\n  expect($lis.eq(1)).to.contain(\"Feed the cat\")\n  expect($lis.eq(2)).to.contain(\"Write JavaScript\")\n})\n```\n\nNormally you'd use implicit subject assertions via [should](https://on.cypress.io/api/should) or [and](https://on.cypress.io/api/and), but it's sometimes it's more convenient to write explicit assertions about a given subject.\n\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"Any errors raised by failed assertions will immediately bubble up and cause the test to fail.\"\n}\n[/block]\n\n***\n\n## The subject is changed by returning `{foo: 'bar'}`\n\n```javascript\ncy.then(function(){\n  return {foo: \"bar\"}\n}).then(function(obj){\n  // subject is now the obj {foo: \"bar\"}\n  expect(obj).to.deep.eq({foo: \"bar\"}) // true\n})\n```\n\n***\n\n## Cypress waits for the Promise to resolve before continuing\n\n```javascript\n// if using Q\ncy.get(\"button\").click().then(function($button){\n  var p = Q.defer()\n\n  setTimeout(function(){\n    p.resolve()\n  }, 5000)\n\n  return p.promise\n})\n\n// if using bluebird\ncy.get(\"button\").click().then(function($button){\n  return Promise.delay(5000)\n})\n\n// if using jQuery deferred's\ncy.get(\"button\").click().then(function($button){\n  var df = $.Deferred()\n\n  setTimeout(function(){\n    df.resolve()\n  }, 5000)\n\n  return df\n})\n```\n\n***\n\n## Returning `null` or `undefined` will not modify the subject\n\n```javascript\ncy\n  .get(\"form\").then(function($form){\n    console.log(\"form is:\", $form)\n    // undefined is returned here, therefore\n    // the $form subject will automatically\n    // carry over and allow for continued chaining\n  }).find(\"input\").then(function($input){\n    // we have our real $input element here since\n    // our form element carried over and we called\n    // .find(\"input\") on it\n  })\n```\n\n***\n\n# Options Usage\n\n```javascript\ncy.then({timeout: 7000}, function(){\n  // code here\n})\n```\n\n***\n\n# Related\n\n- [its](https://on.cypress.io/api/its)\n- [invoke](https://on.cypress.io/api/invoke)\n- [Issuing Commands](https://on.cypress.io/guides/issuing-commands)\n","date":"2017-04-19T18:51:19.000Z","updated":"2017-04-19T18:51:19.000Z","path":"api/commands/then.html","comments":1,"layout":"page","_id":"cj1pc41xe0005pgg855tfxtn5","content":"<p><code>cy.then()</code> will yield you the current subject as the first argument.</p>\n<p><code>cy.then()</code> is modeled identically to the way Promises work in JavaScript.  Whatever is returned from the callback function becomes the new subject, and will flow into the next command, with the exception of <code>null</code> and <code>undefined</code>.</p>\n<p>When <code>null</code> or <code>undefined</code> is returned by the callback function, the subject will not be modified and will instead carry over to the next command.</p>\n<p>Just like Promises, you can return any compatible “thenable” (anything that has a <code>.then()</code> interface) and Cypress will wait for that to resolve before continuing forward through the chain of commands.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the return of the callback function</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.then</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a> or the duration of the <code>timeout</code> specified in the command’s <a href=\"#section-options\">options</a>.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-then-function\"><a href=\"#cy-then-function\" class=\"headerlink\" title=\"cy.then( function )\"></a><a href=\"#section-usage\">cy.then( <em>function</em> )</a></h1><p>Yield the current subject as the first argument.</p>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"The-element-input-is-yielded\"><a href=\"#The-element-input-is-yielded\" class=\"headerlink\" title=\"The element input is yielded\"></a>The element <code>input</code> is yielded</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"todos\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"addTodo\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"form\"</span>).find(<span class=\"string\">\"input\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$input</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// work with $input subject here</span></div><div class=\"line\">  <span class=\"comment\">// we can potentially use it within an assertion</span></div><div class=\"line\">  <span class=\"comment\">// or just call some methods on it and return a new subject</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.then</code>.</p>\n<p><strong><a href=\"#options-usage\">cy.click( <em>options</em>,  <em>function</em> )</a></strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry the click</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage-1\"><a href=\"#Usage-1\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Assert-explicitly-about-the-subject-lt-li-gt-‘s\"><a href=\"#Assert-explicitly-about-the-subject-lt-li-gt-‘s\" class=\"headerlink\" title=\"Assert explicitly about the subject &lt;li&gt;‘s\"></a>Assert explicitly about the subject <code>&lt;li&gt;</code>‘s</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"todos\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Walk the dog<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Feed the cat<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Write JavaScript<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"#todos li\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$lis</span>)</span>&#123;</div><div class=\"line\">  expect($lis).to.have.length(<span class=\"number\">3</span>)</div><div class=\"line\">  expect($lis.eq(<span class=\"number\">0</span>)).to.contain(<span class=\"string\">\"Walk the dog\"</span>)</div><div class=\"line\">  expect($lis.eq(<span class=\"number\">1</span>)).to.contain(<span class=\"string\">\"Feed the cat\"</span>)</div><div class=\"line\">  expect($lis.eq(<span class=\"number\">2</span>)).to.contain(<span class=\"string\">\"Write JavaScript\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Normally you’d use implicit subject assertions via <a href=\"https://on.cypress.io/api/should\" target=\"_blank\" rel=\"external\">should</a> or <a href=\"https://on.cypress.io/api/and\" target=\"_blank\" rel=\"external\">and</a>, but it’s sometimes it’s more convenient to write explicit assertions about a given subject.</p>\n<p>[block:callout]<br>{<br>  “type”: “warning”,<br>  “body”: “Any errors raised by failed assertions will immediately bubble up and cause the test to fail.”<br>}<br>[/block]</p>\n<hr>\n<h2 id=\"The-subject-is-changed-by-returning-foo-39-bar-39\"><a href=\"#The-subject-is-changed-by-returning-foo-39-bar-39\" class=\"headerlink\" title=\"The subject is changed by returning {foo: &#39;bar&#39;}\"></a>The subject is changed by returning <code>{foo: &#39;bar&#39;}</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;<span class=\"attr\">foo</span>: <span class=\"string\">\"bar\"</span>&#125;</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// subject is now the obj &#123;foo: \"bar\"&#125;</span></div><div class=\"line\">  expect(obj).to.deep.eq(&#123;<span class=\"attr\">foo</span>: <span class=\"string\">\"bar\"</span>&#125;) <span class=\"comment\">// true</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Cypress-waits-for-the-Promise-to-resolve-before-continuing\"><a href=\"#Cypress-waits-for-the-Promise-to-resolve-before-continuing\" class=\"headerlink\" title=\"Cypress waits for the Promise to resolve before continuing\"></a>Cypress waits for the Promise to resolve before continuing</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// if using Q</span></div><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).click().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$button</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> p = Q.defer()</div><div class=\"line\"></div><div class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    p.resolve()</div><div class=\"line\">  &#125;, <span class=\"number\">5000</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> p.promise</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// if using bluebird</span></div><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).click().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$button</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.delay(<span class=\"number\">5000</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// if using jQuery deferred's</span></div><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).click().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$button</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> df = $.Deferred()</div><div class=\"line\"></div><div class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    df.resolve()</div><div class=\"line\">  &#125;, <span class=\"number\">5000</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> df</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Returning-null-or-undefined-will-not-modify-the-subject\"><a href=\"#Returning-null-or-undefined-will-not-modify-the-subject\" class=\"headerlink\" title=\"Returning null or undefined will not modify the subject\"></a>Returning <code>null</code> or <code>undefined</code> will not modify the subject</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"form\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$form</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"form is:\"</span>, $form)</div><div class=\"line\">    <span class=\"comment\">// undefined is returned here, therefore</span></div><div class=\"line\">    <span class=\"comment\">// the $form subject will automatically</span></div><div class=\"line\">    <span class=\"comment\">// carry over and allow for continued chaining</span></div><div class=\"line\">  &#125;).find(<span class=\"string\">\"input\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$input</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// we have our real $input element here since</span></div><div class=\"line\">    <span class=\"comment\">// our form element carried over and we called</span></div><div class=\"line\">    <span class=\"comment\">// .find(\"input\") on it</span></div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Options-Usage\"><a href=\"#Options-Usage\" class=\"headerlink\" title=\"Options Usage\"></a>Options Usage</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.then(&#123;<span class=\"attr\">timeout</span>: <span class=\"number\">7000</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// code here</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/its\" target=\"_blank\" rel=\"external\">its</a></li>\n<li><a href=\"https://on.cypress.io/api/invoke\" target=\"_blank\" rel=\"external\">invoke</a></li>\n<li><a href=\"https://on.cypress.io/guides/issuing-commands\" target=\"_blank\" rel=\"external\">Issuing Commands</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p><code>cy.then()</code> will yield you the current subject as the first argument.</p>\n<p><code>cy.then()</code> is modeled identically to the way Promises work in JavaScript.  Whatever is returned from the callback function becomes the new subject, and will flow into the next command, with the exception of <code>null</code> and <code>undefined</code>.</p>\n<p>When <code>null</code> or <code>undefined</code> is returned by the callback function, the subject will not be modified and will instead carry over to the next command.</p>\n<p>Just like Promises, you can return any compatible “thenable” (anything that has a <code>.then()</code> interface) and Cypress will wait for that to resolve before continuing forward through the chain of commands.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the return of the callback function</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.then</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a> or the duration of the <code>timeout</code> specified in the command’s <a href=\"#section-options\">options</a>.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-then-function\"><a href=\"#cy-then-function\" class=\"headerlink\" title=\"cy.then( function )\"></a><a href=\"#section-usage\">cy.then( <em>function</em> )</a></h1><p>Yield the current subject as the first argument.</p>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"The-element-input-is-yielded\"><a href=\"#The-element-input-is-yielded\" class=\"headerlink\" title=\"The element input is yielded\"></a>The element <code>input</code> is yielded</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"todos\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"addTodo\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"form\"</span>).find(<span class=\"string\">\"input\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$input</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// work with $input subject here</span></div><div class=\"line\">  <span class=\"comment\">// we can potentially use it within an assertion</span></div><div class=\"line\">  <span class=\"comment\">// or just call some methods on it and return a new subject</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.then</code>.</p>\n<p><strong><a href=\"#options-usage\">cy.click( <em>options</em>,  <em>function</em> )</a></strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry the click</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage-1\"><a href=\"#Usage-1\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Assert-explicitly-about-the-subject-lt-li-gt-‘s\"><a href=\"#Assert-explicitly-about-the-subject-lt-li-gt-‘s\" class=\"headerlink\" title=\"Assert explicitly about the subject &lt;li&gt;‘s\"></a>Assert explicitly about the subject <code>&lt;li&gt;</code>‘s</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"todos\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Walk the dog<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Feed the cat<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Write JavaScript<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"#todos li\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$lis</span>)</span>&#123;</div><div class=\"line\">  expect($lis).to.have.length(<span class=\"number\">3</span>)</div><div class=\"line\">  expect($lis.eq(<span class=\"number\">0</span>)).to.contain(<span class=\"string\">\"Walk the dog\"</span>)</div><div class=\"line\">  expect($lis.eq(<span class=\"number\">1</span>)).to.contain(<span class=\"string\">\"Feed the cat\"</span>)</div><div class=\"line\">  expect($lis.eq(<span class=\"number\">2</span>)).to.contain(<span class=\"string\">\"Write JavaScript\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Normally you’d use implicit subject assertions via <a href=\"https://on.cypress.io/api/should\">should</a> or <a href=\"https://on.cypress.io/api/and\">and</a>, but it’s sometimes it’s more convenient to write explicit assertions about a given subject.</p>\n<p>[block:callout]<br>{<br>  “type”: “warning”,<br>  “body”: “Any errors raised by failed assertions will immediately bubble up and cause the test to fail.”<br>}<br>[/block]</p>\n<hr>\n<h2 id=\"The-subject-is-changed-by-returning-foo-39-bar-39\"><a href=\"#The-subject-is-changed-by-returning-foo-39-bar-39\" class=\"headerlink\" title=\"The subject is changed by returning {foo: &#39;bar&#39;}\"></a>The subject is changed by returning <code>{foo: &#39;bar&#39;}</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;<span class=\"attr\">foo</span>: <span class=\"string\">\"bar\"</span>&#125;</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// subject is now the obj &#123;foo: \"bar\"&#125;</span></div><div class=\"line\">  expect(obj).to.deep.eq(&#123;<span class=\"attr\">foo</span>: <span class=\"string\">\"bar\"</span>&#125;) <span class=\"comment\">// true</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Cypress-waits-for-the-Promise-to-resolve-before-continuing\"><a href=\"#Cypress-waits-for-the-Promise-to-resolve-before-continuing\" class=\"headerlink\" title=\"Cypress waits for the Promise to resolve before continuing\"></a>Cypress waits for the Promise to resolve before continuing</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// if using Q</span></div><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).click().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$button</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> p = Q.defer()</div><div class=\"line\"></div><div class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    p.resolve()</div><div class=\"line\">  &#125;, <span class=\"number\">5000</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> p.promise</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// if using bluebird</span></div><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).click().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$button</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.delay(<span class=\"number\">5000</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// if using jQuery deferred's</span></div><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).click().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$button</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> df = $.Deferred()</div><div class=\"line\"></div><div class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    df.resolve()</div><div class=\"line\">  &#125;, <span class=\"number\">5000</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> df</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Returning-null-or-undefined-will-not-modify-the-subject\"><a href=\"#Returning-null-or-undefined-will-not-modify-the-subject\" class=\"headerlink\" title=\"Returning null or undefined will not modify the subject\"></a>Returning <code>null</code> or <code>undefined</code> will not modify the subject</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"form\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$form</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"form is:\"</span>, $form)</div><div class=\"line\">    <span class=\"comment\">// undefined is returned here, therefore</span></div><div class=\"line\">    <span class=\"comment\">// the $form subject will automatically</span></div><div class=\"line\">    <span class=\"comment\">// carry over and allow for continued chaining</span></div><div class=\"line\">  &#125;).find(<span class=\"string\">\"input\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$input</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// we have our real $input element here since</span></div><div class=\"line\">    <span class=\"comment\">// our form element carried over and we called</span></div><div class=\"line\">    <span class=\"comment\">// .find(\"input\") on it</span></div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Options-Usage\"><a href=\"#Options-Usage\" class=\"headerlink\" title=\"Options Usage\"></a>Options Usage</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.then(&#123;<span class=\"attr\">timeout</span>: <span class=\"number\">7000</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// code here</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/its\">its</a></li>\n<li><a href=\"https://on.cypress.io/api/invoke\">invoke</a></li>\n<li><a href=\"https://on.cypress.io/guides/issuing-commands\">Issuing Commands</a></li>\n</ul>\n"},{"title":"submit","_content":"\nSubmits the DOM element from the previous command if it is a form. Submit can only be called on a single form.\n\n**The following events are fired during submit:** `submit`\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.submit` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts). |\n\n***\n\n# [cy.submit()](#section-usage)\n\nSubmit a form.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.submit`.\n\n**cy.submit( *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Submit a form\n\n```html\n<form id=\"contact\">\n  <input type=\"text\" name=\"message\">\n  <button type=\"submit\">Send</button>\n</form>\n```\n\n```javascript\n// submits the form and performs all default actions\n// returns <form> for further chaining\ncy.get(\"#contact\").submit()\n```\n\n***\n\n# Command Log\n\n## Submit a form\n\n```javascript\ncy.route(\"POST\", /users/, \"fixture:user\").as(\"userSuccess\")\ncy.get(\"form\").submit()\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"594\" alt=\"screen shot 2015-11-29 at 1 21 43 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459081/3149d9e6-969c-11e5-85b2-ba57638f02df.png\">\n\nWhen clicking on `submit` within the command log, the console outputs the following:\n\n![cy.submit console log](https://cloud.githubusercontent.com/assets/1271364/12888878/222f5522-ce4a-11e5-9edd-f67be2ebce40.png)\n\n***\n\n# Related\n\n- [click](https://on.cypress.io/api/click)","source":"api/commands/submit.md","raw":"title: submit\n---\n\nSubmits the DOM element from the previous command if it is a form. Submit can only be called on a single form.\n\n**The following events are fired during submit:** `submit`\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.submit` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts). |\n\n***\n\n# [cy.submit()](#section-usage)\n\nSubmit a form.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.submit`.\n\n**cy.submit( *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Submit a form\n\n```html\n<form id=\"contact\">\n  <input type=\"text\" name=\"message\">\n  <button type=\"submit\">Send</button>\n</form>\n```\n\n```javascript\n// submits the form and performs all default actions\n// returns <form> for further chaining\ncy.get(\"#contact\").submit()\n```\n\n***\n\n# Command Log\n\n## Submit a form\n\n```javascript\ncy.route(\"POST\", /users/, \"fixture:user\").as(\"userSuccess\")\ncy.get(\"form\").submit()\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"594\" alt=\"screen shot 2015-11-29 at 1 21 43 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459081/3149d9e6-969c-11e5-85b2-ba57638f02df.png\">\n\nWhen clicking on `submit` within the command log, the console outputs the following:\n\n![cy.submit console log](https://cloud.githubusercontent.com/assets/1271364/12888878/222f5522-ce4a-11e5-9edd-f67be2ebce40.png)\n\n***\n\n# Related\n\n- [click](https://on.cypress.io/api/click)","date":"2017-04-19T18:51:19.000Z","updated":"2017-04-19T18:51:19.000Z","path":"api/commands/submit.html","comments":1,"layout":"page","_id":"cj1pc41xe0006pgg8x12rqlrm","content":"<p>Submits the DOM element from the previous command if it is a form. Submit can only be called on a single form.</p>\n<p><strong>The following events are fired during submit:</strong> <code>submit</code></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.submit</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a>.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-submit\"><a href=\"#cy-submit\" class=\"headerlink\" title=\"cy.submit()\"></a><a href=\"#section-usage\">cy.submit()</a></h1><p>Submit a form.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.submit</code>.</p>\n<p><strong>cy.submit( <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Submit-a-form\"><a href=\"#Submit-a-form\" class=\"headerlink\" title=\"Submit a form\"></a>Submit a form</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"contact\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"message\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span>Send<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// submits the form and performs all default actions</span></div><div class=\"line\"><span class=\"comment\">// returns &lt;form&gt; for further chaining</span></div><div class=\"line\">cy.get(<span class=\"string\">\"#contact\"</span>).submit()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Submit-a-form-1\"><a href=\"#Submit-a-form-1\" class=\"headerlink\" title=\"Submit a form\"></a>Submit a form</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.route(<span class=\"string\">\"POST\"</span>, /users/, <span class=\"string\">\"fixture:user\"</span>).as(<span class=\"string\">\"userSuccess\"</span>)</div><div class=\"line\">cy.get(<span class=\"string\">\"form\"</span>).submit()</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"594\" alt=\"screen shot 2015-11-29 at 1 21 43 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459081/3149d9e6-969c-11e5-85b2-ba57638f02df.png\"></p>\n<p>When clicking on <code>submit</code> within the command log, the console outputs the following:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/12888878/222f5522-ce4a-11e5-9edd-f67be2ebce40.png\" alt=\"cy.submit console log\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/click\" target=\"_blank\" rel=\"external\">click</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Submits the DOM element from the previous command if it is a form. Submit can only be called on a single form.</p>\n<p><strong>The following events are fired during submit:</strong> <code>submit</code></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.submit</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a>.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-submit\"><a href=\"#cy-submit\" class=\"headerlink\" title=\"cy.submit()\"></a><a href=\"#section-usage\">cy.submit()</a></h1><p>Submit a form.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.submit</code>.</p>\n<p><strong>cy.submit( <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Submit-a-form\"><a href=\"#Submit-a-form\" class=\"headerlink\" title=\"Submit a form\"></a>Submit a form</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"contact\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"message\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span>Send<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// submits the form and performs all default actions</span></div><div class=\"line\"><span class=\"comment\">// returns &lt;form&gt; for further chaining</span></div><div class=\"line\">cy.get(<span class=\"string\">\"#contact\"</span>).submit()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Submit-a-form-1\"><a href=\"#Submit-a-form-1\" class=\"headerlink\" title=\"Submit a form\"></a>Submit a form</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.route(<span class=\"string\">\"POST\"</span>, /users/, <span class=\"string\">\"fixture:user\"</span>).as(<span class=\"string\">\"userSuccess\"</span>)</div><div class=\"line\">cy.get(<span class=\"string\">\"form\"</span>).submit()</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"594\" alt=\"screen shot 2015-11-29 at 1 21 43 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459081/3149d9e6-969c-11e5-85b2-ba57638f02df.png\"></p>\n<p>When clicking on <code>submit</code> within the command log, the console outputs the following:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1271364/12888878/222f5522-ce4a-11e5-9edd-f67be2ebce40.png\" alt=\"cy.submit console log\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/click\">click</a></li>\n</ul>\n"},{"title":"uncheck","_content":"\nUnchecks the checkboxes within the current subject.\n\n**The following events are fired during uncheck:** `mousedown`, `focus`, `mouseup`, `click`\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.uncheck` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) or the duration of the `timeout` specified in the commands [options](#section-options). |\n\n***\n\n# [cy.uncheck()](#section-usage)\n\nUnchecks checkboxes. Triggers events associated with check.\n\n***\n\n# [cy.uncheck( *values* )](#section-values-usage)\n\nUnchecks the checkboxes matching the values. Triggers events associated with uncheck.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.uncheck`.\n\n**cy.uncheck( *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`interval` | `16` | Interval which to retry a uncheck\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry the uncheck\n`force` | `false` | Forces uncheck, disables error checking prior to uncheck\n`log` | `true` | whether to display command in command log\n`multiple` | `false` | Enables serially unchecking multiple elements\n\n***\n\n# Usage\n\n## Uncheck all checkboxes\n\n```javascript\ncy.get(\":checkbox\").uncheck()\n```\n\n***\n\n## Uncheck all radios\n\n```javascript\ncy.get(\"[type='checkbox']\").uncheck()\n```\n\n***\n\n## Uncheck element with the id `saveUserName`\n\n```javascript\ncy.get(\"#saveUserName\").uncheck()\n```\n\n***\n\n# Values Usage\n\n## Uncheck the checkbox with the value of \"ga\"\n\n```javascript\ncy.get(\"input[type='checkbox']\").uncheck([\"ga\"])\n```\n\n***\n\n# Command Log\n\n## Uncheck the first checkbox\n\n```javascript\ncy\n  .get(\"[data-js='choose-all']\").click()\n  .find(\"input[type='checkbox']\").first().uncheck()\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"584\" alt=\"screen shot 2015-11-29 at 1 30 49 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459133/7bf25814-969d-11e5-9f03-9d2d4538fcd5.png\">\n\nWhen clicking on `uncheck` within the command log, the console outputs the following:\n\n<img width=\"601\" alt=\"screen shot 2015-11-29 at 1 31 04 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459134/7f29dea8-969d-11e5-9843-dfd07dfe888f.png\">\n\n***\n\n# Related\n\n- [check](https://on.cypress.io/api/check)\n- [click](https://on.cypress.io/api/click)\n","source":"api/commands/uncheck.md","raw":"title: uncheck\n---\n\nUnchecks the checkboxes within the current subject.\n\n**The following events are fired during uncheck:** `mousedown`, `focus`, `mouseup`, `click`\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | `cy.uncheck` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) or the duration of the `timeout` specified in the commands [options](#section-options). |\n\n***\n\n# [cy.uncheck()](#section-usage)\n\nUnchecks checkboxes. Triggers events associated with check.\n\n***\n\n# [cy.uncheck( *values* )](#section-values-usage)\n\nUnchecks the checkboxes matching the values. Triggers events associated with uncheck.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.uncheck`.\n\n**cy.uncheck( *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`interval` | `16` | Interval which to retry a uncheck\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry the uncheck\n`force` | `false` | Forces uncheck, disables error checking prior to uncheck\n`log` | `true` | whether to display command in command log\n`multiple` | `false` | Enables serially unchecking multiple elements\n\n***\n\n# Usage\n\n## Uncheck all checkboxes\n\n```javascript\ncy.get(\":checkbox\").uncheck()\n```\n\n***\n\n## Uncheck all radios\n\n```javascript\ncy.get(\"[type='checkbox']\").uncheck()\n```\n\n***\n\n## Uncheck element with the id `saveUserName`\n\n```javascript\ncy.get(\"#saveUserName\").uncheck()\n```\n\n***\n\n# Values Usage\n\n## Uncheck the checkbox with the value of \"ga\"\n\n```javascript\ncy.get(\"input[type='checkbox']\").uncheck([\"ga\"])\n```\n\n***\n\n# Command Log\n\n## Uncheck the first checkbox\n\n```javascript\ncy\n  .get(\"[data-js='choose-all']\").click()\n  .find(\"input[type='checkbox']\").first().uncheck()\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"584\" alt=\"screen shot 2015-11-29 at 1 30 49 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459133/7bf25814-969d-11e5-9f03-9d2d4538fcd5.png\">\n\nWhen clicking on `uncheck` within the command log, the console outputs the following:\n\n<img width=\"601\" alt=\"screen shot 2015-11-29 at 1 31 04 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459134/7f29dea8-969d-11e5-9843-dfd07dfe888f.png\">\n\n***\n\n# Related\n\n- [check](https://on.cypress.io/api/check)\n- [click](https://on.cypress.io/api/click)\n","date":"2017-04-19T18:51:44.000Z","updated":"2017-04-19T18:51:44.000Z","path":"api/commands/uncheck.html","comments":1,"layout":"page","_id":"cj1pc4jkw0001r5g8aelazira","content":"<p>Unchecks the checkboxes within the current subject.</p>\n<p><strong>The following events are fired during uncheck:</strong> <code>mousedown</code>, <code>focus</code>, <code>mouseup</code>, <code>click</code></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.uncheck</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a> or the duration of the <code>timeout</code> specified in the commands <a href=\"#section-options\">options</a>.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-uncheck\"><a href=\"#cy-uncheck\" class=\"headerlink\" title=\"cy.uncheck()\"></a><a href=\"#section-usage\">cy.uncheck()</a></h1><p>Unchecks checkboxes. Triggers events associated with check.</p>\n<hr>\n<h1 id=\"cy-uncheck-values\"><a href=\"#cy-uncheck-values\" class=\"headerlink\" title=\"cy.uncheck( values )\"></a><a href=\"#section-values-usage\">cy.uncheck( <em>values</em> )</a></h1><p>Unchecks the checkboxes matching the values. Triggers events associated with uncheck.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.uncheck</code>.</p>\n<p><strong>cy.uncheck( <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>interval</code></td>\n<td><code>16</code></td>\n<td>Interval which to retry a uncheck</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry the uncheck</td>\n</tr>\n<tr>\n<td><code>force</code></td>\n<td><code>false</code></td>\n<td>Forces uncheck, disables error checking prior to uncheck</td>\n</tr>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>multiple</code></td>\n<td><code>false</code></td>\n<td>Enables serially unchecking multiple elements</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Uncheck-all-checkboxes\"><a href=\"#Uncheck-all-checkboxes\" class=\"headerlink\" title=\"Uncheck all checkboxes\"></a>Uncheck all checkboxes</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\":checkbox\"</span>).uncheck()</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Uncheck-all-radios\"><a href=\"#Uncheck-all-radios\" class=\"headerlink\" title=\"Uncheck all radios\"></a>Uncheck all radios</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"[type='checkbox']\"</span>).uncheck()</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Uncheck-element-with-the-id-saveUserName\"><a href=\"#Uncheck-element-with-the-id-saveUserName\" class=\"headerlink\" title=\"Uncheck element with the id saveUserName\"></a>Uncheck element with the id <code>saveUserName</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"#saveUserName\"</span>).uncheck()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Values-Usage\"><a href=\"#Values-Usage\" class=\"headerlink\" title=\"Values Usage\"></a>Values Usage</h1><h2 id=\"Uncheck-the-checkbox-with-the-value-of-“ga”\"><a href=\"#Uncheck-the-checkbox-with-the-value-of-“ga”\" class=\"headerlink\" title=\"Uncheck the checkbox with the value of “ga”\"></a>Uncheck the checkbox with the value of “ga”</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"input[type='checkbox']\"</span>).uncheck([<span class=\"string\">\"ga\"</span>])</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Uncheck-the-first-checkbox\"><a href=\"#Uncheck-the-first-checkbox\" class=\"headerlink\" title=\"Uncheck the first checkbox\"></a>Uncheck the first checkbox</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"[data-js='choose-all']\"</span>).click()</div><div class=\"line\">  .find(<span class=\"string\">\"input[type='checkbox']\"</span>).first().uncheck()</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"584\" alt=\"screen shot 2015-11-29 at 1 30 49 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459133/7bf25814-969d-11e5-9f03-9d2d4538fcd5.png\"></p>\n<p>When clicking on <code>uncheck</code> within the command log, the console outputs the following:</p>\n<p><img width=\"601\" alt=\"screen shot 2015-11-29 at 1 31 04 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459134/7f29dea8-969d-11e5-9843-dfd07dfe888f.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/check\" target=\"_blank\" rel=\"external\">check</a></li>\n<li><a href=\"https://on.cypress.io/api/click\" target=\"_blank\" rel=\"external\">click</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Unchecks the checkboxes within the current subject.</p>\n<p><strong>The following events are fired during uncheck:</strong> <code>mousedown</code>, <code>focus</code>, <code>mouseup</code>, <code>click</code></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.uncheck</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a> or the duration of the <code>timeout</code> specified in the commands <a href=\"#section-options\">options</a>.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-uncheck\"><a href=\"#cy-uncheck\" class=\"headerlink\" title=\"cy.uncheck()\"></a><a href=\"#section-usage\">cy.uncheck()</a></h1><p>Unchecks checkboxes. Triggers events associated with check.</p>\n<hr>\n<h1 id=\"cy-uncheck-values\"><a href=\"#cy-uncheck-values\" class=\"headerlink\" title=\"cy.uncheck( values )\"></a><a href=\"#section-values-usage\">cy.uncheck( <em>values</em> )</a></h1><p>Unchecks the checkboxes matching the values. Triggers events associated with uncheck.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.uncheck</code>.</p>\n<p><strong>cy.uncheck( <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>interval</code></td>\n<td><code>16</code></td>\n<td>Interval which to retry a uncheck</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry the uncheck</td>\n</tr>\n<tr>\n<td><code>force</code></td>\n<td><code>false</code></td>\n<td>Forces uncheck, disables error checking prior to uncheck</td>\n</tr>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n<tr>\n<td><code>multiple</code></td>\n<td><code>false</code></td>\n<td>Enables serially unchecking multiple elements</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Uncheck-all-checkboxes\"><a href=\"#Uncheck-all-checkboxes\" class=\"headerlink\" title=\"Uncheck all checkboxes\"></a>Uncheck all checkboxes</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\":checkbox\"</span>).uncheck()</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Uncheck-all-radios\"><a href=\"#Uncheck-all-radios\" class=\"headerlink\" title=\"Uncheck all radios\"></a>Uncheck all radios</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"[type='checkbox']\"</span>).uncheck()</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Uncheck-element-with-the-id-saveUserName\"><a href=\"#Uncheck-element-with-the-id-saveUserName\" class=\"headerlink\" title=\"Uncheck element with the id saveUserName\"></a>Uncheck element with the id <code>saveUserName</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"#saveUserName\"</span>).uncheck()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Values-Usage\"><a href=\"#Values-Usage\" class=\"headerlink\" title=\"Values Usage\"></a>Values Usage</h1><h2 id=\"Uncheck-the-checkbox-with-the-value-of-“ga”\"><a href=\"#Uncheck-the-checkbox-with-the-value-of-“ga”\" class=\"headerlink\" title=\"Uncheck the checkbox with the value of “ga”\"></a>Uncheck the checkbox with the value of “ga”</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"input[type='checkbox']\"</span>).uncheck([<span class=\"string\">\"ga\"</span>])</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Uncheck-the-first-checkbox\"><a href=\"#Uncheck-the-first-checkbox\" class=\"headerlink\" title=\"Uncheck the first checkbox\"></a>Uncheck the first checkbox</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"[data-js='choose-all']\"</span>).click()</div><div class=\"line\">  .find(<span class=\"string\">\"input[type='checkbox']\"</span>).first().uncheck()</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"584\" alt=\"screen shot 2015-11-29 at 1 30 49 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459133/7bf25814-969d-11e5-9f03-9d2d4538fcd5.png\"></p>\n<p>When clicking on <code>uncheck</code> within the command log, the console outputs the following:</p>\n<p><img width=\"601\" alt=\"screen shot 2015-11-29 at 1 31 04 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459134/7f29dea8-969d-11e5-9843-dfd07dfe888f.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/check\">check</a></li>\n<li><a href=\"https://on.cypress.io/api/click\">click</a></li>\n</ul>\n"},{"title":"wait","_content":"\nUse `cy.wait` to wait for a number of milliseconds or for a resource to resolve.\n\n| | |\n|--- | --- |\n| **Returns** | the current subject if waiting for number of milliseconds, the xhr object if waiting for a route |\n| **Timeout** | `cy.wait` will wait for the request the duration of the [requestTimeout](https://on.cypress.io/guides/configuration#section-timeouts) and wait for the response for the duration of the [responseTimeout](https://on.cypress.io/guides/configuration#section-timeouts) or it will wait for both the duration request and response for the `timeout` specified in the command's [options](#section-options).|\n\n***\n\n# [cy.wait( *number* )](#section-number-usage)\n\nWait a specific amount of `ms` before resolving and continuing onto the next command.\n\n***\n\n# [cy.wait( *alias* )](#section-alias-usage)\n\nWait until the matching [aliased](https://on.cypress.io/guides/using-aliases) XHR has a response.\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Read about [Network Requests](https://on.cypress.io/guides/network-requests-xhr) and [Aliasing](https://on.cypress.io/guides/using-aliases) first.\",\n  \"title\": \"New to Cypress?\"\n}\n[/block]\n\n***\n\n# [cy.wait( *\\[alias1*, *alias2*, *alias3\\]* )](#alias-array-usage)\n\nWait for an array of [aliases](https://on.cypress.io/guides/using-aliases) to have responses.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.wait`.\n\n**[cy.wait( *text*, *options* )](#options-usage)**\n\nOption | Default | Notes\n--- | --- | ---\n`timeout` | [requestTimeout](https://on.cypress.io/guides/configuration#section-timeouts), [responseTimeout](https://on.cypress.io/guides/configuration#section-timeouts) | Override the default requestTimeout and responseTimeout (in ms)\n`log` | `true` | whether to display command in command log\n\nYou can also change the default `requestTimeout` and `responseTimeout` that all `cy.wait` use in [configuration](https://on.cypress.io/guides/configuration).\n\n***\n\n# Number Usage\n\n## Wait 500ms\n\n```javascript\n// Wait 500ms before resolving\ncy.wait(500)\n```\n\n***\n\n# Alias Usage\n\n## Wait for a specific XHR to respond\n\n```javascript\n// Wait for the route aliased as 'getAccount' to respond\n// without changing or stubbing its response\ncy\n  .server()\n  .route(/accounts\\/d+/).as(\"getAccount\")\n  .visit(\"/accounts/123\")\n  .wait(\"@getAccount\").then(function(xhr){\n    // we can now access the low level xhr\n    // that contains the request body,\n    // response body, status, etc\n  })\n```\n\n***\n\n## Wait automatically increments responses\n\n```javascript\n// each time we cy.wait() for an alias, Cypress will\n// wait for the next nth matching request\ncy\n  .server()\n  .route(/books/, []).as(\"getBooks\")\n  .get(\"#search\").type(\"Grendel\")\n\n  // wait for the first response to finish\n  .wait(\"@getBooks\")\n\n  // the results should be empty because we\n  // responded with an empty array first\n  .get(\"#book-results\").should(\"be.empty\")\n\n  // now re-route the books endpoint and force it to\n  // have a response this time\n  .route(/books/, [{name: \"Emperor of all maladies\"}])\n\n  .get(\"#search\").type(\"Emperor of\")\n\n  // now when we wait for 'getBooks' again, Cypress will\n  // automatically know to wait for the 2nd response\n  .wait(\"@getBooks\")\n\n  // we responded with 1 book item so now we should\n  // have one result\n  .get(\"#book-results\").should(\"have.length\", 1)\n```\n\n***\n\n# Alias Array Usage\n\n## You can pass an array of aliases that will be waited on before resolving.\n\n```javascript\ncy\n  .server()\n  .route(/users/).as(\"getUsers\")\n  .route(/activities/).as(\"getActivities\")\n  .route(/comments/).as(\"getComments\")\n  .visit(\"/dashboard\")\n\n  .wait([\"@getUsers\", \"@getActivities\", \"getComments\"])\n  .then(function(xhrs){\n    // xhrs will now be an array of matching XHR's\n    // xhrs[0] <-- getUsers\n    // xhrs[1] <-- getActivities\n    // xhrs[2] <-- getComments\n  })\n```\n\n## You could also use the [`cy.spread`](https://on.cypress.io/api/spread) command here to spread the array into multiple arguments.\n\n```javascript\ncy\n  .server()\n  .route(/users/).as(\"getUsers\")\n  .route(/activities/).as(\"getActivities\")\n  .route(/comments/).as(\"getComments\")\n  .wait([\"@getUsers\", \"@getActivities\", \"getComments\"])\n  .spread(function(getUsers, getActivities, getComments){\n    // each XHR is now an individual argument\n  })\n```\n\n***\n\n# Notes\n\n## requestTimeout and responseTimeout\n\n`cy.wait` goes through two separate \"waiting\" periods for a matching XHR.\n\nThe first period waits for a matching request to leave the browser. This duration is configured by [`requestTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) - which has a default of `5000` ms.\n\nThis means that when you begin waiting for an XHR, Cypress will wait up to 5 seconds for a matching XHR to be created. If no matching XHR is found, you will get an error message that looks like this:\n\n![screen shot 2015-12-21 at 5 00 09 pm](https://cloud.githubusercontent.com/assets/1268976/11942578/8e7cba50-a805-11e5-805c-614f8640fbcc.png)\n\nOnce Cypress detects that a matching XHR has begun its request it then switches over to the 2nd waiting period. This duration is configured by [`responseTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) - which has a default of `20000` ms.\n\nThis means Cypress will now wait up to 20 seconds for the external server to respond to this XHR. If no response is detected, you will get an error message that looks like this:\n\n![screen shot 2015-12-21 at 5 06 52 pm](https://cloud.githubusercontent.com/assets/1268976/11942577/8e7196e8-a805-11e5-97b1-8acdde27755d.png)\n\nThis gives you the best of both worlds - a fast error feedback loop when requests never go out, and a much longer duration for the actual external response.\n\n***\n\n# Command Log\n\n## Wait for the put to user to resolve.\n\n```javascript\ncy\n  .server()\n  .route(\"PUT\", /users/, {}).as(\"userPut\")\n  .get(\"form\").submit()\n  .wait(\"@userPut\")\n    .its(\"url\").should(\"include\", \"users\")\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"584\" alt=\"screen shot 2015-11-29 at 2 20 53 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459433/7eabc516-96a4-11e5-90c3-19f8e49a0b0c.png\">\n\nWhen clicking on `wait` within the command log, the console outputs the following:\n\n<img width=\"952\" alt=\"screen shot 2015-11-29 at 2 21 11 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459434/81132966-96a4-11e5-962f-41718b49b142.png\">\n\n***\n\n# Related\n\n- [server](https://on.cypress.io/api/server)\n- [route](https://on.cypress.io/api/route)\n- [as](https://on.cypress.io/api/as)\n- [spread](https://on.cypress.io/api/spread)\n","source":"api/commands/wait.md","raw":"title: wait\n---\n\nUse `cy.wait` to wait for a number of milliseconds or for a resource to resolve.\n\n| | |\n|--- | --- |\n| **Returns** | the current subject if waiting for number of milliseconds, the xhr object if waiting for a route |\n| **Timeout** | `cy.wait` will wait for the request the duration of the [requestTimeout](https://on.cypress.io/guides/configuration#section-timeouts) and wait for the response for the duration of the [responseTimeout](https://on.cypress.io/guides/configuration#section-timeouts) or it will wait for both the duration request and response for the `timeout` specified in the command's [options](#section-options).|\n\n***\n\n# [cy.wait( *number* )](#section-number-usage)\n\nWait a specific amount of `ms` before resolving and continuing onto the next command.\n\n***\n\n# [cy.wait( *alias* )](#section-alias-usage)\n\nWait until the matching [aliased](https://on.cypress.io/guides/using-aliases) XHR has a response.\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Read about [Network Requests](https://on.cypress.io/guides/network-requests-xhr) and [Aliasing](https://on.cypress.io/guides/using-aliases) first.\",\n  \"title\": \"New to Cypress?\"\n}\n[/block]\n\n***\n\n# [cy.wait( *\\[alias1*, *alias2*, *alias3\\]* )](#alias-array-usage)\n\nWait for an array of [aliases](https://on.cypress.io/guides/using-aliases) to have responses.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.wait`.\n\n**[cy.wait( *text*, *options* )](#options-usage)**\n\nOption | Default | Notes\n--- | --- | ---\n`timeout` | [requestTimeout](https://on.cypress.io/guides/configuration#section-timeouts), [responseTimeout](https://on.cypress.io/guides/configuration#section-timeouts) | Override the default requestTimeout and responseTimeout (in ms)\n`log` | `true` | whether to display command in command log\n\nYou can also change the default `requestTimeout` and `responseTimeout` that all `cy.wait` use in [configuration](https://on.cypress.io/guides/configuration).\n\n***\n\n# Number Usage\n\n## Wait 500ms\n\n```javascript\n// Wait 500ms before resolving\ncy.wait(500)\n```\n\n***\n\n# Alias Usage\n\n## Wait for a specific XHR to respond\n\n```javascript\n// Wait for the route aliased as 'getAccount' to respond\n// without changing or stubbing its response\ncy\n  .server()\n  .route(/accounts\\/d+/).as(\"getAccount\")\n  .visit(\"/accounts/123\")\n  .wait(\"@getAccount\").then(function(xhr){\n    // we can now access the low level xhr\n    // that contains the request body,\n    // response body, status, etc\n  })\n```\n\n***\n\n## Wait automatically increments responses\n\n```javascript\n// each time we cy.wait() for an alias, Cypress will\n// wait for the next nth matching request\ncy\n  .server()\n  .route(/books/, []).as(\"getBooks\")\n  .get(\"#search\").type(\"Grendel\")\n\n  // wait for the first response to finish\n  .wait(\"@getBooks\")\n\n  // the results should be empty because we\n  // responded with an empty array first\n  .get(\"#book-results\").should(\"be.empty\")\n\n  // now re-route the books endpoint and force it to\n  // have a response this time\n  .route(/books/, [{name: \"Emperor of all maladies\"}])\n\n  .get(\"#search\").type(\"Emperor of\")\n\n  // now when we wait for 'getBooks' again, Cypress will\n  // automatically know to wait for the 2nd response\n  .wait(\"@getBooks\")\n\n  // we responded with 1 book item so now we should\n  // have one result\n  .get(\"#book-results\").should(\"have.length\", 1)\n```\n\n***\n\n# Alias Array Usage\n\n## You can pass an array of aliases that will be waited on before resolving.\n\n```javascript\ncy\n  .server()\n  .route(/users/).as(\"getUsers\")\n  .route(/activities/).as(\"getActivities\")\n  .route(/comments/).as(\"getComments\")\n  .visit(\"/dashboard\")\n\n  .wait([\"@getUsers\", \"@getActivities\", \"getComments\"])\n  .then(function(xhrs){\n    // xhrs will now be an array of matching XHR's\n    // xhrs[0] <-- getUsers\n    // xhrs[1] <-- getActivities\n    // xhrs[2] <-- getComments\n  })\n```\n\n## You could also use the [`cy.spread`](https://on.cypress.io/api/spread) command here to spread the array into multiple arguments.\n\n```javascript\ncy\n  .server()\n  .route(/users/).as(\"getUsers\")\n  .route(/activities/).as(\"getActivities\")\n  .route(/comments/).as(\"getComments\")\n  .wait([\"@getUsers\", \"@getActivities\", \"getComments\"])\n  .spread(function(getUsers, getActivities, getComments){\n    // each XHR is now an individual argument\n  })\n```\n\n***\n\n# Notes\n\n## requestTimeout and responseTimeout\n\n`cy.wait` goes through two separate \"waiting\" periods for a matching XHR.\n\nThe first period waits for a matching request to leave the browser. This duration is configured by [`requestTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) - which has a default of `5000` ms.\n\nThis means that when you begin waiting for an XHR, Cypress will wait up to 5 seconds for a matching XHR to be created. If no matching XHR is found, you will get an error message that looks like this:\n\n![screen shot 2015-12-21 at 5 00 09 pm](https://cloud.githubusercontent.com/assets/1268976/11942578/8e7cba50-a805-11e5-805c-614f8640fbcc.png)\n\nOnce Cypress detects that a matching XHR has begun its request it then switches over to the 2nd waiting period. This duration is configured by [`responseTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) - which has a default of `20000` ms.\n\nThis means Cypress will now wait up to 20 seconds for the external server to respond to this XHR. If no response is detected, you will get an error message that looks like this:\n\n![screen shot 2015-12-21 at 5 06 52 pm](https://cloud.githubusercontent.com/assets/1268976/11942577/8e7196e8-a805-11e5-97b1-8acdde27755d.png)\n\nThis gives you the best of both worlds - a fast error feedback loop when requests never go out, and a much longer duration for the actual external response.\n\n***\n\n# Command Log\n\n## Wait for the put to user to resolve.\n\n```javascript\ncy\n  .server()\n  .route(\"PUT\", /users/, {}).as(\"userPut\")\n  .get(\"form\").submit()\n  .wait(\"@userPut\")\n    .its(\"url\").should(\"include\", \"users\")\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"584\" alt=\"screen shot 2015-11-29 at 2 20 53 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459433/7eabc516-96a4-11e5-90c3-19f8e49a0b0c.png\">\n\nWhen clicking on `wait` within the command log, the console outputs the following:\n\n<img width=\"952\" alt=\"screen shot 2015-11-29 at 2 21 11 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459434/81132966-96a4-11e5-962f-41718b49b142.png\">\n\n***\n\n# Related\n\n- [server](https://on.cypress.io/api/server)\n- [route](https://on.cypress.io/api/route)\n- [as](https://on.cypress.io/api/as)\n- [spread](https://on.cypress.io/api/spread)\n","date":"2017-04-19T18:52:06.000Z","updated":"2017-04-19T18:52:06.000Z","path":"api/commands/wait.html","comments":1,"layout":"page","_id":"cj1pc4yl70000seg8iudq5kkf","content":"<p>Use <code>cy.wait</code> to wait for a number of milliseconds or for a resource to resolve.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the current subject if waiting for number of milliseconds, the xhr object if waiting for a route</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.wait</code> will wait for the request the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\">requestTimeout</a> and wait for the response for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\">responseTimeout</a> or it will wait for both the duration request and response for the <code>timeout</code> specified in the command’s <a href=\"#section-options\">options</a>.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-wait-number\"><a href=\"#cy-wait-number\" class=\"headerlink\" title=\"cy.wait( number )\"></a><a href=\"#section-number-usage\">cy.wait( <em>number</em> )</a></h1><p>Wait a specific amount of <code>ms</code> before resolving and continuing onto the next command.</p>\n<hr>\n<h1 id=\"cy-wait-alias\"><a href=\"#cy-wait-alias\" class=\"headerlink\" title=\"cy.wait( alias )\"></a><a href=\"#section-alias-usage\">cy.wait( <em>alias</em> )</a></h1><p>Wait until the matching <a href=\"https://on.cypress.io/guides/using-aliases\" target=\"_blank\" rel=\"external\">aliased</a> XHR has a response.</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “Read about <a href=\"https://on.cypress.io/guides/network-requests-xhr\" target=\"_blank\" rel=\"external\">Network Requests</a> and <a href=\"https://on.cypress.io/guides/using-aliases\" target=\"_blank\" rel=\"external\">Aliasing</a> first.”,<br>  “title”: “New to Cypress?”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"cy-wait-alias1-alias2-alias3\"><a href=\"#cy-wait-alias1-alias2-alias3\" class=\"headerlink\" title=\"cy.wait( [alias1, alias2, alias3] )\"></a><a href=\"#alias-array-usage\">cy.wait( <em>[alias1</em>, <em>alias2</em>, <em>alias3]</em> )</a></h1><p>Wait for an array of <a href=\"https://on.cypress.io/guides/using-aliases\" target=\"_blank\" rel=\"external\">aliases</a> to have responses.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.wait</code>.</p>\n<p><strong><a href=\"#options-usage\">cy.wait( <em>text</em>, <em>options</em> )</a></strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\">requestTimeout</a>, <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\">responseTimeout</a></td>\n<td>Override the default requestTimeout and responseTimeout (in ms)</td>\n</tr>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<p>You can also change the default <code>requestTimeout</code> and <code>responseTimeout</code> that all <code>cy.wait</code> use in <a href=\"https://on.cypress.io/guides/configuration\" target=\"_blank\" rel=\"external\">configuration</a>.</p>\n<hr>\n<h1 id=\"Number-Usage\"><a href=\"#Number-Usage\" class=\"headerlink\" title=\"Number Usage\"></a>Number Usage</h1><h2 id=\"Wait-500ms\"><a href=\"#Wait-500ms\" class=\"headerlink\" title=\"Wait 500ms\"></a>Wait 500ms</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Wait 500ms before resolving</span></div><div class=\"line\">cy.wait(<span class=\"number\">500</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Alias-Usage\"><a href=\"#Alias-Usage\" class=\"headerlink\" title=\"Alias Usage\"></a>Alias Usage</h1><h2 id=\"Wait-for-a-specific-XHR-to-respond\"><a href=\"#Wait-for-a-specific-XHR-to-respond\" class=\"headerlink\" title=\"Wait for a specific XHR to respond\"></a>Wait for a specific XHR to respond</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Wait for the route aliased as 'getAccount' to respond</span></div><div class=\"line\"><span class=\"comment\">// without changing or stubbing its response</span></div><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"regexp\">/accounts\\/d+/</span>).as(<span class=\"string\">\"getAccount\"</span>)</div><div class=\"line\">  .visit(<span class=\"string\">\"/accounts/123\"</span>)</div><div class=\"line\">  .wait(<span class=\"string\">\"@getAccount\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">xhr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// we can now access the low level xhr</span></div><div class=\"line\">    <span class=\"comment\">// that contains the request body,</span></div><div class=\"line\">    <span class=\"comment\">// response body, status, etc</span></div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Wait-automatically-increments-responses\"><a href=\"#Wait-automatically-increments-responses\" class=\"headerlink\" title=\"Wait automatically increments responses\"></a>Wait automatically increments responses</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// each time we cy.wait() for an alias, Cypress will</span></div><div class=\"line\"><span class=\"comment\">// wait for the next nth matching request</span></div><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"regexp\">/books/</span>, []).as(<span class=\"string\">\"getBooks\"</span>)</div><div class=\"line\">  .get(<span class=\"string\">\"#search\"</span>).type(<span class=\"string\">\"Grendel\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// wait for the first response to finish</span></div><div class=\"line\">  .wait(<span class=\"string\">\"@getBooks\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// the results should be empty because we</span></div><div class=\"line\">  <span class=\"comment\">// responded with an empty array first</span></div><div class=\"line\">  .get(<span class=\"string\">\"#book-results\"</span>).should(<span class=\"string\">\"be.empty\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// now re-route the books endpoint and force it to</span></div><div class=\"line\">  <span class=\"comment\">// have a response this time</span></div><div class=\"line\">  .route(<span class=\"regexp\">/books/</span>, [&#123;<span class=\"attr\">name</span>: <span class=\"string\">\"Emperor of all maladies\"</span>&#125;])</div><div class=\"line\"></div><div class=\"line\">  .get(<span class=\"string\">\"#search\"</span>).type(<span class=\"string\">\"Emperor of\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// now when we wait for 'getBooks' again, Cypress will</span></div><div class=\"line\">  <span class=\"comment\">// automatically know to wait for the 2nd response</span></div><div class=\"line\">  .wait(<span class=\"string\">\"@getBooks\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// we responded with 1 book item so now we should</span></div><div class=\"line\">  <span class=\"comment\">// have one result</span></div><div class=\"line\">  .get(<span class=\"string\">\"#book-results\"</span>).should(<span class=\"string\">\"have.length\"</span>, <span class=\"number\">1</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Alias-Array-Usage\"><a href=\"#Alias-Array-Usage\" class=\"headerlink\" title=\"Alias Array Usage\"></a>Alias Array Usage</h1><h2 id=\"You-can-pass-an-array-of-aliases-that-will-be-waited-on-before-resolving\"><a href=\"#You-can-pass-an-array-of-aliases-that-will-be-waited-on-before-resolving\" class=\"headerlink\" title=\"You can pass an array of aliases that will be waited on before resolving.\"></a>You can pass an array of aliases that will be waited on before resolving.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"regexp\">/users/</span>).as(<span class=\"string\">\"getUsers\"</span>)</div><div class=\"line\">  .route(<span class=\"regexp\">/activities/</span>).as(<span class=\"string\">\"getActivities\"</span>)</div><div class=\"line\">  .route(<span class=\"regexp\">/comments/</span>).as(<span class=\"string\">\"getComments\"</span>)</div><div class=\"line\">  .visit(<span class=\"string\">\"/dashboard\"</span>)</div><div class=\"line\"></div><div class=\"line\">  .wait([<span class=\"string\">\"@getUsers\"</span>, <span class=\"string\">\"@getActivities\"</span>, <span class=\"string\">\"getComments\"</span>])</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">xhrs</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// xhrs will now be an array of matching XHR's</span></div><div class=\"line\">    <span class=\"comment\">// xhrs[0] &lt;-- getUsers</span></div><div class=\"line\">    <span class=\"comment\">// xhrs[1] &lt;-- getActivities</span></div><div class=\"line\">    <span class=\"comment\">// xhrs[2] &lt;-- getComments</span></div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"You-could-also-use-the-cy-spread-command-here-to-spread-the-array-into-multiple-arguments\"><a href=\"#You-could-also-use-the-cy-spread-command-here-to-spread-the-array-into-multiple-arguments\" class=\"headerlink\" title=\"You could also use the cy.spread command here to spread the array into multiple arguments.\"></a>You could also use the <a href=\"https://on.cypress.io/api/spread\" target=\"_blank\" rel=\"external\"><code>cy.spread</code></a> command here to spread the array into multiple arguments.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"regexp\">/users/</span>).as(<span class=\"string\">\"getUsers\"</span>)</div><div class=\"line\">  .route(<span class=\"regexp\">/activities/</span>).as(<span class=\"string\">\"getActivities\"</span>)</div><div class=\"line\">  .route(<span class=\"regexp\">/comments/</span>).as(<span class=\"string\">\"getComments\"</span>)</div><div class=\"line\">  .wait([<span class=\"string\">\"@getUsers\"</span>, <span class=\"string\">\"@getActivities\"</span>, <span class=\"string\">\"getComments\"</span>])</div><div class=\"line\">  .spread(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">getUsers, getActivities, getComments</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// each XHR is now an individual argument</span></div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h1><h2 id=\"requestTimeout-and-responseTimeout\"><a href=\"#requestTimeout-and-responseTimeout\" class=\"headerlink\" title=\"requestTimeout and responseTimeout\"></a>requestTimeout and responseTimeout</h2><p><code>cy.wait</code> goes through two separate “waiting” periods for a matching XHR.</p>\n<p>The first period waits for a matching request to leave the browser. This duration is configured by <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>requestTimeout</code></a> - which has a default of <code>5000</code> ms.</p>\n<p>This means that when you begin waiting for an XHR, Cypress will wait up to 5 seconds for a matching XHR to be created. If no matching XHR is found, you will get an error message that looks like this:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/11942578/8e7cba50-a805-11e5-805c-614f8640fbcc.png\" alt=\"screen shot 2015-12-21 at 5 00 09 pm\"></p>\n<p>Once Cypress detects that a matching XHR has begun its request it then switches over to the 2nd waiting period. This duration is configured by <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>responseTimeout</code></a> - which has a default of <code>20000</code> ms.</p>\n<p>This means Cypress will now wait up to 20 seconds for the external server to respond to this XHR. If no response is detected, you will get an error message that looks like this:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/11942577/8e7196e8-a805-11e5-97b1-8acdde27755d.png\" alt=\"screen shot 2015-12-21 at 5 06 52 pm\"></p>\n<p>This gives you the best of both worlds - a fast error feedback loop when requests never go out, and a much longer duration for the actual external response.</p>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Wait-for-the-put-to-user-to-resolve\"><a href=\"#Wait-for-the-put-to-user-to-resolve\" class=\"headerlink\" title=\"Wait for the put to user to resolve.\"></a>Wait for the put to user to resolve.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"string\">\"PUT\"</span>, /users/, &#123;&#125;).as(<span class=\"string\">\"userPut\"</span>)</div><div class=\"line\">  .get(<span class=\"string\">\"form\"</span>).submit()</div><div class=\"line\">  .wait(<span class=\"string\">\"@userPut\"</span>)</div><div class=\"line\">    .its(<span class=\"string\">\"url\"</span>).should(<span class=\"string\">\"include\"</span>, <span class=\"string\">\"users\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"584\" alt=\"screen shot 2015-11-29 at 2 20 53 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459433/7eabc516-96a4-11e5-90c3-19f8e49a0b0c.png\"></p>\n<p>When clicking on <code>wait</code> within the command log, the console outputs the following:</p>\n<p><img width=\"952\" alt=\"screen shot 2015-11-29 at 2 21 11 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459434/81132966-96a4-11e5-962f-41718b49b142.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/server\" target=\"_blank\" rel=\"external\">server</a></li>\n<li><a href=\"https://on.cypress.io/api/route\" target=\"_blank\" rel=\"external\">route</a></li>\n<li><a href=\"https://on.cypress.io/api/as\" target=\"_blank\" rel=\"external\">as</a></li>\n<li><a href=\"https://on.cypress.io/api/spread\" target=\"_blank\" rel=\"external\">spread</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Use <code>cy.wait</code> to wait for a number of milliseconds or for a resource to resolve.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the current subject if waiting for number of milliseconds, the xhr object if waiting for a route</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.wait</code> will wait for the request the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\">requestTimeout</a> and wait for the response for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\">responseTimeout</a> or it will wait for both the duration request and response for the <code>timeout</code> specified in the command’s <a href=\"#section-options\">options</a>.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-wait-number\"><a href=\"#cy-wait-number\" class=\"headerlink\" title=\"cy.wait( number )\"></a><a href=\"#section-number-usage\">cy.wait( <em>number</em> )</a></h1><p>Wait a specific amount of <code>ms</code> before resolving and continuing onto the next command.</p>\n<hr>\n<h1 id=\"cy-wait-alias\"><a href=\"#cy-wait-alias\" class=\"headerlink\" title=\"cy.wait( alias )\"></a><a href=\"#section-alias-usage\">cy.wait( <em>alias</em> )</a></h1><p>Wait until the matching <a href=\"https://on.cypress.io/guides/using-aliases\">aliased</a> XHR has a response.</p>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “Read about <a href=\"https://on.cypress.io/guides/network-requests-xhr\">Network Requests</a> and <a href=\"https://on.cypress.io/guides/using-aliases\">Aliasing</a> first.”,<br>  “title”: “New to Cypress?”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"cy-wait-alias1-alias2-alias3\"><a href=\"#cy-wait-alias1-alias2-alias3\" class=\"headerlink\" title=\"cy.wait( [alias1, alias2, alias3] )\"></a><a href=\"#alias-array-usage\">cy.wait( <em>[alias1</em>, <em>alias2</em>, <em>alias3]</em> )</a></h1><p>Wait for an array of <a href=\"https://on.cypress.io/guides/using-aliases\">aliases</a> to have responses.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.wait</code>.</p>\n<p><strong><a href=\"#options-usage\">cy.wait( <em>text</em>, <em>options</em> )</a></strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\">requestTimeout</a>, <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\">responseTimeout</a></td>\n<td>Override the default requestTimeout and responseTimeout (in ms)</td>\n</tr>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<p>You can also change the default <code>requestTimeout</code> and <code>responseTimeout</code> that all <code>cy.wait</code> use in <a href=\"https://on.cypress.io/guides/configuration\">configuration</a>.</p>\n<hr>\n<h1 id=\"Number-Usage\"><a href=\"#Number-Usage\" class=\"headerlink\" title=\"Number Usage\"></a>Number Usage</h1><h2 id=\"Wait-500ms\"><a href=\"#Wait-500ms\" class=\"headerlink\" title=\"Wait 500ms\"></a>Wait 500ms</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Wait 500ms before resolving</span></div><div class=\"line\">cy.wait(<span class=\"number\">500</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Alias-Usage\"><a href=\"#Alias-Usage\" class=\"headerlink\" title=\"Alias Usage\"></a>Alias Usage</h1><h2 id=\"Wait-for-a-specific-XHR-to-respond\"><a href=\"#Wait-for-a-specific-XHR-to-respond\" class=\"headerlink\" title=\"Wait for a specific XHR to respond\"></a>Wait for a specific XHR to respond</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Wait for the route aliased as 'getAccount' to respond</span></div><div class=\"line\"><span class=\"comment\">// without changing or stubbing its response</span></div><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"regexp\">/accounts\\/d+/</span>).as(<span class=\"string\">\"getAccount\"</span>)</div><div class=\"line\">  .visit(<span class=\"string\">\"/accounts/123\"</span>)</div><div class=\"line\">  .wait(<span class=\"string\">\"@getAccount\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">xhr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// we can now access the low level xhr</span></div><div class=\"line\">    <span class=\"comment\">// that contains the request body,</span></div><div class=\"line\">    <span class=\"comment\">// response body, status, etc</span></div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Wait-automatically-increments-responses\"><a href=\"#Wait-automatically-increments-responses\" class=\"headerlink\" title=\"Wait automatically increments responses\"></a>Wait automatically increments responses</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// each time we cy.wait() for an alias, Cypress will</span></div><div class=\"line\"><span class=\"comment\">// wait for the next nth matching request</span></div><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"regexp\">/books/</span>, []).as(<span class=\"string\">\"getBooks\"</span>)</div><div class=\"line\">  .get(<span class=\"string\">\"#search\"</span>).type(<span class=\"string\">\"Grendel\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// wait for the first response to finish</span></div><div class=\"line\">  .wait(<span class=\"string\">\"@getBooks\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// the results should be empty because we</span></div><div class=\"line\">  <span class=\"comment\">// responded with an empty array first</span></div><div class=\"line\">  .get(<span class=\"string\">\"#book-results\"</span>).should(<span class=\"string\">\"be.empty\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// now re-route the books endpoint and force it to</span></div><div class=\"line\">  <span class=\"comment\">// have a response this time</span></div><div class=\"line\">  .route(<span class=\"regexp\">/books/</span>, [&#123;<span class=\"attr\">name</span>: <span class=\"string\">\"Emperor of all maladies\"</span>&#125;])</div><div class=\"line\"></div><div class=\"line\">  .get(<span class=\"string\">\"#search\"</span>).type(<span class=\"string\">\"Emperor of\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// now when we wait for 'getBooks' again, Cypress will</span></div><div class=\"line\">  <span class=\"comment\">// automatically know to wait for the 2nd response</span></div><div class=\"line\">  .wait(<span class=\"string\">\"@getBooks\"</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// we responded with 1 book item so now we should</span></div><div class=\"line\">  <span class=\"comment\">// have one result</span></div><div class=\"line\">  .get(<span class=\"string\">\"#book-results\"</span>).should(<span class=\"string\">\"have.length\"</span>, <span class=\"number\">1</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Alias-Array-Usage\"><a href=\"#Alias-Array-Usage\" class=\"headerlink\" title=\"Alias Array Usage\"></a>Alias Array Usage</h1><h2 id=\"You-can-pass-an-array-of-aliases-that-will-be-waited-on-before-resolving\"><a href=\"#You-can-pass-an-array-of-aliases-that-will-be-waited-on-before-resolving\" class=\"headerlink\" title=\"You can pass an array of aliases that will be waited on before resolving.\"></a>You can pass an array of aliases that will be waited on before resolving.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"regexp\">/users/</span>).as(<span class=\"string\">\"getUsers\"</span>)</div><div class=\"line\">  .route(<span class=\"regexp\">/activities/</span>).as(<span class=\"string\">\"getActivities\"</span>)</div><div class=\"line\">  .route(<span class=\"regexp\">/comments/</span>).as(<span class=\"string\">\"getComments\"</span>)</div><div class=\"line\">  .visit(<span class=\"string\">\"/dashboard\"</span>)</div><div class=\"line\"></div><div class=\"line\">  .wait([<span class=\"string\">\"@getUsers\"</span>, <span class=\"string\">\"@getActivities\"</span>, <span class=\"string\">\"getComments\"</span>])</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">xhrs</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// xhrs will now be an array of matching XHR's</span></div><div class=\"line\">    <span class=\"comment\">// xhrs[0] &lt;-- getUsers</span></div><div class=\"line\">    <span class=\"comment\">// xhrs[1] &lt;-- getActivities</span></div><div class=\"line\">    <span class=\"comment\">// xhrs[2] &lt;-- getComments</span></div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"You-could-also-use-the-cy-spread-command-here-to-spread-the-array-into-multiple-arguments\"><a href=\"#You-could-also-use-the-cy-spread-command-here-to-spread-the-array-into-multiple-arguments\" class=\"headerlink\" title=\"You could also use the cy.spread command here to spread the array into multiple arguments.\"></a>You could also use the <a href=\"https://on.cypress.io/api/spread\"><code>cy.spread</code></a> command here to spread the array into multiple arguments.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"regexp\">/users/</span>).as(<span class=\"string\">\"getUsers\"</span>)</div><div class=\"line\">  .route(<span class=\"regexp\">/activities/</span>).as(<span class=\"string\">\"getActivities\"</span>)</div><div class=\"line\">  .route(<span class=\"regexp\">/comments/</span>).as(<span class=\"string\">\"getComments\"</span>)</div><div class=\"line\">  .wait([<span class=\"string\">\"@getUsers\"</span>, <span class=\"string\">\"@getActivities\"</span>, <span class=\"string\">\"getComments\"</span>])</div><div class=\"line\">  .spread(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">getUsers, getActivities, getComments</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// each XHR is now an individual argument</span></div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h1><h2 id=\"requestTimeout-and-responseTimeout\"><a href=\"#requestTimeout-and-responseTimeout\" class=\"headerlink\" title=\"requestTimeout and responseTimeout\"></a>requestTimeout and responseTimeout</h2><p><code>cy.wait</code> goes through two separate “waiting” periods for a matching XHR.</p>\n<p>The first period waits for a matching request to leave the browser. This duration is configured by <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>requestTimeout</code></a> - which has a default of <code>5000</code> ms.</p>\n<p>This means that when you begin waiting for an XHR, Cypress will wait up to 5 seconds for a matching XHR to be created. If no matching XHR is found, you will get an error message that looks like this:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/11942578/8e7cba50-a805-11e5-805c-614f8640fbcc.png\" alt=\"screen shot 2015-12-21 at 5 00 09 pm\"></p>\n<p>Once Cypress detects that a matching XHR has begun its request it then switches over to the 2nd waiting period. This duration is configured by <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>responseTimeout</code></a> - which has a default of <code>20000</code> ms.</p>\n<p>This means Cypress will now wait up to 20 seconds for the external server to respond to this XHR. If no response is detected, you will get an error message that looks like this:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1268976/11942577/8e7196e8-a805-11e5-97b1-8acdde27755d.png\" alt=\"screen shot 2015-12-21 at 5 06 52 pm\"></p>\n<p>This gives you the best of both worlds - a fast error feedback loop when requests never go out, and a much longer duration for the actual external response.</p>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Wait-for-the-put-to-user-to-resolve\"><a href=\"#Wait-for-the-put-to-user-to-resolve\" class=\"headerlink\" title=\"Wait for the put to user to resolve.\"></a>Wait for the put to user to resolve.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"string\">\"PUT\"</span>, /users/, &#123;&#125;).as(<span class=\"string\">\"userPut\"</span>)</div><div class=\"line\">  .get(<span class=\"string\">\"form\"</span>).submit()</div><div class=\"line\">  .wait(<span class=\"string\">\"@userPut\"</span>)</div><div class=\"line\">    .its(<span class=\"string\">\"url\"</span>).should(<span class=\"string\">\"include\"</span>, <span class=\"string\">\"users\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"584\" alt=\"screen shot 2015-11-29 at 2 20 53 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459433/7eabc516-96a4-11e5-90c3-19f8e49a0b0c.png\"></p>\n<p>When clicking on <code>wait</code> within the command log, the console outputs the following:</p>\n<p><img width=\"952\" alt=\"screen shot 2015-11-29 at 2 21 11 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459434/81132966-96a4-11e5-962f-41718b49b142.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/server\">server</a></li>\n<li><a href=\"https://on.cypress.io/api/route\">route</a></li>\n<li><a href=\"https://on.cypress.io/api/as\">as</a></li>\n<li><a href=\"https://on.cypress.io/api/spread\">spread</a></li>\n</ul>\n"},{"title":"window","_content":"\nGet the global `window` object of the remote application [visited](https://on.cypress.io/api/visit).\n\n| | |\n|--- | --- |\n| **Returns** | the `window` object |\n| **Timeout** | `cy.window` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.window()](#section-usage)\n\nGet the global window object of the remote application you've visited.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.window`.\n\n**[cy.window( *options* )](#section-options-usage)**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Returns the remote window object\n\n```javascript\ncy\n  .visit(\"http://localhost:8080/app\")\n  .window().then(function(win){\n    // win is the remote window\n    // of the page at: http://localhost:8080/app\n  })\n```\n\n***\n\n# Options Usage\n\n## Passes timeout through to `cy.should` assertion\n\n```javascript\ncy.window({timeout: 10000}).should(\"have.property\", \"foo\")\n```\n\n***\n\n# Command Log\n\n## Get the window\n\n```javascript\ncy.window()\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"587\" alt=\"screen shot 2015-11-29 at 2 15 49 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459397/ced0a6de-96a3-11e5-93b4-9abd9ffabd98.png\">\n\nWhen clicking on `window` within the command log, the console outputs the following:\n\n<img width=\"758\" alt=\"screen shot 2015-11-29 at 2 16 22 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459398/d0e6f4be-96a3-11e5-8583-69dcffef9cd3.png\">\n\n***\n\n# Related\n\n- [visit](https://on.cypress.io/api/visit)\n- [document](https://on.cypress.io/api/document)\n","source":"api/commands/window.md","raw":"title: window\n---\n\nGet the global `window` object of the remote application [visited](https://on.cypress.io/api/visit).\n\n| | |\n|--- | --- |\n| **Returns** | the `window` object |\n| **Timeout** | `cy.window` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) |\n\n***\n\n# [cy.window()](#section-usage)\n\nGet the global window object of the remote application you've visited.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.window`.\n\n**[cy.window( *options* )](#section-options-usage)**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Returns the remote window object\n\n```javascript\ncy\n  .visit(\"http://localhost:8080/app\")\n  .window().then(function(win){\n    // win is the remote window\n    // of the page at: http://localhost:8080/app\n  })\n```\n\n***\n\n# Options Usage\n\n## Passes timeout through to `cy.should` assertion\n\n```javascript\ncy.window({timeout: 10000}).should(\"have.property\", \"foo\")\n```\n\n***\n\n# Command Log\n\n## Get the window\n\n```javascript\ncy.window()\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"587\" alt=\"screen shot 2015-11-29 at 2 15 49 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459397/ced0a6de-96a3-11e5-93b4-9abd9ffabd98.png\">\n\nWhen clicking on `window` within the command log, the console outputs the following:\n\n<img width=\"758\" alt=\"screen shot 2015-11-29 at 2 16 22 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459398/d0e6f4be-96a3-11e5-8583-69dcffef9cd3.png\">\n\n***\n\n# Related\n\n- [visit](https://on.cypress.io/api/visit)\n- [document](https://on.cypress.io/api/document)\n","date":"2017-04-19T18:52:06.000Z","updated":"2017-04-19T18:52:06.000Z","path":"api/commands/window.html","comments":1,"layout":"page","_id":"cj1pc4yl80001seg82g4cun2v","content":"<p>Get the global <code>window</code> object of the remote application <a href=\"https://on.cypress.io/api/visit\" target=\"_blank\" rel=\"external\">visited</a>.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the <code>window</code> object</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.window</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-window\"><a href=\"#cy-window\" class=\"headerlink\" title=\"cy.window()\"></a><a href=\"#section-usage\">cy.window()</a></h1><p>Get the global window object of the remote application you’ve visited.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.window</code>.</p>\n<p><strong><a href=\"#section-options-usage\">cy.window( <em>options</em> )</a></strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Returns-the-remote-window-object\"><a href=\"#Returns-the-remote-window-object\" class=\"headerlink\" title=\"Returns the remote window object\"></a>Returns the remote window object</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .visit(<span class=\"string\">\"http://localhost:8080/app\"</span>)</div><div class=\"line\">  .window().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">win</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// win is the remote window</span></div><div class=\"line\">    <span class=\"comment\">// of the page at: http://localhost:8080/app</span></div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Options-Usage\"><a href=\"#Options-Usage\" class=\"headerlink\" title=\"Options Usage\"></a>Options Usage</h1><h2 id=\"Passes-timeout-through-to-cy-should-assertion\"><a href=\"#Passes-timeout-through-to-cy-should-assertion\" class=\"headerlink\" title=\"Passes timeout through to cy.should assertion\"></a>Passes timeout through to <code>cy.should</code> assertion</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.window(&#123;<span class=\"attr\">timeout</span>: <span class=\"number\">10000</span>&#125;).should(<span class=\"string\">\"have.property\"</span>, <span class=\"string\">\"foo\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Get-the-window\"><a href=\"#Get-the-window\" class=\"headerlink\" title=\"Get the window\"></a>Get the window</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.window()</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"587\" alt=\"screen shot 2015-11-29 at 2 15 49 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459397/ced0a6de-96a3-11e5-93b4-9abd9ffabd98.png\"></p>\n<p>When clicking on <code>window</code> within the command log, the console outputs the following:</p>\n<p><img width=\"758\" alt=\"screen shot 2015-11-29 at 2 16 22 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459398/d0e6f4be-96a3-11e5-8583-69dcffef9cd3.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/visit\" target=\"_blank\" rel=\"external\">visit</a></li>\n<li><a href=\"https://on.cypress.io/api/document\" target=\"_blank\" rel=\"external\">document</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Get the global <code>window</code> object of the remote application <a href=\"https://on.cypress.io/api/visit\">visited</a>.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the <code>window</code> object</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.window</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-window\"><a href=\"#cy-window\" class=\"headerlink\" title=\"cy.window()\"></a><a href=\"#section-usage\">cy.window()</a></h1><p>Get the global window object of the remote application you’ve visited.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.window</code>.</p>\n<p><strong><a href=\"#section-options-usage\">cy.window( <em>options</em> )</a></strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Returns-the-remote-window-object\"><a href=\"#Returns-the-remote-window-object\" class=\"headerlink\" title=\"Returns the remote window object\"></a>Returns the remote window object</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .visit(<span class=\"string\">\"http://localhost:8080/app\"</span>)</div><div class=\"line\">  .window().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">win</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// win is the remote window</span></div><div class=\"line\">    <span class=\"comment\">// of the page at: http://localhost:8080/app</span></div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Options-Usage\"><a href=\"#Options-Usage\" class=\"headerlink\" title=\"Options Usage\"></a>Options Usage</h1><h2 id=\"Passes-timeout-through-to-cy-should-assertion\"><a href=\"#Passes-timeout-through-to-cy-should-assertion\" class=\"headerlink\" title=\"Passes timeout through to cy.should assertion\"></a>Passes timeout through to <code>cy.should</code> assertion</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.window(&#123;<span class=\"attr\">timeout</span>: <span class=\"number\">10000</span>&#125;).should(<span class=\"string\">\"have.property\"</span>, <span class=\"string\">\"foo\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Get-the-window\"><a href=\"#Get-the-window\" class=\"headerlink\" title=\"Get the window\"></a>Get the window</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.window()</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"587\" alt=\"screen shot 2015-11-29 at 2 15 49 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459397/ced0a6de-96a3-11e5-93b4-9abd9ffabd98.png\"></p>\n<p>When clicking on <code>window</code> within the command log, the console outputs the following:</p>\n<p><img width=\"758\" alt=\"screen shot 2015-11-29 at 2 16 22 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459398/d0e6f4be-96a3-11e5-8583-69dcffef9cd3.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/visit\">visit</a></li>\n<li><a href=\"https://on.cypress.io/api/document\">document</a></li>\n</ul>\n"},{"title":"within","_content":"\nReset the root scope to the current subject and pass that as an argument to the callback function.\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | *cannot timeout* |\n\n***\n\n# [cy.within( *function* )](#section-usage)\n\nSet the root scope to the current subject\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.within`.\n\n**cy.within( *options*, *function* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `false` | Display command in command log\n\n***\n\n# Usage\n\n## Get inputs within a form and submit the form\n\n```html\n<form>\n  <input name=\"email\" type=\"email\">\n  <input name=\"password\" type=\"password\">\n  <button type=\"submit\">Login</button>\n</form>\n```\n\n```javascript\ncy.get(\"form\").within(function(){\n  cy\n    .get(\"input[name='email']\").type(\"john.doe@email.com\")\n    .get(\"input[name='password']\").type(\"password\")\n    .root().submit()\n})\n```\n\n***\n\n# Related\n\n- [root](https://on.cypress.io/api/root)","source":"api/commands/within.md","raw":"title: within\n---\n\nReset the root scope to the current subject and pass that as an argument to the callback function.\n\n| | |\n|--- | --- |\n| **Returns** | the new DOM element(s) found by the command. |\n| **Timeout** | *cannot timeout* |\n\n***\n\n# [cy.within( *function* )](#section-usage)\n\nSet the root scope to the current subject\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.within`.\n\n**cy.within( *options*, *function* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `false` | Display command in command log\n\n***\n\n# Usage\n\n## Get inputs within a form and submit the form\n\n```html\n<form>\n  <input name=\"email\" type=\"email\">\n  <input name=\"password\" type=\"password\">\n  <button type=\"submit\">Login</button>\n</form>\n```\n\n```javascript\ncy.get(\"form\").within(function(){\n  cy\n    .get(\"input[name='email']\").type(\"john.doe@email.com\")\n    .get(\"input[name='password']\").type(\"password\")\n    .root().submit()\n})\n```\n\n***\n\n# Related\n\n- [root](https://on.cypress.io/api/root)","date":"2017-04-19T18:52:06.000Z","updated":"2017-04-19T18:52:06.000Z","path":"api/commands/within.html","comments":1,"layout":"page","_id":"cj1pc4yl80002seg869hslg59","content":"<p>Reset the root scope to the current subject and pass that as an argument to the callback function.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><em>cannot timeout</em></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-within-function\"><a href=\"#cy-within-function\" class=\"headerlink\" title=\"cy.within( function )\"></a><a href=\"#section-usage\">cy.within( <em>function</em> )</a></h1><p>Set the root scope to the current subject</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.within</code>.</p>\n<p><strong>cy.within( <em>options</em>, <em>function</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>false</code></td>\n<td>Display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Get-inputs-within-a-form-and-submit-the-form\"><a href=\"#Get-inputs-within-a-form-and-submit-the-form\" class=\"headerlink\" title=\"Get inputs within a form and submit the form\"></a>Get inputs within a form and submit the form</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"form\"</span>).within(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  cy</div><div class=\"line\">    .get(<span class=\"string\">\"input[name='email']\"</span>).type(<span class=\"string\">\"john.doe@email.com\"</span>)</div><div class=\"line\">    .get(<span class=\"string\">\"input[name='password']\"</span>).type(<span class=\"string\">\"password\"</span>)</div><div class=\"line\">    .root().submit()</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/root\" target=\"_blank\" rel=\"external\">root</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Reset the root scope to the current subject and pass that as an argument to the callback function.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the new DOM element(s) found by the command.</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><em>cannot timeout</em></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-within-function\"><a href=\"#cy-within-function\" class=\"headerlink\" title=\"cy.within( function )\"></a><a href=\"#section-usage\">cy.within( <em>function</em> )</a></h1><p>Set the root scope to the current subject</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.within</code>.</p>\n<p><strong>cy.within( <em>options</em>, <em>function</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>false</code></td>\n<td>Display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Get-inputs-within-a-form-and-submit-the-form\"><a href=\"#Get-inputs-within-a-form-and-submit-the-form\" class=\"headerlink\" title=\"Get inputs within a form and submit the form\"></a>Get inputs within a form and submit the form</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"form\"</span>).within(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  cy</div><div class=\"line\">    .get(<span class=\"string\">\"input[name='email']\"</span>).type(<span class=\"string\">\"john.doe@email.com\"</span>)</div><div class=\"line\">    .get(<span class=\"string\">\"input[name='password']\"</span>).type(<span class=\"string\">\"password\"</span>)</div><div class=\"line\">    .root().submit()</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/root\">root</a></li>\n</ul>\n"},{"title":"writefile","_content":"\nWrites to a file with the specified contents. JavaScript arrays and objects are stringified and formatted into text. If the path to the file does not exist, the file and it's path will be created. If the file already exists, it will be over-written.\n\n| | |\n|--- | --- |\n| **Returns** | the contents written to the file |\n| **Timeout** | `cy.writeFile` will wait for the duration of [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) for the server to write the file. |\n\n***\n\n# [cy.writeFile( *filePath*, *contents* )](#section-usage)\n\nWrites to the `filePath` with the `contents`. The `filePath` is relative to the project's root. `contents` must be a string, an array, or an object.\n\n***\n\n# [cy.writeFile( *filePath*, *contents*, *encoding* )](#section-specify-encoding)\n\nWrites to the `filePath` with the `contents` using the `encoding`. The `filePath` is relative to the project's root. `contents` must be a string, an array, or an object.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.writeFile`.\n\n**[cy.writeFile( *filePath*, *contents*, *options* )](#options-usage)**\n\n**[cy.writeFile( *filePath*, *contents*, *encoding*, *options* )](#options-usage)**\n\nOption | Default | Notes\n--- | --- | ---\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to wait for the `cy.writeFile` command to be processed\n\n***\n\n# Usage\n\n## Write some text to a `txt` file\n\n```javascript\n// {projectRoot}/path/to/message.txt will be created with the contents \"Hello World\"\ncy\n  .writeFile(\"path/to/message.txt\", \"Hello World\")\n  .then(function (text) {\n    expect(text).to.equal(\"Hello World\") // true\n  })\n```\n\n## Write JSON to a file\n\nJavaScript arrays and objects are stringified and formatted into text.\n\n```javascript\n// {projectRoot}/path/to/data.json will be created with the following:\n// {\n//   \"name\": \"Eliza\",\n//   \"email\": \"eliza@example.com\"\n// }\n\ncy\n  .writeFile(\"path/to/data.json\", { name: \"Eliza\", email: \"eliza@example.com\" })\n  .then(function (user) {\n    // user will equal:\n    // {\n    //   name: \"Eliza\",\n    //   email: \"eliza@example.com\"\n    // }\n    expect(user.name).to.equal(\"Eliza\")\n  })\n```\n\n## Write response data to a fixture file\n\n```javascript\ncy\n  .request('https://jsonplaceholder.typicode.com/users')\n  .then(function(response){\n    cy.writeFile('cypress/fixtures/users.json', response.body)\n  })\n  // our fixture file is now generated and can be used\n  .fixture('users')\n  .then(function(users){\n    expect(users[0].name).to.exist\n  })\n```\n\n## Specify encoding\n\nSpecify the encoding with the third argument.\n\n```javascript\n// {projectRoot}/path/to/message.txt will be created with the contents \"Hello World\"\n// the encoding will be \"ascii\"\ncy.writeFile(\"path/to/ascii.txt\", \"Hello World\", \"ascii\"))\n```\n\nThe following encodings are supported:\n\n* `ascii`\n* `base64`\n* `binary`\n* `hex`\n* `latin1`\n* `utf8`\n* `utf-8`\n* `ucs2`\n* `ucs-2`\n* `utf16le`\n* `utf-16le`\n\n***\n\n# Command Log\n\n## Write an array to a file\n\n```javascript\ncy.writeFile(\"info.log\", [\"foo\", \"bar\", \"baz\"])\n```\n\nThe command above will display in the command log as:\n\n<img width=\"618\" alt=\"screen shot of command log\" src=\"https://cloud.githubusercontent.com/assets/1157043/17936162/df857dda-69eb-11e6-8951-f34618a72e39.png\">\n\nWhen clicking on the `writeFile` command within the command log, the console outputs the following:\n\n<img width=\"452\" alt=\"screen shot of console output\" src=\"https://cloud.githubusercontent.com/assets/1157043/17936161/df7e6bf8-69eb-11e6-8ef2-a90113dece9b.png\">\n\n# Related\n\n- [readFile](https://on.cypress.io/api/readFile)\n- [Creating Fixtures](https://on.cypress.io/guides/creating-fixtures)\n","source":"api/commands/writefile.md","raw":"title: writefile\n---\n\nWrites to a file with the specified contents. JavaScript arrays and objects are stringified and formatted into text. If the path to the file does not exist, the file and it's path will be created. If the file already exists, it will be over-written.\n\n| | |\n|--- | --- |\n| **Returns** | the contents written to the file |\n| **Timeout** | `cy.writeFile` will wait for the duration of [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) for the server to write the file. |\n\n***\n\n# [cy.writeFile( *filePath*, *contents* )](#section-usage)\n\nWrites to the `filePath` with the `contents`. The `filePath` is relative to the project's root. `contents` must be a string, an array, or an object.\n\n***\n\n# [cy.writeFile( *filePath*, *contents*, *encoding* )](#section-specify-encoding)\n\nWrites to the `filePath` with the `contents` using the `encoding`. The `filePath` is relative to the project's root. `contents` must be a string, an array, or an object.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.writeFile`.\n\n**[cy.writeFile( *filePath*, *contents*, *options* )](#options-usage)**\n\n**[cy.writeFile( *filePath*, *contents*, *encoding*, *options* )](#options-usage)**\n\nOption | Default | Notes\n--- | --- | ---\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to wait for the `cy.writeFile` command to be processed\n\n***\n\n# Usage\n\n## Write some text to a `txt` file\n\n```javascript\n// {projectRoot}/path/to/message.txt will be created with the contents \"Hello World\"\ncy\n  .writeFile(\"path/to/message.txt\", \"Hello World\")\n  .then(function (text) {\n    expect(text).to.equal(\"Hello World\") // true\n  })\n```\n\n## Write JSON to a file\n\nJavaScript arrays and objects are stringified and formatted into text.\n\n```javascript\n// {projectRoot}/path/to/data.json will be created with the following:\n// {\n//   \"name\": \"Eliza\",\n//   \"email\": \"eliza@example.com\"\n// }\n\ncy\n  .writeFile(\"path/to/data.json\", { name: \"Eliza\", email: \"eliza@example.com\" })\n  .then(function (user) {\n    // user will equal:\n    // {\n    //   name: \"Eliza\",\n    //   email: \"eliza@example.com\"\n    // }\n    expect(user.name).to.equal(\"Eliza\")\n  })\n```\n\n## Write response data to a fixture file\n\n```javascript\ncy\n  .request('https://jsonplaceholder.typicode.com/users')\n  .then(function(response){\n    cy.writeFile('cypress/fixtures/users.json', response.body)\n  })\n  // our fixture file is now generated and can be used\n  .fixture('users')\n  .then(function(users){\n    expect(users[0].name).to.exist\n  })\n```\n\n## Specify encoding\n\nSpecify the encoding with the third argument.\n\n```javascript\n// {projectRoot}/path/to/message.txt will be created with the contents \"Hello World\"\n// the encoding will be \"ascii\"\ncy.writeFile(\"path/to/ascii.txt\", \"Hello World\", \"ascii\"))\n```\n\nThe following encodings are supported:\n\n* `ascii`\n* `base64`\n* `binary`\n* `hex`\n* `latin1`\n* `utf8`\n* `utf-8`\n* `ucs2`\n* `ucs-2`\n* `utf16le`\n* `utf-16le`\n\n***\n\n# Command Log\n\n## Write an array to a file\n\n```javascript\ncy.writeFile(\"info.log\", [\"foo\", \"bar\", \"baz\"])\n```\n\nThe command above will display in the command log as:\n\n<img width=\"618\" alt=\"screen shot of command log\" src=\"https://cloud.githubusercontent.com/assets/1157043/17936162/df857dda-69eb-11e6-8951-f34618a72e39.png\">\n\nWhen clicking on the `writeFile` command within the command log, the console outputs the following:\n\n<img width=\"452\" alt=\"screen shot of console output\" src=\"https://cloud.githubusercontent.com/assets/1157043/17936161/df7e6bf8-69eb-11e6-8ef2-a90113dece9b.png\">\n\n# Related\n\n- [readFile](https://on.cypress.io/api/readFile)\n- [Creating Fixtures](https://on.cypress.io/guides/creating-fixtures)\n","date":"2017-04-19T18:52:06.000Z","updated":"2017-04-19T18:52:06.000Z","path":"api/commands/writefile.html","comments":1,"layout":"page","_id":"cj1pc4yl90003seg8y4c33i37","content":"<p>Writes to a file with the specified contents. JavaScript arrays and objects are stringified and formatted into text. If the path to the file does not exist, the file and it’s path will be created. If the file already exists, it will be over-written.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the contents written to the file</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.writeFile</code> will wait for the duration of <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a> for the server to write the file.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-writeFile-filePath-contents\"><a href=\"#cy-writeFile-filePath-contents\" class=\"headerlink\" title=\"cy.writeFile( filePath, contents )\"></a><a href=\"#section-usage\">cy.writeFile( <em>filePath</em>, <em>contents</em> )</a></h1><p>Writes to the <code>filePath</code> with the <code>contents</code>. The <code>filePath</code> is relative to the project’s root. <code>contents</code> must be a string, an array, or an object.</p>\n<hr>\n<h1 id=\"cy-writeFile-filePath-contents-encoding\"><a href=\"#cy-writeFile-filePath-contents-encoding\" class=\"headerlink\" title=\"cy.writeFile( filePath, contents, encoding )\"></a><a href=\"#section-specify-encoding\">cy.writeFile( <em>filePath</em>, <em>contents</em>, <em>encoding</em> )</a></h1><p>Writes to the <code>filePath</code> with the <code>contents</code> using the <code>encoding</code>. The <code>filePath</code> is relative to the project’s root. <code>contents</code> must be a string, an array, or an object.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.writeFile</code>.</p>\n<p><strong><a href=\"#options-usage\">cy.writeFile( <em>filePath</em>, <em>contents</em>, <em>options</em> )</a></strong></p>\n<p><strong><a href=\"#options-usage\">cy.writeFile( <em>filePath</em>, <em>contents</em>, <em>encoding</em>, <em>options</em> )</a></strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to wait for the <code>cy.writeFile</code> command to be processed</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Write-some-text-to-a-txt-file\"><a href=\"#Write-some-text-to-a-txt-file\" class=\"headerlink\" title=\"Write some text to a txt file\"></a>Write some text to a <code>txt</code> file</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// &#123;projectRoot&#125;/path/to/message.txt will be created with the contents \"Hello World\"</span></div><div class=\"line\">cy</div><div class=\"line\">  .writeFile(<span class=\"string\">\"path/to/message.txt\"</span>, <span class=\"string\">\"Hello World\"</span>)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">text</span>) </span>&#123;</div><div class=\"line\">    expect(text).to.equal(<span class=\"string\">\"Hello World\"</span>) <span class=\"comment\">// true</span></div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Write-JSON-to-a-file\"><a href=\"#Write-JSON-to-a-file\" class=\"headerlink\" title=\"Write JSON to a file\"></a>Write JSON to a file</h2><p>JavaScript arrays and objects are stringified and formatted into text.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// &#123;projectRoot&#125;/path/to/data.json will be created with the following:</span></div><div class=\"line\"><span class=\"comment\">// &#123;</span></div><div class=\"line\"><span class=\"comment\">//   \"name\": \"Eliza\",</span></div><div class=\"line\"><span class=\"comment\">//   \"email\": \"eliza@example.com\"</span></div><div class=\"line\"><span class=\"comment\">// &#125;</span></div><div class=\"line\"></div><div class=\"line\">cy</div><div class=\"line\">  .writeFile(<span class=\"string\">\"path/to/data.json\"</span>, &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Eliza\"</span>, <span class=\"attr\">email</span>: <span class=\"string\">\"eliza@example.com\"</span> &#125;)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">user</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// user will equal:</span></div><div class=\"line\">    <span class=\"comment\">// &#123;</span></div><div class=\"line\">    <span class=\"comment\">//   name: \"Eliza\",</span></div><div class=\"line\">    <span class=\"comment\">//   email: \"eliza@example.com\"</span></div><div class=\"line\">    <span class=\"comment\">// &#125;</span></div><div class=\"line\">    expect(user.name).to.equal(<span class=\"string\">\"Eliza\"</span>)</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Write-response-data-to-a-fixture-file\"><a href=\"#Write-response-data-to-a-fixture-file\" class=\"headerlink\" title=\"Write response data to a fixture file\"></a>Write response data to a fixture file</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .request(<span class=\"string\">'https://jsonplaceholder.typicode.com/users'</span>)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">    cy.writeFile(<span class=\"string\">'cypress/fixtures/users.json'</span>, response.body)</div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"comment\">// our fixture file is now generated and can be used</span></div><div class=\"line\">  .fixture(<span class=\"string\">'users'</span>)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">users</span>)</span>&#123;</div><div class=\"line\">    expect(users[<span class=\"number\">0</span>].name).to.exist</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Specify-encoding\"><a href=\"#Specify-encoding\" class=\"headerlink\" title=\"Specify encoding\"></a>Specify encoding</h2><p>Specify the encoding with the third argument.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// &#123;projectRoot&#125;/path/to/message.txt will be created with the contents \"Hello World\"</span></div><div class=\"line\"><span class=\"comment\">// the encoding will be \"ascii\"</span></div><div class=\"line\">cy.writeFile(<span class=\"string\">\"path/to/ascii.txt\"</span>, <span class=\"string\">\"Hello World\"</span>, <span class=\"string\">\"ascii\"</span>))</div></pre></td></tr></table></figure>\n<p>The following encodings are supported:</p>\n<ul>\n<li><code>ascii</code></li>\n<li><code>base64</code></li>\n<li><code>binary</code></li>\n<li><code>hex</code></li>\n<li><code>latin1</code></li>\n<li><code>utf8</code></li>\n<li><code>utf-8</code></li>\n<li><code>ucs2</code></li>\n<li><code>ucs-2</code></li>\n<li><code>utf16le</code></li>\n<li><code>utf-16le</code></li>\n</ul>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Write-an-array-to-a-file\"><a href=\"#Write-an-array-to-a-file\" class=\"headerlink\" title=\"Write an array to a file\"></a>Write an array to a file</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.writeFile(<span class=\"string\">\"info.log\"</span>, [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>])</div></pre></td></tr></table></figure>\n<p>The command above will display in the command log as:</p>\n<p><img width=\"618\" alt=\"screen shot of command log\" src=\"https://cloud.githubusercontent.com/assets/1157043/17936162/df857dda-69eb-11e6-8951-f34618a72e39.png\"></p>\n<p>When clicking on the <code>writeFile</code> command within the command log, the console outputs the following:</p>\n<p><img width=\"452\" alt=\"screen shot of console output\" src=\"https://cloud.githubusercontent.com/assets/1157043/17936161/df7e6bf8-69eb-11e6-8ef2-a90113dece9b.png\"></p>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/readFile\" target=\"_blank\" rel=\"external\">readFile</a></li>\n<li><a href=\"https://on.cypress.io/guides/creating-fixtures\" target=\"_blank\" rel=\"external\">Creating Fixtures</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Writes to a file with the specified contents. JavaScript arrays and objects are stringified and formatted into text. If the path to the file does not exist, the file and it’s path will be created. If the file already exists, it will be over-written.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the contents written to the file</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.writeFile</code> will wait for the duration of <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a> for the server to write the file.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-writeFile-filePath-contents\"><a href=\"#cy-writeFile-filePath-contents\" class=\"headerlink\" title=\"cy.writeFile( filePath, contents )\"></a><a href=\"#section-usage\">cy.writeFile( <em>filePath</em>, <em>contents</em> )</a></h1><p>Writes to the <code>filePath</code> with the <code>contents</code>. The <code>filePath</code> is relative to the project’s root. <code>contents</code> must be a string, an array, or an object.</p>\n<hr>\n<h1 id=\"cy-writeFile-filePath-contents-encoding\"><a href=\"#cy-writeFile-filePath-contents-encoding\" class=\"headerlink\" title=\"cy.writeFile( filePath, contents, encoding )\"></a><a href=\"#section-specify-encoding\">cy.writeFile( <em>filePath</em>, <em>contents</em>, <em>encoding</em> )</a></h1><p>Writes to the <code>filePath</code> with the <code>contents</code> using the <code>encoding</code>. The <code>filePath</code> is relative to the project’s root. <code>contents</code> must be a string, an array, or an object.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.writeFile</code>.</p>\n<p><strong><a href=\"#options-usage\">cy.writeFile( <em>filePath</em>, <em>contents</em>, <em>options</em> )</a></strong></p>\n<p><strong><a href=\"#options-usage\">cy.writeFile( <em>filePath</em>, <em>contents</em>, <em>encoding</em>, <em>options</em> )</a></strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to wait for the <code>cy.writeFile</code> command to be processed</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Write-some-text-to-a-txt-file\"><a href=\"#Write-some-text-to-a-txt-file\" class=\"headerlink\" title=\"Write some text to a txt file\"></a>Write some text to a <code>txt</code> file</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// &#123;projectRoot&#125;/path/to/message.txt will be created with the contents \"Hello World\"</span></div><div class=\"line\">cy</div><div class=\"line\">  .writeFile(<span class=\"string\">\"path/to/message.txt\"</span>, <span class=\"string\">\"Hello World\"</span>)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">text</span>) </span>&#123;</div><div class=\"line\">    expect(text).to.equal(<span class=\"string\">\"Hello World\"</span>) <span class=\"comment\">// true</span></div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Write-JSON-to-a-file\"><a href=\"#Write-JSON-to-a-file\" class=\"headerlink\" title=\"Write JSON to a file\"></a>Write JSON to a file</h2><p>JavaScript arrays and objects are stringified and formatted into text.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// &#123;projectRoot&#125;/path/to/data.json will be created with the following:</span></div><div class=\"line\"><span class=\"comment\">// &#123;</span></div><div class=\"line\"><span class=\"comment\">//   \"name\": \"Eliza\",</span></div><div class=\"line\"><span class=\"comment\">//   \"email\": \"eliza@example.com\"</span></div><div class=\"line\"><span class=\"comment\">// &#125;</span></div><div class=\"line\"></div><div class=\"line\">cy</div><div class=\"line\">  .writeFile(<span class=\"string\">\"path/to/data.json\"</span>, &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Eliza\"</span>, <span class=\"attr\">email</span>: <span class=\"string\">\"eliza@example.com\"</span> &#125;)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">user</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// user will equal:</span></div><div class=\"line\">    <span class=\"comment\">// &#123;</span></div><div class=\"line\">    <span class=\"comment\">//   name: \"Eliza\",</span></div><div class=\"line\">    <span class=\"comment\">//   email: \"eliza@example.com\"</span></div><div class=\"line\">    <span class=\"comment\">// &#125;</span></div><div class=\"line\">    expect(user.name).to.equal(<span class=\"string\">\"Eliza\"</span>)</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Write-response-data-to-a-fixture-file\"><a href=\"#Write-response-data-to-a-fixture-file\" class=\"headerlink\" title=\"Write response data to a fixture file\"></a>Write response data to a fixture file</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .request(<span class=\"string\">'https://jsonplaceholder.typicode.com/users'</span>)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">    cy.writeFile(<span class=\"string\">'cypress/fixtures/users.json'</span>, response.body)</div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"comment\">// our fixture file is now generated and can be used</span></div><div class=\"line\">  .fixture(<span class=\"string\">'users'</span>)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">users</span>)</span>&#123;</div><div class=\"line\">    expect(users[<span class=\"number\">0</span>].name).to.exist</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Specify-encoding\"><a href=\"#Specify-encoding\" class=\"headerlink\" title=\"Specify encoding\"></a>Specify encoding</h2><p>Specify the encoding with the third argument.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// &#123;projectRoot&#125;/path/to/message.txt will be created with the contents \"Hello World\"</span></div><div class=\"line\"><span class=\"comment\">// the encoding will be \"ascii\"</span></div><div class=\"line\">cy.writeFile(<span class=\"string\">\"path/to/ascii.txt\"</span>, <span class=\"string\">\"Hello World\"</span>, <span class=\"string\">\"ascii\"</span>))</div></pre></td></tr></table></figure>\n<p>The following encodings are supported:</p>\n<ul>\n<li><code>ascii</code></li>\n<li><code>base64</code></li>\n<li><code>binary</code></li>\n<li><code>hex</code></li>\n<li><code>latin1</code></li>\n<li><code>utf8</code></li>\n<li><code>utf-8</code></li>\n<li><code>ucs2</code></li>\n<li><code>ucs-2</code></li>\n<li><code>utf16le</code></li>\n<li><code>utf-16le</code></li>\n</ul>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Write-an-array-to-a-file\"><a href=\"#Write-an-array-to-a-file\" class=\"headerlink\" title=\"Write an array to a file\"></a>Write an array to a file</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.writeFile(<span class=\"string\">\"info.log\"</span>, [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>])</div></pre></td></tr></table></figure>\n<p>The command above will display in the command log as:</p>\n<p><img width=\"618\" alt=\"screen shot of command log\" src=\"https://cloud.githubusercontent.com/assets/1157043/17936162/df857dda-69eb-11e6-8951-f34618a72e39.png\"></p>\n<p>When clicking on the <code>writeFile</code> command within the command log, the console outputs the following:</p>\n<p><img width=\"452\" alt=\"screen shot of console output\" src=\"https://cloud.githubusercontent.com/assets/1157043/17936161/df7e6bf8-69eb-11e6-8ef2-a90113dece9b.png\"></p>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/readFile\">readFile</a></li>\n<li><a href=\"https://on.cypress.io/guides/creating-fixtures\">Creating Fixtures</a></li>\n</ul>\n"},{"title":"wrap","_content":"\nReturn the object passed into `cy.wrap`.\n\n| | |\n|--- | --- |\n| **Returns** | the object passed into `cy.wrap` |\n| **Timeout** | *cannot timeout* |\n\n***\n\n# [cy.wrap( *object* )](#section-usage)\n\nReturn the object passed into `cy.wrap`.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.wrap`.\n\n**cy.wrap( *object*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Invokes the function on the subject in wrap and returns the new value.\n\n```javascript\nvar fn = function(){\n  return \"bar\"\n}\n\ncy.wrap({foo: fn}).invoke(\"foo\").should(\"eq\", \"bar\") // true\n```\n\n***\n\n# Related\n\n- [invoke](https://on.cypress.io/api/invoke)\n- [its](https://on.cypress.io/api/its)\n- [then](https://on.cypress.io/api/then)\n","source":"api/commands/wrap.md","raw":"title: wrap\n---\n\nReturn the object passed into `cy.wrap`.\n\n| | |\n|--- | --- |\n| **Returns** | the object passed into `cy.wrap` |\n| **Timeout** | *cannot timeout* |\n\n***\n\n# [cy.wrap( *object* )](#section-usage)\n\nReturn the object passed into `cy.wrap`.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.wrap`.\n\n**cy.wrap( *object*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Invokes the function on the subject in wrap and returns the new value.\n\n```javascript\nvar fn = function(){\n  return \"bar\"\n}\n\ncy.wrap({foo: fn}).invoke(\"foo\").should(\"eq\", \"bar\") // true\n```\n\n***\n\n# Related\n\n- [invoke](https://on.cypress.io/api/invoke)\n- [its](https://on.cypress.io/api/its)\n- [then](https://on.cypress.io/api/then)\n","date":"2017-04-19T18:52:06.000Z","updated":"2017-04-19T18:52:06.000Z","path":"api/commands/wrap.html","comments":1,"layout":"page","_id":"cj1pc4yl90004seg8lnidtef4","content":"<p>Return the object passed into <code>cy.wrap</code>.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the object passed into <code>cy.wrap</code></td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><em>cannot timeout</em></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-wrap-object\"><a href=\"#cy-wrap-object\" class=\"headerlink\" title=\"cy.wrap( object )\"></a><a href=\"#section-usage\">cy.wrap( <em>object</em> )</a></h1><p>Return the object passed into <code>cy.wrap</code>.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.wrap</code>.</p>\n<p><strong>cy.wrap( <em>object</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Invokes-the-function-on-the-subject-in-wrap-and-returns-the-new-value\"><a href=\"#Invokes-the-function-on-the-subject-in-wrap-and-returns-the-new-value\" class=\"headerlink\" title=\"Invokes the function on the subject in wrap and returns the new value.\"></a>Invokes the function on the subject in wrap and returns the new value.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">cy.wrap(&#123;<span class=\"attr\">foo</span>: fn&#125;).invoke(<span class=\"string\">\"foo\"</span>).should(<span class=\"string\">\"eq\"</span>, <span class=\"string\">\"bar\"</span>) <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/invoke\" target=\"_blank\" rel=\"external\">invoke</a></li>\n<li><a href=\"https://on.cypress.io/api/its\" target=\"_blank\" rel=\"external\">its</a></li>\n<li><a href=\"https://on.cypress.io/api/then\" target=\"_blank\" rel=\"external\">then</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Return the object passed into <code>cy.wrap</code>.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the object passed into <code>cy.wrap</code></td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><em>cannot timeout</em></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-wrap-object\"><a href=\"#cy-wrap-object\" class=\"headerlink\" title=\"cy.wrap( object )\"></a><a href=\"#section-usage\">cy.wrap( <em>object</em> )</a></h1><p>Return the object passed into <code>cy.wrap</code>.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.wrap</code>.</p>\n<p><strong>cy.wrap( <em>object</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Invokes-the-function-on-the-subject-in-wrap-and-returns-the-new-value\"><a href=\"#Invokes-the-function-on-the-subject-in-wrap-and-returns-the-new-value\" class=\"headerlink\" title=\"Invokes the function on the subject in wrap and returns the new value.\"></a>Invokes the function on the subject in wrap and returns the new value.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"bar\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">cy.wrap(&#123;<span class=\"attr\">foo</span>: fn&#125;).invoke(<span class=\"string\">\"foo\"</span>).should(<span class=\"string\">\"eq\"</span>, <span class=\"string\">\"bar\"</span>) <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/invoke\">invoke</a></li>\n<li><a href=\"https://on.cypress.io/api/its\">its</a></li>\n<li><a href=\"https://on.cypress.io/api/then\">then</a></li>\n</ul>\n"},{"title":"url","_content":"\nGet the current URL. `cy.url()` uses [`cy.location.href`](https://on.cypress.io/api/location) under the hood.\n\n| | |\n|--- | --- |\n| **Returns** | the current URL as a string |\n| **Timeout** | *cannot timeout* |\n\n***\n\n# [cy.url()](#section-usage)\n\nGet the current URL.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.url`.\n\n**cy.url( *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Assert the URL is `http://localhost:8000/users/1/edit`\n\n```javascript\n// clicking the anchor causes the browser to follow the link\ncy\n  .get(\"#user-edit a\").click()\n  .url().should(\"eq\", \"http://localhost:8000/users/1/edit\") // => true\n```\n\n***\n\n## URL is a shortcut for `cy.location().href`\n\n`cy.url()` uses `href` under the hood.\n\n```javascript\ncy.url()                  // these return the same string\ncy.location().its(\"href\") // these return the same string\n```\n\n***\n\n# Notes\n\n## Why is this command called `url` instead of `href`?\n\nGiven the remote URL, `http://localhost:8000/index.html`, all 3 of these assertions are the same.\n\n```javascript\ncy.location().its(\"href\").should(\"eq\", \"http://localhost:8000/index.html\")\n\ncy.location().invoke(\"toString\").should(\"eq\", \"http://localhost:8000/index.html\")\n\ncy.url().should(\"eq\", \"http://localhost:8000/index.html\")\n```\n\n`href` and `toString` come from the `window.location` spec.\n\nBut you may be wondering where the `url` property comes from.  Per the `window.location` spec, there actually isn't a `url` property on the `location` object.\n\n`cy.url()` exists because it's what most developers naturally assume would return them the full current URL.  We almost never refer to the URL as an `href`.\n\n***\n\n# Command Log\n\n## Assert that the url contains \"#users/new\"\n\n```javascript\ncy.url().should(\"contain\", \"#users/new\")\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"583\" alt=\"screen shot 2015-11-29 at 1 42 40 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459196/20645888-969f-11e5-973a-6a4a98339b15.png\">\n\nWhen clicking on `url` within the command log, the console outputs the following:\n\n<img width=\"440\" alt=\"screen shot 2015-11-29 at 1 42 52 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459197/229e2552-969f-11e5-80a9-eeaf3221a178.png\">\n\n***\n\n# Related\n\n- [hash](https://on.cypress.io/api/hash)\n- [location](https://on.cypress.io/api/location)","source":"api/commands/url.md","raw":"title: url\n---\n\nGet the current URL. `cy.url()` uses [`cy.location.href`](https://on.cypress.io/api/location) under the hood.\n\n| | |\n|--- | --- |\n| **Returns** | the current URL as a string |\n| **Timeout** | *cannot timeout* |\n\n***\n\n# [cy.url()](#section-usage)\n\nGet the current URL.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.url`.\n\n**cy.url( *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Assert the URL is `http://localhost:8000/users/1/edit`\n\n```javascript\n// clicking the anchor causes the browser to follow the link\ncy\n  .get(\"#user-edit a\").click()\n  .url().should(\"eq\", \"http://localhost:8000/users/1/edit\") // => true\n```\n\n***\n\n## URL is a shortcut for `cy.location().href`\n\n`cy.url()` uses `href` under the hood.\n\n```javascript\ncy.url()                  // these return the same string\ncy.location().its(\"href\") // these return the same string\n```\n\n***\n\n# Notes\n\n## Why is this command called `url` instead of `href`?\n\nGiven the remote URL, `http://localhost:8000/index.html`, all 3 of these assertions are the same.\n\n```javascript\ncy.location().its(\"href\").should(\"eq\", \"http://localhost:8000/index.html\")\n\ncy.location().invoke(\"toString\").should(\"eq\", \"http://localhost:8000/index.html\")\n\ncy.url().should(\"eq\", \"http://localhost:8000/index.html\")\n```\n\n`href` and `toString` come from the `window.location` spec.\n\nBut you may be wondering where the `url` property comes from.  Per the `window.location` spec, there actually isn't a `url` property on the `location` object.\n\n`cy.url()` exists because it's what most developers naturally assume would return them the full current URL.  We almost never refer to the URL as an `href`.\n\n***\n\n# Command Log\n\n## Assert that the url contains \"#users/new\"\n\n```javascript\ncy.url().should(\"contain\", \"#users/new\")\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"583\" alt=\"screen shot 2015-11-29 at 1 42 40 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459196/20645888-969f-11e5-973a-6a4a98339b15.png\">\n\nWhen clicking on `url` within the command log, the console outputs the following:\n\n<img width=\"440\" alt=\"screen shot 2015-11-29 at 1 42 52 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459197/229e2552-969f-11e5-80a9-eeaf3221a178.png\">\n\n***\n\n# Related\n\n- [hash](https://on.cypress.io/api/hash)\n- [location](https://on.cypress.io/api/location)","date":"2017-04-19T18:52:26.000Z","updated":"2017-04-19T18:52:26.000Z","path":"api/commands/url.html","comments":1,"layout":"page","_id":"cj1pc5cj20000u1g8g3ceorti","content":"<p>Get the current URL. <code>cy.url()</code> uses <a href=\"https://on.cypress.io/api/location\" target=\"_blank\" rel=\"external\"><code>cy.location.href</code></a> under the hood.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the current URL as a string</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><em>cannot timeout</em></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-url\"><a href=\"#cy-url\" class=\"headerlink\" title=\"cy.url()\"></a><a href=\"#section-usage\">cy.url()</a></h1><p>Get the current URL.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.url</code>.</p>\n<p><strong>cy.url( <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Assert-the-URL-is-http-localhost-8000-users-1-edit\"><a href=\"#Assert-the-URL-is-http-localhost-8000-users-1-edit\" class=\"headerlink\" title=\"Assert the URL is http://localhost:8000/users/1/edit\"></a>Assert the URL is <code>http://localhost:8000/users/1/edit</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// clicking the anchor causes the browser to follow the link</span></div><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"#user-edit a\"</span>).click()</div><div class=\"line\">  .url().should(<span class=\"string\">\"eq\"</span>, <span class=\"string\">\"http://localhost:8000/users/1/edit\"</span>) <span class=\"comment\">// =&gt; true</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"URL-is-a-shortcut-for-cy-location-href\"><a href=\"#URL-is-a-shortcut-for-cy-location-href\" class=\"headerlink\" title=\"URL is a shortcut for cy.location().href\"></a>URL is a shortcut for <code>cy.location().href</code></h2><p><code>cy.url()</code> uses <code>href</code> under the hood.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.url()                  <span class=\"comment\">// these return the same string</span></div><div class=\"line\">cy.location().its(<span class=\"string\">\"href\"</span>) <span class=\"comment\">// these return the same string</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h1><h2 id=\"Why-is-this-command-called-url-instead-of-href\"><a href=\"#Why-is-this-command-called-url-instead-of-href\" class=\"headerlink\" title=\"Why is this command called url instead of href?\"></a>Why is this command called <code>url</code> instead of <code>href</code>?</h2><p>Given the remote URL, <code>http://localhost:8000/index.html</code>, all 3 of these assertions are the same.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.location().its(<span class=\"string\">\"href\"</span>).should(<span class=\"string\">\"eq\"</span>, <span class=\"string\">\"http://localhost:8000/index.html\"</span>)</div><div class=\"line\"></div><div class=\"line\">cy.location().invoke(<span class=\"string\">\"toString\"</span>).should(<span class=\"string\">\"eq\"</span>, <span class=\"string\">\"http://localhost:8000/index.html\"</span>)</div><div class=\"line\"></div><div class=\"line\">cy.url().should(<span class=\"string\">\"eq\"</span>, <span class=\"string\">\"http://localhost:8000/index.html\"</span>)</div></pre></td></tr></table></figure>\n<p><code>href</code> and <code>toString</code> come from the <code>window.location</code> spec.</p>\n<p>But you may be wondering where the <code>url</code> property comes from.  Per the <code>window.location</code> spec, there actually isn’t a <code>url</code> property on the <code>location</code> object.</p>\n<p><code>cy.url()</code> exists because it’s what most developers naturally assume would return them the full current URL.  We almost never refer to the URL as an <code>href</code>.</p>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Assert-that-the-url-contains-“-users-new”\"><a href=\"#Assert-that-the-url-contains-“-users-new”\" class=\"headerlink\" title=\"Assert that the url contains “#users/new”\"></a>Assert that the url contains “#users/new”</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.url().should(<span class=\"string\">\"contain\"</span>, <span class=\"string\">\"#users/new\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"583\" alt=\"screen shot 2015-11-29 at 1 42 40 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459196/20645888-969f-11e5-973a-6a4a98339b15.png\"></p>\n<p>When clicking on <code>url</code> within the command log, the console outputs the following:</p>\n<p><img width=\"440\" alt=\"screen shot 2015-11-29 at 1 42 52 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459197/229e2552-969f-11e5-80a9-eeaf3221a178.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/hash\" target=\"_blank\" rel=\"external\">hash</a></li>\n<li><a href=\"https://on.cypress.io/api/location\" target=\"_blank\" rel=\"external\">location</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Get the current URL. <code>cy.url()</code> uses <a href=\"https://on.cypress.io/api/location\"><code>cy.location.href</code></a> under the hood.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the current URL as a string</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><em>cannot timeout</em></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-url\"><a href=\"#cy-url\" class=\"headerlink\" title=\"cy.url()\"></a><a href=\"#section-usage\">cy.url()</a></h1><p>Get the current URL.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.url</code>.</p>\n<p><strong>cy.url( <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Assert-the-URL-is-http-localhost-8000-users-1-edit\"><a href=\"#Assert-the-URL-is-http-localhost-8000-users-1-edit\" class=\"headerlink\" title=\"Assert the URL is http://localhost:8000/users/1/edit\"></a>Assert the URL is <code>http://localhost:8000/users/1/edit</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// clicking the anchor causes the browser to follow the link</span></div><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"#user-edit a\"</span>).click()</div><div class=\"line\">  .url().should(<span class=\"string\">\"eq\"</span>, <span class=\"string\">\"http://localhost:8000/users/1/edit\"</span>) <span class=\"comment\">// =&gt; true</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"URL-is-a-shortcut-for-cy-location-href\"><a href=\"#URL-is-a-shortcut-for-cy-location-href\" class=\"headerlink\" title=\"URL is a shortcut for cy.location().href\"></a>URL is a shortcut for <code>cy.location().href</code></h2><p><code>cy.url()</code> uses <code>href</code> under the hood.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.url()                  <span class=\"comment\">// these return the same string</span></div><div class=\"line\">cy.location().its(<span class=\"string\">\"href\"</span>) <span class=\"comment\">// these return the same string</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h1><h2 id=\"Why-is-this-command-called-url-instead-of-href\"><a href=\"#Why-is-this-command-called-url-instead-of-href\" class=\"headerlink\" title=\"Why is this command called url instead of href?\"></a>Why is this command called <code>url</code> instead of <code>href</code>?</h2><p>Given the remote URL, <code>http://localhost:8000/index.html</code>, all 3 of these assertions are the same.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.location().its(<span class=\"string\">\"href\"</span>).should(<span class=\"string\">\"eq\"</span>, <span class=\"string\">\"http://localhost:8000/index.html\"</span>)</div><div class=\"line\"></div><div class=\"line\">cy.location().invoke(<span class=\"string\">\"toString\"</span>).should(<span class=\"string\">\"eq\"</span>, <span class=\"string\">\"http://localhost:8000/index.html\"</span>)</div><div class=\"line\"></div><div class=\"line\">cy.url().should(<span class=\"string\">\"eq\"</span>, <span class=\"string\">\"http://localhost:8000/index.html\"</span>)</div></pre></td></tr></table></figure>\n<p><code>href</code> and <code>toString</code> come from the <code>window.location</code> spec.</p>\n<p>But you may be wondering where the <code>url</code> property comes from.  Per the <code>window.location</code> spec, there actually isn’t a <code>url</code> property on the <code>location</code> object.</p>\n<p><code>cy.url()</code> exists because it’s what most developers naturally assume would return them the full current URL.  We almost never refer to the URL as an <code>href</code>.</p>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Assert-that-the-url-contains-“-users-new”\"><a href=\"#Assert-that-the-url-contains-“-users-new”\" class=\"headerlink\" title=\"Assert that the url contains “#users/new”\"></a>Assert that the url contains “#users/new”</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.url().should(<span class=\"string\">\"contain\"</span>, <span class=\"string\">\"#users/new\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"583\" alt=\"screen shot 2015-11-29 at 1 42 40 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459196/20645888-969f-11e5-973a-6a4a98339b15.png\"></p>\n<p>When clicking on <code>url</code> within the command log, the console outputs the following:</p>\n<p><img width=\"440\" alt=\"screen shot 2015-11-29 at 1 42 52 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459197/229e2552-969f-11e5-80a9-eeaf3221a178.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/hash\">hash</a></li>\n<li><a href=\"https://on.cypress.io/api/location\">location</a></li>\n</ul>\n"},{"title":"viewport","_content":"\nUse `cy.viewport` to control the screen size and orientation of your application. This command is useful for when you need to test your application in a specific width or height, such as responsive applications or applications utilizing media queries. `cy.viewport` width and height must be between 200px and 3000px.\n\n| | |\n|--- | --- |\n| **Returns** | `null` |\n| **Timeout** | *cannot timeout* |\n\n***\n\n# [cy.viewport( *width*, *height* )](#section-usage)\n\nResize the viewport to the specified dimensions in pixels.\n\n***\n\n# [cy.viewport( *preset*, *orientation* )](#section-preset-usage)\n\nResize the viewport to a preset dimension. Viewport supports the following presets (in pixels):\n\n| Preset | width | height |\n| ----------- | ----- | ------ |\n| `macbook-15`  | 1440  | 900    |\n| `macbook-13`  | 1280  | 800    |\n| `macbook-11`  | 1366  | 768    |\n| `ipad-2`      | 1024  | 768    |\n| `ipad-mini`   | 1024  | 768    |\n| `iphone-6+`   | 414   | 736    |\n| `iphone-6`    | 375   | 667    |\n| `iphone-5`    | 320   | 568    |\n| `iphone-4`    | 320   | 480    |\n| `iphone-3`    | 320   | 480    |\n\nThe **default orientation** is `portrait`. Pass `landscape` as the orientation to reverse the width/height.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.viewport`.\n\n**cy.viewport( *width*, *height*, *options* )**\n**cy.viewport( *preset*, *orientation*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n\nYou can also set options for the viewport's `viewportWidth` and `viewportHeight` globally in [configuration](https://on.cypress.io/guides/configuration).\n\n***\n\n# Usage\n\n## Resize the viewport to 1024 x 768\n\n```javascript\n// the viewport will now be changed to 1024x768 pixels\ncy.viewport(1024, 768)\n```\n\n***\n\n## Organize desktop vs mobile tests separately\n\n```javascript\ndescribe(\"Nav Menus\", function(){\n  context(\"720p resolution\", function(){\n    beforeEach(function(){\n      // run these tests in a desktop browser\n      // with a 720p monitor\n      cy.viewport(1280, 720)\n    })\n\n    it(\"displays full header\", function(){\n      cy\n        .get(\"nav .desktop-menu\").should(\"be.visible\")\n        .get(\"nav .mobile-menu\").should(\"not.be.visible\")\n    })\n\n  context(\"iphone-5 resolution\", function(){\n    beforeEach(function(){\n      // run these tests in a mobile browser\n      // and ensure our responsive UI is correct\n      cy.viewport(\"iphone-5\")\n    })\n\n    it(\"displays mobile menu on click\", function(){\n      cy\n        .get(\"nav .desktop-menu\").should(\"not.be.visible\")\n        .get(\"nav .mobile-menu\")\n          .should(\"be.visible\")\n          .find(\"i.hamburger\").click()\n        .get(\"ul.slideout-menu\").should(\"be.visible\")\n    })\n  })\n})\n```\n\n***\n\n# Preset Usage\n\n## Resize the viewport to iPhone 6 width and height\n\n```javascript\n// the viewport will now be changed to 414x736\ncy.viewport(\"iphone-6\")\n```\n\n***\n\n## Change the orientation to landscape\n\n```javascript\n// the viewport will now be changed to 736x414\n// which simulates the user holding the iPhone in lanscape\ncy.viewport(\"iphone-6\", \"landscape\")\n```\n\n***\n\n# Known Issues\n\n## `devicePixelRatio` is not simulated\n\nThis is something Cypress will eventually do, which will match how Chrome's responsive mobile browsing simulation works. [Open an issue](https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A) if you need this to be fixed.\n\n***\n\n# Notes\n\n## Cypress will restore the viewport for each command\n\nWhen hovering over each command, Cypress will automatically restore the viewport to the dimensions that existed when that command ran.\n\n***\n\n## Default sizing\n\nBy default, until you issue a `cy.viewport` command, Cypress will assume the width is: `1000px` and the height is `660px`.\n\nYou can [change these default dimensions](https://on.cypress.io/guides/configuration) by adding the following to your `cypress.json`\n\n```javascript\n{\n  viewportWidth: 1000,\n  viewportHeight: 660\n}\n```\n\nAdditionally, Cypress automatically sets the viewport to it's default size between each test.\n\n***\n\n## Auto Scaling\n\nBy default, if your screen is not large enough to display all of the current dimension's pixels, Cypress will scale and center your application within Cypress to accommodate.\n\nScaling the app should not affect any calculations or behavior of your application (in fact it won't even know it's being scaled).\n\nThe upsides to this is that tests should consistently pass or fail regardless of each of your developers' screen sizes. Tests will also consistently run in `CI` because all of the viewports will be the same no matter what machine Cypress runs on.\n\n# Related\n\n- [Configuration](https://on.cypress.io/guides/configuration)","source":"api/commands/viewport.md","raw":"title: viewport\n---\n\nUse `cy.viewport` to control the screen size and orientation of your application. This command is useful for when you need to test your application in a specific width or height, such as responsive applications or applications utilizing media queries. `cy.viewport` width and height must be between 200px and 3000px.\n\n| | |\n|--- | --- |\n| **Returns** | `null` |\n| **Timeout** | *cannot timeout* |\n\n***\n\n# [cy.viewport( *width*, *height* )](#section-usage)\n\nResize the viewport to the specified dimensions in pixels.\n\n***\n\n# [cy.viewport( *preset*, *orientation* )](#section-preset-usage)\n\nResize the viewport to a preset dimension. Viewport supports the following presets (in pixels):\n\n| Preset | width | height |\n| ----------- | ----- | ------ |\n| `macbook-15`  | 1440  | 900    |\n| `macbook-13`  | 1280  | 800    |\n| `macbook-11`  | 1366  | 768    |\n| `ipad-2`      | 1024  | 768    |\n| `ipad-mini`   | 1024  | 768    |\n| `iphone-6+`   | 414   | 736    |\n| `iphone-6`    | 375   | 667    |\n| `iphone-5`    | 320   | 568    |\n| `iphone-4`    | 320   | 480    |\n| `iphone-3`    | 320   | 480    |\n\nThe **default orientation** is `portrait`. Pass `landscape` as the orientation to reverse the width/height.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.viewport`.\n\n**cy.viewport( *width*, *height*, *options* )**\n**cy.viewport( *preset*, *orientation*, *options* )**\n\nOption | Default | Notes\n--- | --- | ---\n`log` | `true` | whether to display command in command log\n\nYou can also set options for the viewport's `viewportWidth` and `viewportHeight` globally in [configuration](https://on.cypress.io/guides/configuration).\n\n***\n\n# Usage\n\n## Resize the viewport to 1024 x 768\n\n```javascript\n// the viewport will now be changed to 1024x768 pixels\ncy.viewport(1024, 768)\n```\n\n***\n\n## Organize desktop vs mobile tests separately\n\n```javascript\ndescribe(\"Nav Menus\", function(){\n  context(\"720p resolution\", function(){\n    beforeEach(function(){\n      // run these tests in a desktop browser\n      // with a 720p monitor\n      cy.viewport(1280, 720)\n    })\n\n    it(\"displays full header\", function(){\n      cy\n        .get(\"nav .desktop-menu\").should(\"be.visible\")\n        .get(\"nav .mobile-menu\").should(\"not.be.visible\")\n    })\n\n  context(\"iphone-5 resolution\", function(){\n    beforeEach(function(){\n      // run these tests in a mobile browser\n      // and ensure our responsive UI is correct\n      cy.viewport(\"iphone-5\")\n    })\n\n    it(\"displays mobile menu on click\", function(){\n      cy\n        .get(\"nav .desktop-menu\").should(\"not.be.visible\")\n        .get(\"nav .mobile-menu\")\n          .should(\"be.visible\")\n          .find(\"i.hamburger\").click()\n        .get(\"ul.slideout-menu\").should(\"be.visible\")\n    })\n  })\n})\n```\n\n***\n\n# Preset Usage\n\n## Resize the viewport to iPhone 6 width and height\n\n```javascript\n// the viewport will now be changed to 414x736\ncy.viewport(\"iphone-6\")\n```\n\n***\n\n## Change the orientation to landscape\n\n```javascript\n// the viewport will now be changed to 736x414\n// which simulates the user holding the iPhone in lanscape\ncy.viewport(\"iphone-6\", \"landscape\")\n```\n\n***\n\n# Known Issues\n\n## `devicePixelRatio` is not simulated\n\nThis is something Cypress will eventually do, which will match how Chrome's responsive mobile browsing simulation works. [Open an issue](https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A) if you need this to be fixed.\n\n***\n\n# Notes\n\n## Cypress will restore the viewport for each command\n\nWhen hovering over each command, Cypress will automatically restore the viewport to the dimensions that existed when that command ran.\n\n***\n\n## Default sizing\n\nBy default, until you issue a `cy.viewport` command, Cypress will assume the width is: `1000px` and the height is `660px`.\n\nYou can [change these default dimensions](https://on.cypress.io/guides/configuration) by adding the following to your `cypress.json`\n\n```javascript\n{\n  viewportWidth: 1000,\n  viewportHeight: 660\n}\n```\n\nAdditionally, Cypress automatically sets the viewport to it's default size between each test.\n\n***\n\n## Auto Scaling\n\nBy default, if your screen is not large enough to display all of the current dimension's pixels, Cypress will scale and center your application within Cypress to accommodate.\n\nScaling the app should not affect any calculations or behavior of your application (in fact it won't even know it's being scaled).\n\nThe upsides to this is that tests should consistently pass or fail regardless of each of your developers' screen sizes. Tests will also consistently run in `CI` because all of the viewports will be the same no matter what machine Cypress runs on.\n\n# Related\n\n- [Configuration](https://on.cypress.io/guides/configuration)","date":"2017-04-19T18:52:26.000Z","updated":"2017-04-19T18:52:26.000Z","path":"api/commands/viewport.html","comments":1,"layout":"page","_id":"cj1pc5cj30001u1g8jekuw5u0","content":"<p>Use <code>cy.viewport</code> to control the screen size and orientation of your application. This command is useful for when you need to test your application in a specific width or height, such as responsive applications or applications utilizing media queries. <code>cy.viewport</code> width and height must be between 200px and 3000px.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td><code>null</code></td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><em>cannot timeout</em></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-viewport-width-height\"><a href=\"#cy-viewport-width-height\" class=\"headerlink\" title=\"cy.viewport( width, height )\"></a><a href=\"#section-usage\">cy.viewport( <em>width</em>, <em>height</em> )</a></h1><p>Resize the viewport to the specified dimensions in pixels.</p>\n<hr>\n<h1 id=\"cy-viewport-preset-orientation\"><a href=\"#cy-viewport-preset-orientation\" class=\"headerlink\" title=\"cy.viewport( preset, orientation )\"></a><a href=\"#section-preset-usage\">cy.viewport( <em>preset</em>, <em>orientation</em> )</a></h1><p>Resize the viewport to a preset dimension. Viewport supports the following presets (in pixels):</p>\n<table>\n<thead>\n<tr>\n<th>Preset</th>\n<th>width</th>\n<th>height</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>macbook-15</code></td>\n<td>1440</td>\n<td>900</td>\n</tr>\n<tr>\n<td><code>macbook-13</code></td>\n<td>1280</td>\n<td>800</td>\n</tr>\n<tr>\n<td><code>macbook-11</code></td>\n<td>1366</td>\n<td>768</td>\n</tr>\n<tr>\n<td><code>ipad-2</code></td>\n<td>1024</td>\n<td>768</td>\n</tr>\n<tr>\n<td><code>ipad-mini</code></td>\n<td>1024</td>\n<td>768</td>\n</tr>\n<tr>\n<td><code>iphone-6+</code></td>\n<td>414</td>\n<td>736</td>\n</tr>\n<tr>\n<td><code>iphone-6</code></td>\n<td>375</td>\n<td>667</td>\n</tr>\n<tr>\n<td><code>iphone-5</code></td>\n<td>320</td>\n<td>568</td>\n</tr>\n<tr>\n<td><code>iphone-4</code></td>\n<td>320</td>\n<td>480</td>\n</tr>\n<tr>\n<td><code>iphone-3</code></td>\n<td>320</td>\n<td>480</td>\n</tr>\n</tbody>\n</table>\n<p>The <strong>default orientation</strong> is <code>portrait</code>. Pass <code>landscape</code> as the orientation to reverse the width/height.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.viewport</code>.</p>\n<p><strong>cy.viewport( <em>width</em>, <em>height</em>, <em>options</em> )</strong><br><strong>cy.viewport( <em>preset</em>, <em>orientation</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<p>You can also set options for the viewport’s <code>viewportWidth</code> and <code>viewportHeight</code> globally in <a href=\"https://on.cypress.io/guides/configuration\" target=\"_blank\" rel=\"external\">configuration</a>.</p>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Resize-the-viewport-to-1024-x-768\"><a href=\"#Resize-the-viewport-to-1024-x-768\" class=\"headerlink\" title=\"Resize the viewport to 1024 x 768\"></a>Resize the viewport to 1024 x 768</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// the viewport will now be changed to 1024x768 pixels</span></div><div class=\"line\">cy.viewport(<span class=\"number\">1024</span>, <span class=\"number\">768</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Organize-desktop-vs-mobile-tests-separately\"><a href=\"#Organize-desktop-vs-mobile-tests-separately\" class=\"headerlink\" title=\"Organize desktop vs mobile tests separately\"></a>Organize desktop vs mobile tests separately</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(<span class=\"string\">\"Nav Menus\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  context(<span class=\"string\">\"720p resolution\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    beforeEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"comment\">// run these tests in a desktop browser</span></div><div class=\"line\">      <span class=\"comment\">// with a 720p monitor</span></div><div class=\"line\">      cy.viewport(<span class=\"number\">1280</span>, <span class=\"number\">720</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    it(<span class=\"string\">\"displays full header\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      cy</div><div class=\"line\">        .get(<span class=\"string\">\"nav .desktop-menu\"</span>).should(<span class=\"string\">\"be.visible\"</span>)</div><div class=\"line\">        .get(<span class=\"string\">\"nav .mobile-menu\"</span>).should(<span class=\"string\">\"not.be.visible\"</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">  context(<span class=\"string\">\"iphone-5 resolution\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    beforeEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"comment\">// run these tests in a mobile browser</span></div><div class=\"line\">      <span class=\"comment\">// and ensure our responsive UI is correct</span></div><div class=\"line\">      cy.viewport(<span class=\"string\">\"iphone-5\"</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    it(<span class=\"string\">\"displays mobile menu on click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      cy</div><div class=\"line\">        .get(<span class=\"string\">\"nav .desktop-menu\"</span>).should(<span class=\"string\">\"not.be.visible\"</span>)</div><div class=\"line\">        .get(<span class=\"string\">\"nav .mobile-menu\"</span>)</div><div class=\"line\">          .should(<span class=\"string\">\"be.visible\"</span>)</div><div class=\"line\">          .find(<span class=\"string\">\"i.hamburger\"</span>).click()</div><div class=\"line\">        .get(<span class=\"string\">\"ul.slideout-menu\"</span>).should(<span class=\"string\">\"be.visible\"</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Preset-Usage\"><a href=\"#Preset-Usage\" class=\"headerlink\" title=\"Preset Usage\"></a>Preset Usage</h1><h2 id=\"Resize-the-viewport-to-iPhone-6-width-and-height\"><a href=\"#Resize-the-viewport-to-iPhone-6-width-and-height\" class=\"headerlink\" title=\"Resize the viewport to iPhone 6 width and height\"></a>Resize the viewport to iPhone 6 width and height</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// the viewport will now be changed to 414x736</span></div><div class=\"line\">cy.viewport(<span class=\"string\">\"iphone-6\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Change-the-orientation-to-landscape\"><a href=\"#Change-the-orientation-to-landscape\" class=\"headerlink\" title=\"Change the orientation to landscape\"></a>Change the orientation to landscape</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// the viewport will now be changed to 736x414</span></div><div class=\"line\"><span class=\"comment\">// which simulates the user holding the iPhone in lanscape</span></div><div class=\"line\">cy.viewport(<span class=\"string\">\"iphone-6\"</span>, <span class=\"string\">\"landscape\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Known-Issues\"><a href=\"#Known-Issues\" class=\"headerlink\" title=\"Known Issues\"></a>Known Issues</h1><h2 id=\"devicePixelRatio-is-not-simulated\"><a href=\"#devicePixelRatio-is-not-simulated\" class=\"headerlink\" title=\"devicePixelRatio is not simulated\"></a><code>devicePixelRatio</code> is not simulated</h2><p>This is something Cypress will eventually do, which will match how Chrome’s responsive mobile browsing simulation works. <a href=\"https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A\" target=\"_blank\" rel=\"external\">Open an issue</a> if you need this to be fixed.</p>\n<hr>\n<h1 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h1><h2 id=\"Cypress-will-restore-the-viewport-for-each-command\"><a href=\"#Cypress-will-restore-the-viewport-for-each-command\" class=\"headerlink\" title=\"Cypress will restore the viewport for each command\"></a>Cypress will restore the viewport for each command</h2><p>When hovering over each command, Cypress will automatically restore the viewport to the dimensions that existed when that command ran.</p>\n<hr>\n<h2 id=\"Default-sizing\"><a href=\"#Default-sizing\" class=\"headerlink\" title=\"Default sizing\"></a>Default sizing</h2><p>By default, until you issue a <code>cy.viewport</code> command, Cypress will assume the width is: <code>1000px</code> and the height is <code>660px</code>.</p>\n<p>You can <a href=\"https://on.cypress.io/guides/configuration\" target=\"_blank\" rel=\"external\">change these default dimensions</a> by adding the following to your <code>cypress.json</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">viewportWidth</span>: <span class=\"number\">1000</span>,</div><div class=\"line\">  <span class=\"attr\">viewportHeight</span>: <span class=\"number\">660</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Additionally, Cypress automatically sets the viewport to it’s default size between each test.</p>\n<hr>\n<h2 id=\"Auto-Scaling\"><a href=\"#Auto-Scaling\" class=\"headerlink\" title=\"Auto Scaling\"></a>Auto Scaling</h2><p>By default, if your screen is not large enough to display all of the current dimension’s pixels, Cypress will scale and center your application within Cypress to accommodate.</p>\n<p>Scaling the app should not affect any calculations or behavior of your application (in fact it won’t even know it’s being scaled).</p>\n<p>The upsides to this is that tests should consistently pass or fail regardless of each of your developers’ screen sizes. Tests will also consistently run in <code>CI</code> because all of the viewports will be the same no matter what machine Cypress runs on.</p>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/guides/configuration\" target=\"_blank\" rel=\"external\">Configuration</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Use <code>cy.viewport</code> to control the screen size and orientation of your application. This command is useful for when you need to test your application in a specific width or height, such as responsive applications or applications utilizing media queries. <code>cy.viewport</code> width and height must be between 200px and 3000px.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td><code>null</code></td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><em>cannot timeout</em></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-viewport-width-height\"><a href=\"#cy-viewport-width-height\" class=\"headerlink\" title=\"cy.viewport( width, height )\"></a><a href=\"#section-usage\">cy.viewport( <em>width</em>, <em>height</em> )</a></h1><p>Resize the viewport to the specified dimensions in pixels.</p>\n<hr>\n<h1 id=\"cy-viewport-preset-orientation\"><a href=\"#cy-viewport-preset-orientation\" class=\"headerlink\" title=\"cy.viewport( preset, orientation )\"></a><a href=\"#section-preset-usage\">cy.viewport( <em>preset</em>, <em>orientation</em> )</a></h1><p>Resize the viewport to a preset dimension. Viewport supports the following presets (in pixels):</p>\n<table>\n<thead>\n<tr>\n<th>Preset</th>\n<th>width</th>\n<th>height</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>macbook-15</code></td>\n<td>1440</td>\n<td>900</td>\n</tr>\n<tr>\n<td><code>macbook-13</code></td>\n<td>1280</td>\n<td>800</td>\n</tr>\n<tr>\n<td><code>macbook-11</code></td>\n<td>1366</td>\n<td>768</td>\n</tr>\n<tr>\n<td><code>ipad-2</code></td>\n<td>1024</td>\n<td>768</td>\n</tr>\n<tr>\n<td><code>ipad-mini</code></td>\n<td>1024</td>\n<td>768</td>\n</tr>\n<tr>\n<td><code>iphone-6+</code></td>\n<td>414</td>\n<td>736</td>\n</tr>\n<tr>\n<td><code>iphone-6</code></td>\n<td>375</td>\n<td>667</td>\n</tr>\n<tr>\n<td><code>iphone-5</code></td>\n<td>320</td>\n<td>568</td>\n</tr>\n<tr>\n<td><code>iphone-4</code></td>\n<td>320</td>\n<td>480</td>\n</tr>\n<tr>\n<td><code>iphone-3</code></td>\n<td>320</td>\n<td>480</td>\n</tr>\n</tbody>\n</table>\n<p>The <strong>default orientation</strong> is <code>portrait</code>. Pass <code>landscape</code> as the orientation to reverse the width/height.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.viewport</code>.</p>\n<p><strong>cy.viewport( <em>width</em>, <em>height</em>, <em>options</em> )</strong><br><strong>cy.viewport( <em>preset</em>, <em>orientation</em>, <em>options</em> )</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<p>You can also set options for the viewport’s <code>viewportWidth</code> and <code>viewportHeight</code> globally in <a href=\"https://on.cypress.io/guides/configuration\">configuration</a>.</p>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Resize-the-viewport-to-1024-x-768\"><a href=\"#Resize-the-viewport-to-1024-x-768\" class=\"headerlink\" title=\"Resize the viewport to 1024 x 768\"></a>Resize the viewport to 1024 x 768</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// the viewport will now be changed to 1024x768 pixels</span></div><div class=\"line\">cy.viewport(<span class=\"number\">1024</span>, <span class=\"number\">768</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Organize-desktop-vs-mobile-tests-separately\"><a href=\"#Organize-desktop-vs-mobile-tests-separately\" class=\"headerlink\" title=\"Organize desktop vs mobile tests separately\"></a>Organize desktop vs mobile tests separately</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(<span class=\"string\">\"Nav Menus\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  context(<span class=\"string\">\"720p resolution\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    beforeEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"comment\">// run these tests in a desktop browser</span></div><div class=\"line\">      <span class=\"comment\">// with a 720p monitor</span></div><div class=\"line\">      cy.viewport(<span class=\"number\">1280</span>, <span class=\"number\">720</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    it(<span class=\"string\">\"displays full header\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      cy</div><div class=\"line\">        .get(<span class=\"string\">\"nav .desktop-menu\"</span>).should(<span class=\"string\">\"be.visible\"</span>)</div><div class=\"line\">        .get(<span class=\"string\">\"nav .mobile-menu\"</span>).should(<span class=\"string\">\"not.be.visible\"</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">  context(<span class=\"string\">\"iphone-5 resolution\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    beforeEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"comment\">// run these tests in a mobile browser</span></div><div class=\"line\">      <span class=\"comment\">// and ensure our responsive UI is correct</span></div><div class=\"line\">      cy.viewport(<span class=\"string\">\"iphone-5\"</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    it(<span class=\"string\">\"displays mobile menu on click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      cy</div><div class=\"line\">        .get(<span class=\"string\">\"nav .desktop-menu\"</span>).should(<span class=\"string\">\"not.be.visible\"</span>)</div><div class=\"line\">        .get(<span class=\"string\">\"nav .mobile-menu\"</span>)</div><div class=\"line\">          .should(<span class=\"string\">\"be.visible\"</span>)</div><div class=\"line\">          .find(<span class=\"string\">\"i.hamburger\"</span>).click()</div><div class=\"line\">        .get(<span class=\"string\">\"ul.slideout-menu\"</span>).should(<span class=\"string\">\"be.visible\"</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Preset-Usage\"><a href=\"#Preset-Usage\" class=\"headerlink\" title=\"Preset Usage\"></a>Preset Usage</h1><h2 id=\"Resize-the-viewport-to-iPhone-6-width-and-height\"><a href=\"#Resize-the-viewport-to-iPhone-6-width-and-height\" class=\"headerlink\" title=\"Resize the viewport to iPhone 6 width and height\"></a>Resize the viewport to iPhone 6 width and height</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// the viewport will now be changed to 414x736</span></div><div class=\"line\">cy.viewport(<span class=\"string\">\"iphone-6\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Change-the-orientation-to-landscape\"><a href=\"#Change-the-orientation-to-landscape\" class=\"headerlink\" title=\"Change the orientation to landscape\"></a>Change the orientation to landscape</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// the viewport will now be changed to 736x414</span></div><div class=\"line\"><span class=\"comment\">// which simulates the user holding the iPhone in lanscape</span></div><div class=\"line\">cy.viewport(<span class=\"string\">\"iphone-6\"</span>, <span class=\"string\">\"landscape\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Known-Issues\"><a href=\"#Known-Issues\" class=\"headerlink\" title=\"Known Issues\"></a>Known Issues</h1><h2 id=\"devicePixelRatio-is-not-simulated\"><a href=\"#devicePixelRatio-is-not-simulated\" class=\"headerlink\" title=\"devicePixelRatio is not simulated\"></a><code>devicePixelRatio</code> is not simulated</h2><p>This is something Cypress will eventually do, which will match how Chrome’s responsive mobile browsing simulation works. <a href=\"https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A\">Open an issue</a> if you need this to be fixed.</p>\n<hr>\n<h1 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h1><h2 id=\"Cypress-will-restore-the-viewport-for-each-command\"><a href=\"#Cypress-will-restore-the-viewport-for-each-command\" class=\"headerlink\" title=\"Cypress will restore the viewport for each command\"></a>Cypress will restore the viewport for each command</h2><p>When hovering over each command, Cypress will automatically restore the viewport to the dimensions that existed when that command ran.</p>\n<hr>\n<h2 id=\"Default-sizing\"><a href=\"#Default-sizing\" class=\"headerlink\" title=\"Default sizing\"></a>Default sizing</h2><p>By default, until you issue a <code>cy.viewport</code> command, Cypress will assume the width is: <code>1000px</code> and the height is <code>660px</code>.</p>\n<p>You can <a href=\"https://on.cypress.io/guides/configuration\">change these default dimensions</a> by adding the following to your <code>cypress.json</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">viewportWidth</span>: <span class=\"number\">1000</span>,</div><div class=\"line\">  <span class=\"attr\">viewportHeight</span>: <span class=\"number\">660</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Additionally, Cypress automatically sets the viewport to it’s default size between each test.</p>\n<hr>\n<h2 id=\"Auto-Scaling\"><a href=\"#Auto-Scaling\" class=\"headerlink\" title=\"Auto Scaling\"></a>Auto Scaling</h2><p>By default, if your screen is not large enough to display all of the current dimension’s pixels, Cypress will scale and center your application within Cypress to accommodate.</p>\n<p>Scaling the app should not affect any calculations or behavior of your application (in fact it won’t even know it’s being scaled).</p>\n<p>The upsides to this is that tests should consistently pass or fail regardless of each of your developers’ screen sizes. Tests will also consistently run in <code>CI</code> because all of the viewports will be the same no matter what machine Cypress runs on.</p>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/guides/configuration\">Configuration</a></li>\n</ul>\n"},{"title":"visit","_content":"\nVisit a remote url. This will most likely be the first command you run. `cy.visit` resolves when the remote page fires its `load` event.\n\nVisit is prefixed with the `baseUrl` configured in the [Network Options](https://on.cypress.io/guides/configuration#section-global).\n\nUsing `baseUrl` is a great way to prevent repeating yourself in every `cy.visit`.\n\n| | |\n|--- | --- |\n| **Returns** | the remote page's window object |\n| **Timeout** | `cy.visit` will retry for the duration of the [pageLoadTimeout](https://on.cypress.io/guides/configuration#section-timeouts) or the duration of the `timeout` specified in the command's [options](#section-options). |\n\n***\n\n# [cy.visit( *url* )](#section-usage)\n\nVisit the specified url passed as a string.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.visit`.\n\n**[cy.visit( *url*, *options* )](#section-options-usage)**\n\nOption | Default | Notes\n--- | --- | ---\n`onBeforeLoad` | `function` | Called before your page has loaded all of its resources.\n`onLoad`       | `function` | Called once your page has fired its load event.\n`timeout`      | [pageLoadTimeout](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to wait until `cy.visit` resolves\n`log` | `true` | whether to display command in command log\n\nYou can also set options for all `cy.visit` `pageLoadTimeout` and `baseUrl` globally in [configuration](https://on.cypress.io/guides/configuration).\n\n***\n\n# Usage\n\n## Visit a local server running on http://localhost:8000\n\n```javascript\ncy.visit(\"http://localhost:8000\")\n```\n\n***\n\n## Protocol can be omitted from common hosts\n\n```javascript\n// Cypress will automatically prepend the http:// protocol\n// to common hosts.  If you're not using one of these\n// 3 hosts, then make sure to provide the protocol\ncy.visit(\"localhost:3000\") // => http://localhost:3000\ncy.visit(\"0.0.0.0:3000\")   // => http://0.0.0.0:3000\ncy.visit(\"127.0.0.1:3000\") // => http://127.0.0.1:3000\n```\n\n***\n\n## Cypress can optionally act as your web server\n\nHaving Cypress serve your files is useful in simple projects and example apps, but isn't recommended for real apps.  It is always better to run your own server and provide the url to Cypress.\n\n```javascript\n// Cypress will automatically attempt to serve your files\n// if you do not provide a host. The path should be relative\n// to your project's root folder. The root folder is\n// where cypress.json is stored.\ncy.visit(\"app/index.html\")\n```\n\n***\n\n## Visit is automatically prefixed with `baseUrl`.\n\nSimply configure `baseUrl` in the `cypress.json` file to prevent repeating yourself in every single `cy.visit(...)`. Read more about [`configuration`](https://on.cypress.io/guides/configuration).\n\n```javascript\n// cypress.json\n{\n  baseUrl: \"http://localhost:3000/#/\"\n}\n```\n\n```javascript\n// this will visit the complete url\n// http://localhost:3000/#/dashboard\ncy.visit(\"dashboard\")\n```\n\n***\n\n# Options Usage\n\n## Change the default timeout\n\n```javascript\n// change the timeout to be 30 seconds\ncy.visit(\"/index.html\", {timeout: 30000})\n```\n\n***\n\n## Provide an `onBeforeLoad` callback function\n\n```javascript\n// onBeforeLoad is called as soon as possible, before\n// your page has loaded all of its resources.  Your scripts\n// will not be ready at this point, but it's a great hook\n// to potentially manipulate the page.\ncy.visit(\"http://localhost:3000/#dashboard\", {\n  onBeforeLoad: function(contentWindow){\n    // contentWindow is the remote page's window object\n  }\n})\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Check out our example recipes using cy.visit's onBeforeLoad option to [help bootstrap app data](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/bootstrapping_app_test_data_spec.js), to [set a token to localStorage for login](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_single_sign_on_spec.js) and to [stub window.fetch](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/spy_stub_clock_spec.js)\",\n  \"title\": \"Using onBeforeLoad\"\n}\n[/block]\n\n***\n\n## Provide an `onLoad` callback function\n\n```javascript\n// onLoad is called once your page has fired its load event.\n// all of the scripts, stylesheets, html and other resources\n// are guaranteed to be available at this point.\ncy.visit(\"http://localhost:3000/#/users\", {\n  onLoad: function(contentWindow){\n    // contentWindow is the remote page's window object\n    if(contentWindow.angular){\n      // do something\n    }\n  }\n})\n```\n\n***\n\n# Notes\n\n## Visit will always yield the remote page's window object when it resolves\n\n```javascript\ncy.visit(\"index.html\").then(function(contentWindow)){\n  // contentWindow is the remote page's window object\n}\n```\n\n***\n\n## Visit will automatically follow redirects\n\n```javascript\n// we aren't logged in, and our webserver\n// redirects us to /login\ncy\n  .visit(\"http://localhost3000/admin\")\n  .url().should(\"match\", /login/)\n```\n\n***\n\n## Cypress automatically wipes page state between visits\n\nWhenever you `cy.visit()`, Cypress will automatically wipe the state of the page before navigating to an external page.\n\nInternally Cypress will visit `about:blank` which flushes the window.\n\n```javascript\n// internally this does the following:\n// visit 'dashboard'\n// visit 'about:blank'\n// visit 'users'\ncy\n  .visit(\"dashboard\")\n\n  ...more commands...\n\n  .visit(\"users\")\n\n```\n\n***\n\n## Preventing XHR / AJAX requests before a remote page initially loads\n\nOne common scenario Cypress supports is visiting a remote page and also preventing any AJAX requests from immediately going out.\n\nYou may think this works:\n\n```javascript\ncy\n  .visit(\"http://localhost:8000/#/app\")\n  .server()\n  .route(/users/, {...})\n```\n\nBut if your app makes a request upon being initialized, *the above code will not work*.  `cy.visit()` will resolve once its `load` event fires.  The `server` and `route` commands are not processed until *after* `visit` resolves.\n\nMany applications will have already begun routing, initialization, and requests by the time `visit` resolves. Therefore creating a `cy.server` will happen too late, and Cypress will not process the requests.\n\nLuckily Cypress supports this use case easily. Simply reverse the order of the commands:\n\n```javascript\ncy\n  .server()\n  .route(/users/, {...})\n  .visit(\"http://localhost:8000/#/app\")\n```\n\nCypress will automatically apply the server and routes to the very next `visit` and does so immediately before any of your application code runs.\n\n***\n\n# Related\n\n- [Recipe: Bootstrapping App Test Data](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/bootstrapping_app_test_data_spec.js)\n- [Recipe: Logging In - Single Sign on](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_single_sign_on_spec.js)\n- [go](https://on.cypress.io/api/go)\n- [server](https://on.cypress.io/api/server)\n","source":"api/commands/visit.md","raw":"title: visit\n---\n\nVisit a remote url. This will most likely be the first command you run. `cy.visit` resolves when the remote page fires its `load` event.\n\nVisit is prefixed with the `baseUrl` configured in the [Network Options](https://on.cypress.io/guides/configuration#section-global).\n\nUsing `baseUrl` is a great way to prevent repeating yourself in every `cy.visit`.\n\n| | |\n|--- | --- |\n| **Returns** | the remote page's window object |\n| **Timeout** | `cy.visit` will retry for the duration of the [pageLoadTimeout](https://on.cypress.io/guides/configuration#section-timeouts) or the duration of the `timeout` specified in the command's [options](#section-options). |\n\n***\n\n# [cy.visit( *url* )](#section-usage)\n\nVisit the specified url passed as a string.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.visit`.\n\n**[cy.visit( *url*, *options* )](#section-options-usage)**\n\nOption | Default | Notes\n--- | --- | ---\n`onBeforeLoad` | `function` | Called before your page has loaded all of its resources.\n`onLoad`       | `function` | Called once your page has fired its load event.\n`timeout`      | [pageLoadTimeout](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to wait until `cy.visit` resolves\n`log` | `true` | whether to display command in command log\n\nYou can also set options for all `cy.visit` `pageLoadTimeout` and `baseUrl` globally in [configuration](https://on.cypress.io/guides/configuration).\n\n***\n\n# Usage\n\n## Visit a local server running on http://localhost:8000\n\n```javascript\ncy.visit(\"http://localhost:8000\")\n```\n\n***\n\n## Protocol can be omitted from common hosts\n\n```javascript\n// Cypress will automatically prepend the http:// protocol\n// to common hosts.  If you're not using one of these\n// 3 hosts, then make sure to provide the protocol\ncy.visit(\"localhost:3000\") // => http://localhost:3000\ncy.visit(\"0.0.0.0:3000\")   // => http://0.0.0.0:3000\ncy.visit(\"127.0.0.1:3000\") // => http://127.0.0.1:3000\n```\n\n***\n\n## Cypress can optionally act as your web server\n\nHaving Cypress serve your files is useful in simple projects and example apps, but isn't recommended for real apps.  It is always better to run your own server and provide the url to Cypress.\n\n```javascript\n// Cypress will automatically attempt to serve your files\n// if you do not provide a host. The path should be relative\n// to your project's root folder. The root folder is\n// where cypress.json is stored.\ncy.visit(\"app/index.html\")\n```\n\n***\n\n## Visit is automatically prefixed with `baseUrl`.\n\nSimply configure `baseUrl` in the `cypress.json` file to prevent repeating yourself in every single `cy.visit(...)`. Read more about [`configuration`](https://on.cypress.io/guides/configuration).\n\n```javascript\n// cypress.json\n{\n  baseUrl: \"http://localhost:3000/#/\"\n}\n```\n\n```javascript\n// this will visit the complete url\n// http://localhost:3000/#/dashboard\ncy.visit(\"dashboard\")\n```\n\n***\n\n# Options Usage\n\n## Change the default timeout\n\n```javascript\n// change the timeout to be 30 seconds\ncy.visit(\"/index.html\", {timeout: 30000})\n```\n\n***\n\n## Provide an `onBeforeLoad` callback function\n\n```javascript\n// onBeforeLoad is called as soon as possible, before\n// your page has loaded all of its resources.  Your scripts\n// will not be ready at this point, but it's a great hook\n// to potentially manipulate the page.\ncy.visit(\"http://localhost:3000/#dashboard\", {\n  onBeforeLoad: function(contentWindow){\n    // contentWindow is the remote page's window object\n  }\n})\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Check out our example recipes using cy.visit's onBeforeLoad option to [help bootstrap app data](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/bootstrapping_app_test_data_spec.js), to [set a token to localStorage for login](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_single_sign_on_spec.js) and to [stub window.fetch](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/spy_stub_clock_spec.js)\",\n  \"title\": \"Using onBeforeLoad\"\n}\n[/block]\n\n***\n\n## Provide an `onLoad` callback function\n\n```javascript\n// onLoad is called once your page has fired its load event.\n// all of the scripts, stylesheets, html and other resources\n// are guaranteed to be available at this point.\ncy.visit(\"http://localhost:3000/#/users\", {\n  onLoad: function(contentWindow){\n    // contentWindow is the remote page's window object\n    if(contentWindow.angular){\n      // do something\n    }\n  }\n})\n```\n\n***\n\n# Notes\n\n## Visit will always yield the remote page's window object when it resolves\n\n```javascript\ncy.visit(\"index.html\").then(function(contentWindow)){\n  // contentWindow is the remote page's window object\n}\n```\n\n***\n\n## Visit will automatically follow redirects\n\n```javascript\n// we aren't logged in, and our webserver\n// redirects us to /login\ncy\n  .visit(\"http://localhost3000/admin\")\n  .url().should(\"match\", /login/)\n```\n\n***\n\n## Cypress automatically wipes page state between visits\n\nWhenever you `cy.visit()`, Cypress will automatically wipe the state of the page before navigating to an external page.\n\nInternally Cypress will visit `about:blank` which flushes the window.\n\n```javascript\n// internally this does the following:\n// visit 'dashboard'\n// visit 'about:blank'\n// visit 'users'\ncy\n  .visit(\"dashboard\")\n\n  ...more commands...\n\n  .visit(\"users\")\n\n```\n\n***\n\n## Preventing XHR / AJAX requests before a remote page initially loads\n\nOne common scenario Cypress supports is visiting a remote page and also preventing any AJAX requests from immediately going out.\n\nYou may think this works:\n\n```javascript\ncy\n  .visit(\"http://localhost:8000/#/app\")\n  .server()\n  .route(/users/, {...})\n```\n\nBut if your app makes a request upon being initialized, *the above code will not work*.  `cy.visit()` will resolve once its `load` event fires.  The `server` and `route` commands are not processed until *after* `visit` resolves.\n\nMany applications will have already begun routing, initialization, and requests by the time `visit` resolves. Therefore creating a `cy.server` will happen too late, and Cypress will not process the requests.\n\nLuckily Cypress supports this use case easily. Simply reverse the order of the commands:\n\n```javascript\ncy\n  .server()\n  .route(/users/, {...})\n  .visit(\"http://localhost:8000/#/app\")\n```\n\nCypress will automatically apply the server and routes to the very next `visit` and does so immediately before any of your application code runs.\n\n***\n\n# Related\n\n- [Recipe: Bootstrapping App Test Data](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/bootstrapping_app_test_data_spec.js)\n- [Recipe: Logging In - Single Sign on](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_single_sign_on_spec.js)\n- [go](https://on.cypress.io/api/go)\n- [server](https://on.cypress.io/api/server)\n","date":"2017-04-19T18:52:26.000Z","updated":"2017-04-19T18:52:26.000Z","path":"api/commands/visit.html","comments":1,"layout":"page","_id":"cj1pc5cj30002u1g86xzliw1y","content":"<p>Visit a remote url. This will most likely be the first command you run. <code>cy.visit</code> resolves when the remote page fires its <code>load</code> event.</p>\n<p>Visit is prefixed with the <code>baseUrl</code> configured in the <a href=\"https://on.cypress.io/guides/configuration#section-global\" target=\"_blank\" rel=\"external\">Network Options</a>.</p>\n<p>Using <code>baseUrl</code> is a great way to prevent repeating yourself in every <code>cy.visit</code>.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the remote page’s window object</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.visit</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\">pageLoadTimeout</a> or the duration of the <code>timeout</code> specified in the command’s <a href=\"#section-options\">options</a>.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-visit-url\"><a href=\"#cy-visit-url\" class=\"headerlink\" title=\"cy.visit( url )\"></a><a href=\"#section-usage\">cy.visit( <em>url</em> )</a></h1><p>Visit the specified url passed as a string.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.visit</code>.</p>\n<p><strong><a href=\"#section-options-usage\">cy.visit( <em>url</em>, <em>options</em> )</a></strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>onBeforeLoad</code></td>\n<td><code>function</code></td>\n<td>Called before your page has loaded all of its resources.</td>\n</tr>\n<tr>\n<td><code>onLoad</code></td>\n<td><code>function</code></td>\n<td>Called once your page has fired its load event.</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\">pageLoadTimeout</a></td>\n<td>Total time to wait until <code>cy.visit</code> resolves</td>\n</tr>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<p>You can also set options for all <code>cy.visit</code> <code>pageLoadTimeout</code> and <code>baseUrl</code> globally in <a href=\"https://on.cypress.io/guides/configuration\" target=\"_blank\" rel=\"external\">configuration</a>.</p>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Visit-a-local-server-running-on-http-localhost-8000\"><a href=\"#Visit-a-local-server-running-on-http-localhost-8000\" class=\"headerlink\" title=\"Visit a local server running on http://localhost:8000\"></a>Visit a local server running on <a href=\"http://localhost:8000\" target=\"_blank\" rel=\"external\">http://localhost:8000</a></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.visit(<span class=\"string\">\"http://localhost:8000\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Protocol-can-be-omitted-from-common-hosts\"><a href=\"#Protocol-can-be-omitted-from-common-hosts\" class=\"headerlink\" title=\"Protocol can be omitted from common hosts\"></a>Protocol can be omitted from common hosts</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Cypress will automatically prepend the http:// protocol</span></div><div class=\"line\"><span class=\"comment\">// to common hosts.  If you're not using one of these</span></div><div class=\"line\"><span class=\"comment\">// 3 hosts, then make sure to provide the protocol</span></div><div class=\"line\">cy.visit(<span class=\"string\">\"localhost:3000\"</span>) <span class=\"comment\">// =&gt; http://localhost:3000</span></div><div class=\"line\">cy.visit(<span class=\"string\">\"0.0.0.0:3000\"</span>)   <span class=\"comment\">// =&gt; http://0.0.0.0:3000</span></div><div class=\"line\">cy.visit(<span class=\"string\">\"127.0.0.1:3000\"</span>) <span class=\"comment\">// =&gt; http://127.0.0.1:3000</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Cypress-can-optionally-act-as-your-web-server\"><a href=\"#Cypress-can-optionally-act-as-your-web-server\" class=\"headerlink\" title=\"Cypress can optionally act as your web server\"></a>Cypress can optionally act as your web server</h2><p>Having Cypress serve your files is useful in simple projects and example apps, but isn’t recommended for real apps.  It is always better to run your own server and provide the url to Cypress.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Cypress will automatically attempt to serve your files</span></div><div class=\"line\"><span class=\"comment\">// if you do not provide a host. The path should be relative</span></div><div class=\"line\"><span class=\"comment\">// to your project's root folder. The root folder is</span></div><div class=\"line\"><span class=\"comment\">// where cypress.json is stored.</span></div><div class=\"line\">cy.visit(<span class=\"string\">\"app/index.html\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Visit-is-automatically-prefixed-with-baseUrl\"><a href=\"#Visit-is-automatically-prefixed-with-baseUrl\" class=\"headerlink\" title=\"Visit is automatically prefixed with baseUrl.\"></a>Visit is automatically prefixed with <code>baseUrl</code>.</h2><p>Simply configure <code>baseUrl</code> in the <code>cypress.json</code> file to prevent repeating yourself in every single <code>cy.visit(...)</code>. Read more about <a href=\"https://on.cypress.io/guides/configuration\" target=\"_blank\" rel=\"external\"><code>configuration</code></a>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// cypress.json</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">baseUrl</span>: <span class=\"string\">\"http://localhost:3000/#/\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// this will visit the complete url</span></div><div class=\"line\"><span class=\"comment\">// http://localhost:3000/#/dashboard</span></div><div class=\"line\">cy.visit(<span class=\"string\">\"dashboard\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Options-Usage\"><a href=\"#Options-Usage\" class=\"headerlink\" title=\"Options Usage\"></a>Options Usage</h1><h2 id=\"Change-the-default-timeout\"><a href=\"#Change-the-default-timeout\" class=\"headerlink\" title=\"Change the default timeout\"></a>Change the default timeout</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// change the timeout to be 30 seconds</span></div><div class=\"line\">cy.visit(<span class=\"string\">\"/index.html\"</span>, &#123;<span class=\"attr\">timeout</span>: <span class=\"number\">30000</span>&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Provide-an-onBeforeLoad-callback-function\"><a href=\"#Provide-an-onBeforeLoad-callback-function\" class=\"headerlink\" title=\"Provide an onBeforeLoad callback function\"></a>Provide an <code>onBeforeLoad</code> callback function</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// onBeforeLoad is called as soon as possible, before</span></div><div class=\"line\"><span class=\"comment\">// your page has loaded all of its resources.  Your scripts</span></div><div class=\"line\"><span class=\"comment\">// will not be ready at this point, but it's a great hook</span></div><div class=\"line\"><span class=\"comment\">// to potentially manipulate the page.</span></div><div class=\"line\">cy.visit(<span class=\"string\">\"http://localhost:3000/#dashboard\"</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">onBeforeLoad</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">contentWindow</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// contentWindow is the remote page's window object</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “Check out our example recipes using cy.visit’s onBeforeLoad option to <a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/bootstrapping_app_test_data_spec.js\" target=\"_blank\" rel=\"external\">help bootstrap app data</a>, to <a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_single_sign_on_spec.js\" target=\"_blank\" rel=\"external\">set a token to localStorage for login</a> and to <a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/spy_stub_clock_spec.js\" target=\"_blank\" rel=\"external\">stub window.fetch</a>“,<br>  “title”: “Using onBeforeLoad”<br>}<br>[/block]</p>\n<hr>\n<h2 id=\"Provide-an-onLoad-callback-function\"><a href=\"#Provide-an-onLoad-callback-function\" class=\"headerlink\" title=\"Provide an onLoad callback function\"></a>Provide an <code>onLoad</code> callback function</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// onLoad is called once your page has fired its load event.</span></div><div class=\"line\"><span class=\"comment\">// all of the scripts, stylesheets, html and other resources</span></div><div class=\"line\"><span class=\"comment\">// are guaranteed to be available at this point.</span></div><div class=\"line\">cy.visit(<span class=\"string\">\"http://localhost:3000/#/users\"</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">onLoad</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">contentWindow</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// contentWindow is the remote page's window object</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(contentWindow.angular)&#123;</div><div class=\"line\">      <span class=\"comment\">// do something</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h1><h2 id=\"Visit-will-always-yield-the-remote-page’s-window-object-when-it-resolves\"><a href=\"#Visit-will-always-yield-the-remote-page’s-window-object-when-it-resolves\" class=\"headerlink\" title=\"Visit will always yield the remote page’s window object when it resolves\"></a>Visit will always yield the remote page’s window object when it resolves</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.visit(<span class=\"string\">\"index.html\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">contentWindow</span>))</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// contentWindow is the remote page's window object</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Visit-will-automatically-follow-redirects\"><a href=\"#Visit-will-automatically-follow-redirects\" class=\"headerlink\" title=\"Visit will automatically follow redirects\"></a>Visit will automatically follow redirects</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// we aren't logged in, and our webserver</span></div><div class=\"line\"><span class=\"comment\">// redirects us to /login</span></div><div class=\"line\">cy</div><div class=\"line\">  .visit(<span class=\"string\">\"http://localhost3000/admin\"</span>)</div><div class=\"line\">  .url().should(<span class=\"string\">\"match\"</span>, /login/)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Cypress-automatically-wipes-page-state-between-visits\"><a href=\"#Cypress-automatically-wipes-page-state-between-visits\" class=\"headerlink\" title=\"Cypress automatically wipes page state between visits\"></a>Cypress automatically wipes page state between visits</h2><p>Whenever you <code>cy.visit()</code>, Cypress will automatically wipe the state of the page before navigating to an external page.</p>\n<p>Internally Cypress will visit <code>about:blank</code> which flushes the window.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// internally this does the following:</span></div><div class=\"line\"><span class=\"comment\">// visit 'dashboard'</span></div><div class=\"line\"><span class=\"comment\">// visit 'about:blank'</span></div><div class=\"line\"><span class=\"comment\">// visit 'users'</span></div><div class=\"line\">cy</div><div class=\"line\">  .visit(<span class=\"string\">\"dashboard\"</span>)</div><div class=\"line\"></div><div class=\"line\">  ...more commands...</div><div class=\"line\"></div><div class=\"line\">  .visit(<span class=\"string\">\"users\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Preventing-XHR-AJAX-requests-before-a-remote-page-initially-loads\"><a href=\"#Preventing-XHR-AJAX-requests-before-a-remote-page-initially-loads\" class=\"headerlink\" title=\"Preventing XHR / AJAX requests before a remote page initially loads\"></a>Preventing XHR / AJAX requests before a remote page initially loads</h2><p>One common scenario Cypress supports is visiting a remote page and also preventing any AJAX requests from immediately going out.</p>\n<p>You may think this works:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .visit(<span class=\"string\">\"http://localhost:8000/#/app\"</span>)</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"regexp\">/users/</span>, &#123;...&#125;)</div></pre></td></tr></table></figure>\n<p>But if your app makes a request upon being initialized, <em>the above code will not work</em>.  <code>cy.visit()</code> will resolve once its <code>load</code> event fires.  The <code>server</code> and <code>route</code> commands are not processed until <em>after</em> <code>visit</code> resolves.</p>\n<p>Many applications will have already begun routing, initialization, and requests by the time <code>visit</code> resolves. Therefore creating a <code>cy.server</code> will happen too late, and Cypress will not process the requests.</p>\n<p>Luckily Cypress supports this use case easily. Simply reverse the order of the commands:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"regexp\">/users/</span>, &#123;...&#125;)</div><div class=\"line\">  .visit(<span class=\"string\">\"http://localhost:8000/#/app\"</span>)</div></pre></td></tr></table></figure>\n<p>Cypress will automatically apply the server and routes to the very next <code>visit</code> and does so immediately before any of your application code runs.</p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/bootstrapping_app_test_data_spec.js\" target=\"_blank\" rel=\"external\">Recipe: Bootstrapping App Test Data</a></li>\n<li><a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_single_sign_on_spec.js\" target=\"_blank\" rel=\"external\">Recipe: Logging In - Single Sign on</a></li>\n<li><a href=\"https://on.cypress.io/api/go\" target=\"_blank\" rel=\"external\">go</a></li>\n<li><a href=\"https://on.cypress.io/api/server\" target=\"_blank\" rel=\"external\">server</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"welcome/guides.html","our-goals":"welcome/our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"getting-started/writing-your-first-test.html","using-the-cypress-runner":"getting-started/using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"examples/list-of-example-apps.html","list-of-example-recipes":"examples/list-of-example-recipes.html"},"dashboard":{"features":"dashboard/features.html","projects":"dashboard/projects.html","runs":"dashboard/runs.html","organizations":"dashboard/organizations.html"},"guides":{"configuration":"guides/configuration.html","issuing-commands":"guides/issuing-commands.html","finding-elements":"guides/finding-elements.html","making-assertions":"guides/making-assertions.html","network-requests":"guides/network-requests.html","continuous-integration":"guides/continuous-integration.html","environment-variables":"guides/environment-variables.html","stubs-spies-and-clocks":"guides/stubs-spies-and-clocks.html","using-aliases":"guides/using-aliases.html","creating-fixtures":"guides/creating-fixtures.html","screenshots-and-videos":"guides/screenshots-and-videos.html","bundled-tools":"guides/bundled-tools.html","reporters":"guides/reporters.html"},"references":{"cli-tool":"references/cli-tool.html","error-messages":"references/error-messages.html","anti-patterns":"references/anti-patterns.html","known-issues":"references/known-issues.html","web-security":"references/web-security.html","browser-management":"references/browser-management.html","userland-extensions":"references/userland-extensions.html"}},"api":{"welcome":{"api":"welcome/api.html"},"commands":{"and":"commands/commands/and.html","as":"commands/as.html","blur":"commands/blur.html","check":"commands/check.html","children":"commands/children.html","clear":"commands/clear.html","clear-cookie":"clear-commands/cookie.html","clear-cookies":"clear-commands/cookies.html","clear-local-storage":"clear-local-commands/storage.html","click":"commands/click.html","clock":"commands/clock.html","closest":"commands/closest.html","contains":"commands/contains.html","dblclick":"commands/dblclick.html","debug":"commands/debug.html","document":"commands/document.html","each":"commands/each.html","end":"commands/end.html","eq":"commands/eq.html","exec":"commands/exec.html","filter":"commands/filter.html","find":"commands/find.html","first":"commands/first.html","fixture":"commands/fixture.html","focus":"commands/focus.html","focused":"commands/focused.html","get":"commands/get.html","get-cookie":"get-commands/cookie.html","get-cookies":"get-commands/cookies.html","go":"commands/go.html","hash":"commands/hash.html","hover":"commands/hover.html","invoke":"commands/invoke.html","its":"commands/its.html","last":"commands/last.html","location":"commands/location.html","log":"commands/log.html","next":"commands/next.html","next-all":"next-commands/all.html","next-until":"next-commands/until.html","not":"commands/not.html","parent":"commands/parent.html","parents":"commands/parents.html","parents-until":"parents-commands/until.html","read-file":"read-commands/file.html","reload":"commands/reload.html","request":"commands/request.html","root":"commands/root.html","route":"commands/route.html","screenshot":"commands/screenshot.html","select":"commands/select.html","server":"commands/server.html","set-cookie":"set-commands/cookie.html","should":"commands/should.html","siblings":"commands/siblings.html","spread":"commands/spread.html","spy":"commands/spy.html","stub":"commands/stub.html","submit":"commands/submit.html","then":"commands/then.html","tick":"commands/tick.html","title":"commands/title.html","type":"commands/type.html","uncheck":"commands/uncheck.html","url":"commands/url.html","viewport":"commands/viewport.html","visit":"commands/visit.html","wait":"commands/wait.html","window":"commands/window.html","within":"commands/within.html","wrap":"commands/wrap.html","write-file":"write-commands/file.html"},"utilities":{"_":"utilities/_.html","$":"utilities/$.html","minimatch":"utilities/minimatch.html","blob":"utilities/blob.html","promise":"utilities/promise.html"},"cypress-api":{"config":"cypress-api/config.html","env":"cypress-api/env.html","cypress-commands":"cypress-api/commands.html","cookies":"cypress-api/cookies.html","dom":"cypress-api/dom.html","cypress-server":"cypress-api/server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Visit a remote url. This will most likely be the first command you run. <code>cy.visit</code> resolves when the remote page fires its <code>load</code> event.</p>\n<p>Visit is prefixed with the <code>baseUrl</code> configured in the <a href=\"https://on.cypress.io/guides/configuration#section-global\">Network Options</a>.</p>\n<p>Using <code>baseUrl</code> is a great way to prevent repeating yourself in every <code>cy.visit</code>.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the remote page’s window object</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.visit</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\">pageLoadTimeout</a> or the duration of the <code>timeout</code> specified in the command’s <a href=\"#section-options\">options</a>.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-visit-url\"><a href=\"#cy-visit-url\" class=\"headerlink\" title=\"cy.visit( url )\"></a><a href=\"#section-usage\">cy.visit( <em>url</em> )</a></h1><p>Visit the specified url passed as a string.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.visit</code>.</p>\n<p><strong><a href=\"#section-options-usage\">cy.visit( <em>url</em>, <em>options</em> )</a></strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>onBeforeLoad</code></td>\n<td><code>function</code></td>\n<td>Called before your page has loaded all of its resources.</td>\n</tr>\n<tr>\n<td><code>onLoad</code></td>\n<td><code>function</code></td>\n<td>Called once your page has fired its load event.</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\">pageLoadTimeout</a></td>\n<td>Total time to wait until <code>cy.visit</code> resolves</td>\n</tr>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<p>You can also set options for all <code>cy.visit</code> <code>pageLoadTimeout</code> and <code>baseUrl</code> globally in <a href=\"https://on.cypress.io/guides/configuration\">configuration</a>.</p>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Visit-a-local-server-running-on-http-localhost-8000\"><a href=\"#Visit-a-local-server-running-on-http-localhost-8000\" class=\"headerlink\" title=\"Visit a local server running on http://localhost:8000\"></a>Visit a local server running on <a href=\"http://localhost:8000\">http://localhost:8000</a></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.visit(<span class=\"string\">\"http://localhost:8000\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Protocol-can-be-omitted-from-common-hosts\"><a href=\"#Protocol-can-be-omitted-from-common-hosts\" class=\"headerlink\" title=\"Protocol can be omitted from common hosts\"></a>Protocol can be omitted from common hosts</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Cypress will automatically prepend the http:// protocol</span></div><div class=\"line\"><span class=\"comment\">// to common hosts.  If you're not using one of these</span></div><div class=\"line\"><span class=\"comment\">// 3 hosts, then make sure to provide the protocol</span></div><div class=\"line\">cy.visit(<span class=\"string\">\"localhost:3000\"</span>) <span class=\"comment\">// =&gt; http://localhost:3000</span></div><div class=\"line\">cy.visit(<span class=\"string\">\"0.0.0.0:3000\"</span>)   <span class=\"comment\">// =&gt; http://0.0.0.0:3000</span></div><div class=\"line\">cy.visit(<span class=\"string\">\"127.0.0.1:3000\"</span>) <span class=\"comment\">// =&gt; http://127.0.0.1:3000</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Cypress-can-optionally-act-as-your-web-server\"><a href=\"#Cypress-can-optionally-act-as-your-web-server\" class=\"headerlink\" title=\"Cypress can optionally act as your web server\"></a>Cypress can optionally act as your web server</h2><p>Having Cypress serve your files is useful in simple projects and example apps, but isn’t recommended for real apps.  It is always better to run your own server and provide the url to Cypress.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Cypress will automatically attempt to serve your files</span></div><div class=\"line\"><span class=\"comment\">// if you do not provide a host. The path should be relative</span></div><div class=\"line\"><span class=\"comment\">// to your project's root folder. The root folder is</span></div><div class=\"line\"><span class=\"comment\">// where cypress.json is stored.</span></div><div class=\"line\">cy.visit(<span class=\"string\">\"app/index.html\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Visit-is-automatically-prefixed-with-baseUrl\"><a href=\"#Visit-is-automatically-prefixed-with-baseUrl\" class=\"headerlink\" title=\"Visit is automatically prefixed with baseUrl.\"></a>Visit is automatically prefixed with <code>baseUrl</code>.</h2><p>Simply configure <code>baseUrl</code> in the <code>cypress.json</code> file to prevent repeating yourself in every single <code>cy.visit(...)</code>. Read more about <a href=\"https://on.cypress.io/guides/configuration\"><code>configuration</code></a>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// cypress.json</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">baseUrl</span>: <span class=\"string\">\"http://localhost:3000/#/\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// this will visit the complete url</span></div><div class=\"line\"><span class=\"comment\">// http://localhost:3000/#/dashboard</span></div><div class=\"line\">cy.visit(<span class=\"string\">\"dashboard\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Options-Usage\"><a href=\"#Options-Usage\" class=\"headerlink\" title=\"Options Usage\"></a>Options Usage</h1><h2 id=\"Change-the-default-timeout\"><a href=\"#Change-the-default-timeout\" class=\"headerlink\" title=\"Change the default timeout\"></a>Change the default timeout</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// change the timeout to be 30 seconds</span></div><div class=\"line\">cy.visit(<span class=\"string\">\"/index.html\"</span>, &#123;<span class=\"attr\">timeout</span>: <span class=\"number\">30000</span>&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Provide-an-onBeforeLoad-callback-function\"><a href=\"#Provide-an-onBeforeLoad-callback-function\" class=\"headerlink\" title=\"Provide an onBeforeLoad callback function\"></a>Provide an <code>onBeforeLoad</code> callback function</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// onBeforeLoad is called as soon as possible, before</span></div><div class=\"line\"><span class=\"comment\">// your page has loaded all of its resources.  Your scripts</span></div><div class=\"line\"><span class=\"comment\">// will not be ready at this point, but it's a great hook</span></div><div class=\"line\"><span class=\"comment\">// to potentially manipulate the page.</span></div><div class=\"line\">cy.visit(<span class=\"string\">\"http://localhost:3000/#dashboard\"</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">onBeforeLoad</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">contentWindow</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// contentWindow is the remote page's window object</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “Check out our example recipes using cy.visit’s onBeforeLoad option to <a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/bootstrapping_app_test_data_spec.js\">help bootstrap app data</a>, to <a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_single_sign_on_spec.js\">set a token to localStorage for login</a> and to <a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/spy_stub_clock_spec.js\">stub window.fetch</a>“,<br>  “title”: “Using onBeforeLoad”<br>}<br>[/block]</p>\n<hr>\n<h2 id=\"Provide-an-onLoad-callback-function\"><a href=\"#Provide-an-onLoad-callback-function\" class=\"headerlink\" title=\"Provide an onLoad callback function\"></a>Provide an <code>onLoad</code> callback function</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// onLoad is called once your page has fired its load event.</span></div><div class=\"line\"><span class=\"comment\">// all of the scripts, stylesheets, html and other resources</span></div><div class=\"line\"><span class=\"comment\">// are guaranteed to be available at this point.</span></div><div class=\"line\">cy.visit(<span class=\"string\">\"http://localhost:3000/#/users\"</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">onLoad</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">contentWindow</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// contentWindow is the remote page's window object</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(contentWindow.angular)&#123;</div><div class=\"line\">      <span class=\"comment\">// do something</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h1><h2 id=\"Visit-will-always-yield-the-remote-page’s-window-object-when-it-resolves\"><a href=\"#Visit-will-always-yield-the-remote-page’s-window-object-when-it-resolves\" class=\"headerlink\" title=\"Visit will always yield the remote page’s window object when it resolves\"></a>Visit will always yield the remote page’s window object when it resolves</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.visit(<span class=\"string\">\"index.html\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">contentWindow</span>))</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// contentWindow is the remote page's window object</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Visit-will-automatically-follow-redirects\"><a href=\"#Visit-will-automatically-follow-redirects\" class=\"headerlink\" title=\"Visit will automatically follow redirects\"></a>Visit will automatically follow redirects</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// we aren't logged in, and our webserver</span></div><div class=\"line\"><span class=\"comment\">// redirects us to /login</span></div><div class=\"line\">cy</div><div class=\"line\">  .visit(<span class=\"string\">\"http://localhost3000/admin\"</span>)</div><div class=\"line\">  .url().should(<span class=\"string\">\"match\"</span>, /login/)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Cypress-automatically-wipes-page-state-between-visits\"><a href=\"#Cypress-automatically-wipes-page-state-between-visits\" class=\"headerlink\" title=\"Cypress automatically wipes page state between visits\"></a>Cypress automatically wipes page state between visits</h2><p>Whenever you <code>cy.visit()</code>, Cypress will automatically wipe the state of the page before navigating to an external page.</p>\n<p>Internally Cypress will visit <code>about:blank</code> which flushes the window.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// internally this does the following:</span></div><div class=\"line\"><span class=\"comment\">// visit 'dashboard'</span></div><div class=\"line\"><span class=\"comment\">// visit 'about:blank'</span></div><div class=\"line\"><span class=\"comment\">// visit 'users'</span></div><div class=\"line\">cy</div><div class=\"line\">  .visit(<span class=\"string\">\"dashboard\"</span>)</div><div class=\"line\"></div><div class=\"line\">  ...more commands...</div><div class=\"line\"></div><div class=\"line\">  .visit(<span class=\"string\">\"users\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Preventing-XHR-AJAX-requests-before-a-remote-page-initially-loads\"><a href=\"#Preventing-XHR-AJAX-requests-before-a-remote-page-initially-loads\" class=\"headerlink\" title=\"Preventing XHR / AJAX requests before a remote page initially loads\"></a>Preventing XHR / AJAX requests before a remote page initially loads</h2><p>One common scenario Cypress supports is visiting a remote page and also preventing any AJAX requests from immediately going out.</p>\n<p>You may think this works:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .visit(<span class=\"string\">\"http://localhost:8000/#/app\"</span>)</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"regexp\">/users/</span>, &#123;...&#125;)</div></pre></td></tr></table></figure>\n<p>But if your app makes a request upon being initialized, <em>the above code will not work</em>.  <code>cy.visit()</code> will resolve once its <code>load</code> event fires.  The <code>server</code> and <code>route</code> commands are not processed until <em>after</em> <code>visit</code> resolves.</p>\n<p>Many applications will have already begun routing, initialization, and requests by the time <code>visit</code> resolves. Therefore creating a <code>cy.server</code> will happen too late, and Cypress will not process the requests.</p>\n<p>Luckily Cypress supports this use case easily. Simply reverse the order of the commands:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .server()</div><div class=\"line\">  .route(<span class=\"regexp\">/users/</span>, &#123;...&#125;)</div><div class=\"line\">  .visit(<span class=\"string\">\"http://localhost:8000/#/app\"</span>)</div></pre></td></tr></table></figure>\n<p>Cypress will automatically apply the server and routes to the very next <code>visit</code> and does so immediately before any of your application code runs.</p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/bootstrapping_app_test_data_spec.js\">Recipe: Bootstrapping App Test Data</a></li>\n<li><a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_single_sign_on_spec.js\">Recipe: Logging In - Single Sign on</a></li>\n<li><a href=\"https://on.cypress.io/api/go\">go</a></li>\n<li><a href=\"https://on.cypress.io/api/server\">server</a></li>\n</ul>\n"},{"title":"type","_content":"\nTypes into the DOM element found in the previous command.\n\nPrior to typing, if the DOM element isn't currently focused, Cypress will issue a [click](https://on.cypress.io/api/click) on the element, which will cause the element to receive focus.\n\nText passed to `cy.type` may include any of these special character sequences:\n\nSequence | Notes\n--- | ---\n`\\{\\{\\}`| Types the literal `\\{` key\n`{backspace}` | Deletes character to the left of the cursor\n`{del}` | Deletes character to the right of the cursor\n`{enter}` | Types the Enter key\n`{esc}` | Types the Escape key\n`{leftarrow}` | Moves cursor left\n`{rightarrow}` | Moves cursor right\n`{downarrow}` | Fires down event but does **not** move the cursor\n`{uparrow}` | Fires up event but does **not** move the cursor\n`{selectall}` | Selects all text by creating a `selection range`\n\nText passed to `cy.type` may also include any of the these modifier character sequences:\n\nSequence | Notes\n--- | ---\n`{alt}` | Activates the `altKey` modifier. Aliases: `{option}`\n`{ctrl}` | Activates the `ctrlKey` modifier. Aliases: `{control}`\n`{meta}` | Activates the `metaKey` modifier. Aliases: `{command}`, `{cmd}`\n`{shift}` | Activates the `shiftKey` modifier.\n\n| | |\n|--- | --- |\n| **Returns** | the DOM element that was typed into |\n| **Timeout** | `cy.type` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) or the duration of the `timeout` specified in the command's [options](#section-options). |\n\n***\n\n# [cy.type( *text* )](#section-usage)\n\nTypes the text provided into the current DOM subject.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.type`.\n\n**[cy.type( *text*, *options* )](#options-usage)**\n\nOption | Default | Notes\n--- | --- | ---\n`delay` | `10` | Delay after each keypress\n`force` | `false` | Forces type, disables error checking prior to type\n`release` | `true` | Keep a modifier activated between commands\n`interval` | `16` | Interval to retry type\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry the type\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Type into a textarea.\n\n```javascript\n// issues all keyboard events\n// and returns <textarea> for further chaining\ncy.get(\"textarea\").type(\"Hello world\")\n```\n\n***\n\n## Type into a non-text or non-textarea element with `tabindex`\n\n```html\n<body>\n  <div id=\"el\" tabindex=\"1\">\n    this div can receive focus\n  </div>\n</body>\n```\n\n```javascript\n// this element will receive all of the appropriate\n// key events and focus / blur events but will not\n// have its value or text contents altered in any way\ncy.get(\"#el\").type(\"foo\")\n```\n\n***\n\n# Options Usage\n\n## Force a click to happen prior to type\n\nType issues a [`click`](https://on.cypress.io/api/click) prior to typing (only if the element is not currently focused). Because of this, sometimes it is useful to force the click to happen. Forcing a click disables error checking prior to the click.\n\n```javascript\n// this will disable the built-in logic for ensuring\n// the element is visible, and is physically clickable\n// prior to typing into it\ncy.get(\"input[type=text]\").type(\"Test all the things\", {force: true})\n```\n\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"Be careful with the `force` option because it allows the type to happen where it might actually be impossible for a real user to type.\"\n}\n[/block]\n\n***\n\n# Key combinations / Modifiers\n\nWhen using special character sequences (see table at top of page), it's possible to activate modifier keys and type key combinations, such as `CTRL + R` or `SHIFT + ALT + Q`. The modifier(s) remain activated for the duration of the `cy.type()` command, and are released when all subsequent characters are typed, unless [`{release: false}`](https://on.cypress.io/api/type#section-options) is passed as an [option](https://on.cypress.io/v1.0/api/type#section-release-behavior). A `keydown` event is fired when a modifier is activated and a `keyup` event is fired when it is released.\n\n## Type a key combination\n\n```javascript\n// this is the same as a user holding down SHIFT and ALT, then pressing Q\ncy.get(\"input\").type(\"{shift}{alt}Q\")\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe of logging in by typing username and password](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_html_web_form_spec.js)\",\n  \"title\": \"Typing into a login form\"\n}\n[/block]\n\n***\n\n## Hold down modifier key and type a word\n\n```javascript\n// all characters after {ctrl} will have 'ctrlKey' set to 'true' on their key events\ncy.get(\"input\").type(\"{ctrl}test\")\n```\n\n***\n\n## Release behavior\n\nBy default, modifiers are released after each type command.\n\n```javascript\n// 'ctrlKey' will be true for each event while 'test' is typed\n// but false while 'everything' is typed\ncy.get(\"input\").type(\"{ctrl}test\").type(\"everything\")\n```\n\nTo keep a modifier activated between commands, specify `{release: false}` in the options.\n\n```javascript\n// 'altKey' will be true while typing 'foo'\ncy.get(\"input\").type(\"{alt}foo\", {release: false})\n// 'altKey' will also be true during 'get' and 'click' commands\ncy.get(\"button\").click()\n```\n\nModifiers are automatically released between tests, even with `{release: false}`.\n\n```javascript\nit(\"has modifiers activated\", function () {\n  // 'altKey' will be true while typing 'foo'\n  cy.get(\"input\").type(\"{alt}foo\", {release: false})\n})\n\nit(\"does not have modifiers activated\", function () {\n  // 'altKey' will be false while typing 'bar'\n  cy.get(\"input\").type(\"bar\")\n})\n```\n\nTo manually release modifiers within a test after using `{release: false}`, use another `type` command and the modifier will be released after it.\n\n```javascript\n// 'altKey' will be true while typing 'foo'\ncy.get(\"input\").type(\"{alt}foo\", {release: false})\n// 'altKey' will be true during the 'get' and 'click' commands\ncy.get(\"button\").click()\n// 'altKey' will be released after this command\ncy.get(\"input\").type(\"{alt}\")\n// 'altKey' will be false during the 'get' and 'click' commands\ncy.get(\"button\").click()\n```\n\n***\n\n## Global shortcuts / modifiers\n\n`cy.type()` requires a focusable element as the subject, since it's usually unintended to type into something that's not a text field or textarea! Although there *are* a few cases where it's valid to \"type\" into something other than a text field or textarea:\n\n* Keyboard shortcuts where the listener is on the `document` or `body`.\n* Holding modifier keys and clicking an arbitrary element.\n\nTo support this, the `body` can be used as the subject (even though it's *not* a focusable element).\n\n```javascript\n// all of the type events will be fired on the body\ncy.get(\"body\").type(\"{uparrow}{uparrow}{downarrow}{downarrow}{leftarrow}{rightarrow}{leftarrow}{rightarrow}ba\")\n\n```\n\n```javascript\n// execute a SHIFT + click on the first <li>\n// {release: false} is necessary so that\n// SHIFT will not be released after the type command\ncy.get(\"body\").type(\"{shift}\", {release: false}).get(\"li:first\").click()\n```\n\n***\n\n# Known Issues\n\n## Native `input[type=date,datetime,datetime-local,month,year,color]`\n\nSpecial input types are *not* supported yet because browsers implement these input types outside of what is accessible to JavaScript. They also depend on OS regional settings.  The fix however is relatively simple - Cypress will require you to type the final *formatted* value that the input will be set to - and then all will work. [Open an issue](https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A) if you need this to be fixed.\n\n***\n\n## Typing `tab` key does not work\n\nTabbing will be implemented as a separate command as `cy.tab` and support things like multiple tabs, tabbing in reverse, or tabbing to a specific element. [Open an issue](https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A) if you need this to be fixed.\n\n***\n\n## Preventing mousedown does not prevent typing\n\nIn a real browser, preventing mousedown on a form field will prevent it from receiving focus and thus prevent it from being able to be typed into. Currently, Cypress does not factor this in. [Open an issue](https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A) if you need this to be fixed.\n\n***\n\n## Modifier effects\n\nIn a real browser, if a user holds `SHIFT` and types `a`, a capital `A` will be typed into the input. Currently, Cypress does not simulate that behavior.\n\nModifiers are simulated by setting their corresponding values to `true` for key and click events. So, for example, activating the `{shift}` modifier will set `event.shiftKey` to true for any key events, such as `keydown`.\n\n```javascript\n// app code\ndocument.querySelector(\"input:first\").addEventListener(\"keydown\", function (e) {\n  // e.shiftKey will be true\n})\n\n// in test\ncy.get(\"input:first\").type(\"{shift}a\")\n```\n\nIn the example above, a lowercase `a` will be typed, because that's the literal character specified. To type a capital `A`, you can use `cy.type(\"{shift}A\")` (or simply `cy.type(\"A\")` if you don't care about the `shiftKey` property on any key events).\n\nThis holds true for other special key combinations as well (that may be OS-specific). For example, on OSX, typing `ALT + SHIFT + K` creates the special character ``. Like with capitalization, `cy.type()` will not output ``, but simply the letter `k`.\n\n[Open an issue](https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A) if you need modifier effects to be implemented.\n\n***\n\n# Notes\n\n## Mimic user typing behavior\n\n```javascript\n// each keypress is delayed 10ms by default\n// which simulates how a very fast user types!\ncy.get(\"[contenteditable]\").type(\"some text!\")\n```\n\n***\n\n## Events that fire\n\nCypress implements all events that Chrome fires as part of typing in a real keyboard. Read the section: [Simulated Events vs Native Events](#simulated-events-vs-native-events) below for more information.\n\nThe following events will be fired based on what key was pressed identical to the event spec.\n\n* keydown\n* keypress\n* textInput\n* input\n* keyup\n\n`beforeinput` is *not* fired even though it is in the spec because no browser has adopted it.\n\nAdditionally `change` events will be fired either when the `{enter}` key is pressed (and the value has changed since the last focus event), or whenever the element loses focus. This matches browser behavior.\n\nEvents that should not fire on non input types such as elements with `tabindex` do not fire their `textInput` or `input` events. Only typing into elements which cause the actual value or text to change will fire those events.\n\n***\n\n## Event Firing\n\nThe following rules have been implemented that match real browser behavior (and the spec):\n\n1. Cypress respects not firing subsequent events if previous ones were cancelled.\n2. Cypress will fire `keypress` *only* if that key is supposed to actually fire `keypress`.\n3. Cypress will fire `textInput` *only* if typing that key would have inserted an actual character.\n4. Cypress will fire `input` *only* if typing that key modifies or changes the value of the element.\n\n***\n\n## Event Cancellation\n\nCypress respects all default browser behavior when events are cancelled.\n\n```javascript\n// prevent the characters from being inserted\n// by canceling keydown, keypress, or textInput\n$(\"#username\").on(\"keydown\", function(e){\n  e.preventDefault();\n})\n\n// Cypress will not insert any characters if keydown, keypress, or textInput\n// are cancelled - which matches the default browser behavior\ncy.get(\"#username\").type(\"bob@gmail.com\").should(\"have.value\", \"\") // true\n```\n\n***\n\n## Implicit form submission behavior\n\nCypress automatically matches the spec and browser behavior for pressing the `{enter}` key when the input belongs to a `<form>`.\n\nThis behavior is defined here: [Form Implicit Submission](https://html.spec.whatwg.org/multipage/forms.html#implicit-submission)\n\nFor instance the following will submit the form.\n\n```html\n<form action=\"/login\">\n  <input id=\"username\" />\n  <input id=\"password\" />\n  <button type=\"submit\">Log In</button>\n</form>\n```\n\n```javascript\ncy\n  .get(\"#username\").type(\"bob@burgers.com\")\n  .get(\"#password\").type(\"password123{enter}\")\n```\n\nBecause there are multiple `inputs` and one `submit` button, Cypress submits the form (and fires submit events) as well as a synthetic `click` event to the `button`.\n\nThe spec defines the **submit** button as the first `input[type=submit]` or `button[type!=button]` from the form.\n\nAdditionally Cypress handles these 4 other situations as defined in the spec:\n\n1. Does not submit a form if there are multiple inputs and no `submit` button.\n2. Does not submit a form if the `submit` button is disabled.\n3. Submits a form, but does not fire synthetic `click` event, if there is 1 `input` and no `submit` button\n4. Submits form and fires a synthetic `click` event to the `submit` when it exists.\n\nOf course if the form's `submit` event is `preventedDefault` the form will not actually be submitted.\n\n***\n\n## Key Events Table\n\nCypress will print out a table of key events that detail the keys that were pressed when clicking on type within the [command log](https://on.cypress.io/api/type#section-command-log). Each character will contain the `which` character code and the events that happened as a result of that key press.\n\nEvents that were `defaultPrevented` may prevent other events from firing and those will show up as empty.  For instance, canceling `keydown` will not fire `keypress` or `textInput` or `input`, but will fire `keyup` (which matches the spec).\n\nAdditionally, events that cause a `change` event to fire (such as typing `{enter}`) will display with the `change` event column as `true.\n\nAny modifiers activated for the event are also listed in a `modifiers` column.\n\n![Cypress cy.type key events table](https://cloud.githubusercontent.com/assets/1157043/18144246/b44df61c-6f93-11e6-8553-96b1b347db4b.png)\n\n***\n\n## Simulated Events vs Native Events\n\nWhen Cypress is running on your local computer, all events are simulated identically to real native events.\n\nThere should be no distinguishable difference between these simulated events and real native events. We chose to model these simulated events to match what Chrome fires. In other words, using `cy.type` should essentially match actually typing keys on your keyboard while in Chrome.\n\nHowever, when Cypress is run in `cross browser mode`, Cypress uses the actual `OS keyboard` to type, and therefore the browser will fire all of it's native events as you'd expect.\n\nThis strategy works well because when you are in development you are working in Chrome.  Using simulated events is extremely fast, the browser window does *not* need to be in focus. Because we simulate events identically to their native counterpart, your application code won't be able to tell the difference.\n\nIn other words, you get the best of both worlds: simulated when its practical to do so, and native when it needs to run across browsers.\n\n***\n\n# Command Log\n\n## Type into the input\n\n```javascript\ncy.get(\"input[name=firstName]\").type(\"Jane Lane\")\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"584\" alt=\"screen shot 2015-11-29 at 1 25 51 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459104/ee20613e-969c-11e5-8c78-e78b39d9ec46.png\">\n\nWhen clicking on `type` within the command log, the console outputs the following:\n\n<img width=\"637\" alt=\"screen shot 2015-11-29 at 1 26 24 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459106/f14f3308-969c-11e5-8352-f96744bbd713.png\">\n\n***\n\n# Related\n\n- [clear](https://on.cypress.io/api/clear)\n- [click](https://on.cypress.io/api/click)\n- [submit](https://on.cypress.io/api/submit)\n","source":"api/commands/type.md","raw":"title: type\n---\n\nTypes into the DOM element found in the previous command.\n\nPrior to typing, if the DOM element isn't currently focused, Cypress will issue a [click](https://on.cypress.io/api/click) on the element, which will cause the element to receive focus.\n\nText passed to `cy.type` may include any of these special character sequences:\n\nSequence | Notes\n--- | ---\n`\\{\\{\\}`| Types the literal `\\{` key\n`{backspace}` | Deletes character to the left of the cursor\n`{del}` | Deletes character to the right of the cursor\n`{enter}` | Types the Enter key\n`{esc}` | Types the Escape key\n`{leftarrow}` | Moves cursor left\n`{rightarrow}` | Moves cursor right\n`{downarrow}` | Fires down event but does **not** move the cursor\n`{uparrow}` | Fires up event but does **not** move the cursor\n`{selectall}` | Selects all text by creating a `selection range`\n\nText passed to `cy.type` may also include any of the these modifier character sequences:\n\nSequence | Notes\n--- | ---\n`{alt}` | Activates the `altKey` modifier. Aliases: `{option}`\n`{ctrl}` | Activates the `ctrlKey` modifier. Aliases: `{control}`\n`{meta}` | Activates the `metaKey` modifier. Aliases: `{command}`, `{cmd}`\n`{shift}` | Activates the `shiftKey` modifier.\n\n| | |\n|--- | --- |\n| **Returns** | the DOM element that was typed into |\n| **Timeout** | `cy.type` will retry for the duration of the [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) or the duration of the `timeout` specified in the command's [options](#section-options). |\n\n***\n\n# [cy.type( *text* )](#section-usage)\n\nTypes the text provided into the current DOM subject.\n\n***\n\n# Options\n\nPass in an options object to change the default behavior of `cy.type`.\n\n**[cy.type( *text*, *options* )](#options-usage)**\n\nOption | Default | Notes\n--- | --- | ---\n`delay` | `10` | Delay after each keypress\n`force` | `false` | Forces type, disables error checking prior to type\n`release` | `true` | Keep a modifier activated between commands\n`interval` | `16` | Interval to retry type\n`timeout` | [`defaultCommandTimeout`](https://on.cypress.io/guides/configuration#section-timeouts) | Total time to retry the type\n`log` | `true` | whether to display command in command log\n\n***\n\n# Usage\n\n## Type into a textarea.\n\n```javascript\n// issues all keyboard events\n// and returns <textarea> for further chaining\ncy.get(\"textarea\").type(\"Hello world\")\n```\n\n***\n\n## Type into a non-text or non-textarea element with `tabindex`\n\n```html\n<body>\n  <div id=\"el\" tabindex=\"1\">\n    this div can receive focus\n  </div>\n</body>\n```\n\n```javascript\n// this element will receive all of the appropriate\n// key events and focus / blur events but will not\n// have its value or text contents altered in any way\ncy.get(\"#el\").type(\"foo\")\n```\n\n***\n\n# Options Usage\n\n## Force a click to happen prior to type\n\nType issues a [`click`](https://on.cypress.io/api/click) prior to typing (only if the element is not currently focused). Because of this, sometimes it is useful to force the click to happen. Forcing a click disables error checking prior to the click.\n\n```javascript\n// this will disable the built-in logic for ensuring\n// the element is visible, and is physically clickable\n// prior to typing into it\ncy.get(\"input[type=text]\").type(\"Test all the things\", {force: true})\n```\n\n[block:callout]\n{\n  \"type\": \"warning\",\n  \"body\": \"Be careful with the `force` option because it allows the type to happen where it might actually be impossible for a real user to type.\"\n}\n[/block]\n\n***\n\n# Key combinations / Modifiers\n\nWhen using special character sequences (see table at top of page), it's possible to activate modifier keys and type key combinations, such as `CTRL + R` or `SHIFT + ALT + Q`. The modifier(s) remain activated for the duration of the `cy.type()` command, and are released when all subsequent characters are typed, unless [`{release: false}`](https://on.cypress.io/api/type#section-options) is passed as an [option](https://on.cypress.io/v1.0/api/type#section-release-behavior). A `keydown` event is fired when a modifier is activated and a `keyup` event is fired when it is released.\n\n## Type a key combination\n\n```javascript\n// this is the same as a user holding down SHIFT and ALT, then pressing Q\ncy.get(\"input\").type(\"{shift}{alt}Q\")\n```\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Check out our example recipe of logging in by typing username and password](https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_html_web_form_spec.js)\",\n  \"title\": \"Typing into a login form\"\n}\n[/block]\n\n***\n\n## Hold down modifier key and type a word\n\n```javascript\n// all characters after {ctrl} will have 'ctrlKey' set to 'true' on their key events\ncy.get(\"input\").type(\"{ctrl}test\")\n```\n\n***\n\n## Release behavior\n\nBy default, modifiers are released after each type command.\n\n```javascript\n// 'ctrlKey' will be true for each event while 'test' is typed\n// but false while 'everything' is typed\ncy.get(\"input\").type(\"{ctrl}test\").type(\"everything\")\n```\n\nTo keep a modifier activated between commands, specify `{release: false}` in the options.\n\n```javascript\n// 'altKey' will be true while typing 'foo'\ncy.get(\"input\").type(\"{alt}foo\", {release: false})\n// 'altKey' will also be true during 'get' and 'click' commands\ncy.get(\"button\").click()\n```\n\nModifiers are automatically released between tests, even with `{release: false}`.\n\n```javascript\nit(\"has modifiers activated\", function () {\n  // 'altKey' will be true while typing 'foo'\n  cy.get(\"input\").type(\"{alt}foo\", {release: false})\n})\n\nit(\"does not have modifiers activated\", function () {\n  // 'altKey' will be false while typing 'bar'\n  cy.get(\"input\").type(\"bar\")\n})\n```\n\nTo manually release modifiers within a test after using `{release: false}`, use another `type` command and the modifier will be released after it.\n\n```javascript\n// 'altKey' will be true while typing 'foo'\ncy.get(\"input\").type(\"{alt}foo\", {release: false})\n// 'altKey' will be true during the 'get' and 'click' commands\ncy.get(\"button\").click()\n// 'altKey' will be released after this command\ncy.get(\"input\").type(\"{alt}\")\n// 'altKey' will be false during the 'get' and 'click' commands\ncy.get(\"button\").click()\n```\n\n***\n\n## Global shortcuts / modifiers\n\n`cy.type()` requires a focusable element as the subject, since it's usually unintended to type into something that's not a text field or textarea! Although there *are* a few cases where it's valid to \"type\" into something other than a text field or textarea:\n\n* Keyboard shortcuts where the listener is on the `document` or `body`.\n* Holding modifier keys and clicking an arbitrary element.\n\nTo support this, the `body` can be used as the subject (even though it's *not* a focusable element).\n\n```javascript\n// all of the type events will be fired on the body\ncy.get(\"body\").type(\"{uparrow}{uparrow}{downarrow}{downarrow}{leftarrow}{rightarrow}{leftarrow}{rightarrow}ba\")\n\n```\n\n```javascript\n// execute a SHIFT + click on the first <li>\n// {release: false} is necessary so that\n// SHIFT will not be released after the type command\ncy.get(\"body\").type(\"{shift}\", {release: false}).get(\"li:first\").click()\n```\n\n***\n\n# Known Issues\n\n## Native `input[type=date,datetime,datetime-local,month,year,color]`\n\nSpecial input types are *not* supported yet because browsers implement these input types outside of what is accessible to JavaScript. They also depend on OS regional settings.  The fix however is relatively simple - Cypress will require you to type the final *formatted* value that the input will be set to - and then all will work. [Open an issue](https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A) if you need this to be fixed.\n\n***\n\n## Typing `tab` key does not work\n\nTabbing will be implemented as a separate command as `cy.tab` and support things like multiple tabs, tabbing in reverse, or tabbing to a specific element. [Open an issue](https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A) if you need this to be fixed.\n\n***\n\n## Preventing mousedown does not prevent typing\n\nIn a real browser, preventing mousedown on a form field will prevent it from receiving focus and thus prevent it from being able to be typed into. Currently, Cypress does not factor this in. [Open an issue](https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A) if you need this to be fixed.\n\n***\n\n## Modifier effects\n\nIn a real browser, if a user holds `SHIFT` and types `a`, a capital `A` will be typed into the input. Currently, Cypress does not simulate that behavior.\n\nModifiers are simulated by setting their corresponding values to `true` for key and click events. So, for example, activating the `{shift}` modifier will set `event.shiftKey` to true for any key events, such as `keydown`.\n\n```javascript\n// app code\ndocument.querySelector(\"input:first\").addEventListener(\"keydown\", function (e) {\n  // e.shiftKey will be true\n})\n\n// in test\ncy.get(\"input:first\").type(\"{shift}a\")\n```\n\nIn the example above, a lowercase `a` will be typed, because that's the literal character specified. To type a capital `A`, you can use `cy.type(\"{shift}A\")` (or simply `cy.type(\"A\")` if you don't care about the `shiftKey` property on any key events).\n\nThis holds true for other special key combinations as well (that may be OS-specific). For example, on OSX, typing `ALT + SHIFT + K` creates the special character ``. Like with capitalization, `cy.type()` will not output ``, but simply the letter `k`.\n\n[Open an issue](https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A) if you need modifier effects to be implemented.\n\n***\n\n# Notes\n\n## Mimic user typing behavior\n\n```javascript\n// each keypress is delayed 10ms by default\n// which simulates how a very fast user types!\ncy.get(\"[contenteditable]\").type(\"some text!\")\n```\n\n***\n\n## Events that fire\n\nCypress implements all events that Chrome fires as part of typing in a real keyboard. Read the section: [Simulated Events vs Native Events](#simulated-events-vs-native-events) below for more information.\n\nThe following events will be fired based on what key was pressed identical to the event spec.\n\n* keydown\n* keypress\n* textInput\n* input\n* keyup\n\n`beforeinput` is *not* fired even though it is in the spec because no browser has adopted it.\n\nAdditionally `change` events will be fired either when the `{enter}` key is pressed (and the value has changed since the last focus event), or whenever the element loses focus. This matches browser behavior.\n\nEvents that should not fire on non input types such as elements with `tabindex` do not fire their `textInput` or `input` events. Only typing into elements which cause the actual value or text to change will fire those events.\n\n***\n\n## Event Firing\n\nThe following rules have been implemented that match real browser behavior (and the spec):\n\n1. Cypress respects not firing subsequent events if previous ones were cancelled.\n2. Cypress will fire `keypress` *only* if that key is supposed to actually fire `keypress`.\n3. Cypress will fire `textInput` *only* if typing that key would have inserted an actual character.\n4. Cypress will fire `input` *only* if typing that key modifies or changes the value of the element.\n\n***\n\n## Event Cancellation\n\nCypress respects all default browser behavior when events are cancelled.\n\n```javascript\n// prevent the characters from being inserted\n// by canceling keydown, keypress, or textInput\n$(\"#username\").on(\"keydown\", function(e){\n  e.preventDefault();\n})\n\n// Cypress will not insert any characters if keydown, keypress, or textInput\n// are cancelled - which matches the default browser behavior\ncy.get(\"#username\").type(\"bob@gmail.com\").should(\"have.value\", \"\") // true\n```\n\n***\n\n## Implicit form submission behavior\n\nCypress automatically matches the spec and browser behavior for pressing the `{enter}` key when the input belongs to a `<form>`.\n\nThis behavior is defined here: [Form Implicit Submission](https://html.spec.whatwg.org/multipage/forms.html#implicit-submission)\n\nFor instance the following will submit the form.\n\n```html\n<form action=\"/login\">\n  <input id=\"username\" />\n  <input id=\"password\" />\n  <button type=\"submit\">Log In</button>\n</form>\n```\n\n```javascript\ncy\n  .get(\"#username\").type(\"bob@burgers.com\")\n  .get(\"#password\").type(\"password123{enter}\")\n```\n\nBecause there are multiple `inputs` and one `submit` button, Cypress submits the form (and fires submit events) as well as a synthetic `click` event to the `button`.\n\nThe spec defines the **submit** button as the first `input[type=submit]` or `button[type!=button]` from the form.\n\nAdditionally Cypress handles these 4 other situations as defined in the spec:\n\n1. Does not submit a form if there are multiple inputs and no `submit` button.\n2. Does not submit a form if the `submit` button is disabled.\n3. Submits a form, but does not fire synthetic `click` event, if there is 1 `input` and no `submit` button\n4. Submits form and fires a synthetic `click` event to the `submit` when it exists.\n\nOf course if the form's `submit` event is `preventedDefault` the form will not actually be submitted.\n\n***\n\n## Key Events Table\n\nCypress will print out a table of key events that detail the keys that were pressed when clicking on type within the [command log](https://on.cypress.io/api/type#section-command-log). Each character will contain the `which` character code and the events that happened as a result of that key press.\n\nEvents that were `defaultPrevented` may prevent other events from firing and those will show up as empty.  For instance, canceling `keydown` will not fire `keypress` or `textInput` or `input`, but will fire `keyup` (which matches the spec).\n\nAdditionally, events that cause a `change` event to fire (such as typing `{enter}`) will display with the `change` event column as `true.\n\nAny modifiers activated for the event are also listed in a `modifiers` column.\n\n![Cypress cy.type key events table](https://cloud.githubusercontent.com/assets/1157043/18144246/b44df61c-6f93-11e6-8553-96b1b347db4b.png)\n\n***\n\n## Simulated Events vs Native Events\n\nWhen Cypress is running on your local computer, all events are simulated identically to real native events.\n\nThere should be no distinguishable difference between these simulated events and real native events. We chose to model these simulated events to match what Chrome fires. In other words, using `cy.type` should essentially match actually typing keys on your keyboard while in Chrome.\n\nHowever, when Cypress is run in `cross browser mode`, Cypress uses the actual `OS keyboard` to type, and therefore the browser will fire all of it's native events as you'd expect.\n\nThis strategy works well because when you are in development you are working in Chrome.  Using simulated events is extremely fast, the browser window does *not* need to be in focus. Because we simulate events identically to their native counterpart, your application code won't be able to tell the difference.\n\nIn other words, you get the best of both worlds: simulated when its practical to do so, and native when it needs to run across browsers.\n\n***\n\n# Command Log\n\n## Type into the input\n\n```javascript\ncy.get(\"input[name=firstName]\").type(\"Jane Lane\")\n```\n\nThe commands above will display in the command log as:\n\n<img width=\"584\" alt=\"screen shot 2015-11-29 at 1 25 51 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459104/ee20613e-969c-11e5-8c78-e78b39d9ec46.png\">\n\nWhen clicking on `type` within the command log, the console outputs the following:\n\n<img width=\"637\" alt=\"screen shot 2015-11-29 at 1 26 24 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459106/f14f3308-969c-11e5-8352-f96744bbd713.png\">\n\n***\n\n# Related\n\n- [clear](https://on.cypress.io/api/clear)\n- [click](https://on.cypress.io/api/click)\n- [submit](https://on.cypress.io/api/submit)\n","date":"2017-04-19T19:51:56.000Z","updated":"2017-04-19T19:51:56.000Z","path":"api/commands/type.html","_id":"cj1pc5yt30000w6g8759ai62y","comments":1,"layout":"page","content":"<p>Types into the DOM element found in the previous command.</p>\n<p>Prior to typing, if the DOM element isn’t currently focused, Cypress will issue a <a href=\"https://on.cypress.io/api/click\" target=\"_blank\" rel=\"external\">click</a> on the element, which will cause the element to receive focus.</p>\n<p>Text passed to <code>cy.type</code> may include any of these special character sequences:</p>\n<table>\n<thead>\n<tr>\n<th>Sequence</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\\{\\{\\}</code></td>\n<td>Types the literal <code>\\{</code> key</td>\n</tr>\n<tr>\n<td><code>{backspace}</code></td>\n<td>Deletes character to the left of the cursor</td>\n</tr>\n<tr>\n<td><code>{del}</code></td>\n<td>Deletes character to the right of the cursor</td>\n</tr>\n<tr>\n<td><code>{enter}</code></td>\n<td>Types the Enter key</td>\n</tr>\n<tr>\n<td><code>{esc}</code></td>\n<td>Types the Escape key</td>\n</tr>\n<tr>\n<td><code>{leftarrow}</code></td>\n<td>Moves cursor left</td>\n</tr>\n<tr>\n<td><code>{rightarrow}</code></td>\n<td>Moves cursor right</td>\n</tr>\n<tr>\n<td><code>{downarrow}</code></td>\n<td>Fires down event but does <strong>not</strong> move the cursor</td>\n</tr>\n<tr>\n<td><code>{uparrow}</code></td>\n<td>Fires up event but does <strong>not</strong> move the cursor</td>\n</tr>\n<tr>\n<td><code>{selectall}</code></td>\n<td>Selects all text by creating a <code>selection range</code></td>\n</tr>\n</tbody>\n</table>\n<p>Text passed to <code>cy.type</code> may also include any of the these modifier character sequences:</p>\n<table>\n<thead>\n<tr>\n<th>Sequence</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>{alt}</code></td>\n<td>Activates the <code>altKey</code> modifier. Aliases: <code>{option}</code></td>\n</tr>\n<tr>\n<td><code>{ctrl}</code></td>\n<td>Activates the <code>ctrlKey</code> modifier. Aliases: <code>{control}</code></td>\n</tr>\n<tr>\n<td><code>{meta}</code></td>\n<td>Activates the <code>metaKey</code> modifier. Aliases: <code>{command}</code>, <code>{cmd}</code></td>\n</tr>\n<tr>\n<td><code>{shift}</code></td>\n<td>Activates the <code>shiftKey</code> modifier.</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the DOM element that was typed into</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.type</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a> or the duration of the <code>timeout</code> specified in the command’s <a href=\"#section-options\">options</a>.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-type-text\"><a href=\"#cy-type-text\" class=\"headerlink\" title=\"cy.type( text )\"></a><a href=\"#section-usage\">cy.type( <em>text</em> )</a></h1><p>Types the text provided into the current DOM subject.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.type</code>.</p>\n<p><strong><a href=\"#options-usage\">cy.type( <em>text</em>, <em>options</em> )</a></strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>delay</code></td>\n<td><code>10</code></td>\n<td>Delay after each keypress</td>\n</tr>\n<tr>\n<td><code>force</code></td>\n<td><code>false</code></td>\n<td>Forces type, disables error checking prior to type</td>\n</tr>\n<tr>\n<td><code>release</code></td>\n<td><code>true</code></td>\n<td>Keep a modifier activated between commands</td>\n</tr>\n<tr>\n<td><code>interval</code></td>\n<td><code>16</code></td>\n<td>Interval to retry type</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\" target=\"_blank\" rel=\"external\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry the type</td>\n</tr>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Type-into-a-textarea\"><a href=\"#Type-into-a-textarea\" class=\"headerlink\" title=\"Type into a textarea.\"></a>Type into a textarea.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// issues all keyboard events</span></div><div class=\"line\"><span class=\"comment\">// and returns &lt;textarea&gt; for further chaining</span></div><div class=\"line\">cy.get(<span class=\"string\">\"textarea\"</span>).type(<span class=\"string\">\"Hello world\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Type-into-a-non-text-or-non-textarea-element-with-tabindex\"><a href=\"#Type-into-a-non-text-or-non-textarea-element-with-tabindex\" class=\"headerlink\" title=\"Type into a non-text or non-textarea element with tabindex\"></a>Type into a non-text or non-textarea element with <code>tabindex</code></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"el\"</span> <span class=\"attr\">tabindex</span>=<span class=\"string\">\"1\"</span>&gt;</span></div><div class=\"line\">    this div can receive focus</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// this element will receive all of the appropriate</span></div><div class=\"line\"><span class=\"comment\">// key events and focus / blur events but will not</span></div><div class=\"line\"><span class=\"comment\">// have its value or text contents altered in any way</span></div><div class=\"line\">cy.get(<span class=\"string\">\"#el\"</span>).type(<span class=\"string\">\"foo\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Options-Usage\"><a href=\"#Options-Usage\" class=\"headerlink\" title=\"Options Usage\"></a>Options Usage</h1><h2 id=\"Force-a-click-to-happen-prior-to-type\"><a href=\"#Force-a-click-to-happen-prior-to-type\" class=\"headerlink\" title=\"Force a click to happen prior to type\"></a>Force a click to happen prior to type</h2><p>Type issues a <a href=\"https://on.cypress.io/api/click\" target=\"_blank\" rel=\"external\"><code>click</code></a> prior to typing (only if the element is not currently focused). Because of this, sometimes it is useful to force the click to happen. Forcing a click disables error checking prior to the click.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// this will disable the built-in logic for ensuring</span></div><div class=\"line\"><span class=\"comment\">// the element is visible, and is physically clickable</span></div><div class=\"line\"><span class=\"comment\">// prior to typing into it</span></div><div class=\"line\">cy.get(<span class=\"string\">\"input[type=text]\"</span>).type(<span class=\"string\">\"Test all the things\"</span>, &#123;<span class=\"attr\">force</span>: <span class=\"literal\">true</span>&#125;)</div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “warning”,<br>  “body”: “Be careful with the <code>force</code> option because it allows the type to happen where it might actually be impossible for a real user to type.”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Key-combinations-Modifiers\"><a href=\"#Key-combinations-Modifiers\" class=\"headerlink\" title=\"Key combinations / Modifiers\"></a>Key combinations / Modifiers</h1><p>When using special character sequences (see table at top of page), it’s possible to activate modifier keys and type key combinations, such as <code>CTRL + R</code> or <code>SHIFT + ALT + Q</code>. The modifier(s) remain activated for the duration of the <code>cy.type()</code> command, and are released when all subsequent characters are typed, unless <a href=\"https://on.cypress.io/api/type#section-options\" target=\"_blank\" rel=\"external\"><code>{release: false}</code></a> is passed as an <a href=\"https://on.cypress.io/v1.0/api/type#section-release-behavior\" target=\"_blank\" rel=\"external\">option</a>. A <code>keydown</code> event is fired when a modifier is activated and a <code>keyup</code> event is fired when it is released.</p>\n<h2 id=\"Type-a-key-combination\"><a href=\"#Type-a-key-combination\" class=\"headerlink\" title=\"Type a key combination\"></a>Type a key combination</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// this is the same as a user holding down SHIFT and ALT, then pressing Q</span></div><div class=\"line\">cy.get(<span class=\"string\">\"input\"</span>).type(<span class=\"string\">\"&#123;shift&#125;&#123;alt&#125;Q\"</span>)</div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_html_web_form_spec.js\" target=\"_blank\" rel=\"external\">Check out our example recipe of logging in by typing username and password</a>“,<br>  “title”: “Typing into a login form”<br>}<br>[/block]</p>\n<hr>\n<h2 id=\"Hold-down-modifier-key-and-type-a-word\"><a href=\"#Hold-down-modifier-key-and-type-a-word\" class=\"headerlink\" title=\"Hold down modifier key and type a word\"></a>Hold down modifier key and type a word</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// all characters after &#123;ctrl&#125; will have 'ctrlKey' set to 'true' on their key events</span></div><div class=\"line\">cy.get(<span class=\"string\">\"input\"</span>).type(<span class=\"string\">\"&#123;ctrl&#125;test\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Release-behavior\"><a href=\"#Release-behavior\" class=\"headerlink\" title=\"Release behavior\"></a>Release behavior</h2><p>By default, modifiers are released after each type command.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 'ctrlKey' will be true for each event while 'test' is typed</span></div><div class=\"line\"><span class=\"comment\">// but false while 'everything' is typed</span></div><div class=\"line\">cy.get(<span class=\"string\">\"input\"</span>).type(<span class=\"string\">\"&#123;ctrl&#125;test\"</span>).type(<span class=\"string\">\"everything\"</span>)</div></pre></td></tr></table></figure>\n<p>To keep a modifier activated between commands, specify <code>{release: false}</code> in the options.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 'altKey' will be true while typing 'foo'</span></div><div class=\"line\">cy.get(<span class=\"string\">\"input\"</span>).type(<span class=\"string\">\"&#123;alt&#125;foo\"</span>, &#123;<span class=\"attr\">release</span>: <span class=\"literal\">false</span>&#125;)</div><div class=\"line\"><span class=\"comment\">// 'altKey' will also be true during 'get' and 'click' commands</span></div><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).click()</div></pre></td></tr></table></figure>\n<p>Modifiers are automatically released between tests, even with <code>{release: false}</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(<span class=\"string\">\"has modifiers activated\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 'altKey' will be true while typing 'foo'</span></div><div class=\"line\">  cy.get(<span class=\"string\">\"input\"</span>).type(<span class=\"string\">\"&#123;alt&#125;foo\"</span>, &#123;<span class=\"attr\">release</span>: <span class=\"literal\">false</span>&#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">it(<span class=\"string\">\"does not have modifiers activated\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 'altKey' will be false while typing 'bar'</span></div><div class=\"line\">  cy.get(<span class=\"string\">\"input\"</span>).type(<span class=\"string\">\"bar\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>To manually release modifiers within a test after using <code>{release: false}</code>, use another <code>type</code> command and the modifier will be released after it.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 'altKey' will be true while typing 'foo'</span></div><div class=\"line\">cy.get(<span class=\"string\">\"input\"</span>).type(<span class=\"string\">\"&#123;alt&#125;foo\"</span>, &#123;<span class=\"attr\">release</span>: <span class=\"literal\">false</span>&#125;)</div><div class=\"line\"><span class=\"comment\">// 'altKey' will be true during the 'get' and 'click' commands</span></div><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).click()</div><div class=\"line\"><span class=\"comment\">// 'altKey' will be released after this command</span></div><div class=\"line\">cy.get(<span class=\"string\">\"input\"</span>).type(<span class=\"string\">\"&#123;alt&#125;\"</span>)</div><div class=\"line\"><span class=\"comment\">// 'altKey' will be false during the 'get' and 'click' commands</span></div><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).click()</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Global-shortcuts-modifiers\"><a href=\"#Global-shortcuts-modifiers\" class=\"headerlink\" title=\"Global shortcuts / modifiers\"></a>Global shortcuts / modifiers</h2><p><code>cy.type()</code> requires a focusable element as the subject, since it’s usually unintended to type into something that’s not a text field or textarea! Although there <em>are</em> a few cases where it’s valid to “type” into something other than a text field or textarea:</p>\n<ul>\n<li>Keyboard shortcuts where the listener is on the <code>document</code> or <code>body</code>.</li>\n<li>Holding modifier keys and clicking an arbitrary element.</li>\n</ul>\n<p>To support this, the <code>body</code> can be used as the subject (even though it’s <em>not</em> a focusable element).</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// all of the type events will be fired on the body</span></div><div class=\"line\">cy.get(<span class=\"string\">\"body\"</span>).type(<span class=\"string\">\"&#123;uparrow&#125;&#123;uparrow&#125;&#123;downarrow&#125;&#123;downarrow&#125;&#123;leftarrow&#125;&#123;rightarrow&#125;&#123;leftarrow&#125;&#123;rightarrow&#125;ba\"</span>)</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// execute a SHIFT + click on the first &lt;li&gt;</span></div><div class=\"line\"><span class=\"comment\">// &#123;release: false&#125; is necessary so that</span></div><div class=\"line\"><span class=\"comment\">// SHIFT will not be released after the type command</span></div><div class=\"line\">cy.get(<span class=\"string\">\"body\"</span>).type(<span class=\"string\">\"&#123;shift&#125;\"</span>, &#123;<span class=\"attr\">release</span>: <span class=\"literal\">false</span>&#125;).get(<span class=\"string\">\"li:first\"</span>).click()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Known-Issues\"><a href=\"#Known-Issues\" class=\"headerlink\" title=\"Known Issues\"></a>Known Issues</h1><h2 id=\"Native-input-type-date-datetime-datetime-local-month-year-color\"><a href=\"#Native-input-type-date-datetime-datetime-local-month-year-color\" class=\"headerlink\" title=\"Native input[type=date,datetime,datetime-local,month,year,color]\"></a>Native <code>input[type=date,datetime,datetime-local,month,year,color]</code></h2><p>Special input types are <em>not</em> supported yet because browsers implement these input types outside of what is accessible to JavaScript. They also depend on OS regional settings.  The fix however is relatively simple - Cypress will require you to type the final <em>formatted</em> value that the input will be set to - and then all will work. <a href=\"https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A\" target=\"_blank\" rel=\"external\">Open an issue</a> if you need this to be fixed.</p>\n<hr>\n<h2 id=\"Typing-tab-key-does-not-work\"><a href=\"#Typing-tab-key-does-not-work\" class=\"headerlink\" title=\"Typing tab key does not work\"></a>Typing <code>tab</code> key does not work</h2><p>Tabbing will be implemented as a separate command as <code>cy.tab</code> and support things like multiple tabs, tabbing in reverse, or tabbing to a specific element. <a href=\"https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A\" target=\"_blank\" rel=\"external\">Open an issue</a> if you need this to be fixed.</p>\n<hr>\n<h2 id=\"Preventing-mousedown-does-not-prevent-typing\"><a href=\"#Preventing-mousedown-does-not-prevent-typing\" class=\"headerlink\" title=\"Preventing mousedown does not prevent typing\"></a>Preventing mousedown does not prevent typing</h2><p>In a real browser, preventing mousedown on a form field will prevent it from receiving focus and thus prevent it from being able to be typed into. Currently, Cypress does not factor this in. <a href=\"https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A\" target=\"_blank\" rel=\"external\">Open an issue</a> if you need this to be fixed.</p>\n<hr>\n<h2 id=\"Modifier-effects\"><a href=\"#Modifier-effects\" class=\"headerlink\" title=\"Modifier effects\"></a>Modifier effects</h2><p>In a real browser, if a user holds <code>SHIFT</code> and types <code>a</code>, a capital <code>A</code> will be typed into the input. Currently, Cypress does not simulate that behavior.</p>\n<p>Modifiers are simulated by setting their corresponding values to <code>true</code> for key and click events. So, for example, activating the <code>{shift}</code> modifier will set <code>event.shiftKey</code> to true for any key events, such as <code>keydown</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// app code</span></div><div class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"input:first\"</span>).addEventListener(<span class=\"string\">\"keydown\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// e.shiftKey will be true</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// in test</span></div><div class=\"line\">cy.get(<span class=\"string\">\"input:first\"</span>).type(<span class=\"string\">\"&#123;shift&#125;a\"</span>)</div></pre></td></tr></table></figure>\n<p>In the example above, a lowercase <code>a</code> will be typed, because that’s the literal character specified. To type a capital <code>A</code>, you can use <code>cy.type(&quot;{shift}A&quot;)</code> (or simply <code>cy.type(&quot;A&quot;)</code> if you don’t care about the <code>shiftKey</code> property on any key events).</p>\n<p>This holds true for other special key combinations as well (that may be OS-specific). For example, on OSX, typing <code>ALT + SHIFT + K</code> creates the special character <code></code>. Like with capitalization, <code>cy.type()</code> will not output <code></code>, but simply the letter <code>k</code>.</p>\n<p><a href=\"https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A\" target=\"_blank\" rel=\"external\">Open an issue</a> if you need modifier effects to be implemented.</p>\n<hr>\n<h1 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h1><h2 id=\"Mimic-user-typing-behavior\"><a href=\"#Mimic-user-typing-behavior\" class=\"headerlink\" title=\"Mimic user typing behavior\"></a>Mimic user typing behavior</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// each keypress is delayed 10ms by default</span></div><div class=\"line\"><span class=\"comment\">// which simulates how a very fast user types!</span></div><div class=\"line\">cy.get(<span class=\"string\">\"[contenteditable]\"</span>).type(<span class=\"string\">\"some text!\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Events-that-fire\"><a href=\"#Events-that-fire\" class=\"headerlink\" title=\"Events that fire\"></a>Events that fire</h2><p>Cypress implements all events that Chrome fires as part of typing in a real keyboard. Read the section: <a href=\"#simulated-events-vs-native-events\">Simulated Events vs Native Events</a> below for more information.</p>\n<p>The following events will be fired based on what key was pressed identical to the event spec.</p>\n<ul>\n<li>keydown</li>\n<li>keypress</li>\n<li>textInput</li>\n<li>input</li>\n<li>keyup</li>\n</ul>\n<p><code>beforeinput</code> is <em>not</em> fired even though it is in the spec because no browser has adopted it.</p>\n<p>Additionally <code>change</code> events will be fired either when the <code>{enter}</code> key is pressed (and the value has changed since the last focus event), or whenever the element loses focus. This matches browser behavior.</p>\n<p>Events that should not fire on non input types such as elements with <code>tabindex</code> do not fire their <code>textInput</code> or <code>input</code> events. Only typing into elements which cause the actual value or text to change will fire those events.</p>\n<hr>\n<h2 id=\"Event-Firing\"><a href=\"#Event-Firing\" class=\"headerlink\" title=\"Event Firing\"></a>Event Firing</h2><p>The following rules have been implemented that match real browser behavior (and the spec):</p>\n<ol>\n<li>Cypress respects not firing subsequent events if previous ones were cancelled.</li>\n<li>Cypress will fire <code>keypress</code> <em>only</em> if that key is supposed to actually fire <code>keypress</code>.</li>\n<li>Cypress will fire <code>textInput</code> <em>only</em> if typing that key would have inserted an actual character.</li>\n<li>Cypress will fire <code>input</code> <em>only</em> if typing that key modifies or changes the value of the element.</li>\n</ol>\n<hr>\n<h2 id=\"Event-Cancellation\"><a href=\"#Event-Cancellation\" class=\"headerlink\" title=\"Event Cancellation\"></a>Event Cancellation</h2><p>Cypress respects all default browser behavior when events are cancelled.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// prevent the characters from being inserted</span></div><div class=\"line\"><span class=\"comment\">// by canceling keydown, keypress, or textInput</span></div><div class=\"line\">$(<span class=\"string\">\"#username\"</span>).on(<span class=\"string\">\"keydown\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</div><div class=\"line\">  e.preventDefault();</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Cypress will not insert any characters if keydown, keypress, or textInput</span></div><div class=\"line\"><span class=\"comment\">// are cancelled - which matches the default browser behavior</span></div><div class=\"line\">cy.get(<span class=\"string\">\"#username\"</span>).type(<span class=\"string\">\"bob@gmail.com\"</span>).should(<span class=\"string\">\"have.value\"</span>, <span class=\"string\">\"\"</span>) <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Implicit-form-submission-behavior\"><a href=\"#Implicit-form-submission-behavior\" class=\"headerlink\" title=\"Implicit form submission behavior\"></a>Implicit form submission behavior</h2><p>Cypress automatically matches the spec and browser behavior for pressing the <code>{enter}</code> key when the input belongs to a <code>&lt;form&gt;</code>.</p>\n<p>This behavior is defined here: <a href=\"https://html.spec.whatwg.org/multipage/forms.html#implicit-submission\" target=\"_blank\" rel=\"external\">Form Implicit Submission</a></p>\n<p>For instance the following will submit the form.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/login\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"username\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"password\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span>Log In<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"#username\"</span>).type(<span class=\"string\">\"bob@burgers.com\"</span>)</div><div class=\"line\">  .get(<span class=\"string\">\"#password\"</span>).type(<span class=\"string\">\"password123&#123;enter&#125;\"</span>)</div></pre></td></tr></table></figure>\n<p>Because there are multiple <code>inputs</code> and one <code>submit</code> button, Cypress submits the form (and fires submit events) as well as a synthetic <code>click</code> event to the <code>button</code>.</p>\n<p>The spec defines the <strong>submit</strong> button as the first <code>input[type=submit]</code> or <code>button[type!=button]</code> from the form.</p>\n<p>Additionally Cypress handles these 4 other situations as defined in the spec:</p>\n<ol>\n<li>Does not submit a form if there are multiple inputs and no <code>submit</code> button.</li>\n<li>Does not submit a form if the <code>submit</code> button is disabled.</li>\n<li>Submits a form, but does not fire synthetic <code>click</code> event, if there is 1 <code>input</code> and no <code>submit</code> button</li>\n<li>Submits form and fires a synthetic <code>click</code> event to the <code>submit</code> when it exists.</li>\n</ol>\n<p>Of course if the form’s <code>submit</code> event is <code>preventedDefault</code> the form will not actually be submitted.</p>\n<hr>\n<h2 id=\"Key-Events-Table\"><a href=\"#Key-Events-Table\" class=\"headerlink\" title=\"Key Events Table\"></a>Key Events Table</h2><p>Cypress will print out a table of key events that detail the keys that were pressed when clicking on type within the <a href=\"https://on.cypress.io/api/type#section-command-log\" target=\"_blank\" rel=\"external\">command log</a>. Each character will contain the <code>which</code> character code and the events that happened as a result of that key press.</p>\n<p>Events that were <code>defaultPrevented</code> may prevent other events from firing and those will show up as empty.  For instance, canceling <code>keydown</code> will not fire <code>keypress</code> or <code>textInput</code> or <code>input</code>, but will fire <code>keyup</code> (which matches the spec).</p>\n<p>Additionally, events that cause a <code>change</code> event to fire (such as typing <code>{enter}</code>) will display with the <code>change</code> event column as `true.</p>\n<p>Any modifiers activated for the event are also listed in a <code>modifiers</code> column.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1157043/18144246/b44df61c-6f93-11e6-8553-96b1b347db4b.png\" alt=\"Cypress cy.type key events table\"></p>\n<hr>\n<h2 id=\"Simulated-Events-vs-Native-Events\"><a href=\"#Simulated-Events-vs-Native-Events\" class=\"headerlink\" title=\"Simulated Events vs Native Events\"></a>Simulated Events vs Native Events</h2><p>When Cypress is running on your local computer, all events are simulated identically to real native events.</p>\n<p>There should be no distinguishable difference between these simulated events and real native events. We chose to model these simulated events to match what Chrome fires. In other words, using <code>cy.type</code> should essentially match actually typing keys on your keyboard while in Chrome.</p>\n<p>However, when Cypress is run in <code>cross browser mode</code>, Cypress uses the actual <code>OS keyboard</code> to type, and therefore the browser will fire all of it’s native events as you’d expect.</p>\n<p>This strategy works well because when you are in development you are working in Chrome.  Using simulated events is extremely fast, the browser window does <em>not</em> need to be in focus. Because we simulate events identically to their native counterpart, your application code won’t be able to tell the difference.</p>\n<p>In other words, you get the best of both worlds: simulated when its practical to do so, and native when it needs to run across browsers.</p>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Type-into-the-input\"><a href=\"#Type-into-the-input\" class=\"headerlink\" title=\"Type into the input\"></a>Type into the input</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"input[name=firstName]\"</span>).type(<span class=\"string\">\"Jane Lane\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"584\" alt=\"screen shot 2015-11-29 at 1 25 51 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459104/ee20613e-969c-11e5-8c78-e78b39d9ec46.png\"></p>\n<p>When clicking on <code>type</code> within the command log, the console outputs the following:</p>\n<p><img width=\"637\" alt=\"screen shot 2015-11-29 at 1 26 24 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459106/f14f3308-969c-11e5-8352-f96744bbd713.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/clear\" target=\"_blank\" rel=\"external\">clear</a></li>\n<li><a href=\"https://on.cypress.io/api/click\" target=\"_blank\" rel=\"external\">click</a></li>\n<li><a href=\"https://on.cypress.io/api/submit\" target=\"_blank\" rel=\"external\">submit</a></li>\n</ul>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"guides.html","our-goals":"our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"writing-your-first-test.html","using-the-cypress-runner":"using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"list-of-example-apps.html","list-of-example-recipes":"list-of-example-recipes.html"},"dashboard":{"features":"dashboard-features.html","projects":"dashboard-projects.html","runs":"dashboard-runs.html","organizations":"dashboard-organizations.html"},"guides":{"configuration":"configuration.html","issuing-commands":"issuing-commands.html","finding-elements":"finding-elements.html","making-assertions":"making-assertions.html","network-requests":"network-requests.html","continuous-integration":"continuous-integration.html","environment-variables":"environment-variables.html","stubs-spies-and-clocks":"stubs-spies-and-clocks.html","using-aliases":"using-aliases.html","creating-fixtures":"creating-fixtures.html","screenshots-and-videos":"screenshots-and-videos.html","bundled-tools":"bundled-tools.html","reporters":"reporters.html"},"references":{"cli-tool":"cli-tool.html","error-messages":"error-messages.html","anti-patterns":"anti-patterns.html","known-issues":"known-issues.html","web-security":"web-security.html","browser-management":"browser-management.html","userland-extensions":"userland-extensions.html"}},"api":{"welcome":{"api":"index.html"},"commands":{"and":"commands/and.html","as":"as.html","blur":"blur.html","check":"check.html","children":"children.html","clear":"clear.html","clear-cookie":"clear-cookie.html","clear-cookies":"clear-cookies.html","clear-local-storage":"clear-local-storage.html","click":"click.html","clock":"clock.html","closest":"closest.html","contains":"contains.html","dblclick":"dblclick.html","debug":"debug.html","document":"document.html","each":"each.html","end":"end.html","eq":"eq.html","exec":"exec.html","filter":"filter.html","find":"find.html","first":"first.html","fixture":"fixture.html","focus":"focus.html","focused":"focused.html","get":"get.html","get-cookie":"get-cookie.html","get-cookies":"get-cookies.html","go":"go.html","hash":"hash.html","hover":"hover.html","invoke":"invoke.html","its":"its.html","last":"last.html","location":"location.html","log":"log.html","next":"next.html","next-all":"next-all.html","next-until":"next-until.html","not":"not.html","parent":"parent.html","parents":"parents.html","parents-until":"parents-until.html","read-file":"read-file.html","reload":"reload.html","request":"request.html","root":"root.html","route":"route.html","screenshot":"screenshot.html","select":"select.html","server":"server.html","set-cookie":"set-cookie.html","should":"should.html","siblings":"siblings.html","spread":"spread.html","spy":"spy.html","stub":"stub.html","submit":"submit.html","then":"then.html","tick":"tick.html","title":"title.html","type":"type.html","uncheck":"uncheck.html","url":"url.html","viewport":"viewport.html","visit":"visit.html","wait":"wait.html","window":"window.html","within":"within.html","wrap":"wrap.html","write-file":"write-file.html"},"utilities":{"-":"-.html","$":"$.html","minimatch":"minimatch.html","blob":"blob.html","promise":"promise.html"},"cypress-api":{"config":"config.html","env":"env.html","cypress-commands":"commands.html","cookies":"cookies.html","dom":"dom.html","cypress-server":"server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>Types into the DOM element found in the previous command.</p>\n<p>Prior to typing, if the DOM element isn’t currently focused, Cypress will issue a <a href=\"https://on.cypress.io/api/click\">click</a> on the element, which will cause the element to receive focus.</p>\n<p>Text passed to <code>cy.type</code> may include any of these special character sequences:</p>\n<table>\n<thead>\n<tr>\n<th>Sequence</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\\{\\{\\}</code></td>\n<td>Types the literal <code>\\{</code> key</td>\n</tr>\n<tr>\n<td><code>{backspace}</code></td>\n<td>Deletes character to the left of the cursor</td>\n</tr>\n<tr>\n<td><code>{del}</code></td>\n<td>Deletes character to the right of the cursor</td>\n</tr>\n<tr>\n<td><code>{enter}</code></td>\n<td>Types the Enter key</td>\n</tr>\n<tr>\n<td><code>{esc}</code></td>\n<td>Types the Escape key</td>\n</tr>\n<tr>\n<td><code>{leftarrow}</code></td>\n<td>Moves cursor left</td>\n</tr>\n<tr>\n<td><code>{rightarrow}</code></td>\n<td>Moves cursor right</td>\n</tr>\n<tr>\n<td><code>{downarrow}</code></td>\n<td>Fires down event but does <strong>not</strong> move the cursor</td>\n</tr>\n<tr>\n<td><code>{uparrow}</code></td>\n<td>Fires up event but does <strong>not</strong> move the cursor</td>\n</tr>\n<tr>\n<td><code>{selectall}</code></td>\n<td>Selects all text by creating a <code>selection range</code></td>\n</tr>\n</tbody>\n</table>\n<p>Text passed to <code>cy.type</code> may also include any of the these modifier character sequences:</p>\n<table>\n<thead>\n<tr>\n<th>Sequence</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>{alt}</code></td>\n<td>Activates the <code>altKey</code> modifier. Aliases: <code>{option}</code></td>\n</tr>\n<tr>\n<td><code>{ctrl}</code></td>\n<td>Activates the <code>ctrlKey</code> modifier. Aliases: <code>{control}</code></td>\n</tr>\n<tr>\n<td><code>{meta}</code></td>\n<td>Activates the <code>metaKey</code> modifier. Aliases: <code>{command}</code>, <code>{cmd}</code></td>\n</tr>\n<tr>\n<td><code>{shift}</code></td>\n<td>Activates the <code>shiftKey</code> modifier.</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Returns</strong></td>\n<td>the DOM element that was typed into</td>\n</tr>\n<tr>\n<td><strong>Timeout</strong></td>\n<td><code>cy.type</code> will retry for the duration of the <a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a> or the duration of the <code>timeout</code> specified in the command’s <a href=\"#section-options\">options</a>.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"cy-type-text\"><a href=\"#cy-type-text\" class=\"headerlink\" title=\"cy.type( text )\"></a><a href=\"#section-usage\">cy.type( <em>text</em> )</a></h1><p>Types the text provided into the current DOM subject.</p>\n<hr>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h1><p>Pass in an options object to change the default behavior of <code>cy.type</code>.</p>\n<p><strong><a href=\"#options-usage\">cy.type( <em>text</em>, <em>options</em> )</a></strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>delay</code></td>\n<td><code>10</code></td>\n<td>Delay after each keypress</td>\n</tr>\n<tr>\n<td><code>force</code></td>\n<td><code>false</code></td>\n<td>Forces type, disables error checking prior to type</td>\n</tr>\n<tr>\n<td><code>release</code></td>\n<td><code>true</code></td>\n<td>Keep a modifier activated between commands</td>\n</tr>\n<tr>\n<td><code>interval</code></td>\n<td><code>16</code></td>\n<td>Interval to retry type</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td><a href=\"https://on.cypress.io/guides/configuration#section-timeouts\"><code>defaultCommandTimeout</code></a></td>\n<td>Total time to retry the type</td>\n</tr>\n<tr>\n<td><code>log</code></td>\n<td><code>true</code></td>\n<td>whether to display command in command log</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"Type-into-a-textarea\"><a href=\"#Type-into-a-textarea\" class=\"headerlink\" title=\"Type into a textarea.\"></a>Type into a textarea.</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// issues all keyboard events</span></div><div class=\"line\"><span class=\"comment\">// and returns &lt;textarea&gt; for further chaining</span></div><div class=\"line\">cy.get(<span class=\"string\">\"textarea\"</span>).type(<span class=\"string\">\"Hello world\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Type-into-a-non-text-or-non-textarea-element-with-tabindex\"><a href=\"#Type-into-a-non-text-or-non-textarea-element-with-tabindex\" class=\"headerlink\" title=\"Type into a non-text or non-textarea element with tabindex\"></a>Type into a non-text or non-textarea element with <code>tabindex</code></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"el\"</span> <span class=\"attr\">tabindex</span>=<span class=\"string\">\"1\"</span>&gt;</span></div><div class=\"line\">    this div can receive focus</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// this element will receive all of the appropriate</span></div><div class=\"line\"><span class=\"comment\">// key events and focus / blur events but will not</span></div><div class=\"line\"><span class=\"comment\">// have its value or text contents altered in any way</span></div><div class=\"line\">cy.get(<span class=\"string\">\"#el\"</span>).type(<span class=\"string\">\"foo\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Options-Usage\"><a href=\"#Options-Usage\" class=\"headerlink\" title=\"Options Usage\"></a>Options Usage</h1><h2 id=\"Force-a-click-to-happen-prior-to-type\"><a href=\"#Force-a-click-to-happen-prior-to-type\" class=\"headerlink\" title=\"Force a click to happen prior to type\"></a>Force a click to happen prior to type</h2><p>Type issues a <a href=\"https://on.cypress.io/api/click\"><code>click</code></a> prior to typing (only if the element is not currently focused). Because of this, sometimes it is useful to force the click to happen. Forcing a click disables error checking prior to the click.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// this will disable the built-in logic for ensuring</span></div><div class=\"line\"><span class=\"comment\">// the element is visible, and is physically clickable</span></div><div class=\"line\"><span class=\"comment\">// prior to typing into it</span></div><div class=\"line\">cy.get(<span class=\"string\">\"input[type=text]\"</span>).type(<span class=\"string\">\"Test all the things\"</span>, &#123;<span class=\"attr\">force</span>: <span class=\"literal\">true</span>&#125;)</div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “warning”,<br>  “body”: “Be careful with the <code>force</code> option because it allows the type to happen where it might actually be impossible for a real user to type.”<br>}<br>[/block]</p>\n<hr>\n<h1 id=\"Key-combinations-Modifiers\"><a href=\"#Key-combinations-Modifiers\" class=\"headerlink\" title=\"Key combinations / Modifiers\"></a>Key combinations / Modifiers</h1><p>When using special character sequences (see table at top of page), it’s possible to activate modifier keys and type key combinations, such as <code>CTRL + R</code> or <code>SHIFT + ALT + Q</code>. The modifier(s) remain activated for the duration of the <code>cy.type()</code> command, and are released when all subsequent characters are typed, unless <a href=\"https://on.cypress.io/api/type#section-options\"><code>{release: false}</code></a> is passed as an <a href=\"https://on.cypress.io/v1.0/api/type#section-release-behavior\">option</a>. A <code>keydown</code> event is fired when a modifier is activated and a <code>keyup</code> event is fired when it is released.</p>\n<h2 id=\"Type-a-key-combination\"><a href=\"#Type-a-key-combination\" class=\"headerlink\" title=\"Type a key combination\"></a>Type a key combination</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// this is the same as a user holding down SHIFT and ALT, then pressing Q</span></div><div class=\"line\">cy.get(<span class=\"string\">\"input\"</span>).type(<span class=\"string\">\"&#123;shift&#125;&#123;alt&#125;Q\"</span>)</div></pre></td></tr></table></figure>\n<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://github.com/cypress-io/cypress-example-recipes/blob/master/cypress/integration/logging_in_html_web_form_spec.js\">Check out our example recipe of logging in by typing username and password</a>“,<br>  “title”: “Typing into a login form”<br>}<br>[/block]</p>\n<hr>\n<h2 id=\"Hold-down-modifier-key-and-type-a-word\"><a href=\"#Hold-down-modifier-key-and-type-a-word\" class=\"headerlink\" title=\"Hold down modifier key and type a word\"></a>Hold down modifier key and type a word</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// all characters after &#123;ctrl&#125; will have 'ctrlKey' set to 'true' on their key events</span></div><div class=\"line\">cy.get(<span class=\"string\">\"input\"</span>).type(<span class=\"string\">\"&#123;ctrl&#125;test\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Release-behavior\"><a href=\"#Release-behavior\" class=\"headerlink\" title=\"Release behavior\"></a>Release behavior</h2><p>By default, modifiers are released after each type command.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 'ctrlKey' will be true for each event while 'test' is typed</span></div><div class=\"line\"><span class=\"comment\">// but false while 'everything' is typed</span></div><div class=\"line\">cy.get(<span class=\"string\">\"input\"</span>).type(<span class=\"string\">\"&#123;ctrl&#125;test\"</span>).type(<span class=\"string\">\"everything\"</span>)</div></pre></td></tr></table></figure>\n<p>To keep a modifier activated between commands, specify <code>{release: false}</code> in the options.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 'altKey' will be true while typing 'foo'</span></div><div class=\"line\">cy.get(<span class=\"string\">\"input\"</span>).type(<span class=\"string\">\"&#123;alt&#125;foo\"</span>, &#123;<span class=\"attr\">release</span>: <span class=\"literal\">false</span>&#125;)</div><div class=\"line\"><span class=\"comment\">// 'altKey' will also be true during 'get' and 'click' commands</span></div><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).click()</div></pre></td></tr></table></figure>\n<p>Modifiers are automatically released between tests, even with <code>{release: false}</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(<span class=\"string\">\"has modifiers activated\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 'altKey' will be true while typing 'foo'</span></div><div class=\"line\">  cy.get(<span class=\"string\">\"input\"</span>).type(<span class=\"string\">\"&#123;alt&#125;foo\"</span>, &#123;<span class=\"attr\">release</span>: <span class=\"literal\">false</span>&#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">it(<span class=\"string\">\"does not have modifiers activated\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 'altKey' will be false while typing 'bar'</span></div><div class=\"line\">  cy.get(<span class=\"string\">\"input\"</span>).type(<span class=\"string\">\"bar\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>To manually release modifiers within a test after using <code>{release: false}</code>, use another <code>type</code> command and the modifier will be released after it.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 'altKey' will be true while typing 'foo'</span></div><div class=\"line\">cy.get(<span class=\"string\">\"input\"</span>).type(<span class=\"string\">\"&#123;alt&#125;foo\"</span>, &#123;<span class=\"attr\">release</span>: <span class=\"literal\">false</span>&#125;)</div><div class=\"line\"><span class=\"comment\">// 'altKey' will be true during the 'get' and 'click' commands</span></div><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).click()</div><div class=\"line\"><span class=\"comment\">// 'altKey' will be released after this command</span></div><div class=\"line\">cy.get(<span class=\"string\">\"input\"</span>).type(<span class=\"string\">\"&#123;alt&#125;\"</span>)</div><div class=\"line\"><span class=\"comment\">// 'altKey' will be false during the 'get' and 'click' commands</span></div><div class=\"line\">cy.get(<span class=\"string\">\"button\"</span>).click()</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Global-shortcuts-modifiers\"><a href=\"#Global-shortcuts-modifiers\" class=\"headerlink\" title=\"Global shortcuts / modifiers\"></a>Global shortcuts / modifiers</h2><p><code>cy.type()</code> requires a focusable element as the subject, since it’s usually unintended to type into something that’s not a text field or textarea! Although there <em>are</em> a few cases where it’s valid to “type” into something other than a text field or textarea:</p>\n<ul>\n<li>Keyboard shortcuts where the listener is on the <code>document</code> or <code>body</code>.</li>\n<li>Holding modifier keys and clicking an arbitrary element.</li>\n</ul>\n<p>To support this, the <code>body</code> can be used as the subject (even though it’s <em>not</em> a focusable element).</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// all of the type events will be fired on the body</span></div><div class=\"line\">cy.get(<span class=\"string\">\"body\"</span>).type(<span class=\"string\">\"&#123;uparrow&#125;&#123;uparrow&#125;&#123;downarrow&#125;&#123;downarrow&#125;&#123;leftarrow&#125;&#123;rightarrow&#125;&#123;leftarrow&#125;&#123;rightarrow&#125;ba\"</span>)</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// execute a SHIFT + click on the first &lt;li&gt;</span></div><div class=\"line\"><span class=\"comment\">// &#123;release: false&#125; is necessary so that</span></div><div class=\"line\"><span class=\"comment\">// SHIFT will not be released after the type command</span></div><div class=\"line\">cy.get(<span class=\"string\">\"body\"</span>).type(<span class=\"string\">\"&#123;shift&#125;\"</span>, &#123;<span class=\"attr\">release</span>: <span class=\"literal\">false</span>&#125;).get(<span class=\"string\">\"li:first\"</span>).click()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Known-Issues\"><a href=\"#Known-Issues\" class=\"headerlink\" title=\"Known Issues\"></a>Known Issues</h1><h2 id=\"Native-input-type-date-datetime-datetime-local-month-year-color\"><a href=\"#Native-input-type-date-datetime-datetime-local-month-year-color\" class=\"headerlink\" title=\"Native input[type=date,datetime,datetime-local,month,year,color]\"></a>Native <code>input[type=date,datetime,datetime-local,month,year,color]</code></h2><p>Special input types are <em>not</em> supported yet because browsers implement these input types outside of what is accessible to JavaScript. They also depend on OS regional settings.  The fix however is relatively simple - Cypress will require you to type the final <em>formatted</em> value that the input will be set to - and then all will work. <a href=\"https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A\">Open an issue</a> if you need this to be fixed.</p>\n<hr>\n<h2 id=\"Typing-tab-key-does-not-work\"><a href=\"#Typing-tab-key-does-not-work\" class=\"headerlink\" title=\"Typing tab key does not work\"></a>Typing <code>tab</code> key does not work</h2><p>Tabbing will be implemented as a separate command as <code>cy.tab</code> and support things like multiple tabs, tabbing in reverse, or tabbing to a specific element. <a href=\"https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A\">Open an issue</a> if you need this to be fixed.</p>\n<hr>\n<h2 id=\"Preventing-mousedown-does-not-prevent-typing\"><a href=\"#Preventing-mousedown-does-not-prevent-typing\" class=\"headerlink\" title=\"Preventing mousedown does not prevent typing\"></a>Preventing mousedown does not prevent typing</h2><p>In a real browser, preventing mousedown on a form field will prevent it from receiving focus and thus prevent it from being able to be typed into. Currently, Cypress does not factor this in. <a href=\"https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A\">Open an issue</a> if you need this to be fixed.</p>\n<hr>\n<h2 id=\"Modifier-effects\"><a href=\"#Modifier-effects\" class=\"headerlink\" title=\"Modifier effects\"></a>Modifier effects</h2><p>In a real browser, if a user holds <code>SHIFT</code> and types <code>a</code>, a capital <code>A</code> will be typed into the input. Currently, Cypress does not simulate that behavior.</p>\n<p>Modifiers are simulated by setting their corresponding values to <code>true</code> for key and click events. So, for example, activating the <code>{shift}</code> modifier will set <code>event.shiftKey</code> to true for any key events, such as <code>keydown</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// app code</span></div><div class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"input:first\"</span>).addEventListener(<span class=\"string\">\"keydown\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// e.shiftKey will be true</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// in test</span></div><div class=\"line\">cy.get(<span class=\"string\">\"input:first\"</span>).type(<span class=\"string\">\"&#123;shift&#125;a\"</span>)</div></pre></td></tr></table></figure>\n<p>In the example above, a lowercase <code>a</code> will be typed, because that’s the literal character specified. To type a capital <code>A</code>, you can use <code>cy.type(&quot;{shift}A&quot;)</code> (or simply <code>cy.type(&quot;A&quot;)</code> if you don’t care about the <code>shiftKey</code> property on any key events).</p>\n<p>This holds true for other special key combinations as well (that may be OS-specific). For example, on OSX, typing <code>ALT + SHIFT + K</code> creates the special character <code></code>. Like with capitalization, <code>cy.type()</code> will not output <code></code>, but simply the letter <code>k</code>.</p>\n<p><a href=\"https://github.com/cypress-io/cypress/issues/new?body=**Description**%0A*Include%20a%20high%20level%20description%20of%20the%20error%20here%20including%20steps%20of%20how%20to%20recreate.%20Include%20any%20benefits%2C%20challenges%20or%20considerations.*%0A%0A**Code**%0A*Include%20the%20commands%20used*%0A%0A**Steps%20To%20Reproduce**%0A-%20%5B%20%5D%20Steps%0A-%20%5B%20%5D%20To%0A-%20%5B%20%5D%20Reproduce%2FFix%0A%0A**Additional%20Info**%0A*Include%20any%20images%2C%20notes%2C%20or%20whatever.*%0A\">Open an issue</a> if you need modifier effects to be implemented.</p>\n<hr>\n<h1 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h1><h2 id=\"Mimic-user-typing-behavior\"><a href=\"#Mimic-user-typing-behavior\" class=\"headerlink\" title=\"Mimic user typing behavior\"></a>Mimic user typing behavior</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// each keypress is delayed 10ms by default</span></div><div class=\"line\"><span class=\"comment\">// which simulates how a very fast user types!</span></div><div class=\"line\">cy.get(<span class=\"string\">\"[contenteditable]\"</span>).type(<span class=\"string\">\"some text!\"</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Events-that-fire\"><a href=\"#Events-that-fire\" class=\"headerlink\" title=\"Events that fire\"></a>Events that fire</h2><p>Cypress implements all events that Chrome fires as part of typing in a real keyboard. Read the section: <a href=\"#simulated-events-vs-native-events\">Simulated Events vs Native Events</a> below for more information.</p>\n<p>The following events will be fired based on what key was pressed identical to the event spec.</p>\n<ul>\n<li>keydown</li>\n<li>keypress</li>\n<li>textInput</li>\n<li>input</li>\n<li>keyup</li>\n</ul>\n<p><code>beforeinput</code> is <em>not</em> fired even though it is in the spec because no browser has adopted it.</p>\n<p>Additionally <code>change</code> events will be fired either when the <code>{enter}</code> key is pressed (and the value has changed since the last focus event), or whenever the element loses focus. This matches browser behavior.</p>\n<p>Events that should not fire on non input types such as elements with <code>tabindex</code> do not fire their <code>textInput</code> or <code>input</code> events. Only typing into elements which cause the actual value or text to change will fire those events.</p>\n<hr>\n<h2 id=\"Event-Firing\"><a href=\"#Event-Firing\" class=\"headerlink\" title=\"Event Firing\"></a>Event Firing</h2><p>The following rules have been implemented that match real browser behavior (and the spec):</p>\n<ol>\n<li>Cypress respects not firing subsequent events if previous ones were cancelled.</li>\n<li>Cypress will fire <code>keypress</code> <em>only</em> if that key is supposed to actually fire <code>keypress</code>.</li>\n<li>Cypress will fire <code>textInput</code> <em>only</em> if typing that key would have inserted an actual character.</li>\n<li>Cypress will fire <code>input</code> <em>only</em> if typing that key modifies or changes the value of the element.</li>\n</ol>\n<hr>\n<h2 id=\"Event-Cancellation\"><a href=\"#Event-Cancellation\" class=\"headerlink\" title=\"Event Cancellation\"></a>Event Cancellation</h2><p>Cypress respects all default browser behavior when events are cancelled.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// prevent the characters from being inserted</span></div><div class=\"line\"><span class=\"comment\">// by canceling keydown, keypress, or textInput</span></div><div class=\"line\">$(<span class=\"string\">\"#username\"</span>).on(<span class=\"string\">\"keydown\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</div><div class=\"line\">  e.preventDefault();</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Cypress will not insert any characters if keydown, keypress, or textInput</span></div><div class=\"line\"><span class=\"comment\">// are cancelled - which matches the default browser behavior</span></div><div class=\"line\">cy.get(<span class=\"string\">\"#username\"</span>).type(<span class=\"string\">\"bob@gmail.com\"</span>).should(<span class=\"string\">\"have.value\"</span>, <span class=\"string\">\"\"</span>) <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Implicit-form-submission-behavior\"><a href=\"#Implicit-form-submission-behavior\" class=\"headerlink\" title=\"Implicit form submission behavior\"></a>Implicit form submission behavior</h2><p>Cypress automatically matches the spec and browser behavior for pressing the <code>{enter}</code> key when the input belongs to a <code>&lt;form&gt;</code>.</p>\n<p>This behavior is defined here: <a href=\"https://html.spec.whatwg.org/multipage/forms.html#implicit-submission\">Form Implicit Submission</a></p>\n<p>For instance the following will submit the form.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/login\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"username\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"password\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span>Log In<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy</div><div class=\"line\">  .get(<span class=\"string\">\"#username\"</span>).type(<span class=\"string\">\"bob@burgers.com\"</span>)</div><div class=\"line\">  .get(<span class=\"string\">\"#password\"</span>).type(<span class=\"string\">\"password123&#123;enter&#125;\"</span>)</div></pre></td></tr></table></figure>\n<p>Because there are multiple <code>inputs</code> and one <code>submit</code> button, Cypress submits the form (and fires submit events) as well as a synthetic <code>click</code> event to the <code>button</code>.</p>\n<p>The spec defines the <strong>submit</strong> button as the first <code>input[type=submit]</code> or <code>button[type!=button]</code> from the form.</p>\n<p>Additionally Cypress handles these 4 other situations as defined in the spec:</p>\n<ol>\n<li>Does not submit a form if there are multiple inputs and no <code>submit</code> button.</li>\n<li>Does not submit a form if the <code>submit</code> button is disabled.</li>\n<li>Submits a form, but does not fire synthetic <code>click</code> event, if there is 1 <code>input</code> and no <code>submit</code> button</li>\n<li>Submits form and fires a synthetic <code>click</code> event to the <code>submit</code> when it exists.</li>\n</ol>\n<p>Of course if the form’s <code>submit</code> event is <code>preventedDefault</code> the form will not actually be submitted.</p>\n<hr>\n<h2 id=\"Key-Events-Table\"><a href=\"#Key-Events-Table\" class=\"headerlink\" title=\"Key Events Table\"></a>Key Events Table</h2><p>Cypress will print out a table of key events that detail the keys that were pressed when clicking on type within the <a href=\"https://on.cypress.io/api/type#section-command-log\">command log</a>. Each character will contain the <code>which</code> character code and the events that happened as a result of that key press.</p>\n<p>Events that were <code>defaultPrevented</code> may prevent other events from firing and those will show up as empty.  For instance, canceling <code>keydown</code> will not fire <code>keypress</code> or <code>textInput</code> or <code>input</code>, but will fire <code>keyup</code> (which matches the spec).</p>\n<p>Additionally, events that cause a <code>change</code> event to fire (such as typing <code>{enter}</code>) will display with the <code>change</code> event column as `true.</p>\n<p>Any modifiers activated for the event are also listed in a <code>modifiers</code> column.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1157043/18144246/b44df61c-6f93-11e6-8553-96b1b347db4b.png\" alt=\"Cypress cy.type key events table\"></p>\n<hr>\n<h2 id=\"Simulated-Events-vs-Native-Events\"><a href=\"#Simulated-Events-vs-Native-Events\" class=\"headerlink\" title=\"Simulated Events vs Native Events\"></a>Simulated Events vs Native Events</h2><p>When Cypress is running on your local computer, all events are simulated identically to real native events.</p>\n<p>There should be no distinguishable difference between these simulated events and real native events. We chose to model these simulated events to match what Chrome fires. In other words, using <code>cy.type</code> should essentially match actually typing keys on your keyboard while in Chrome.</p>\n<p>However, when Cypress is run in <code>cross browser mode</code>, Cypress uses the actual <code>OS keyboard</code> to type, and therefore the browser will fire all of it’s native events as you’d expect.</p>\n<p>This strategy works well because when you are in development you are working in Chrome.  Using simulated events is extremely fast, the browser window does <em>not</em> need to be in focus. Because we simulate events identically to their native counterpart, your application code won’t be able to tell the difference.</p>\n<p>In other words, you get the best of both worlds: simulated when its practical to do so, and native when it needs to run across browsers.</p>\n<hr>\n<h1 id=\"Command-Log\"><a href=\"#Command-Log\" class=\"headerlink\" title=\"Command Log\"></a>Command Log</h1><h2 id=\"Type-into-the-input\"><a href=\"#Type-into-the-input\" class=\"headerlink\" title=\"Type into the input\"></a>Type into the input</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cy.get(<span class=\"string\">\"input[name=firstName]\"</span>).type(<span class=\"string\">\"Jane Lane\"</span>)</div></pre></td></tr></table></figure>\n<p>The commands above will display in the command log as:</p>\n<p><img width=\"584\" alt=\"screen shot 2015-11-29 at 1 25 51 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459104/ee20613e-969c-11e5-8c78-e78b39d9ec46.png\"></p>\n<p>When clicking on <code>type</code> within the command log, the console outputs the following:</p>\n<p><img width=\"637\" alt=\"screen shot 2015-11-29 at 1 26 24 pm\" src=\"https://cloud.githubusercontent.com/assets/1271364/11459106/f14f3308-969c-11e5-8352-f96744bbd713.png\"></p>\n<hr>\n<h1 id=\"Related\"><a href=\"#Related\" class=\"headerlink\" title=\"Related\"></a>Related</h1><ul>\n<li><a href=\"https://on.cypress.io/api/clear\">clear</a></li>\n<li><a href=\"https://on.cypress.io/api/click\">click</a></li>\n<li><a href=\"https://on.cypress.io/api/submit\">submit</a></li>\n</ul>\n"},{"_content":"Homepage\n","source":"index.html","raw":"Homepage\n","date":"2017-04-19T18:58:35.000Z","updated":"2017-04-19T18:58:35.000Z","path":"index.html","_id":"cj1pccj45000005g82gqijil8","title":"","comments":1,"layout":"page","content":"Homepage\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"guides.html","our-goals":"our-goals.html"},"getting-started":{"installing-and-running":"installing-and-running.html","writing-your-first-test":"writing-your-first-test.html","using-the-cypress-runner":"using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"list-of-example-apps.html","list-of-example-recipes":"list-of-example-recipes.html"},"dashboard":{"features":"dashboard-features.html","projects":"dashboard-projects.html","runs":"dashboard-runs.html","organizations":"dashboard-organizations.html"},"guides":{"configuration":"configuration.html","issuing-commands":"issuing-commands.html","finding-elements":"finding-elements.html","making-assertions":"making-assertions.html","network-requests":"network-requests.html","continuous-integration":"continuous-integration.html","environment-variables":"environment-variables.html","stubs-spies-and-clocks":"stubs-spies-and-clocks.html","using-aliases":"using-aliases.html","creating-fixtures":"creating-fixtures.html","screenshots-and-videos":"screenshots-and-videos.html","bundled-tools":"bundled-tools.html","reporters":"reporters.html"},"references":{"cli-tool":"cli-tool.html","error-messages":"error-messages.html","anti-patterns":"anti-patterns.html","known-issues":"known-issues.html","web-security":"web-security.html","browser-management":"browser-management.html","userland-extensions":"userland-extensions.html"}},"api":{"welcome":{"api":"index.html"},"commands":{"and":"commands/and.html","as":"as.html","blur":"blur.html","check":"check.html","children":"children.html","clear":"clear.html","clear-cookie":"clear-cookie.html","clear-cookies":"clear-cookies.html","clear-local-storage":"clear-local-storage.html","click":"click.html","clock":"clock.html","closest":"closest.html","contains":"contains.html","dblclick":"dblclick.html","debug":"debug.html","document":"document.html","each":"each.html","end":"end.html","eq":"eq.html","exec":"exec.html","filter":"filter.html","find":"find.html","first":"first.html","fixture":"fixture.html","focus":"focus.html","focused":"focused.html","get":"get.html","get-cookie":"get-cookie.html","get-cookies":"get-cookies.html","go":"go.html","hash":"hash.html","hover":"hover.html","invoke":"invoke.html","its":"its.html","last":"last.html","location":"location.html","log":"log.html","next":"next.html","next-all":"next-all.html","next-until":"next-until.html","not":"not.html","parent":"parent.html","parents":"parents.html","parents-until":"parents-until.html","read-file":"read-file.html","reload":"reload.html","request":"request.html","root":"root.html","route":"route.html","screenshot":"screenshot.html","select":"select.html","server":"server.html","set-cookie":"set-cookie.html","should":"should.html","siblings":"siblings.html","spread":"spread.html","spy":"spy.html","stub":"stub.html","submit":"submit.html","then":"then.html","tick":"tick.html","title":"title.html","type":"type.html","uncheck":"uncheck.html","url":"url.html","viewport":"viewport.html","visit":"visit.html","wait":"wait.html","window":"window.html","within":"within.html","wrap":"wrap.html","write-file":"write-file.html"},"utilities":{"-":"-.html","$":"$.html","minimatch":"minimatch.html","blob":"blob.html","promise":"promise.html"},"cypress-api":{"config":"config.html","env":"env.html","cypress-commands":"commands.html","cookies":"cookies.html","dom":"dom.html","cypress-server":"server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"Homepage\n"},{"title":"guides","_content":"\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Explore talks, blogs, and podcasts about testing in Cypress.](https://www.cypress.io/explore)\",\n  \"title\": \"Want to see Cypress in action?\"\n}\n[/block]\n\n---\n\n| Getting Started | |\n| -------------------- | -- |\n| [Installing & Running](https://on.cypress.io/guides/installing-and-running) | Get Cypress downloaded and in your project |\n| [Writing your First Test](https://on.cypress.io/guides/writing-your-first-test) | Write a test in Cypress |\n| [Using the Cypress Running](https://on.cypress.io/guides/using-the-cypress-runner) | Review test commands, instrumentation and your application under test. |\n\n| Examples | |\n| -------------------- | -- |\n| [List of Example Apps](https://on.cypress.io/guides/all-example-apps) | See Cypress being used in existing projects. |\n| [List of Example Recipes](https://github.com/cypress-io/cypress-example-recipes) | Recipes for testing common scenarios in Cypress. |\n\n| Dashboard | |\n| -------------------- | -- |\n| [Features](https://on.cypress.io/guides/dashboard-features) | An overview of our Dashboard. |\n| [Projects](https://on.cypress.io/guides/projects) | Manage your Projects and configure them to record runs. |\n| [Runs](https://on.cypress.io/guides/runs) | View your Recorded Runs. |\n| [Organizations](https://on.cypress.io/guides/organizations) | Manage your Organizations. |\n\n| Guides | |\n| -------------------- | -- |\n| [Configuration](https://on.cypress.io/guides/configuration) | Configure global, network, directory, viewport and animation options |\n| [Issuing Commands](https://on.cypress.io/guides/issuing-commands) | Issue actions to be performed in your test |\n| [Finding Elements](https://on.cypress.io/guides/finding-elements) | Traverse the DOM, find elements, make assertions |\n| [Making Assertions](https://on.cypress.io/guides/making-assertions) | Set expectations for the behavior |\n| [Network Requests](https://on.cypress.io/guides/network-requests-xhr) | Handle AJAX/XHR Requests |\n| [Continuous Integration](https://on.cypress.io/guides/continuous-integration) | Integrate with CI Providers |\n| [Environment Variables](https://on.cypress.io/guides/environment-variables) | Set environment variables |\n| [Stubs, Spies and Clocks](https://on.cypress.io/guides/stubs-spies-clocks) | Learn about when and why to use stubs, spies, and control clock time |\n| [Using Aliases](https://on.cypress.io/guides/using-aliases) | Represent an object as alias |\n| [Creating Fixtures](https://on.cypress.io/guides/creating-fixtures) | Mock data in fixtures |\n| [Screenshots and Videos](https://on.cypress.io/guides/screenshots-and-videos) | Capture screenshots and videos of your test run |\n| [Bundled Tools](https://on.cypress.io/guides/bundled-tools) | What is Cypress built on |\n| [Reporters](https://on.cypress.io/guides/reporters) | Customize test results with reporters |\n\n| References | |\n| -------------------- | -- |\n| [CLI Tool](https://on.cypress.io/guides/cli) | Cypress CLI Tool for programmatically interacting with the Desktop Application |\n| [Error Messages](https://on.cypress.io/guides/errors) | Error messages |\n| [Anti-patterns](https://on.cypress.io/guides/anti-patterns) | Anti-patterns |\n| [Known Issues](https://on.cypress.io/guides/known-issues) | Known Issues |\n| [Web Security](https://on.cypress.io/guides/web-security) | Web Security |\n| [Browser Management](https://on.cypress.io/guides/browser-management) | Browser Management |\n| [Userland Extensions](https://on.cypress.io/guides/userland-extensions) | Userland Extensions |\n","source":"guides/welcome/guides.md","raw":"title: guides\n---\n\n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"[Explore talks, blogs, and podcasts about testing in Cypress.](https://www.cypress.io/explore)\",\n  \"title\": \"Want to see Cypress in action?\"\n}\n[/block]\n\n---\n\n| Getting Started | |\n| -------------------- | -- |\n| [Installing & Running](https://on.cypress.io/guides/installing-and-running) | Get Cypress downloaded and in your project |\n| [Writing your First Test](https://on.cypress.io/guides/writing-your-first-test) | Write a test in Cypress |\n| [Using the Cypress Running](https://on.cypress.io/guides/using-the-cypress-runner) | Review test commands, instrumentation and your application under test. |\n\n| Examples | |\n| -------------------- | -- |\n| [List of Example Apps](https://on.cypress.io/guides/all-example-apps) | See Cypress being used in existing projects. |\n| [List of Example Recipes](https://github.com/cypress-io/cypress-example-recipes) | Recipes for testing common scenarios in Cypress. |\n\n| Dashboard | |\n| -------------------- | -- |\n| [Features](https://on.cypress.io/guides/dashboard-features) | An overview of our Dashboard. |\n| [Projects](https://on.cypress.io/guides/projects) | Manage your Projects and configure them to record runs. |\n| [Runs](https://on.cypress.io/guides/runs) | View your Recorded Runs. |\n| [Organizations](https://on.cypress.io/guides/organizations) | Manage your Organizations. |\n\n| Guides | |\n| -------------------- | -- |\n| [Configuration](https://on.cypress.io/guides/configuration) | Configure global, network, directory, viewport and animation options |\n| [Issuing Commands](https://on.cypress.io/guides/issuing-commands) | Issue actions to be performed in your test |\n| [Finding Elements](https://on.cypress.io/guides/finding-elements) | Traverse the DOM, find elements, make assertions |\n| [Making Assertions](https://on.cypress.io/guides/making-assertions) | Set expectations for the behavior |\n| [Network Requests](https://on.cypress.io/guides/network-requests-xhr) | Handle AJAX/XHR Requests |\n| [Continuous Integration](https://on.cypress.io/guides/continuous-integration) | Integrate with CI Providers |\n| [Environment Variables](https://on.cypress.io/guides/environment-variables) | Set environment variables |\n| [Stubs, Spies and Clocks](https://on.cypress.io/guides/stubs-spies-clocks) | Learn about when and why to use stubs, spies, and control clock time |\n| [Using Aliases](https://on.cypress.io/guides/using-aliases) | Represent an object as alias |\n| [Creating Fixtures](https://on.cypress.io/guides/creating-fixtures) | Mock data in fixtures |\n| [Screenshots and Videos](https://on.cypress.io/guides/screenshots-and-videos) | Capture screenshots and videos of your test run |\n| [Bundled Tools](https://on.cypress.io/guides/bundled-tools) | What is Cypress built on |\n| [Reporters](https://on.cypress.io/guides/reporters) | Customize test results with reporters |\n\n| References | |\n| -------------------- | -- |\n| [CLI Tool](https://on.cypress.io/guides/cli) | Cypress CLI Tool for programmatically interacting with the Desktop Application |\n| [Error Messages](https://on.cypress.io/guides/errors) | Error messages |\n| [Anti-patterns](https://on.cypress.io/guides/anti-patterns) | Anti-patterns |\n| [Known Issues](https://on.cypress.io/guides/known-issues) | Known Issues |\n| [Web Security](https://on.cypress.io/guides/web-security) | Web Security |\n| [Browser Management](https://on.cypress.io/guides/browser-management) | Browser Management |\n| [Userland Extensions](https://on.cypress.io/guides/userland-extensions) | Userland Extensions |\n","date":"2017-04-19T19:50:44.000Z","updated":"2017-04-19T19:50:44.000Z","path":"guides/welcome/guides.html","_id":"cj1pdbwou0000i2g8dnd79604","comments":1,"layout":"page","content":"<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://www.cypress.io/explore\" target=\"_blank\" rel=\"external\">Explore talks, blogs, and podcasts about testing in Cypress.</a>“,<br>  “title”: “Want to see Cypress in action?”<br>}<br>[/block]</p>\n<hr>\n<table>\n<thead>\n<tr>\n<th>Getting Started</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/installing-and-running\" target=\"_blank\" rel=\"external\">Installing &amp; Running</a></td>\n<td>Get Cypress downloaded and in your project</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/writing-your-first-test\" target=\"_blank\" rel=\"external\">Writing your First Test</a></td>\n<td>Write a test in Cypress</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/using-the-cypress-runner\" target=\"_blank\" rel=\"external\">Using the Cypress Running</a></td>\n<td>Review test commands, instrumentation and your application under test.</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Examples</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/all-example-apps\" target=\"_blank\" rel=\"external\">List of Example Apps</a></td>\n<td>See Cypress being used in existing projects.</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/cypress-io/cypress-example-recipes\" target=\"_blank\" rel=\"external\">List of Example Recipes</a></td>\n<td>Recipes for testing common scenarios in Cypress.</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Dashboard</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/dashboard-features\" target=\"_blank\" rel=\"external\">Features</a></td>\n<td>An overview of our Dashboard.</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/projects\" target=\"_blank\" rel=\"external\">Projects</a></td>\n<td>Manage your Projects and configure them to record runs.</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/runs\" target=\"_blank\" rel=\"external\">Runs</a></td>\n<td>View your Recorded Runs.</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/organizations\" target=\"_blank\" rel=\"external\">Organizations</a></td>\n<td>Manage your Organizations.</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Guides</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/configuration\" target=\"_blank\" rel=\"external\">Configuration</a></td>\n<td>Configure global, network, directory, viewport and animation options</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/issuing-commands\" target=\"_blank\" rel=\"external\">Issuing Commands</a></td>\n<td>Issue actions to be performed in your test</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/finding-elements\" target=\"_blank\" rel=\"external\">Finding Elements</a></td>\n<td>Traverse the DOM, find elements, make assertions</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/making-assertions\" target=\"_blank\" rel=\"external\">Making Assertions</a></td>\n<td>Set expectations for the behavior</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/network-requests-xhr\" target=\"_blank\" rel=\"external\">Network Requests</a></td>\n<td>Handle AJAX/XHR Requests</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/continuous-integration\" target=\"_blank\" rel=\"external\">Continuous Integration</a></td>\n<td>Integrate with CI Providers</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/environment-variables\" target=\"_blank\" rel=\"external\">Environment Variables</a></td>\n<td>Set environment variables</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/stubs-spies-clocks\" target=\"_blank\" rel=\"external\">Stubs, Spies and Clocks</a></td>\n<td>Learn about when and why to use stubs, spies, and control clock time</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/using-aliases\" target=\"_blank\" rel=\"external\">Using Aliases</a></td>\n<td>Represent an object as alias</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/creating-fixtures\" target=\"_blank\" rel=\"external\">Creating Fixtures</a></td>\n<td>Mock data in fixtures</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/screenshots-and-videos\" target=\"_blank\" rel=\"external\">Screenshots and Videos</a></td>\n<td>Capture screenshots and videos of your test run</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/bundled-tools\" target=\"_blank\" rel=\"external\">Bundled Tools</a></td>\n<td>What is Cypress built on</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/reporters\" target=\"_blank\" rel=\"external\">Reporters</a></td>\n<td>Customize test results with reporters</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>References</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/cli\" target=\"_blank\" rel=\"external\">CLI Tool</a></td>\n<td>Cypress CLI Tool for programmatically interacting with the Desktop Application</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/errors\" target=\"_blank\" rel=\"external\">Error Messages</a></td>\n<td>Error messages</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/anti-patterns\" target=\"_blank\" rel=\"external\">Anti-patterns</a></td>\n<td>Anti-patterns</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/known-issues\" target=\"_blank\" rel=\"external\">Known Issues</a></td>\n<td>Known Issues</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/web-security\" target=\"_blank\" rel=\"external\">Web Security</a></td>\n<td>Web Security</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/browser-management\" target=\"_blank\" rel=\"external\">Browser Management</a></td>\n<td>Browser Management</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/userland-extensions\" target=\"_blank\" rel=\"external\">Userland Extensions</a></td>\n<td>Userland Extensions</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{"languages":{"en":"English"},"sidebar":{"guides":{"welcome":{"intro":"guides.html","our-goals":"our-goals.html"},"getting-started":{"installing-and-running":"getting-started/installing-and-running.html","writing-your-first-test":"writing-your-first-test.html","using-the-cypress-runner":"using-the-cypress-runner.html"},"examples":{"list-of-example-apps":"list-of-example-apps.html","list-of-example-recipes":"list-of-example-recipes.html"},"dashboard":{"features":"dashboard-features.html","projects":"dashboard-projects.html","runs":"dashboard-runs.html","organizations":"dashboard-organizations.html"},"guides":{"configuration":"configuration.html","issuing-commands":"issuing-commands.html","finding-elements":"finding-elements.html","making-assertions":"making-assertions.html","network-requests":"network-requests.html","continuous-integration":"continuous-integration.html","environment-variables":"environment-variables.html","stubs-spies-and-clocks":"stubs-spies-and-clocks.html","using-aliases":"using-aliases.html","creating-fixtures":"creating-fixtures.html","screenshots-and-videos":"screenshots-and-videos.html","bundled-tools":"bundled-tools.html","reporters":"reporters.html"},"references":{"cli-tool":"cli-tool.html","error-messages":"error-messages.html","anti-patterns":"anti-patterns.html","known-issues":"known-issues.html","web-security":"web-security.html","browser-management":"browser-management.html","userland-extensions":"userland-extensions.html"}},"api":{"welcome":{"api":"index.html"},"commands":{"and":"commands/and.html","as":"as.html","blur":"blur.html","check":"check.html","children":"children.html","clear":"clear.html","clear-cookie":"clear-cookie.html","clear-cookies":"clear-cookies.html","clear-local-storage":"clear-local-storage.html","click":"click.html","clock":"clock.html","closest":"closest.html","contains":"contains.html","dblclick":"dblclick.html","debug":"debug.html","document":"document.html","each":"each.html","end":"end.html","eq":"eq.html","exec":"exec.html","filter":"filter.html","find":"find.html","first":"first.html","fixture":"fixture.html","focus":"focus.html","focused":"focused.html","get":"get.html","get-cookie":"get-cookie.html","get-cookies":"get-cookies.html","go":"go.html","hash":"hash.html","hover":"hover.html","invoke":"invoke.html","its":"its.html","last":"last.html","location":"location.html","log":"log.html","next":"next.html","next-all":"next-all.html","next-until":"next-until.html","not":"not.html","parent":"parent.html","parents":"parents.html","parents-until":"parents-until.html","read-file":"read-file.html","reload":"reload.html","request":"request.html","root":"root.html","route":"route.html","screenshot":"screenshot.html","select":"select.html","server":"server.html","set-cookie":"set-cookie.html","should":"should.html","siblings":"siblings.html","spread":"spread.html","spy":"spy.html","stub":"stub.html","submit":"submit.html","then":"then.html","tick":"tick.html","title":"title.html","type":"type.html","uncheck":"uncheck.html","url":"url.html","viewport":"viewport.html","visit":"visit.html","wait":"wait.html","window":"window.html","within":"within.html","wrap":"wrap.html","write-file":"write-file.html"},"utilities":{"-":"-.html","$":"$.html","minimatch":"minimatch.html","blob":"blob.html","promise":"promise.html"},"cypress-api":{"config":"config.html","env":"env.html","cypress-commands":"commands.html","cookies":"cookies.html","dom":"dom.html","cypress-server":"server.html"}}},"menu":{"guides":"/guides/","api":"/api/"}}},"excerpt":"","more":"<p>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “<a href=\"https://www.cypress.io/explore\">Explore talks, blogs, and podcasts about testing in Cypress.</a>“,<br>  “title”: “Want to see Cypress in action?”<br>}<br>[/block]</p>\n<hr>\n<table>\n<thead>\n<tr>\n<th>Getting Started</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/installing-and-running\">Installing &amp; Running</a></td>\n<td>Get Cypress downloaded and in your project</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/writing-your-first-test\">Writing your First Test</a></td>\n<td>Write a test in Cypress</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/using-the-cypress-runner\">Using the Cypress Running</a></td>\n<td>Review test commands, instrumentation and your application under test.</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Examples</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/all-example-apps\">List of Example Apps</a></td>\n<td>See Cypress being used in existing projects.</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/cypress-io/cypress-example-recipes\">List of Example Recipes</a></td>\n<td>Recipes for testing common scenarios in Cypress.</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Dashboard</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/dashboard-features\">Features</a></td>\n<td>An overview of our Dashboard.</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/projects\">Projects</a></td>\n<td>Manage your Projects and configure them to record runs.</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/runs\">Runs</a></td>\n<td>View your Recorded Runs.</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/organizations\">Organizations</a></td>\n<td>Manage your Organizations.</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Guides</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/configuration\">Configuration</a></td>\n<td>Configure global, network, directory, viewport and animation options</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/issuing-commands\">Issuing Commands</a></td>\n<td>Issue actions to be performed in your test</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/finding-elements\">Finding Elements</a></td>\n<td>Traverse the DOM, find elements, make assertions</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/making-assertions\">Making Assertions</a></td>\n<td>Set expectations for the behavior</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/network-requests-xhr\">Network Requests</a></td>\n<td>Handle AJAX/XHR Requests</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/continuous-integration\">Continuous Integration</a></td>\n<td>Integrate with CI Providers</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/environment-variables\">Environment Variables</a></td>\n<td>Set environment variables</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/stubs-spies-clocks\">Stubs, Spies and Clocks</a></td>\n<td>Learn about when and why to use stubs, spies, and control clock time</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/using-aliases\">Using Aliases</a></td>\n<td>Represent an object as alias</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/creating-fixtures\">Creating Fixtures</a></td>\n<td>Mock data in fixtures</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/screenshots-and-videos\">Screenshots and Videos</a></td>\n<td>Capture screenshots and videos of your test run</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/bundled-tools\">Bundled Tools</a></td>\n<td>What is Cypress built on</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/reporters\">Reporters</a></td>\n<td>Customize test results with reporters</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>References</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/cli\">CLI Tool</a></td>\n<td>Cypress CLI Tool for programmatically interacting with the Desktop Application</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/errors\">Error Messages</a></td>\n<td>Error messages</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/anti-patterns\">Anti-patterns</a></td>\n<td>Anti-patterns</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/known-issues\">Known Issues</a></td>\n<td>Known Issues</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/web-security\">Web Security</a></td>\n<td>Web Security</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/browser-management\">Browser Management</a></td>\n<td>Browser Management</td>\n</tr>\n<tr>\n<td><a href=\"https://on.cypress.io/guides/userland-extensions\">Userland Extensions</a></td>\n<td>Userland Extensions</td>\n</tr>\n</tbody>\n</table>\n"}],"Post":[],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}